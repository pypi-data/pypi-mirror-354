{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "jupyter-fs",
  "description": "Settings for the jupyter-fs extension.",
  "jupyter.lab.setting-icon": "jfs:drive",
  "jupyter.lab.setting-icon-label": "jupyter-fs",
  "type": "object",

  "jupyter.lab.shortcuts": [
    {
      "command": "treefinder:copy",
      "keys": ["Ctrl C"],
      "selector": ".jp-tree-finder-sidebar"
    },
    {
      "command": "treefinder:cut",
      "keys": ["Ctrl X"],
      "selector": ".jp-tree-finder-sidebar"
    },
    {
      "command": "treefinder:paste",
      "keys": ["Ctrl V"],
      "selector": ".jp-tree-finder-sidebar"
    },
    {
      "command": "treefinder:rename",
      "keys": ["F2"],
      "selector": ".jp-tree-finder-sidebar"
    },
    {
      "command": "treefinder:delete",
      "keys": ["Delete"],
      "selector": ".jp-tree-finder-sidebar.jfs-mod-notRenaming"
    }
  ],

  "definitions": {
    "resource": {
      "description": "Specification for an fs resource",
      "type": "object",
      "properties": {
        "name": {
          "description": "Display name of resource",
          "type": "string"
        },
        "url": {
          "description": "A url pointing to an fs resource, as per the PyFilesystem fsurl or fsspec url specification",
          "type": "string",
          "pattern": "^.+?:\/\/([^:]*:.*@.*|[^@]*)$"
        },
        "type": {
          "description": "The backend type to use for the resource (PyFS or fsspec)",
          "type": "string",
          "enum": ["pyfs", "fsspec"],
          "default": "pyfs"
        },
        "preferredDir": {
          "description": "Directory to be first opened (e.g., myDir/mySubdir)",
          "type": "string"
        },
        "auth": {
          "description": "Given any template {{VARS}} in the url, 'ask' (default) to open a dialog box asking for credentials, `env` to pick up credentials from the server's environment variables, or `none`.",
          "type": "string",
          "enum": ["ask", "env", "none"],
          "default": "ask"
        },
        "defaultWritable": {
          "description": "Fallback for determining if resource is writeable. Used only if the underlying PyFilesystem does not provide this information (eg S3)",
          "type": "boolean",
          "default": true
        },
        "kwargs": {
          "description": "Generic kwargs JSON to pass through to resource construction, for any arguments that cannot go in the resource url",
          "type": "string",
          "default": "{}"
        }
      }
    },
    "snippet": {
      "description": "Per entry snippets for how to use it, e.g. a snippet for how to open a file from a given resource",
      "type": "object",
      "properties": {
        "label": {
          "description": "The designator to show to users",
          "type": "string"
        },
        "caption": {
          "description": "An optional, longer description to show to users",
          "type": "string",
          "default": ""
        },
        "pattern": {
          "description": "A regular expression to match against the full URL of the entry, indicating if this snippet is valid for it",
          "type": "string",
          "default": ""
        },
        "template": {
          "description": "A template string to build up the snippet",
          "type": "string"
        },
        "type": {
          "description": "Backend type that the snippet works with",
          "type": "string",
          "default": ""
        }
      }
    }
  },

  "properties": {
    "resources": {
      "title": "Resources",
      "description": "The list of fs resource specifications",
      "items": { "$ref": "#/definitions/resource" },
      "type": "array",
      "default": []
    },
    "snippets": {
      "title": "Snippets",
      "description": "A list of usage snippets",
      "items": { "$ref": "#/definitions/snippet" },
      "type": "array",
      "default": [
        {
          "label": "Read CSV as pandas dataframe",
          "caption": "Read the contents of this CSV file as a pandas DataFrame",
          "pattern": "\\.csv$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.openbin\nfrom jupyterfs import fs\nimport pandas\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = pandas.read_csv(fs_wrapper.open(\"{{path}}\"))"
        },
        {
          "label": "Read CSV as polars dataframe",
          "caption": "Read the contents of this CSV file as a polars DataFrame",
          "pattern": "\\.csv$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.openbin\nfrom jupyterfs import fs\nimport polars\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = polars.read_csv(fs_wrapper.open(\"{{path}}\"))"
        },
        {
          "label": "Read CSV as pandas dataframe",
          "caption": "Read the contents of this CSV file as a pandas DataFrame",
          "pattern": "\\.csv$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\nfrom jupyterfs import fs\nimport pandas\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = pandas.read_csv(fs_wrapper.open(\"{{path}}\"))"
        },
        {
          "label": "Read CSV as polars dataframe",
          "caption": "Read the contents of this CSV file as a polars DataFrame",
          "pattern": "\\.csv$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\nfrom jupyterfs import fs\nimport polars\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = polars.read_csv(fs_wrapper.open(\"{{path}}\"))"
        },
        {
          "label": "Read contents",
          "caption": "Read the contents of this file with PyFilesystem",
          "pattern": "^(.*)(?!/)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.readbytes\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    contents = fs_wrapper.readbytes(\"{{path}}\")"
        },
        {
          "label": "Read contents",
          "caption": "Read the contents of this file with FSSpec",
          "pattern": "^(.*)(?!/)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.read_bytes\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    contents = fs_wrapper.read_bytes(\"{{path}}\")"
        },
        {
          "label": "Read contents (local)",
          "caption": "Read the contents of this local file with pathlib",
          "pattern": "^(?=(osfs|local|file)://)(.*/)?[^/]+$",
          "template": "import pathlib;\ncontents = pathlib.Path(\"{{path}}\").read_bytes()"
        },
        {
          "label": "Read text",
          "caption": "Read the contents of this file as text with PyFilesystem",
          "pattern": "^(.*)(?!/)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.readtext\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    contents = fs_wrapper.readtext(\"{{path}}\")"
        },
        {
          "label": "Read text",
          "caption": "Read the contents of this file as text with FSSpec",
          "pattern": "^(.*)(?!/)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.read_text\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    contents = fs_wrapper.read_text(\"{{path}}\")"
        },
        {
          "label": "List directory contents",
          "caption": "List the entries of this directory with PyFilesystem",
          "pattern": "^.*/$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.listdir\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    entries = fs_wrapper.listdir(\"{{path}}\")"
        },
        {
          "label": "List directory contents",
          "caption": "List the entries of this directory with FSSpec",
          "pattern": "^.*/$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.read_text\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    entries = fs_wrapper.listdir(\"{{path}}\")"
        },
        {
          "label": "Read Excel as pandas dataframe",
          "caption": "Read the contents of this Excel file as a pandas DataFrame",
          "pattern": "\\.(xls|xlsx|xlsm|xlsb)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.open\nfrom jupyterfs import fs\nimport pandas\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = pandas.read_excel(fs_wrapper.open(\"{{path}}\", mode=\"rb\"))"
        },
        {
          "label": "Read Excel as polars dataframe",
          "caption": "Read the contents of this Excel file as a polars DataFrame",
          "pattern": "\\.(xls|xlsx|xlsm|xlsb)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.open\nfrom jupyterfs import fs\nimport polars\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = polars.read_excel(fs_wrapper.open(\"{{path}}\", mode=\"rb\"))"
        },
        {
          "label": "Read Excel as pandas dataframe",
          "caption": "Read the contents of this Excel file as a pandas DataFrame",
          "pattern": "\\.(xls|xlsx|xlsm|xlsb)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\nfrom jupyterfs import fs\nimport pandas\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = pandas.read_excel(fs_wrapper.open(\"{{path}}\", mode=\"rb\"))"
        },
        {
          "label": "Read Excel as polars dataframe",
          "caption": "Read the contents of this Excel file as a polars DataFrame",
          "pattern": "\\.(xls|xlsx|xlsm|xlsb)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\nfrom jupyterfs import fs\nimport polars\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    df = polars.read_excel(fs_wrapper.open(\"{{path}}\", mode=\"rb\"))"
        },
        {
          "label": "Write dataframe as CSV",
          "caption": "Save a pandas/polars DF from the session to the given CSV file with PyFilesystem",
          "pattern": "\\.csv$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.writetext\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.writetext(\"{{path}}\", YOUR_DF_VARIABLE.to_csv())"
        },
        {
          "label": "Write dataframe as CSV",
          "caption": "Save a pandas/polars DF from the session to the given CSV file with FSSpec",
          "pattern": "\\.csv$",
          "type": "fsspec",
          "template": "# https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.write_text\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.write_text(\"{{path}}\", YOUR_DF_VARIABLE.to_csv())"
        },
        {
          "label": "Write contents",
          "caption": "Write the given contents (bytes) to the specified file with PyFilesystem",
          "pattern": "^(.*)(?!/)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.writebytes\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.writebytes(\"{{path}}\", YOUR_BYTES_CONTENT)"
        },
        {
          "label": "Write contents",
          "caption": "Write the given contents (bytes) to the specified file with FSSpec",
          "pattern": "^(.*)(?!/)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.write_bytes\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.write_bytes(\"{{path}}\", YOUR_BYTES_CONTENT)"
        },
        {
          "label": "Write contents (local)",
          "caption": "Write the contents to this local file with pathlib",
          "pattern": "^(?=(osfs|local|file)://)(.*/)?[^/]+$",
          "template": "import pathlib;\ncontents = pathlib.Path(\"{{path}}\").write_bytes(YOUR_BYTES_CONTENT)"
        },
        {
          "label": "Write text",
          "caption": "Write the given text to the specified file with PyFilesystem",
          "pattern": "^(.*)(?!/)$",
          "type": "pyfs",
          "template": "# uses https://docs.pyfilesystem.org/en/latest/reference/base.html#fs.base.FS.writetext\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.writetext(\"{{path}}\", YOUR_TEXT_CONTENT)"
        },
        {
          "label": "Write text",
          "caption": "Write the given text to the specified file with FSSpec",
          "pattern": "^(.*)(?!/)$",
          "type": "fsspec",
          "template": "# uses https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.write_text\nfrom jupyterfs import fs\nwith fs(\"{{url}}\", \"{{type}}\") as fs_wrapper:\n    fs_wrapper.write_text(\"{{path}}\", YOUR_TEXT_CONTENT)"
        },
        {
          "label": "Get FS Instance",
          "caption": "Create a PyFilesystem/FSSpec instance",
          "pattern": "^(.*)$",
          "type": "",
          "template": "from jupyterfs import fs\nfs_instance = fs(\"{{url}}\", \"{{type}}\").instance()"
        }
      ]
    },
    "options": {
      "title": "Options",
      "description": "Global options for jupyter-fs",
      "type": "object",
      "properties": {
        "cache": {
          "description": "If true, only recreate the actual resources when necessary (ie on initial load or changes to 'resources')",
          "type": "boolean",
          "default": true
        },
        "verbose": {
          "description": "If true, jupyter-fs will output helpful info messages to the console",
          "type": "boolean",
          "default": false
        },
        "writtenVersion": {
          "description": "The version of the schema these settings were written with (do not edit)",
          "type": "string"
        }
      },
      "default": {}
    },
    "display_columns": {
      "title": "Display Columns",
      "description": "The list of columns that will be displayed",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["size", "last_modified", "writable", "mimetype"]
      },
      "default": ["size"],
      "maxItems": 4,
      "uniqueItems": true
    }
  }
}
