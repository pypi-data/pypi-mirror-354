[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-amber"
dynamic = ["version"]  # read from aiida_amber/__init__.py
description = "AiiDA plugin that wraps amber molecular dynamics executables"
authors = [{name = "Jas Kalayan", email = "jas.kalayan@stfc.ac.uk"}]
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin", "amber", "aiida-amber"]
requires-python = ">=3.8"
dependencies = [
    "aiida-core>=2.4.0,<3",
    "voluptuous",
    "MDAnalysis>=2.7.0",
]

[project.urls]
Source = "https://github.com/PSDI-UK/aiida-amber"

[project.optional-dependencies]
testing = [
    "pgtest~=1.3",
    "wheel~=0.40",
    "coverage[toml]",
    "pytest~=7.3",
    "pytest-cov~=4.0",
    "pytest-sugar~=0.9"
]
pre-commit = [
    "pre-commit~=3.3",
    "pylint~=3.2.3"
]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinxcontrib-contentui",
    "sphinxcontrib-details-directive",
    "sphinx_copybutton",
    "furo",
    "markupsafe<2.1"
]

[project.scripts]
aiida_sander = "aiida_amber.cli.sander:cli"
aiida_tleap = "aiida_amber.cli.tleap:cli"
aiida_antechamber = "aiida_amber.cli.antechamber:cli"
aiida_pdb4amber = "aiida_amber.cli.pdb4amber:cli"
aiida_parmed = "aiida_amber.cli.parmed:cli"

[project.entry-points."aiida.data"]
"amber.sander" = "aiida_amber.data.sander:SanderParameters"
"amber.tleap" = "aiida_amber.data.tleap:TleapParameters"
"amber.tleap_input" = "aiida_amber.data.tleap_input:TleapInputData"
"amber.antechamber" = "aiida_amber.data.antechamber:AntechamberParameters"
"amber.pdb4amber" = "aiida_amber.data.pdb4amber:Pdb4amberParameters"
"amber.parmed" = "aiida_amber.data.parmed:ParmedParameters"
"amber.parmed_input" = "aiida_amber.data.parmed_input:ParmedInputData"

[project.entry-points."aiida.calculations"]
"amber.sander" = "aiida_amber.calculations.sander:SanderCalculation"
"amber.tleap" = "aiida_amber.calculations.tleap:TleapCalculation"
"amber.antechamber" = "aiida_amber.calculations.antechamber:AntechamberCalculation"
"amber.pdb4amber" = "aiida_amber.calculations.pdb4amber:Pdb4amberCalculation"
"amber.parmed" = "aiida_amber.calculations.parmed:ParmedCalculation"

[project.entry-points."aiida.parsers"]
"amber.sander" = "aiida_amber.parsers.sander:SanderParser"
"amber.tleap" = "aiida_amber.parsers.tleap:TleapParser"
"amber.antechamber" = "aiida_amber.parsers.antechamber:AntechamberParser"
"amber.pdb4amber" = "aiida_amber.parsers.pdb4amber:Pdb4amberParser"
"amber.parmed" = "aiida_amber.parsers.parmed:ParmedParser"

[tool.flit.module]
name = "aiida_amber"

[tool.pylint.format]
max-line-length = 125

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    # black compatibility
    #"C0330",
    #"C0326",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_amber"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
line_length = 120
force_sort_within_sections = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIIDA', 'FIRSTPARTY', 'LOCALFOLDER']
known_aiida = ['aiida']
extend_skip = [".pdb", ".mol2", ".frcmod"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38
[testenv]
usedevelop=True
[testenv:py{,38,39,310,311}]
description = Run the test suite against a python version
extras = testing
setenv =
    AIIDA_WARN_v3 = 1
commands = pytest {posargs}
[testenv:pre-commit]
description = Run the pre-commit checks
extras =
    pre-commit
    testing
commands = pre-commit run {posargs}
[testenv:docs]
description = Build the documentation
extras = docs
commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
"""
