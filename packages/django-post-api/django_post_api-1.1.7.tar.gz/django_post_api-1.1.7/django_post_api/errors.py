# 常用 status code
# 1. HTTP 状态码的基本分类
# HTTP 状态码分为五类，每类状态码的含义如下：
#
# 1xx（信息性状态码）：表示请求已接收，继续处理。
# 2xx（成功状态码）：表示请求已成功处理。
# 3xx（重定向状态码）：表示请求需要进一步操作才能完成。
# 4xx（客户端错误状态码）：表示请求包含语法错误或无法完成请求，问题在客户端。
# 5xx（服务器错误状态码）：表示服务器处理请求时发生错误，问题在服务器端。

# 2. 4xx 状态码的使用：客户端错误
# 当后端遇到请求的参数有误、请求的资源不存在、权限不足等问题时，应该返回 4xx 状态码，表示客户端请求有误，服务器无法处理这些请求。
#
# 常见的 4xx 状态码有：
#
# 400 Bad Request：表示请求的语法不正确，或者缺少必要的参数。例如，用户在表单提交时没有提供必需的字段，或者传递了无效的参数。
# 401 Unauthorized：表示客户端请求未经身份验证，通常是缺少或无效的认证信息。
# 403 Forbidden：表示客户端虽然身份验证成功，但没有权限访问请求的资源，常用于权限控制。
# 404 Not Found：表示请求的资源不存在，可能是 URL 错误，或者该资源被删除。
# 422 Unprocessable Entity：表示请求语法正确，但服务器无法处理该请求，通常用于语义上的错误。例如，用户上传的文件格式不正确。

# 3. 5xx 状态码的使用：服务器错误
# 当服务器遇到不可预知的异常时，应该返回 5xx 状态码，表示请求虽然正确，但由于服务器错误无法完成请求。
#
# 常见的 5xx 状态码有：
#
# 500 Internal Server Error：表示服务器发生了未预期的错误，通常是后端系统的 bug 或未处理的异常。该错误表示系统出现故障，无法继续执行请求。
# 502 Bad Gateway：表示服务器作为网关或代理时收到无效响应。例如，后端服务未能成功响应，可能是由于第三方服务不可用或通信错误。
# 503 Service Unavailable：表示服务器暂时无法处理请求，通常是由于服务器过载或正在进行维护。
# 504 Gateway Timeout：表示作为网关或代理的服务器在等待上游服务器响应时超时，通常是由于后端服务响应时间过长。


class MyError(Exception):
    def __init__(self, err_msg="", status_code=422):
        self.err_msg = err_msg
        self.status_code = status_code
        super().__init__(self.err_msg)

    def __str__(self):
        return f"Error {self.status_code}: {self.err_msg}"
