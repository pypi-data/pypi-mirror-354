#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kil0p3 - Advanced Python Application Protection Library
========================================================

–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –ò –¢–†–ò–ê–õ–¨–ù–´–ô –ü–ï–†–ò–û–î:

    import Kil0p3  # –ó–∞–ø—É—Å–∫–∞–µ—Ç 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç—Ä–∏–∞–ª!

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
- –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
- –ü—Ä–∏–≤—è–∑–∫—É –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (HWID)
- –ó–∞—â–∏—Ç—É –æ—Ç –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏

Copyright (c) 2025 Kil0p3 Security
"""

__version__ = "1.0.2"
__author__ = "Kil0p3 Security Team"
__license__ = "Proprietary"
__copyright__ = "Copyright (c) 2025 Kil0p3 Security"

import os
import sys
import threading
import time
from typing import Optional, Dict, Any

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("Kil0p3 requires Python 3.8 or higher")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_protection_active = False
_license_key: Optional[str] = None
_validation_result = None
_initialization_complete = False
_trial_active = False

def get_version() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    return __version__

def get_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"""
    global _protection_active, _validation_result, _license_key, _trial_active
    
    status = {
        'version': __version__,
        'protection_active': _protection_active,
        'license_valid': _validation_result.is_valid if _validation_result else False,
        'license_key': _license_key[-8:] + '...' if _license_key else None,
        'dev_mode': os.getenv('KIL0P3_DEV_MODE', '0') == '1',
        'initialized': _initialization_complete,
        'trial_active': _trial_active
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–∞–ª–µ
    try:
        from .core.trial import trial_manager
        trial_info = trial_manager.get_trial_info()
        status['trial'] = trial_info
    except:
        status['trial'] = {'error': 'Trial manager not available'}
    
    return status

def set_license(license_key: str) -> bool:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    
    Args:
        license_key: –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ KLP-XXXX-XXXX-XXXX-XXXX
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω
    """
    global _license_key
    try:
        from .core.license import license_manager
        
        if license_manager.validate_license_key(license_key):
            _license_key = license_key
            license_manager.save_license(license_key)
            return True
        else:
            return False
            
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error setting license: {e}")
        return False

def check_license() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        from .core.validator import system_validator
        
        result = system_validator.validate_full()
        
        global _validation_result
        _validation_result = result
        
        return result.is_valid
        
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error checking license: {e}")
        return False

def get_hwid() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å Hardware ID —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        from .core.hwid import hwid_generator
        return hwid_generator.generate()
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error getting HWID: {e}")
        return "ERROR"

def is_protected() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞"""
    return _protection_active

def is_trial_active() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        from .core.trial import trial_manager
        return not trial_manager.is_trial_expired()
    except:
        return False

def get_trial_time_remaining() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ç—Ä–∏–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    try:
        from .core.trial import trial_manager
        return trial_manager.get_remaining_time()
    except:
        return 0.0

def get_trial_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–∞–ª–µ"""
    try:
        from .core.trial import trial_manager
        return trial_manager.get_trial_info()
    except Exception as e:
        return {'error': str(e)}

def check_trial_access() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è –∏–ª–∏ —Ç—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–µ–Ω)
    """
    try:
        # –í DEV —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        if check_license():
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–∞–ª
        from .core.trial import trial_manager
        
        if trial_manager.check_continuous_usage():
            global _trial_active
            _trial_active = True
            return True
        else:
            _trial_active = False
            return False
            
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error checking trial access: {e}")
        return False

def show_trial_expired_message():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞"""
    try:
        from .ui.trial_expired_window import TrialExpiredWindow
        window = TrialExpiredWindow()
        window.show()
    except:
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üîí –¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!")
        print("üí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é")

def _initialize_protection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ - –í–°–ï–ì–î–ê –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
    global _protection_active, _initialization_complete, _trial_active
    
    try:
        # DEV —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print("üõ†Ô∏è Kil0p3 DEV MODE - Protection disabled for development")
            _protection_active = False
            _trial_active = True  # –í DEV —Ä–µ–∂–∏–º–µ —Ç—Ä–∏–∞–ª –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
            _initialization_complete = True
            return
        
        print(f"üîê Kil0p3 v{__version__} - Initializing protection with trial...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        if check_license():
            print("‚úÖ Valid license found - full access granted")
            _protection_active = True
            _trial_active = False
            _initialization_complete = True
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏–∞–ª
        from .core.trial import trial_manager
        
        if trial_manager.start_trial_session():
            remaining = trial_manager.get_remaining_time()
            print(f"üïê Trial period active - {remaining:.1f} seconds remaining")
            _trial_active = True
            _protection_active = True
            _initialization_complete = True
        else:
            print("üîí Trial period expired - access denied")
            _trial_active = False
            _protection_active = False
            _initialization_complete = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏
            show_trial_expired_message()
            
    except Exception as e:
        print(f"üí• Kil0p3: Protection initialization error: {e}")
        _protection_active = False
        _initialization_complete = True

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'get_version',
    'get_status', 
    'set_license',
    'check_license',
    'get_hwid',
    'is_protected',
    'is_trial_active',
    'get_trial_time_remaining',
    'get_trial_info',
    'check_trial_access',  # ‚Üê –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–ô
    '__version__',
    '__author__'
]

# ============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ó–ê–©–ò–¢–´ –ü–†–ò –ò–ú–ü–û–†–¢–ï
# –ó–∞—â–∏—Ç–∞ –∏ —Ç—Ä–∏–∞–ª –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ import Kil0p3
# ============================================================================

try:
    _initialize_protection()
except Exception as e:
    print(f"üí• Kil0p3: Fatal initialization error: {e}")
    if not os.getenv('KIL0P3_DEV_MODE'):
        sys.exit(1)

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
if os.getenv('KIL0P3_DEV_MODE') == '1':
    print(f"üõ†Ô∏è Kil0p3 v{__version__} loaded in DEV MODE")
else:
    status = "LICENSED" if check_license() else ("TRIAL" if _trial_active else "EXPIRED")
    print(f"üîê Kil0p3 v{__version__} - Status: {status}")