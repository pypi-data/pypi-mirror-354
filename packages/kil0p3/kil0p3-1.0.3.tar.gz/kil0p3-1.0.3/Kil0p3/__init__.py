# ============================================================================
# 1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Kil0p3/__init__.py —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –±–∞–Ω–Ω–µ—Ä–æ–º
# ============================================================================

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kil0p3 - Advanced Python Application Protection Library
========================================================

–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –ò –î–ï–ú–û-–ë–ê–ù–ù–ï–†:
    import Kil0p3  # –î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–º–æ-–±–∞–Ω–Ω–µ—Ä –≤ –ª—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–º–æ-–±–∞–Ω–Ω–µ—Ä —Å–≤–µ—Ä—Ö—É –æ–∫–Ω–∞
- 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å —Ç–∞–π–º–µ—Ä–æ–º
- –ó–∞—â–∏—Ç—É –æ—Ç –æ–±–º–∞–Ω–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –¥–µ–º–æ
"""

__version__ = "1.0.3"
__author__ = "Kil0p3 Security Team"
__license__ = "Proprietary"
__copyright__ = "Copyright (c) 2025 Kil0p3 Security"

import os
import sys
import threading
import time
import tkinter as tk
from typing import Optional, Dict, Any

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("Kil0p3 requires Python 3.8 or higher")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_protection_active = False
_license_key: Optional[str] = None
_validation_result = None
_initialization_complete = False
_trial_active = False
_demo_banner = None
_banner_thread = None

class DemoBanner:
    """–î–µ–º–æ-–±–∞–Ω–Ω–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω"""
    
    def __init__(self):
        self.banner_window = None
        self.time_label = None
        self.active = False
        self.violation_count = 0
        self.last_check_time = time.time()
        
    def create_banner(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞"""
        try:
            if self.banner_window:
                return
                
            # –°–æ–∑–¥–∞–µ–º toplevel –æ–∫–Ω–æ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞
            self.banner_window = tk.Toplevel()
            self.banner_window.title("Demo")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞ –±–∞–Ω–Ω–µ—Ä–∞
            screen_width = self.banner_window.winfo_screenwidth()
            banner_height = 35
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
            self.banner_window.geometry(f"{screen_width}x{banner_height}+0+0")
            
            # –°—Ç–∏–ª—å –æ–∫–Ω–∞
            self.banner_window.configure(bg='black')
            self.banner_window.overrideredirect(True)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É
            self.banner_window.attributes('-topmost', True)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
            self.banner_window.attributes('-alpha', 0.9)  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            
            # –ù–∞ Windows –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                self.banner_window.attributes('-toolwindow', True)
            except:
                pass
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
            main_frame = tk.Frame(self.banner_window, bg='black')
            main_frame.pack(fill=tk.BOTH, expand=True)
            
            # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–µ–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            left_frame = tk.Frame(main_frame, bg='black')
            left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10)
            
            demo_label = tk.Label(
                left_frame,
                text="üéÆ –î–ï–ú–û –í–ï–†–°–ò–Ø",
                bg='black',
                fg='yellow',
                font=('Arial', 12, 'bold')
            )
            demo_label.pack(side=tk.LEFT, pady=5)
            
            # –¶–µ–Ω—Ç—Ä - —Ç–∞–π–º–µ—Ä
            center_frame = tk.Frame(main_frame, bg='black')
            center_frame.pack(side=tk.LEFT, expand=True, fill=tk.BOTH)
            
            self.time_label = tk.Label(
                center_frame,
                text="–û—Å—Ç–∞–ª–æ—Å—å: 30.0 —Å–µ–∫",
                bg='black',
                fg='yellow',
                font=('Arial', 12, 'bold')
            )
            self.time_label.pack(expand=True)
            
            # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∫–Ω–æ–ø–∫–∏
            right_frame = tk.Frame(main_frame, bg='black')
            right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=10)
            
            license_btn = tk.Button(
                right_frame,
                text="üîë –ö—É–ø–∏—Ç—å",
                bg='#FFD700',
                fg='black',
                font=('Arial', 9, 'bold'),
                command=self.open_purchase,
                relief=tk.FLAT,
                padx=10
            )
            license_btn.pack(side=tk.RIGHT, pady=3, padx=5)
            
            activate_btn = tk.Button(
                right_frame,
                text="üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                bg='#32CD32',
                fg='black',
                font=('Arial', 9, 'bold'),
                command=self.activate_license,
                relief=tk.FLAT,
                padx=10
            )
            activate_btn.pack(side=tk.RIGHT, pady=3, padx=5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            self.active = True
            self.update_timer()
            
            print("üéÆ –î–µ–º–æ-–±–∞–Ω–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞: {e}")
    
    def update_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        try:
            if not self.active or not self.banner_window:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            remaining = get_trial_time_remaining()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞
            self.check_for_cheating()
            
            if remaining > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                if remaining < 10:
                    self.time_label.configure(
                        text=f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} —Å–µ–∫",
                        fg='red'
                    )
                else:
                    self.time_label.configure(
                        text=f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.1f} —Å–µ–∫",
                        fg='yellow'
                    )
                
                # –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.banner_window.after(100, self.update_timer)
            else:
                # –î–µ–º–æ –∏—Å—Ç–µ–∫–ª–æ
                self.time_label.configure(
                    text="‚ùå –î–ï–ú–û –ò–°–¢–ï–ö–õ–û",
                    fg='red'
                )
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                self.banner_window.after(2000, self.on_demo_expired)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
    
    def check_for_cheating(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            if current_time < self.last_check_time - 2:  # –î–æ–ø—É—Å–∫ 2 —Å–µ–∫—É–Ω–¥—ã
                self.violation_count += 1
                self.show_violation_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
            
            self.last_check_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            if not check_trial_access():
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...
                pass
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–º–∞–Ω–∞: {e}")
    
    def show_violation_warning(self, reason: str):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏"""
        try:
            print(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {reason}")
            print(f"üìä –ù–∞—Ä—É—à–µ–Ω–∏–π: {self.violation_count}/3")
            
            if self.violation_count >= 3:
                self.ban_user(reason)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –±–∞–Ω–Ω–µ—Ä–µ
                if self.time_label:
                    self.time_label.configure(
                        text=f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï {self.violation_count}/3",
                        fg='red'
                    )
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    self.banner_window.after(3000, lambda: self.time_label.configure(fg='yellow'))
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
    
    def ban_user(self, reason: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print(f"üö´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: {reason}")
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            from .runtime.block_state import block_state
            block_state.block_device(f"Cheating detected: {reason}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä
            if self.time_label:
                self.time_label.configure(
                    text="üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û",
                    fg='red'
                )
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            self.banner_window.after(3000, self.close_application)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            self.close_application()
    
    def open_purchase(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫—É–ø–∫–∏"""
        try:
            import webbrowser
            webbrowser.open("https://kil0p3.dev/purchase")
            print("üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫—É–ø–∫–∏")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    
    def activate_license(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            from .ui.auth_window import show_activation_window
            
            # –°–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ
            if self.banner_window:
                self.banner_window.withdraw()
            
            result = show_activation_window()
            
            if result.get('success'):
                print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                self.close_banner()
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
                if self.banner_window:
                    self.banner_window.deiconify()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
            if self.banner_window:
                self.banner_window.deiconify()
    
    def on_demo_expired(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–µ–º–æ"""
        try:
            print("‚è∞ –î–µ–º–æ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            self.show_expired_window()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.close_application()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {e}")
            self.close_application()
    
    def show_expired_window(self):
        """–ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–µ–º–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expired_window = tk.Toplevel()
            expired_window.title("–î–µ–º–æ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫")
            expired_window.geometry("500x300")
            expired_window.configure(bg='white')
            expired_window.attributes('-topmost', True)
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            main_frame = tk.Frame(expired_window, bg='white', padx=20, pady=20)
            main_frame.pack(fill=tk.BOTH, expand=True)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = tk.Label(
                main_frame,
                text="‚è∞ –î–µ–º–æ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!",
                font=('Arial', 18, 'bold'),
                fg='red',
                bg='white'
            )
            title_label.pack(pady=(0, 20))
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_text = (
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 30 —Å–µ–∫—É–Ω–¥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–µ–º–æ-–ø–µ—Ä–∏–æ–¥–∞.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é\n"
                "–∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á."
            )
            desc_label = tk.Label(
                main_frame,
                text=desc_text,
                font=('Arial', 12),
                bg='white',
                justify=tk.CENTER
            )
            desc_label.pack(pady=(0, 30))
            
            # –ö–Ω–æ–ø–∫–∏
            btn_frame = tk.Frame(main_frame, bg='white')
            btn_frame.pack()
            
            buy_btn = tk.Button(
                btn_frame,
                text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é",
                font=('Arial', 12, 'bold'),
                bg='#FFD700',
                fg='black',
                padx=20,
                pady=10,
                command=lambda: [self.open_purchase(), expired_window.destroy()]
            )
            buy_btn.pack(side=tk.LEFT, padx=10)
            
            activate_btn = tk.Button(
                btn_frame,
                text="üîë –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–ª—é—á",
                font=('Arial', 12, 'bold'),
                bg='#32CD32',
                fg='black',
                padx=20,
                pady=10,
                command=lambda: [expired_window.destroy(), self.activate_license()]
            )
            activate_btn.pack(side=tk.LEFT, padx=10)
            
            close_btn = tk.Button(
                btn_frame,
                text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                font=('Arial', 12),
                bg='#FF6B6B',
                fg='white',
                padx=20,
                pady=10,
                command=lambda: [expired_window.destroy(), self.close_application()]
            )
            close_btn.pack(side=tk.LEFT, padx=10)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            expired_window.update_idletasks()
            x = (expired_window.winfo_screenwidth() // 2) - (500 // 2)
            y = (expired_window.winfo_screenheight() // 2) - (300 // 2)
            expired_window.geometry(f"500x300+{x}+{y}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {e}")
    
    def close_banner(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–Ω–µ—Ä–∞"""
        try:
            self.active = False
            if self.banner_window:
                self.banner_window.destroy()
                self.banner_window = None
            print("üéÆ –î–µ–º–æ-–±–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–Ω–Ω–µ—Ä–∞: {e}")
    
    def close_application(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.close_banner()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ Tkinter –æ–∫–Ω–∞
            if tk._default_root:
                tk._default_root.quit()
                tk._default_root.destroy()
            
            print("üîí –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            sys.exit(0)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            sys.exit(1)

def create_demo_banner():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–±–∞–Ω–Ω–µ—Ä–∞"""
    global _demo_banner, _banner_thread
    
    try:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print("üõ†Ô∏è DEV MODE: –î–µ–º–æ-–±–∞–Ω–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        if check_license():
            print("üîê –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω")
            return
        
        def banner_thread():
            try:
                # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
                max_wait = 10  # 10 —Å–µ–∫—É–Ω–¥
                wait_count = 0
                
                while wait_count < max_wait:
                    try:
                        if tk._default_root and tk._default_root.winfo_exists():
                            break
                    except:
                        pass
                    time.sleep(1)
                    wait_count += 1
                
                # –°–æ–∑–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä
                _demo_banner = DemoBanner()
                _demo_banner.create_banner()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        _banner_thread = threading.Thread(target=banner_thread, daemon=True)
        _banner_thread.start()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ-–±–∞–Ω–Ω–µ—Ä–∞: {e}")

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...
def get_version() -> str:
    return __version__

def get_status() -> Dict[str, Any]:
    global _protection_active, _validation_result, _license_key, _trial_active
    
    status = {
        'version': __version__,
        'protection_active': _protection_active,
        'license_valid': _validation_result.is_valid if _validation_result else False,
        'license_key': _license_key[-8:] + '...' if _license_key else None,
        'dev_mode': os.getenv('KIL0P3_DEV_MODE', '0') == '1',
        'initialized': _initialization_complete,
        'trial_active': _trial_active,
        'demo_banner_active': _demo_banner.active if _demo_banner else False
    }
    
    try:
        from .core.trial import trial_manager
        trial_info = trial_manager.get_trial_info()
        status['trial'] = trial_info
    except:
        status['trial'] = {'error': 'Trial manager not available'}
    
    return status

def set_license(license_key: str) -> bool:
    global _license_key
    try:
        from .core.license import license_manager
        
        if license_manager.validate_license_key(license_key):
            _license_key = license_key
            license_manager.save_license(license_key)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –µ—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            if _demo_banner:
                _demo_banner.close_banner()
            
            return True
        else:
            return False
            
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error setting license: {e}")
        return False

def check_license() -> bool:
    try:
        from .core.validator import system_validator
        
        result = system_validator.validate_full()
        
        global _validation_result
        _validation_result = result
        
        return result.is_valid
        
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error checking license: {e}")
        return False

def get_hwid() -> str:
    try:
        from .core.hwid import hwid_generator
        return hwid_generator.generate()
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error getting HWID: {e}")
        return "ERROR"

def is_protected() -> bool:
    return _protection_active

def is_trial_active() -> bool:
    try:
        from .core.trial import trial_manager
        return not trial_manager.is_trial_expired()
    except:
        return False

def get_trial_time_remaining() -> float:
    try:
        from .core.trial import trial_manager
        return trial_manager.get_remaining_time()
    except:
        return 0.0

def get_trial_info() -> Dict[str, Any]:
    try:
        from .core.trial import trial_manager
        return trial_manager.get_trial_info()
    except Exception as e:
        return {'error': str(e)}

def check_trial_access() -> bool:
    try:
        # –í DEV —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        if check_license():
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–∞–ª
        from .core.trial import trial_manager
        
        if trial_manager.check_continuous_usage():
            global _trial_active
            _trial_active = True
            return True
        else:
            _trial_active = False
            return False
            
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error checking trial access: {e}")
        return False

def _initialize_protection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"""
    global _protection_active, _initialization_complete, _trial_active
    
    try:
        # DEV —Ä–µ–∂–∏–º
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print("üõ†Ô∏è Kil0p3 DEV MODE - Protection disabled for development")
            _protection_active = False
            _trial_active = True
            _initialization_complete = True
            return
        
        print(f"üîê Kil0p3 v{__version__} - Initializing protection with demo banner...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        if check_license():
            print("‚úÖ Valid license found - full access granted")
            _protection_active = True
            _trial_active = False
            _initialization_complete = True
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏–∞–ª —Å –±–∞–Ω–Ω–µ—Ä–æ–º
        from .core.trial import trial_manager
        
        if trial_manager.start_trial_session():
            remaining = trial_manager.get_remaining_time()
            print(f"üéÆ Demo period active - {remaining:.1f} seconds remaining")
            _trial_active = True
            _protection_active = True
            _initialization_complete = True
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–±–∞–Ω–Ω–µ—Ä (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è Tkinter)
            def delayed_banner():
                time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                create_demo_banner()
            
            threading.Thread(target=delayed_banner, daemon=True).start()
            
        else:
            print("üîí Demo period expired - access denied")
            _trial_active = False
            _protection_active = False
            _initialization_complete = True
            
    except Exception as e:
        print(f"üí• Kil0p3: Protection initialization error: {e}")
        _protection_active = False
        _initialization_complete = True

# –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'get_version', 'get_status', 'set_license', 'check_license', 'get_hwid',
    'is_protected', 'is_trial_active', 'get_trial_time_remaining', 
    'get_trial_info', 'check_trial_access', 'create_demo_banner',
    '__version__', '__author__'
]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
try:
    _initialize_protection()
except Exception as e:
    print(f"üí• Kil0p3: Fatal initialization error: {e}")
    if not os.getenv('KIL0P3_DEV_MODE'):
        sys.exit(1)

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
if os.getenv('KIL0P3_DEV_MODE') == '1':
    print(f"üõ†Ô∏è Kil0p3 v{__version__} loaded in DEV MODE")
else:
    status = "LICENSED" if check_license() else ("DEMO" if _trial_active else "EXPIRED")
    print(f"üîê Kil0p3 v{__version__} - Status: {status}")

# ============================================================================
# 2. –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –±–∞–Ω–Ω–µ—Ä–æ–º
# ============================================================================

# test_app.py
import os
import sys
import tkinter as tk
from tkinter import ttk

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∏—Ç–µ DEV —Ä–µ–∂–∏–º
# os.environ['KIL0P3_DEV_MODE'] = '1'

# –ò–º–ø–æ—Ä—Ç –∑–∞—â–∏—Ç—ã (–±–∞–Ω–Ω–µ—Ä —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
import Kil0p3

class TestApplication:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("üéÆ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        self.window.geometry("600x400")
        
        # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ DEV —Ä–µ–∂–∏–º)
        if not Kil0p3.get_status()['dev_mode']:
            self.window.geometry("600x400+100+50")  # –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="üéÆ –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            font=('Arial', 18, 'bold')
        )
        title_label.pack(pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—Ç–µ
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—Ç–µ", padding="15")
        info_frame.pack(fill=tk.X, pady=(0, 20))
        
        status = Kil0p3.get_status()
        
        info_text = f"""
üì¶ –í–µ—Ä—Å–∏—è: Kil0p3 v{status['version']}
üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞: {status['protection_active']}
üîë –õ–∏—Ü–µ–Ω–∑–∏—è: {'–í–∞–ª–∏–¥–Ω–∞' if status['license_valid'] else '–î–µ–º–æ —Ä–µ–∂–∏–º'}
üõ†Ô∏è DEV —Ä–µ–∂–∏–º: {status['dev_mode']}
üéÆ –î–µ–º–æ-–±–∞–Ω–Ω–µ—Ä: {'–ê–∫—Ç–∏–≤–µ–Ω' if status.get('demo_banner_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
        """
        
        info_label = ttk.Label(info_frame, text=info_text.strip(), justify=tk.LEFT)
        info_label.pack()
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=20)
        
        ttk.Button(
            btn_frame,
            text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å",
            command=self.show_status
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame,
            text="üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é",
            command=self.activate_license
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            btn_frame,
            text="‚è∞ –í—Ä–µ–º—è –¥–µ–º–æ",
            command=self.show_demo_time
        ).pack(side=tk.LEFT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_frame = ttk.LabelFrame(main_frame, text="–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", padding="15")
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        content_text = tk.Text(content_frame, height=8, wrap=tk.WORD)
        content_text.pack(fill=tk.BOTH, expand=True)
        
        demo_info = """
üéÆ –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!

‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.

üîù –°–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è —á–µ—Ä–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å –∂–µ–ª—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Ç–∞–π–º–µ—Ä–æ–º.

üîë –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å" –≤ –±–∞–Ω–Ω–µ—Ä–µ
   ‚Ä¢ –ò–ª–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–ª—é—á

‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞ (–æ—Ç–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç.–¥.) –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º, 
   –∞ –∑–∞—Ç–µ–º –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ—Å–ª–µ 3 –Ω–∞—Ä—É—à–µ–Ω–∏–π.

üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é KIL0P3_DEV_MODE=1
        """
        
        content_text.insert(tk.END, demo_info.strip())
        content_text.configure(state='disabled')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self.check_access()
    
    def check_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"""
        try:
            if Kil0p3.check_trial_access():
                # –î–æ—Å—Ç—É–ø –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                self.window.after(1000, self.check_access)
            else:
                # –î–æ—Å—Ç—É–ø –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                print("üîí –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                self.window.quit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        status = Kil0p3.get_status()
        trial_info = Kil0p3.get_trial_info()
        
        message = f"""
üîê Kil0p3 Protection Status:

üì¶ Version: {status['version']}
üõ°Ô∏è Protection: {status['protection_active']}
üîë License: {'Valid' if status['license_valid'] else 'Demo'}
üõ†Ô∏è DEV Mode: {status['dev_mode']}

‚è∞ Demo Status:
‚Ä¢ Active: {trial_info.get('is_trial', False)}
‚Ä¢ Remaining: {trial_info.get('remaining_seconds', 0):.1f} sec
‚Ä¢ Progress: {trial_info.get('remaining_percent', 0):.1f}%
‚Ä¢ Usage Count: {trial_info.get('usage_count', 0)}

üíª Hardware ID: {Kil0p3.get_hwid()[:16]}...
        """
        
        tk.messagebox.showinfo("Protection Status", message.strip())
    
    def activate_license(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            from Kil0p3.ui.auth_window import show_activation_window
            result = show_activation_window()
            
            if result.get('success'):
                tk.messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.setup_ui()
            else:
                tk.messagebox.showwarning("–û—Ç–º–µ–Ω–∞", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        except Exception as e:
            tk.messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    def show_demo_time(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–º–æ"""
        remaining = Kil0p3.get_trial_time_remaining()
        trial_info = Kil0p3.get_trial_info()
        
        if remaining > 0:
            message = f"""
‚è∞ –î–µ–º–æ –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω

üïê –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining:.1f} —Å–µ–∫—É–Ω–¥
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {100 - trial_info.get('remaining_percent', 0):.1f}%
üéØ –ó–∞–ø—É—Å–∫–æ–≤: {trial_info.get('usage_count', 0)}

üí° –ß–µ—Ä–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.
            """
        else:
            message = """
‚ùå –î–µ–º–æ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!

üîí –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
   ‚Ä¢ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
   ‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á

üõí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –≤ –±–∞–Ω–Ω–µ—Ä–µ
            """
        
        tk.messagebox.showinfo("–î–µ–º–æ –≤—Ä–µ–º—è", message.strip())
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {Kil0p3.get_status()}")
        
        try:
            self.window.mainloop()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    app = TestApplication()
    app.run()

# ============================================================================
# 3. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π trial.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
# ============================================================================

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kil0p3/core/trial.py
====================

–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–±–º–∞–Ω–∞
"""

import os
import time
import json
import tempfile
import hashlib
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, Optional

try:
    from ..config.constants import APP_DATA_DIR
    from ..tools.logger import get_logger
    logger = get_logger(__name__)
except ImportError:
    APP_DATA_DIR = Path.home() / ".kil0p3"
    import logging
    logger = logging.getLogger(__name__)

class TrialManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–±–º–∞–Ω–∞"""
    
    def __init__(self, trial_duration_seconds: int = 30):
        self.trial_duration = trial_duration_seconds
        self.trial_file = self._get_safe_trial_path()
        self._trial_data = None
        self._start_time = None
        self._last_check_time = time.time()
        self._violation_count = 0
        self._ensure_file_exists()
    
    def _get_safe_trial_path(self) -> Optional[Path]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–∞ —Ç—Ä–∏–∞–ª–∞"""
        paths_to_try = [
            # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            APP_DATA_DIR / "trial.dat",
            # 2. –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
            Path(tempfile.gettempdir()) / ".kil0p3" / "trial.dat",
            # 3. –ü–∞–ø–∫–∞ —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            Path(__file__).parent.parent.parent / ".kil0p3" / "trial.dat",
            # 4. –°–∏—Å—Ç–µ–º–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
            Path(tempfile.gettempdir()) / f"kil0p3_trial_{os.getpid()}.dat"
        ]
        
        for trial_path in paths_to_try:
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                trial_path.parent.mkdir(parents=True, exist_ok=True)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                test_file = trial_path.parent / f"test_{os.getpid()}.tmp"
                with open(test_file, 'w') as f:
                    f.write("test")
                os.remove(test_file)
                
                logger.debug(f"Using trial file: {trial_path}")
                return trial_path
                
            except (PermissionError, OSError) as e:
                logger.debug(f"Cannot use {trial_path}: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å
        logger.warning("Using in-memory trial storage (not persistent)")
        return None
    
    def _ensure_file_exists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç—Ä–∏–∞–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            if self.trial_file is None or not self.trial_file.exists():
                self._create_new_trial()
        except Exception as e:
            logger.error(f"Failed to create trial file: {e}")
            self.trial_file = None
            self._create_new_trial()
    
    def _create_new_trial(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            self._start_time = time.time()
            
            trial_data = {
                'started_at': datetime.now().isoformat(),
                'duration_seconds': self.trial_duration,
                'start_timestamp': self._start_time,
                'usage_count': 0,
                'hwid': self._get_current_hwid(),
                'created': datetime.now().isoformat(),
                'violation_count': 0,
                'checksum': ''
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            trial_data['checksum'] = self._calculate_checksum(trial_data)
            
            self._save_trial_data(trial_data)
            self._trial_data = trial_data
            
            logger.info(f"New trial period created: {self.trial_duration} seconds")
            
        except Exception as e:
            logger.error(f"Failed to create new trial: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
            self._trial_data = {
                'start_timestamp': time.time(),
                'duration_seconds': self.trial_duration,
                'hwid': self._get_current_hwid(),
                'violation_count': 0
            }
    
    def _calculate_checksum(self, data: Dict[str, Any]) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–∞–ª–∞"""
        try:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            clean_data = {k: v for k, v in data.items() if k != 'checksum'}
            data_str = json.dumps(clean_data, sort_keys=True)
            return hashlib.sha256(data_str.encode()).hexdigest()[:16]
        except:
            return "unknown"
    
    def _verify_checksum(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã"""
        try:
            stored_checksum = data.get('checksum', '')
            calculated_checksum = self._calculate_checksum(data)
            return stored_checksum == calculated_checksum
        except:
            return False
    
    def _load_trial_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–∞–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            if self.trial_file is None or not self.trial_file.exists():
                if self._trial_data is None:
                    self._create_new_trial()
                return self._trial_data
            
            with open(self.trial_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
            if not self._verify_checksum(data):
                logger.warning("Trial data checksum mismatch - possible tampering")
                self._add_violation("Data integrity violation")
                self._create_new_trial()
                return self._trial_data
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HWID
            current_hwid = self._get_current_hwid()
            if data.get('hwid') != current_hwid:
                logger.warning("HWID mismatch - creating new trial")
                self._create_new_trial()
                return self._trial_data
            
            return data
                
        except Exception as e:
            logger.error(f"Failed to load trial data: {e}")
            if self._trial_data is None:
                self._create_new_trial()
            return self._trial_data
    
    def _save_trial_data(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–∞–ª–∞"""
        try:
            if self.trial_file is None:
                self._trial_data = data
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
            data['checksum'] = self._calculate_checksum(data)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.trial_file.parent.mkdir(parents=True, exist_ok=True)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
            temp_file = self.trial_file.with_suffix('.tmp')
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            temp_file.replace(self.trial_file)
            
            # –ù–∞ Windows –¥–µ–ª–∞–µ–º —Ñ–∞–π–ª —Å–∫—Ä—ã—Ç—ã–º
            if os.name == 'nt':
                try:
                    os.system(f'attrib +h +s "{self.trial_file}"')
                except:
                    pass
                    
        except Exception as e:
            logger.debug(f"Failed to save trial data: {e}")
            self._trial_data = data
    
    def _get_current_hwid(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ HWID"""
        try:
            from ..core.hwid import hwid_generator
            return hwid_generator.generate()
        except:
            return "unknown_hwid"
    
    def _add_violation(self, reason: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"""
        try:
            self._violation_count += 1
            logger.warning(f"Security violation #{self._violation_count}: {reason}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∏–∞–ª–∞
            trial_data = self._load_trial_data()
            trial_data['violation_count'] = trial_data.get('violation_count', 0) + 1
            trial_data['last_violation'] = reason
            trial_data['last_violation_time'] = datetime.now().isoformat()
            self._save_trial_data(trial_data)
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ 3 –Ω–∞—Ä—É—à–µ–Ω–∏–π
            if self._violation_count >= 3:
                self._block_user(f"Multiple violations: {reason}")
                
        except Exception as e:
            logger.error(f"Error adding violation: {e}")
    
    def _block_user(self, reason: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.critical(f"Blocking user: {reason}")
            
            from ..runtime.block_state import block_state
            block_state.block_device(f"Trial violations: {reason}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç—Ä–∏–∞–ª–∞
            if self.trial_file and self.trial_file.exists():
                try:
                    os.remove(self.trial_file)
                except:
                    pass
            
        except Exception as e:
            logger.error(f"Error blocking user: {e}")
    
    def start_trial_session(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∏–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            trial_data = self._load_trial_data()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            if not hasattr(self, '_start_time') or self._start_time is None:
                self._start_time = trial_data.get('start_timestamp', time.time())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞
            self._check_for_cheating()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç—Ä–∏–∞–ª
            if self.is_trial_expired():
                logger.warning("Trial period expired")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            trial_data['usage_count'] = trial_data.get('usage_count', 0) + 1
            trial_data['last_access'] = datetime.now().isoformat()
            
            self._save_trial_data(trial_data)
            self._trial_data = trial_data
            
            remaining = self.get_remaining_time()
            logger.info(f"Trial session started - {remaining:.1f}s remaining")
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to start trial session: {e}")
            return False
    
    def _check_for_cheating(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            if current_time < self._last_check_time - 2:  # –î–æ–ø—É—Å–∫ 2 —Å–µ–∫—É–Ω–¥—ã
                self._add_violation("System time rollback detected")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è
            expected_min_time = self._last_check_time + 0.05  # –ú–∏–Ω–∏–º—É–º 50–º—Å –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            if current_time < expected_min_time and self._last_check_time > 0:
                self._add_violation("Suspicious time acceleration")
            
            self._last_check_time = current_time
            
        except Exception as e:
            logger.debug(f"Error in cheating check: {e}")
    
    def is_trial_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            if not hasattr(self, '_start_time') or self._start_time is None:
                trial_data = self._load_trial_data()
                self._start_time = trial_data.get('start_timestamp', time.time())
            
            elapsed = time.time() - self._start_time
            expired = elapsed >= self.trial_duration
            
            if expired:
                logger.info(f"Trial expired: {elapsed:.1f}s >= {self.trial_duration}s")
            
            return expired
            
        except Exception as e:
            logger.error(f"Error checking trial expiration: {e}")
            return True
    
    def get_remaining_time(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∏–∞–ª–∞"""
        try:
            if not hasattr(self, '_start_time') or self._start_time is None:
                trial_data = self._load_trial_data()
                self._start_time = trial_data.get('start_timestamp', time.time())
            
            elapsed = time.time() - self._start_time
            remaining = max(0, self.trial_duration - elapsed)
            
            return remaining
            
        except Exception as e:
            logger.error(f"Error getting remaining time: {e}")
            return 0.0
    
    def check_continuous_usage(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–±–º–∞–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±–º–∞–Ω
            self._check_for_cheating()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            try:
                from ..runtime.block_state import block_state
                if block_state.is_blocked():
                    return False
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            if self.is_trial_expired():
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Error in continuous usage check: {e}")
            return False
    
    def get_trial_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∏–∞–ª–µ"""
        try:
            trial_data = self._load_trial_data()
            
            if not hasattr(self, '_start_time') or self._start_time is None:
                self._start_time = trial_data.get('start_timestamp', time.time())
            
            elapsed = time.time() - self._start_time
            remaining = max(0, self.trial_duration - elapsed)
            
            return {
                'is_trial': True,
                'started_at': trial_data.get('started_at'),
                'duration_seconds': self.trial_duration,
                'elapsed_seconds': elapsed,
                'remaining_seconds': remaining,
                'remaining_percent': (remaining / self.trial_duration) * 100 if self.trial_duration > 0 else 0,
                'is_expired': remaining <= 0,
                'usage_count': trial_data.get('usage_count', 0),
                'violation_count': trial_data.get('violation_count', 0),
                'hwid': trial_data.get('hwid', 'unknown')[:8] + '...',
                'file_location': str(self.trial_file) if self.trial_file else 'memory',
                'last_violation': trial_data.get('last_violation'),
                'protection_active': self._violation_count < 3
            }
            
        except Exception as e:
            logger.error(f"Error getting trial info: {e}")
            return {
                'is_trial': True,
                'is_expired': True,
                'error': str(e)
            }
    
    def reset_trial(self):
        """–°–±—Ä–æ—Å —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è DEV —Ä–µ–∂–∏–º–∞)"""
        try:
            if os.getenv('KIL0P3_DEV_MODE') == '1':
                if self.trial_file and self.trial_file.exists():
                    os.remove(self.trial_file)
                
                self._start_time = None
                self._trial_data = None
                self._violation_count = 0
                logger.info("Trial period reset (DEV MODE)")
                self._create_new_trial()
            else:
                logger.warning("Trial reset denied - not in DEV mode")
                
        except Exception as e:
            logger.error(f"Failed to reset trial: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–∏–∞–ª–∞
trial_manager = TrialManager()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def start_trial() -> bool:
    return trial_manager.start_trial_session()

def is_trial_active() -> bool:
    return not trial_manager.is_trial_expired()

def get_trial_time_remaining() -> float:
    return trial_manager.get_remaining_time()

def get_trial_status() -> Dict[str, Any]:
    return trial_manager.get_trial_info()

def reset_trial_period():
    trial_manager.reset_trial()