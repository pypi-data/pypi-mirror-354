#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kil0p3 - Advanced Python Application Protection Library
========================================================

–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê –ê–ö–¢–ò–í–ò–†–£–ï–¢–°–Ø –ü–†–ò –ò–ú–ü–û–†–¢–ï:

    import kil0p3

–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
- –ü—Ä–∏–≤—è–∑–∫—É –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (HWID)
- –ó–∞—â–∏—Ç—É –æ—Ç –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ IP –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
- –ê–Ω—Ç–∏-—Ç–∞–º–ø–µ—Ä –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –≤–∑–ª–æ–º–µ

Copyright (c) 2025 Kil0p3 Security
"""

__version__ = "1.0.0"
__author__ = "Kil0p3 Security Team"
__license__ = "Proprietary"
__copyright__ = "Copyright (c) 2025 Kil0p3 Security"

import os
import sys
import threading
import time
from typing import Optional, Dict, Any

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info < (3, 8):
    raise RuntimeError("Kil0p3 requires Python 3.8 or higher")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
_protection_active = False
_license_key: Optional[str] = None
_validation_result = None
_initialization_complete = False

def get_version() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    return __version__

def get_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"""
    global _protection_active, _validation_result, _license_key
    return {
        'version': __version__,
        'protection_active': _protection_active,
        'license_valid': _validation_result.is_valid if _validation_result else False,
        'license_key': _license_key[-8:] + '...' if _license_key else None,
        'dev_mode': os.getenv('KIL0P3_DEV_MODE', '0') == '1',
        'initialized': _initialization_complete
    }

def set_license(license_key: str) -> bool:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    
    Args:
        license_key: –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ KLP-XXXX-XXXX-XXXX-XXXX
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω
    """
    global _license_key
    try:
        from .core.license import license_manager
        
        if license_manager.validate_license_key(license_key):
            _license_key = license_key
            license_manager.save_license(license_key)
            return True
        else:
            return False
            
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error setting license: {e}")
        return False

def check_license() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        from .core.validator import system_validator
        
        result = system_validator.validate_full()
        
        global _validation_result
        _validation_result = result
        
        return result.is_valid
        
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error checking license: {e}")
        return False

def get_hwid() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å Hardware ID —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        from .core.hwid import hwid_generator
        return hwid_generator.generate()
    except Exception as e:
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print(f"Error getting HWID: {e}")
        return "ERROR"

def is_protected() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∑–∞—â–∏—Ç–∞"""
    return _protection_active

def _initialize_protection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ - –í–°–ï–ì–î–ê –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
    global _protection_active, _initialization_complete
    
    try:
        # DEV —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if os.getenv('KIL0P3_DEV_MODE') == '1':
            print("üõ†Ô∏è Kil0p3 DEV MODE - Protection disabled for development")
            _protection_active = False
            _initialization_complete = True
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
        if any(test_indicator in sys.modules for test_indicator in ['pytest', 'unittest', 'nose']):
            print("üß™ Kil0p3: Test environment detected - Protection disabled")
            _protection_active = False
            _initialization_complete = True
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ä–µ–¥—É
        if hasattr(sys, 'ps1') or sys.flags.interactive:
            print("üêç Kil0p3: Interactive environment detected - Protection in monitoring mode")
            _protection_active = True  # –í–∫–ª—é—á–∞–µ–º –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
            _initialization_complete = True
            return
        
        # –û–°–ù–û–í–ù–û–ô –†–ï–ñ–ò–ú - –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞
        print(f"üîê Kil0p3 v{__version__} - Initializing protection...")
        
        def protection_init():
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            global _protection_active, _initialization_complete
            
            try:
                from .run import auto_protect
                result = auto_protect()
                _protection_active = result
                _initialization_complete = True
                
                if result:
                    print("‚úÖ Kil0p3: Protection activated successfully")
                else:
                    print("‚ùå Kil0p3: Protection activation failed")
                    if not os.getenv('KIL0P3_DEV_MODE'):
                        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        print("üö´ Application terminating due to protection failure")
                        sys.exit(1)
                        
            except Exception as e:
                print(f"üí• Kil0p3: Protection initialization error: {e}")
                _protection_active = False
                _initialization_complete = True
                
                if not os.getenv('KIL0P3_DEV_MODE'):
                    sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        thread = threading.Thread(target=protection_init, daemon=False, name="Kil0p3Init")
        thread.start()
        
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
        thread.join(timeout=15.0)
        
        if thread.is_alive():
            print("‚è∞ Kil0p3: Protection initialization timeout")
            if not os.getenv('KIL0P3_DEV_MODE'):
                sys.exit(1)
        
    except KeyboardInterrupt:
        print("‚ö†Ô∏è Kil0p3: Protection interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"üí• Kil0p3: Unexpected protection error: {e}")
        if not os.getenv('KIL0P3_DEV_MODE'):
            sys.exit(1)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'get_version',
    'get_status', 
    'set_license',
    'check_license',
    'get_hwid',
    'is_protected',
    '__version__',
    '__author__'
]

# ============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ó–ê–©–ò–¢–´ –ü–†–ò –ò–ú–ü–û–†–¢–ï
# –≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å - –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ import kil0p3
# ============================================================================

try:
    _initialize_protection()
except Exception as e:
    print(f"üí• Kil0p3: Fatal initialization error: {e}")
    if not os.getenv('KIL0P3_DEV_MODE'):
        sys.exit(1)

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
if os.getenv('KIL0P3_DEV_MODE') == '1':
    print(f"üõ†Ô∏è Kil0p3 v{__version__} loaded in DEV MODE")
else:
    protection_status = "ACTIVE" if _protection_active else "INACTIVE"
    print(f"üîê Kil0p3 v{__version__} - Protection {protection_status}")