from typing import Any, Awaitable, Callable, List, Optional, Protocol, Type, TypeVar

from fastapi import FastAPI
from injector import ScopeDecorator

T = TypeVar("T")


class AppManagerProtocol(Protocol):
    """
    Protocol for AppManager contract.
    """

    def get_server(self) -> "ServerProtocol": ...
    def get_instance(self, cls: Type[T]) -> T: ...
    def get_injector(self) -> Any: ...
    def register_singleton(self, cls: Type[T], instance: T) -> None: ...
    def register_provider(
        self, cls: Type[T], provider: Any, scope: ScopeDecorator = ...
    ) -> None: ...


class ServerProtocol(Protocol):
    """
    Protocol for Server contract.
    """

    def on_startup(
        self, func: Optional[Callable[[FastAPI, Any], Awaitable[None]]] = None
    ) -> "ServerProtocol": ...
    def on_shutdown(
        self, func: Optional[Callable[[FastAPI, Any], Awaitable[None]]] = None
    ) -> "ServerProtocol": ...
    def enable_tenant_middleware(self) -> "ServerProtocol": ...
    def add_middleware(
        self, middleware_class: Any, **kwargs: Any
    ) -> "ServerProtocol": ...
    def setup_api(self, controllers: List[Any], **kwargs) -> FastAPI: ...
    def run(self, app: FastAPI): ...
