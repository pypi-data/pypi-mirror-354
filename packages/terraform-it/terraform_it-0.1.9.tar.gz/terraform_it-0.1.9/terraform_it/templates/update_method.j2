
func (r *{{resource_name}}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	{% if update_operation %}
	var data *{{resource_name}}ResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	merge(ctx, req, resp, &data)

	{% for var in update_vars %}
    {{ var }}
    {% endfor %}
	req := *data.ToShared{{update_requestBody}}Request()
	request := {{resource_name | lower }}.{{update_operation}}Request{
		{% for param in update_parameters -%}
		{{param | capitalize }}: {{param}},
		{% endfor %}
		{{update_requestBody}}: req,
	}
	res, err := r.client.{{update_method_name}}(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	{% for property in update_res_properties -%}
	data.{{ property[0] }} = res.Get{{property[0] | capitalize }}()
	{% endfor %}
	data.{{resource_name}} = res.Get{{resource_name | capitalize }}.GetId()

    // Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
	{% else %}
	// Update function is not implemented or supported
	{% endif %}
}

