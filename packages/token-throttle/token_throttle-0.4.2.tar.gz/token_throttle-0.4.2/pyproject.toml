[project]
name = "token-throttle"
version = "0.4.2"
description = "Simple Multi-Resource Rate Limiting That Saves Unused Tokens. Rate limit API requests across different resources and workers without wasting your quota. Reserve tokens upfront, get refunds for what you don't use, and avoid over-limiting."
readme = "README.md"

##############################
### DEPENDENCIES
##############################

requires-python = ">=3.12"
dependencies = ["frozendict>=2.4.6", "pydantic>=2.11.3"]

[project.optional-dependencies]
redis = ["redis>=5.2.1"]
tiktoken = ["tiktoken>=0.4.0"]

[dependency-groups]
dev = [
    "bump-my-version>=1.1.2",
    "loguru>=0.7.3",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-watch>=4.2.0",
    "ruff>=0.11.7",
]

##############################
### BUMP VERSION
##############################

[tool.bumpversion]
current_version = "0.4.2"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} â†’ {new_version}"
allow_dirty = true
commit = true
message = "chore(release): bump version from {current_version} to {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "token_throttle/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

##############################
### BUILD
##############################

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["token_throttle"]

##############################
### PYTEST AND COVERAGE
##############################

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--import-mode=importlib"

[tool.coverage.run]
source = ["token_throttle"]
branch = true

[tool.coverage.report]
omit = ["notebooks/*", "*/deprecated/*", "tests/*"]
exclude_also = [
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
# fail_under = 80 # Optional: Fail if coverage drops below a threshold


##############################
### RUFF
##############################

[tool.ruff]
lint.ignore = [
    # --- Complexity & Control Flow ---
    "C901",    # Function is too complex
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "TRY300",  # Consider moving this statement to an `else` block

    # --- Naming & Formatting ---
    "N999",   # Ignore invalid module name
    "E501",   # Line too long
    "COM812", # Trailing comma missing

    # --- Return/Assignment & Warnings ---
    "RET504", # Unnecessary assignment before `return` statement
    "B028",   # No explicit `stacklevel` keyword argument found
    "PGH003", # Use explicit error codes with "# type: ignore"

    # --- Exception Handling ---
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "TRY003", # Avoid specifying long messages outside the exception class

    # --- Docstrings & Type Annotations ---
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in `__init__`
    "D200",   # One-line docstring should fit within a single line
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D212",   # Multi-line docstring summary should start at the first line
    "D400",   # First line should end with a period
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `root`
    "D401",   # First line of docstring should be in imperative mood
    # "D413",  # Missing blank line after last section
    "D415",   # First line should end with a period, question mark, or exclamation point
    "ANN001", # Missing type annotation for function argument `item`
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method `__init__`
    "ANN205", # Missing return type annotation for static method
]

# Code Style/Structure
lint.select = ["ALL"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["ALL"]
lint.unfixable = []

# Allow unused variables when underssrc-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

exclude = [
    "deprecated",
    "notebooks",

    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Python 3.12 is the minimum supported version.
target-version = "py312"

[tool.ruff.lint.per-file-ignores]
"devtools/**/*.py" = [
    "T201",    # print() statement found
    "C901",    # Function is too complex
    "PLR0912", # Too many branches
]
"tests/**/*.py" = [
    "PT006",   # Wrong type passed to first argument of `pytest.mark.parametrize`; expected `tuple`
    "ANN201",  # Missing return type annotation for public function
    "S101",    # Use of `assert` detected
    "PLR2004", # Magic value used in comparison
    "T201",    # print() statement found
    "G004",    # Checks for uses of f-strings to format logging messages.
]
