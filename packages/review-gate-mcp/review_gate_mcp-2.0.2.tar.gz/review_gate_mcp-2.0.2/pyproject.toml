[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "review-gate-mcp"
version = "2.0.2"
description = "Modern MCP server for Review Gate - AI-powered code review and interaction tool"
authors = [
    {name = "Lakshman Turlapati", email = "lakshman@example.com"},
    {name = "Abhishek Bhakat", email = "abhishek.bhakat@hotmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["mcp", "ai", "code-review", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "mcp>=1.9.2",
]

[project.optional-dependencies]
speech = [
    "faster-whisper>=1.0.0",
]
image = [
    "Pillow>=10.0.0",
]
all = [
    "review-gate-mcp[speech,image]",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/abhishekbhakat/Review-Gate"
Repository = "https://github.com/abhishekbhakat/Review-Gate"
Issues = "https://github.com/abhishekbhakat/Review-Gate/issues"
Documentation = "https://github.com/abhishekbhakat/Review-Gate/blob/main/README.md"

[project.scripts]
review-gate-mcp = "review_gate_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/review_gate_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
    "TID",  # flake8-tidy-imports
]

ignore = [
    "E501",   # line too long, handled by ruff format
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # use of assert
    "T201",   # print statements (allowed for logging)
    "S603",   # subprocess call without shell=True
    "S607",   # starting a process with a partial executable path
    "S108",   # hardcoded temp directory (needed for MCP client integration)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "T201"]  # Allow assert and print in tests

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["review_gate_mcp"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"



[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"
