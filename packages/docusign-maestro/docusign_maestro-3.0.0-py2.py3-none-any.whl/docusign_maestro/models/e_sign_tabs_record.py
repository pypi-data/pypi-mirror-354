# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class ESignTabsRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_signed_tabs': 'list[ESignTabs]',
        'email_address_tabs': 'list[ESignTabs]',
        'first_name_tabs': 'list[ESignTabs]',
        'full_name_tabs': 'list[ESignTabs]',
        'last_name_tabs': 'list[ESignTabs]',
        'sign_here_tabs': 'list[ESignTabs]',
        'text_tabs': 'list[ESignTabs]'
    }

    attribute_map = {
        'date_signed_tabs': 'dateSignedTabs',
        'email_address_tabs': 'emailAddressTabs',
        'first_name_tabs': 'firstNameTabs',
        'full_name_tabs': 'fullNameTabs',
        'last_name_tabs': 'lastNameTabs',
        'sign_here_tabs': 'signHereTabs',
        'text_tabs': 'textTabs'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ESignTabsRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_signed_tabs = None
        self._email_address_tabs = None
        self._first_name_tabs = None
        self._full_name_tabs = None
        self._last_name_tabs = None
        self._sign_here_tabs = None
        self._text_tabs = None
        self.discriminator = None

        setattr(self, "_{}".format('date_signed_tabs'), kwargs.get('date_signed_tabs', None))
        setattr(self, "_{}".format('email_address_tabs'), kwargs.get('email_address_tabs', None))
        setattr(self, "_{}".format('first_name_tabs'), kwargs.get('first_name_tabs', None))
        setattr(self, "_{}".format('full_name_tabs'), kwargs.get('full_name_tabs', None))
        setattr(self, "_{}".format('last_name_tabs'), kwargs.get('last_name_tabs', None))
        setattr(self, "_{}".format('sign_here_tabs'), kwargs.get('sign_here_tabs', None))
        setattr(self, "_{}".format('text_tabs'), kwargs.get('text_tabs', None))

    @property
    def date_signed_tabs(self):
        """Gets the date_signed_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The date_signed_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._date_signed_tabs

    @date_signed_tabs.setter
    def date_signed_tabs(self, date_signed_tabs):
        """Sets the date_signed_tabs of this ESignTabsRecord.


        :param date_signed_tabs: The date_signed_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._date_signed_tabs = date_signed_tabs

    @property
    def email_address_tabs(self):
        """Gets the email_address_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The email_address_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._email_address_tabs

    @email_address_tabs.setter
    def email_address_tabs(self, email_address_tabs):
        """Sets the email_address_tabs of this ESignTabsRecord.


        :param email_address_tabs: The email_address_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._email_address_tabs = email_address_tabs

    @property
    def first_name_tabs(self):
        """Gets the first_name_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The first_name_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._first_name_tabs

    @first_name_tabs.setter
    def first_name_tabs(self, first_name_tabs):
        """Sets the first_name_tabs of this ESignTabsRecord.


        :param first_name_tabs: The first_name_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._first_name_tabs = first_name_tabs

    @property
    def full_name_tabs(self):
        """Gets the full_name_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The full_name_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._full_name_tabs

    @full_name_tabs.setter
    def full_name_tabs(self, full_name_tabs):
        """Sets the full_name_tabs of this ESignTabsRecord.


        :param full_name_tabs: The full_name_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._full_name_tabs = full_name_tabs

    @property
    def last_name_tabs(self):
        """Gets the last_name_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The last_name_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._last_name_tabs

    @last_name_tabs.setter
    def last_name_tabs(self, last_name_tabs):
        """Sets the last_name_tabs of this ESignTabsRecord.


        :param last_name_tabs: The last_name_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._last_name_tabs = last_name_tabs

    @property
    def sign_here_tabs(self):
        """Gets the sign_here_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The sign_here_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._sign_here_tabs

    @sign_here_tabs.setter
    def sign_here_tabs(self, sign_here_tabs):
        """Sets the sign_here_tabs of this ESignTabsRecord.


        :param sign_here_tabs: The sign_here_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._sign_here_tabs = sign_here_tabs

    @property
    def text_tabs(self):
        """Gets the text_tabs of this ESignTabsRecord.  # noqa: E501


        :return: The text_tabs of this ESignTabsRecord.  # noqa: E501
        :rtype: list[ESignTabs]
        """
        return self._text_tabs

    @text_tabs.setter
    def text_tabs(self, text_tabs):
        """Sets the text_tabs of this ESignTabsRecord.


        :param text_tabs: The text_tabs of this ESignTabsRecord.  # noqa: E501
        :type: list[ESignTabs]
        """

        self._text_tabs = text_tabs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESignTabsRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESignTabsRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ESignTabsRecord):
            return True

        return self.to_dict() != other.to_dict()
