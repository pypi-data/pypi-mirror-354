# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class TriggerWorkflowViaPostResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_id': 'str',
        'workflow_instance_url': 'str'
    }

    attribute_map = {
        'instance_id': 'instanceId',
        'workflow_instance_url': 'workflowInstanceUrl'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """TriggerWorkflowViaPostResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instance_id = None
        self._workflow_instance_url = None
        self.discriminator = None

        setattr(self, "_{}".format('instance_id'), kwargs.get('instance_id', None))
        setattr(self, "_{}".format('workflow_instance_url'), kwargs.get('workflow_instance_url', None))

    @property
    def instance_id(self):
        """Gets the instance_id of this TriggerWorkflowViaPostResponse.  # noqa: E501


        :return: The instance_id of this TriggerWorkflowViaPostResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this TriggerWorkflowViaPostResponse.


        :param instance_id: The instance_id of this TriggerWorkflowViaPostResponse.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def workflow_instance_url(self):
        """Gets the workflow_instance_url of this TriggerWorkflowViaPostResponse.  # noqa: E501

        Instance specific url that can be used to be redirected to a workflow instance  # noqa: E501

        :return: The workflow_instance_url of this TriggerWorkflowViaPostResponse.  # noqa: E501
        :rtype: str
        """
        return self._workflow_instance_url

    @workflow_instance_url.setter
    def workflow_instance_url(self, workflow_instance_url):
        """Sets the workflow_instance_url of this TriggerWorkflowViaPostResponse.

        Instance specific url that can be used to be redirected to a workflow instance  # noqa: E501

        :param workflow_instance_url: The workflow_instance_url of this TriggerWorkflowViaPostResponse.  # noqa: E501
        :type: str
        """

        self._workflow_instance_url = workflow_instance_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TriggerWorkflowViaPostResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerWorkflowViaPostResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TriggerWorkflowViaPostResponse):
            return True

        return self.to_dict() != other.to_dict()
