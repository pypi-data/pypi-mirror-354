# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class DSIdvStepInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'background_color_branding': 'object',
        'expected_full_name': 'object',
        'retry_limit': 'object',
        'text_color_branding': 'object'
    }

    attribute_map = {
        'background_color_branding': 'backgroundColorBranding',
        'expected_full_name': 'expectedFullName',
        'retry_limit': 'retryLimit',
        'text_color_branding': 'textColorBranding'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DSIdvStepInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._background_color_branding = None
        self._expected_full_name = None
        self._retry_limit = None
        self._text_color_branding = None
        self.discriminator = None

        setattr(self, "_{}".format('background_color_branding'), kwargs.get('background_color_branding', None))
        setattr(self, "_{}".format('expected_full_name'), kwargs.get('expected_full_name', None))
        setattr(self, "_{}".format('retry_limit'), kwargs.get('retry_limit', None))
        setattr(self, "_{}".format('text_color_branding'), kwargs.get('text_color_branding', None))

    @property
    def background_color_branding(self):
        """Gets the background_color_branding of this DSIdvStepInput.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The background_color_branding of this DSIdvStepInput.  # noqa: E501
        :rtype: object
        """
        return self._background_color_branding

    @background_color_branding.setter
    def background_color_branding(self, background_color_branding):
        """Sets the background_color_branding of this DSIdvStepInput.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param background_color_branding: The background_color_branding of this DSIdvStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and background_color_branding is None:
            raise ValueError("Invalid value for `background_color_branding`, must not be `None`")  # noqa: E501

        self._background_color_branding = background_color_branding

    @property
    def expected_full_name(self):
        """Gets the expected_full_name of this DSIdvStepInput.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The expected_full_name of this DSIdvStepInput.  # noqa: E501
        :rtype: object
        """
        return self._expected_full_name

    @expected_full_name.setter
    def expected_full_name(self, expected_full_name):
        """Sets the expected_full_name of this DSIdvStepInput.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param expected_full_name: The expected_full_name of this DSIdvStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and expected_full_name is None:
            raise ValueError("Invalid value for `expected_full_name`, must not be `None`")  # noqa: E501

        self._expected_full_name = expected_full_name

    @property
    def retry_limit(self):
        """Gets the retry_limit of this DSIdvStepInput.  # noqa: E501

        This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The retry_limit of this DSIdvStepInput.  # noqa: E501
        :rtype: object
        """
        return self._retry_limit

    @retry_limit.setter
    def retry_limit(self, retry_limit):
        """Sets the retry_limit of this DSIdvStepInput.

        This object should be any of the following object models or types: [number, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param retry_limit: The retry_limit of this DSIdvStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and retry_limit is None:
            raise ValueError("Invalid value for `retry_limit`, must not be `None`")  # noqa: E501

        self._retry_limit = retry_limit

    @property
    def text_color_branding(self):
        """Gets the text_color_branding of this DSIdvStepInput.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The text_color_branding of this DSIdvStepInput.  # noqa: E501
        :rtype: object
        """
        return self._text_color_branding

    @text_color_branding.setter
    def text_color_branding(self, text_color_branding):
        """Sets the text_color_branding of this DSIdvStepInput.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param text_color_branding: The text_color_branding of this DSIdvStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and text_color_branding is None:
            raise ValueError("Invalid value for `text_color_branding`, must not be `None`")  # noqa: E501

        self._text_color_branding = text_color_branding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSIdvStepInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSIdvStepInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSIdvStepInput):
            return True

        return self.to_dict() != other.to_dict()
