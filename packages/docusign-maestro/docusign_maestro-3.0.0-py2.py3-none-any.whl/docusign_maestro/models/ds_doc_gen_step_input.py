# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class DSDocGenStepInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_json': 'RecordStringOrVariableOrTransformation',
        'output_file_name': 'object',
        'output_file_name_is_unique': 'bool',
        'output_format': 'DSWorkflowDocGenDocOutputFormat',
        'template_id': 'object'
    }

    attribute_map = {
        'data_json': 'dataJson',
        'output_file_name': 'outputFileName',
        'output_file_name_is_unique': 'outputFileNameIsUnique',
        'output_format': 'outputFormat',
        'template_id': 'templateId'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DSDocGenStepInput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_json = None
        self._output_file_name = None
        self._output_file_name_is_unique = None
        self._output_format = None
        self._template_id = None
        self.discriminator = None

        setattr(self, "_{}".format('data_json'), kwargs.get('data_json', None))
        setattr(self, "_{}".format('output_file_name'), kwargs.get('output_file_name', None))
        setattr(self, "_{}".format('output_file_name_is_unique'), kwargs.get('output_file_name_is_unique', None))
        setattr(self, "_{}".format('output_format'), kwargs.get('output_format', None))
        setattr(self, "_{}".format('template_id'), kwargs.get('template_id', None))

    @property
    def data_json(self):
        """Gets the data_json of this DSDocGenStepInput.  # noqa: E501


        :return: The data_json of this DSDocGenStepInput.  # noqa: E501
        :rtype: RecordStringOrVariableOrTransformation
        """
        return self._data_json

    @data_json.setter
    def data_json(self, data_json):
        """Sets the data_json of this DSDocGenStepInput.


        :param data_json: The data_json of this DSDocGenStepInput.  # noqa: E501
        :type: RecordStringOrVariableOrTransformation
        """
        if self._configuration.client_side_validation and data_json is None:
            raise ValueError("Invalid value for `data_json`, must not be `None`")  # noqa: E501

        self._data_json = data_json

    @property
    def output_file_name(self):
        """Gets the output_file_name of this DSDocGenStepInput.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The output_file_name of this DSDocGenStepInput.  # noqa: E501
        :rtype: object
        """
        return self._output_file_name

    @output_file_name.setter
    def output_file_name(self, output_file_name):
        """Sets the output_file_name of this DSDocGenStepInput.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param output_file_name: The output_file_name of this DSDocGenStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and output_file_name is None:
            raise ValueError("Invalid value for `output_file_name`, must not be `None`")  # noqa: E501

        self._output_file_name = output_file_name

    @property
    def output_file_name_is_unique(self):
        """Gets the output_file_name_is_unique of this DSDocGenStepInput.  # noqa: E501


        :return: The output_file_name_is_unique of this DSDocGenStepInput.  # noqa: E501
        :rtype: bool
        """
        return self._output_file_name_is_unique

    @output_file_name_is_unique.setter
    def output_file_name_is_unique(self, output_file_name_is_unique):
        """Sets the output_file_name_is_unique of this DSDocGenStepInput.


        :param output_file_name_is_unique: The output_file_name_is_unique of this DSDocGenStepInput.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and output_file_name_is_unique is None:
            raise ValueError("Invalid value for `output_file_name_is_unique`, must not be `None`")  # noqa: E501

        self._output_file_name_is_unique = output_file_name_is_unique

    @property
    def output_format(self):
        """Gets the output_format of this DSDocGenStepInput.  # noqa: E501


        :return: The output_format of this DSDocGenStepInput.  # noqa: E501
        :rtype: DSWorkflowDocGenDocOutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this DSDocGenStepInput.


        :param output_format: The output_format of this DSDocGenStepInput.  # noqa: E501
        :type: DSWorkflowDocGenDocOutputFormat
        """
        if self._configuration.client_side_validation and output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")  # noqa: E501

        self._output_format = output_format

    @property
    def template_id(self):
        """Gets the template_id of this DSDocGenStepInput.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The template_id of this DSDocGenStepInput.  # noqa: E501
        :rtype: object
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this DSDocGenStepInput.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param template_id: The template_id of this DSDocGenStepInput.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSDocGenStepInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSDocGenStepInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSDocGenStepInput):
            return True

        return self.to_dict() != other.to_dict()
