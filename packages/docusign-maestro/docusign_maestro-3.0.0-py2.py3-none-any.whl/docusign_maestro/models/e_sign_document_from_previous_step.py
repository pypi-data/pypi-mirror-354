# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class ESignDocumentFromPreviousStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_from_previous_step': 'object',
        'file_extension': 'DSWorkflowDocGenDocOutputFormat',
        'name': 'object',
        'type': 'ESignDocumentTypesFromPreviousStep'
    }

    attribute_map = {
        'document_from_previous_step': 'documentFromPreviousStep',
        'file_extension': 'fileExtension',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ESignDocumentFromPreviousStep - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._document_from_previous_step = None
        self._file_extension = None
        self._name = None
        self._type = None
        self.discriminator = None

        setattr(self, "_{}".format('document_from_previous_step'), kwargs.get('document_from_previous_step', None))
        setattr(self, "_{}".format('file_extension'), kwargs.get('file_extension', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('type'), kwargs.get('type', None))

    @property
    def document_from_previous_step(self):
        """Gets the document_from_previous_step of this ESignDocumentFromPreviousStep.  # noqa: E501

        Reference of #/definitions/DSWorkflowVariable. DS Workflow Variables  # noqa: E501

        :return: The document_from_previous_step of this ESignDocumentFromPreviousStep.  # noqa: E501
        :rtype: object
        """
        return self._document_from_previous_step

    @document_from_previous_step.setter
    def document_from_previous_step(self, document_from_previous_step):
        """Sets the document_from_previous_step of this ESignDocumentFromPreviousStep.

        Reference of #/definitions/DSWorkflowVariable. DS Workflow Variables  # noqa: E501

        :param document_from_previous_step: The document_from_previous_step of this ESignDocumentFromPreviousStep.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and document_from_previous_step is None:
            raise ValueError("Invalid value for `document_from_previous_step`, must not be `None`")  # noqa: E501

        self._document_from_previous_step = document_from_previous_step

    @property
    def file_extension(self):
        """Gets the file_extension of this ESignDocumentFromPreviousStep.  # noqa: E501


        :return: The file_extension of this ESignDocumentFromPreviousStep.  # noqa: E501
        :rtype: DSWorkflowDocGenDocOutputFormat
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this ESignDocumentFromPreviousStep.


        :param file_extension: The file_extension of this ESignDocumentFromPreviousStep.  # noqa: E501
        :type: DSWorkflowDocGenDocOutputFormat
        """
        if self._configuration.client_side_validation and file_extension is None:
            raise ValueError("Invalid value for `file_extension`, must not be `None`")  # noqa: E501

        self._file_extension = file_extension

    @property
    def name(self):
        """Gets the name of this ESignDocumentFromPreviousStep.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The name of this ESignDocumentFromPreviousStep.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ESignDocumentFromPreviousStep.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param name: The name of this ESignDocumentFromPreviousStep.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ESignDocumentFromPreviousStep.  # noqa: E501


        :return: The type of this ESignDocumentFromPreviousStep.  # noqa: E501
        :rtype: ESignDocumentTypesFromPreviousStep
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ESignDocumentFromPreviousStep.


        :param type: The type of this ESignDocumentFromPreviousStep.  # noqa: E501
        :type: ESignDocumentTypesFromPreviousStep
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESignDocumentFromPreviousStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESignDocumentFromPreviousStep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ESignDocumentFromPreviousStep):
            return True

        return self.to_dict() != other.to_dict()
