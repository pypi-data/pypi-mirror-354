# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class WorkflowStepHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'dac_id': 'str',
        'ds_step_id': 'str',
        'end_date': 'datetime',
        'error': 'WorkflowStepError',
        'output_module_properties': 'object',
        'start_date': 'datetime',
        'step_id': 'str',
        'step_name': 'str',
        'step_state': 'WorkflowStepHistoryState',
        'user_id': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'dac_id': 'dacId',
        'ds_step_id': 'dsStepId',
        'end_date': 'endDate',
        'error': 'error',
        'output_module_properties': 'outputModuleProperties',
        'start_date': 'startDate',
        'step_id': 'stepId',
        'step_name': 'stepName',
        'step_state': 'stepState',
        'user_id': 'userId'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """WorkflowStepHistory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._dac_id = None
        self._ds_step_id = None
        self._end_date = None
        self._error = None
        self._output_module_properties = None
        self._start_date = None
        self._step_id = None
        self._step_name = None
        self._step_state = None
        self._user_id = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('dac_id'), kwargs.get('dac_id', None))
        setattr(self, "_{}".format('ds_step_id'), kwargs.get('ds_step_id', None))
        setattr(self, "_{}".format('end_date'), kwargs.get('end_date', None))
        setattr(self, "_{}".format('error'), kwargs.get('error', None))
        setattr(self, "_{}".format('output_module_properties'), kwargs.get('output_module_properties', None))
        setattr(self, "_{}".format('start_date'), kwargs.get('start_date', None))
        setattr(self, "_{}".format('step_id'), kwargs.get('step_id', None))
        setattr(self, "_{}".format('step_name'), kwargs.get('step_name', None))
        setattr(self, "_{}".format('step_state'), kwargs.get('step_state', None))
        setattr(self, "_{}".format('user_id'), kwargs.get('user_id', None))

    @property
    def account_id(self):
        """Gets the account_id of this WorkflowStepHistory.  # noqa: E501


        :return: The account_id of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this WorkflowStepHistory.


        :param account_id: The account_id of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def dac_id(self):
        """Gets the dac_id of this WorkflowStepHistory.  # noqa: E501


        :return: The dac_id of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._dac_id

    @dac_id.setter
    def dac_id(self, dac_id):
        """Sets the dac_id of this WorkflowStepHistory.


        :param dac_id: The dac_id of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dac_id is None:
            raise ValueError("Invalid value for `dac_id`, must not be `None`")  # noqa: E501

        self._dac_id = dac_id

    @property
    def ds_step_id(self):
        """Gets the ds_step_id of this WorkflowStepHistory.  # noqa: E501


        :return: The ds_step_id of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._ds_step_id

    @ds_step_id.setter
    def ds_step_id(self, ds_step_id):
        """Sets the ds_step_id of this WorkflowStepHistory.


        :param ds_step_id: The ds_step_id of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """

        self._ds_step_id = ds_step_id

    @property
    def end_date(self):
        """Gets the end_date of this WorkflowStepHistory.  # noqa: E501

        Track the End time of the Workflow Step  # noqa: E501

        :return: The end_date of this WorkflowStepHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this WorkflowStepHistory.

        Track the End time of the Workflow Step  # noqa: E501

        :param end_date: The end_date of this WorkflowStepHistory.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def error(self):
        """Gets the error of this WorkflowStepHistory.  # noqa: E501


        :return: The error of this WorkflowStepHistory.  # noqa: E501
        :rtype: WorkflowStepError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this WorkflowStepHistory.


        :param error: The error of this WorkflowStepHistory.  # noqa: E501
        :type: WorkflowStepError
        """

        self._error = error

    @property
    def output_module_properties(self):
        """Gets the output_module_properties of this WorkflowStepHistory.  # noqa: E501


        :return: The output_module_properties of this WorkflowStepHistory.  # noqa: E501
        :rtype: object
        """
        return self._output_module_properties

    @output_module_properties.setter
    def output_module_properties(self, output_module_properties):
        """Sets the output_module_properties of this WorkflowStepHistory.


        :param output_module_properties: The output_module_properties of this WorkflowStepHistory.  # noqa: E501
        :type: object
        """

        self._output_module_properties = output_module_properties

    @property
    def start_date(self):
        """Gets the start_date of this WorkflowStepHistory.  # noqa: E501

        Track the Start time of the Workflow Step  # noqa: E501

        :return: The start_date of this WorkflowStepHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this WorkflowStepHistory.

        Track the Start time of the Workflow Step  # noqa: E501

        :param start_date: The start_date of this WorkflowStepHistory.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def step_id(self):
        """Gets the step_id of this WorkflowStepHistory.  # noqa: E501

        The Step Id of the workflow step in the workflow instance  # noqa: E501

        :return: The step_id of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this WorkflowStepHistory.

        The Step Id of the workflow step in the workflow instance  # noqa: E501

        :param step_id: The step_id of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """

        self._step_id = step_id

    @property
    def step_name(self):
        """Gets the step_name of this WorkflowStepHistory.  # noqa: E501

        Name of the workflow step (DS Scope)  # noqa: E501

        :return: The step_name of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this WorkflowStepHistory.

        Name of the workflow step (DS Scope)  # noqa: E501

        :param step_name: The step_name of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and step_name is None:
            raise ValueError("Invalid value for `step_name`, must not be `None`")  # noqa: E501

        self._step_name = step_name

    @property
    def step_state(self):
        """Gets the step_state of this WorkflowStepHistory.  # noqa: E501


        :return: The step_state of this WorkflowStepHistory.  # noqa: E501
        :rtype: WorkflowStepHistoryState
        """
        return self._step_state

    @step_state.setter
    def step_state(self, step_state):
        """Sets the step_state of this WorkflowStepHistory.


        :param step_state: The step_state of this WorkflowStepHistory.  # noqa: E501
        :type: WorkflowStepHistoryState
        """
        if self._configuration.client_side_validation and step_state is None:
            raise ValueError("Invalid value for `step_state`, must not be `None`")  # noqa: E501

        self._step_state = step_state

    @property
    def user_id(self):
        """Gets the user_id of this WorkflowStepHistory.  # noqa: E501


        :return: The user_id of this WorkflowStepHistory.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WorkflowStepHistory.


        :param user_id: The user_id of this WorkflowStepHistory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowStepHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStepHistory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowStepHistory):
            return True

        return self.to_dict() != other.to_dict()
