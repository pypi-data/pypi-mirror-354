# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class TriggerPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_name': 'str',
        'metadata': 'object',
        'participants': 'object',
        'payload': 'object'
    }

    attribute_map = {
        'instance_name': 'instanceName',
        'metadata': 'metadata',
        'participants': 'participants',
        'payload': 'payload'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """TriggerPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._instance_name = None
        self._metadata = None
        self._participants = None
        self._payload = None
        self.discriminator = None

        setattr(self, "_{}".format('instance_name'), kwargs.get('instance_name', None))
        setattr(self, "_{}".format('metadata'), kwargs.get('metadata', None))
        setattr(self, "_{}".format('participants'), kwargs.get('participants', None))
        setattr(self, "_{}".format('payload'), kwargs.get('payload', None))

    @property
    def instance_name(self):
        """Gets the instance_name of this TriggerPayload.  # noqa: E501


        :return: The instance_name of this TriggerPayload.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this TriggerPayload.


        :param instance_name: The instance_name of this TriggerPayload.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def metadata(self):
        """Gets the metadata of this TriggerPayload.  # noqa: E501


        :return: The metadata of this TriggerPayload.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TriggerPayload.


        :param metadata: The metadata of this TriggerPayload.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def participants(self):
        """Gets the participants of this TriggerPayload.  # noqa: E501


        :return: The participants of this TriggerPayload.  # noqa: E501
        :rtype: object
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this TriggerPayload.


        :param participants: The participants of this TriggerPayload.  # noqa: E501
        :type: object
        """

        self._participants = participants

    @property
    def payload(self):
        """Gets the payload of this TriggerPayload.  # noqa: E501


        :return: The payload of this TriggerPayload.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this TriggerPayload.


        :param payload: The payload of this TriggerPayload.  # noqa: E501
        :type: object
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TriggerPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TriggerPayload):
            return True

        return self.to_dict() != other.to_dict()
