# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class DSWorkflowComparisonExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comparison_operator': 'DSWorkflowComparisonOperatorTypes',
        'left_operand': 'object',
        'right_operand': 'object',
        'type': 'DSWorkflowExpressionTypesComparisonExpression'
    }

    attribute_map = {
        'comparison_operator': 'comparisonOperator',
        'left_operand': 'leftOperand',
        'right_operand': 'rightOperand',
        'type': 'type'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """DSWorkflowComparisonExpression - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comparison_operator = None
        self._left_operand = None
        self._right_operand = None
        self._type = None
        self.discriminator = None

        setattr(self, "_{}".format('comparison_operator'), kwargs.get('comparison_operator', None))
        setattr(self, "_{}".format('left_operand'), kwargs.get('left_operand', None))
        setattr(self, "_{}".format('right_operand'), kwargs.get('right_operand', None))
        setattr(self, "_{}".format('type'), kwargs.get('type', None))

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this DSWorkflowComparisonExpression.  # noqa: E501


        :return: The comparison_operator of this DSWorkflowComparisonExpression.  # noqa: E501
        :rtype: DSWorkflowComparisonOperatorTypes
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this DSWorkflowComparisonExpression.


        :param comparison_operator: The comparison_operator of this DSWorkflowComparisonExpression.  # noqa: E501
        :type: DSWorkflowComparisonOperatorTypes
        """
        if self._configuration.client_side_validation and comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")  # noqa: E501

        self._comparison_operator = comparison_operator

    @property
    def left_operand(self):
        """Gets the left_operand of this DSWorkflowComparisonExpression.  # noqa: E501

        This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]  # noqa: E501

        :return: The left_operand of this DSWorkflowComparisonExpression.  # noqa: E501
        :rtype: object
        """
        return self._left_operand

    @left_operand.setter
    def left_operand(self, left_operand):
        """Sets the left_operand of this DSWorkflowComparisonExpression.

        This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]  # noqa: E501

        :param left_operand: The left_operand of this DSWorkflowComparisonExpression.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and left_operand is None:
            raise ValueError("Invalid value for `left_operand`, must not be `None`")  # noqa: E501

        self._left_operand = left_operand

    @property
    def right_operand(self):
        """Gets the right_operand of this DSWorkflowComparisonExpression.  # noqa: E501

        This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]  # noqa: E501

        :return: The right_operand of this DSWorkflowComparisonExpression.  # noqa: E501
        :rtype: object
        """
        return self._right_operand

    @right_operand.setter
    def right_operand(self, right_operand):
        """Sets the right_operand of this DSWorkflowComparisonExpression.

        This model should be any of the following object models or types: [number, boolean, #/definitions/StringOrVariableOrTransformation]  # noqa: E501

        :param right_operand: The right_operand of this DSWorkflowComparisonExpression.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and right_operand is None:
            raise ValueError("Invalid value for `right_operand`, must not be `None`")  # noqa: E501

        self._right_operand = right_operand

    @property
    def type(self):
        """Gets the type of this DSWorkflowComparisonExpression.  # noqa: E501


        :return: The type of this DSWorkflowComparisonExpression.  # noqa: E501
        :rtype: DSWorkflowExpressionTypesComparisonExpression
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DSWorkflowComparisonExpression.


        :param type: The type of this DSWorkflowComparisonExpression.  # noqa: E501
        :type: DSWorkflowExpressionTypesComparisonExpression
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSWorkflowComparisonExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSWorkflowComparisonExpression):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSWorkflowComparisonExpression):
            return True

        return self.to_dict() != other.to_dict()
