# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class ESignSigner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'object',
        'note': 'object',
        'routing_order': 'str',
        'tabs': 'ESignTabsRecord',
        'user_name': 'object'
    }

    attribute_map = {
        'email': 'email',
        'note': 'note',
        'routing_order': 'routingOrder',
        'tabs': 'tabs',
        'user_name': 'userName'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ESignSigner - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._note = None
        self._routing_order = None
        self._tabs = None
        self._user_name = None
        self.discriminator = None

        setattr(self, "_{}".format('email'), kwargs.get('email', None))
        setattr(self, "_{}".format('note'), kwargs.get('note', None))
        setattr(self, "_{}".format('routing_order'), kwargs.get('routing_order', None))
        setattr(self, "_{}".format('tabs'), kwargs.get('tabs', None))
        setattr(self, "_{}".format('user_name'), kwargs.get('user_name', None))

    @property
    def email(self):
        """Gets the email of this ESignSigner.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The email of this ESignSigner.  # noqa: E501
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ESignSigner.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param email: The email of this ESignSigner.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def note(self):
        """Gets the note of this ESignSigner.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The note of this ESignSigner.  # noqa: E501
        :rtype: object
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ESignSigner.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param note: The note of this ESignSigner.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def routing_order(self):
        """Gets the routing_order of this ESignSigner.  # noqa: E501


        :return: The routing_order of this ESignSigner.  # noqa: E501
        :rtype: str
        """
        return self._routing_order

    @routing_order.setter
    def routing_order(self, routing_order):
        """Sets the routing_order of this ESignSigner.


        :param routing_order: The routing_order of this ESignSigner.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and routing_order is None:
            raise ValueError("Invalid value for `routing_order`, must not be `None`")  # noqa: E501

        self._routing_order = routing_order

    @property
    def tabs(self):
        """Gets the tabs of this ESignSigner.  # noqa: E501


        :return: The tabs of this ESignSigner.  # noqa: E501
        :rtype: ESignTabsRecord
        """
        return self._tabs

    @tabs.setter
    def tabs(self, tabs):
        """Sets the tabs of this ESignSigner.


        :param tabs: The tabs of this ESignSigner.  # noqa: E501
        :type: ESignTabsRecord
        """
        if self._configuration.client_side_validation and tabs is None:
            raise ValueError("Invalid value for `tabs`, must not be `None`")  # noqa: E501

        self._tabs = tabs

    @property
    def user_name(self):
        """Gets the user_name of this ESignSigner.  # noqa: E501

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :return: The user_name of this ESignSigner.  # noqa: E501
        :rtype: object
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ESignSigner.

        Reference of #/definitions/StringOrVariableOrTransformation. Object stands for a String or a Variable or a Transformation. This object should be any of the following object models or types: [string, #/definitions/DSWorkflowVariable, #/definitions/DSWorkflowTransformationExpression]  # noqa: E501

        :param user_name: The user_name of this ESignSigner.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESignSigner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESignSigner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ESignSigner):
            return True

        return self.to_dict() != other.to_dict()
