# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class WorkflowDefinitionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_date': 'datetime',
        'id': 'str',
        'is_draft': 'bool',
        'last_deployed_id': 'str',
        'last_deployed_version': 'str',
        'last_updated_date': 'datetime',
        'name': 'str',
        'status': 'WorkflowMetadataStatus',
        'trigger_url': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_date': 'createdDate',
        'id': 'id',
        'is_draft': 'isDraft',
        'last_deployed_id': 'lastDeployedId',
        'last_deployed_version': 'lastDeployedVersion',
        'last_updated_date': 'lastUpdatedDate',
        'name': 'name',
        'status': 'status',
        'trigger_url': 'triggerUrl'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """WorkflowDefinitionMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._created_date = None
        self._id = None
        self._is_draft = None
        self._last_deployed_id = None
        self._last_deployed_version = None
        self._last_updated_date = None
        self._name = None
        self._status = None
        self._trigger_url = None
        self.discriminator = None

        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('is_draft'), kwargs.get('is_draft', None))
        setattr(self, "_{}".format('last_deployed_id'), kwargs.get('last_deployed_id', None))
        setattr(self, "_{}".format('last_deployed_version'), kwargs.get('last_deployed_version', None))
        setattr(self, "_{}".format('last_updated_date'), kwargs.get('last_updated_date', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('status'), kwargs.get('status', None))
        setattr(self, "_{}".format('trigger_url'), kwargs.get('trigger_url', None))

    @property
    def account_id(self):
        """Gets the account_id of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The account_id of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this WorkflowDefinitionMetadata.


        :param account_id: The account_id of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_date(self):
        """Gets the created_date of this WorkflowDefinitionMetadata.  # noqa: E501

        The date the workflow was created  # noqa: E501

        :return: The created_date of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this WorkflowDefinitionMetadata.

        The date the workflow was created  # noqa: E501

        :param created_date: The created_date of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The id of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowDefinitionMetadata.


        :param id: The id of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_draft(self):
        """Gets the is_draft of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The is_draft of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this WorkflowDefinitionMetadata.


        :param is_draft: The is_draft of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def last_deployed_id(self):
        """Gets the last_deployed_id of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The last_deployed_id of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._last_deployed_id

    @last_deployed_id.setter
    def last_deployed_id(self, last_deployed_id):
        """Sets the last_deployed_id of this WorkflowDefinitionMetadata.


        :param last_deployed_id: The last_deployed_id of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """

        self._last_deployed_id = last_deployed_id

    @property
    def last_deployed_version(self):
        """Gets the last_deployed_version of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The last_deployed_version of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._last_deployed_version

    @last_deployed_version.setter
    def last_deployed_version(self, last_deployed_version):
        """Sets the last_deployed_version of this WorkflowDefinitionMetadata.


        :param last_deployed_version: The last_deployed_version of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """

        self._last_deployed_version = last_deployed_version

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this WorkflowDefinitionMetadata.  # noqa: E501

        The date the workflow was last updated  # noqa: E501

        :return: The last_updated_date of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this WorkflowDefinitionMetadata.

        The date the workflow was last updated  # noqa: E501

        :param last_updated_date: The last_updated_date of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def name(self):
        """Gets the name of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The name of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowDefinitionMetadata.


        :param name: The name of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The status of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: WorkflowMetadataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowDefinitionMetadata.


        :param status: The status of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: WorkflowMetadataStatus
        """

        self._status = status

    @property
    def trigger_url(self):
        """Gets the trigger_url of this WorkflowDefinitionMetadata.  # noqa: E501


        :return: The trigger_url of this WorkflowDefinitionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._trigger_url

    @trigger_url.setter
    def trigger_url(self, trigger_url):
        """Sets the trigger_url of this WorkflowDefinitionMetadata.


        :param trigger_url: The trigger_url of this WorkflowDefinitionMetadata.  # noqa: E501
        :type: str
        """

        self._trigger_url = trigger_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowDefinitionMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowDefinitionMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowDefinitionMetadata):
            return True

        return self.to_dict() != other.to_dict()
