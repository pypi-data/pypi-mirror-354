# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class Participant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'participant_email': 'str',
        'participant_first_name': 'str',
        'participant_last_name': 'str',
        'participant_role': 'str'
    }

    attribute_map = {
        'participant_email': 'participantEmail',
        'participant_first_name': 'participantFirstName',
        'participant_last_name': 'participantLastName',
        'participant_role': 'participantRole'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """Participant - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._participant_email = None
        self._participant_first_name = None
        self._participant_last_name = None
        self._participant_role = None
        self.discriminator = None

        setattr(self, "_{}".format('participant_email'), kwargs.get('participant_email', None))
        setattr(self, "_{}".format('participant_first_name'), kwargs.get('participant_first_name', None))
        setattr(self, "_{}".format('participant_last_name'), kwargs.get('participant_last_name', None))
        setattr(self, "_{}".format('participant_role'), kwargs.get('participant_role', None))

    @property
    def participant_email(self):
        """Gets the participant_email of this Participant.  # noqa: E501


        :return: The participant_email of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._participant_email

    @participant_email.setter
    def participant_email(self, participant_email):
        """Sets the participant_email of this Participant.


        :param participant_email: The participant_email of this Participant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and participant_email is None:
            raise ValueError("Invalid value for `participant_email`, must not be `None`")  # noqa: E501

        self._participant_email = participant_email

    @property
    def participant_first_name(self):
        """Gets the participant_first_name of this Participant.  # noqa: E501


        :return: The participant_first_name of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._participant_first_name

    @participant_first_name.setter
    def participant_first_name(self, participant_first_name):
        """Sets the participant_first_name of this Participant.


        :param participant_first_name: The participant_first_name of this Participant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and participant_first_name is None:
            raise ValueError("Invalid value for `participant_first_name`, must not be `None`")  # noqa: E501

        self._participant_first_name = participant_first_name

    @property
    def participant_last_name(self):
        """Gets the participant_last_name of this Participant.  # noqa: E501


        :return: The participant_last_name of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._participant_last_name

    @participant_last_name.setter
    def participant_last_name(self, participant_last_name):
        """Sets the participant_last_name of this Participant.


        :param participant_last_name: The participant_last_name of this Participant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and participant_last_name is None:
            raise ValueError("Invalid value for `participant_last_name`, must not be `None`")  # noqa: E501

        self._participant_last_name = participant_last_name

    @property
    def participant_role(self):
        """Gets the participant_role of this Participant.  # noqa: E501


        :return: The participant_role of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._participant_role

    @participant_role.setter
    def participant_role(self, participant_role):
        """Sets the participant_role of this Participant.


        :param participant_role: The participant_role of this Participant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and participant_role is None:
            raise ValueError("Invalid value for `participant_role`, must not be `None`")  # noqa: E501

        self._participant_role = participant_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Participant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Participant):
            return True

        return self.to_dict() != other.to_dict()
