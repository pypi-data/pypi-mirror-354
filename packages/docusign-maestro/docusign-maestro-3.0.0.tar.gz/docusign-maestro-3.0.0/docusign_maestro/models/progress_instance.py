# coding: utf-8

"""
    Maestro API

    Maestro authors and executes experiences that allow non-coders the ability to define Simple Business Process without having to write code and to deploy them seamlessly without having to have development expertise  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_maestro.client.configuration import Configuration


class ProgressInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'completed_steps': 'float',
        'current_completed_step_name': 'str',
        'total_steps': 'float'
    }

    attribute_map = {
        'completed_steps': 'completedSteps',
        'current_completed_step_name': 'currentCompletedStepName',
        'total_steps': 'totalSteps'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """ProgressInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._completed_steps = None
        self._current_completed_step_name = None
        self._total_steps = None
        self.discriminator = None

        setattr(self, "_{}".format('completed_steps'), kwargs.get('completed_steps', None))
        setattr(self, "_{}".format('current_completed_step_name'), kwargs.get('current_completed_step_name', None))
        setattr(self, "_{}".format('total_steps'), kwargs.get('total_steps', None))

    @property
    def completed_steps(self):
        """Gets the completed_steps of this ProgressInstance.  # noqa: E501

        The number of completed steps for this workflow instance  # noqa: E501

        :return: The completed_steps of this ProgressInstance.  # noqa: E501
        :rtype: float
        """
        return self._completed_steps

    @completed_steps.setter
    def completed_steps(self, completed_steps):
        """Sets the completed_steps of this ProgressInstance.

        The number of completed steps for this workflow instance  # noqa: E501

        :param completed_steps: The completed_steps of this ProgressInstance.  # noqa: E501
        :type: float
        """

        self._completed_steps = completed_steps

    @property
    def current_completed_step_name(self):
        """Gets the current_completed_step_name of this ProgressInstance.  # noqa: E501

        The last completed step name  # noqa: E501

        :return: The current_completed_step_name of this ProgressInstance.  # noqa: E501
        :rtype: str
        """
        return self._current_completed_step_name

    @current_completed_step_name.setter
    def current_completed_step_name(self, current_completed_step_name):
        """Sets the current_completed_step_name of this ProgressInstance.

        The last completed step name  # noqa: E501

        :param current_completed_step_name: The current_completed_step_name of this ProgressInstance.  # noqa: E501
        :type: str
        """

        self._current_completed_step_name = current_completed_step_name

    @property
    def total_steps(self):
        """Gets the total_steps of this ProgressInstance.  # noqa: E501

        The total number of steps for this workflow instance  # noqa: E501

        :return: The total_steps of this ProgressInstance.  # noqa: E501
        :rtype: float
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this ProgressInstance.

        The total number of steps for this workflow instance  # noqa: E501

        :param total_steps: The total_steps of this ProgressInstance.  # noqa: E501
        :type: float
        """

        self._total_steps = total_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProgressInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProgressInstance):
            return True

        return self.to_dict() != other.to_dict()
