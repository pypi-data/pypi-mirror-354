import os
import sys

import pandas as pd

# Add project root to path so that modules can be imported
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from verus.data.extraction import DataExtractor
from verus.data.timewindow import TimeWindowGenerator
from verus.grid.hexagon import HexagonGridGenerator
from verus.utils.logger import Logger
from verus.verus import VERUS

if __name__ == "__main__":
    # Create a dedicated logger for the test
    logger = Logger(name="Test_Vulnerability", verbose=True)

    # Define parameters for Porto
    place_name = "Porto"
    region = f"{place_name}, Portugal"
    evaluation_time = TimeWindowGenerator.to_unix_epoch("2023-11-08 17:30:00")

    logger.log("Step 1: Extract POI data for Porto (in memory)", level="info")
    extractor = DataExtractor(region=region, buffer_distance=500, verbose=True)
    # Extract POTI data from CSV (in memory)
    poi_df = extractor.run()
    logger.log(f"Extracted {len(poi_df)} POIs for {region}", level="success")

    logger.log("Step 2: Generate time windows in memory", level="info")
    tw_generator = TimeWindowGenerator(reference_date="2023-11-06", verbose=True)
    # Generate time windows as a dictionary of DataFrames (each key = category)
    time_windows = tw_generator.generate_from_schedule()
    logger.log(
        f"Generated time windows for POI types: {list(time_windows.keys())}",
        level="success",
    )

    logger.log(
        "Step 3: Generate hexagonal grid for vulnerability zones in memory",
        level="info",
    )
    grid_generator = HexagonGridGenerator(region=region, edge_length=250, verbose=True)
    # Produce a GeoDataFrame with vulnerability zones (hexagonal grid)
    hex_grid_gdf = grid_generator.run(save_output=False)
    logger.log(f"Hex grid created with {len(hex_grid_gdf)} zones", level="success")

    logger.log("Step 4: Initialize vulnerability assessment using VERUS", level="info")
    # Create an empty placeholder for centroids (they will be determined by the clustering pipeline)
    empty_centroids = pd.DataFrame(columns=["latitude", "longitude"])

    # Initialize the vulnerability assessor
    assessor = VERUS(
        place_name=place_name,
        method="KM-OPTICS",
        distance_method="gaussian",
        sigma=1000,
        config=None,
        verbose=True,
    )

    # Load the required data into the assessor:
    #   - poi_df: the POTI DataFrame loaded from CSV.
    #   - empty_centroids: a placeholder (to be updated when clustering runs).
    #   - hex_grid_gdf: the vulnerability zones grid.
    assessor.load(
        potis_df=poi_df,
        centroids_df=empty_centroids,
        time_windows_dict=time_windows,
        zones_gdf=hex_grid_gdf,
    )

    logger.log(
        "Step 5: Execute vulnerability assessment with time window data", level="info"
    )
    # Run the vulnerability workflow
    results = assessor.run(
        data_source=None,  # Let the run method use the already loaded data
        area_boundary_path=None,
        evaluation_time=evaluation_time,
    )

    # Add error handling that matches how the run() method returns errors
    if "error" in results:
        logger.log(f"Vulnerability Assessment Error: {results['error']}", level="error")
    elif results["vulnerability_zones"] is not None:
        logger.log("Vulnerability Assessment Completed Successfully!", level="success")
        logger.log(
            f"{len(results['vulnerability_zones'])} zones processed", level="info"
        )
        if "VL_normalized_smoothed" in results["vulnerability_zones"].columns:
            logger.log("Summarized vulnerability statistics:", level="info")
            stats = (
                results["vulnerability_zones"]["VL_normalized_smoothed"]
                .describe()
                .to_string()
            )
            logger.log(stats, level="info")
        else:
            logger.log(
                "Vulnerability zones computed, but smoothed values column is missing.",
                level="warning",
            )
    else:
        logger.log("Vulnerability Assessment encountered an error.", level="error")
