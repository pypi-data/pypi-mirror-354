[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agenticraft"
version = "0.2.0-alpha"
description = "Dead simple AI agents with reasoning traces - build AI agents as simple as writing Python"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [{name = "AgentiCraft Team", email = "hello@agenticraft.ai"}]
requires-python = ">=3.10"
keywords = [
    "ai",
    "agents",
    "llm",
    "openai",
    "anthropic",
    "claude",
    "gpt",
    "reasoning",
    "mcp",
    "model-context-protocol",
    "observability",
    "telemetry",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pydantic>=2.0",
    "pydantic_settings>=2.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "typing-extensions>=4.9",
    "python-dotenv>=1.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-semantic-conventions>=0.41b0",
    "pluggy>=1.3.0",
    "structlog>=24.0",
]

[project.optional-dependencies]
openai = [
    "openai>=1.0.0",
]
anthropic = [
    "anthropic>=0.3.0",
]
providers = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
]
telemetry = [
    "opentelemetry-exporter-otlp>=1.20.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.20.0",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
    "opentelemetry-exporter-jaeger>=1.20.0",
    "opentelemetry-exporter-prometheus>=0.41b0",
    "opentelemetry-instrumentation-httpx>=0.41b0",
    "opentelemetry-instrumentation-grpc>=0.41b0",
    "prometheus-client>=0.18.0",
]
memory = [
    "chromadb>=0.4",
]
api = [
    "fastapi>=0.100",
    "uvicorn>=0.23",
]
cli = [
    "rich>=13.0",
    "click>=8.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.3.0",
    "coverage[toml]>=7.3.0",
]
dev = [
    "black>=23.7.0",
    "ruff>=0.0.285",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocs-autorefs>=0.5.0",
    "pymdown-extensions>=10.0",
]
all = [
    "agenticraft[providers,telemetry,memory,api,cli,docs]",
]

[project.urls]
Homepage = "https://agenticraft.ai"
Documentation = "https://docs.agenticraft.ai"
Repository = "https://github.com/agenticraft/agenticraft"
Issues = "https://github.com/agenticraft/agenticraft/issues"

[project.scripts]
agenticraft = "agenticraft.cli.main:cli"

[tool.setuptools.packages.find]
include = ["agenticraft*"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--ignore=tests/test_code_examples.py",  # This is a standalone script, not a pytest test
    "--ignore=templates/",  # Template tests should be run from within template directories
    "--ignore=examples/mcp/test_mcp_integration.py",  # Example test file
    "--ignore=test_telemetry_day5.py",  # Appears to be a standalone test script
    "-ra",
    "--strict-markers",
    "--cov=agenticraft",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=0",  # Temporarily disabled
    "--maxfail=1",
]
filterwarnings = [
    "ignore::pytest.PytestCollectionWarning:agenticraft.core.tool",
    "ignore::pytest.PytestCollectionWarning",
    "ignore::DeprecationWarning:websockets.*",
    "ignore::DeprecationWarning:agenticraft.protocols.mcp.server",
    "ignore::DeprecationWarning:pytest_asyncio.*",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "mcp: MCP protocol tests",
    "structure: marks tests as structure validation tests",
]
# Ignore FunctionTool instances that start with 'test_'
python_classes = ["Test*"]
python_functions = ["test_*"]
python_files = ["test_*.py"]

[tool.coverage.run]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
