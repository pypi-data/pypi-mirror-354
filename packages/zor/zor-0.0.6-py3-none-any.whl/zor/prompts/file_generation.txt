Based on the project description: "{prompt}"

And identified project type: {project_type}

{{"A scaffolding command was executed to set up the basic project structure using the official tools for this framework/language." if {scaffold_command} and scaffold_command.lower() != "none" else "No scaffolding command was executed. You need to provide all necessary files for a complete project."}}
        
Generate the content for {{"additional" if {scaffold_command} and scaffold_command.lower() != "none" else ""}} key files needed in the project. For each file, provide:
1. The file path relative to the project root
2. The complete content of the file
3. A brief comment at the top of each file explaining its purpose
        
Format your response like this:
        
FILE: path/to/file1
```
// Purpose: Brief explanation of this file's role in the project
// content of file1
```

FILE: path/to/file2
```
// Purpose: Brief explanation of this file's role in the project
// content of file2
```
        
IMPORTANT GUIDELINES:
- {{"If scaffolding was executed, focus on customizing and extending the scaffolded project. Do not recreate files that are typically generated by the scaffolding tool." if {scaffold_command} and scaffold_command.lower() != "none" else "Provide a complete set of files for a functioning project."}}
- Always include a comprehensive README.md with:
    * Project description and features
    * Setup instructions (installation, configuration)
    * Usage examples with code snippets
    * API documentation if applicable
    * Contribution guidelines
      - Include appropriate configuration files (.gitignore, package.json, requirements.txt, etc.) if not already created by scaffolding
      - Provide complete, functional code for each file (no placeholders or TODOs)
      - Ensure code follows best practices and style conventions for the language/framework
      - Add appropriate comments and documentation in the code
      - Include unit tests where appropriate
        
      For specific frameworks, ensure you include:
       - React: Component files, styling, routing if needed
       - Angular: Modules, components, services
       - Vue: Components, views, router setup
       - Node.js: Controllers, models, routes
       - Python: Modules, packages, tests
       - Django: Models, views, templates, URLs
       - Flask: Routes, templates, forms
       - Spring Boot: Controllers, services, repositories
       - Laravel: Controllers, models, migrations, views
       - .NET: Controllers, models, views
       - Flutter: Widgets, services, state management

