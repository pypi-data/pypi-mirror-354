"""
InteractionHandler Module.

This module defines the `InteractionHandler` class, which handles user interaction
logic for the LangGraph-based workflow.
"""

# Standard library imports
from typing import Optional

# Third-party imports
from langchain_core.messages import HumanMessage
from langgraph.graph.state import CompiledStateGraph

# Internal application imports
from crypto_com_agent_client.lib.enums.workflow_enum import Workflow
from crypto_com_agent_client.lib.types.blockchain_config import BlockchainConfig
from crypto_com_agent_client.lib.utils.storage import Storage
from crypto_com_agent_client.lib.utils.token_usage import print_workflow_token_usage


class InteractionHandler:
    """
    The `InteractionHandler` class manages user interactions with the LangGraph workflow.
    It handles state management, user input processing, and response generation.

    Attributes:
        app (CompiledStateGraph): The compiled LangGraph workflow.
        storage (Storage): The storage backend for persisting workflow state.
        blockchain_config (BlockchainConfig): Configuration for blockchain interactions.
        debug_logging (bool): Flag to control debug logging output.

    Example:
        >>> handler = InteractionHandler(
        ...     app=compiled_workflow,
        ...     storage=storage_instance,
        ...     blockchain_config=blockchain_config,
        ...     debug_logging=True
        ... )
        >>> response = handler.interact("Hello!", thread_id=42)
    """

    def __init__(
        self,
        app: CompiledStateGraph,
        storage: Storage,
        blockchain_config: BlockchainConfig,
        debug_logging: bool = False,
    ) -> None:
        """
        Initialize the InteractionHandler.

        Args:
            app (CompiledStateGraph): The compiled LangGraph workflow.
            storage (Storage): The storage backend for persisting workflow state.
            blockchain_config (BlockchainConfig): Configuration for blockchain interactions.
            debug_logging (bool): Enable/disable debug logging for interactions.
        """
        self.app: CompiledStateGraph = app
        self.storage: Storage = storage
        self.blockchain_config: BlockchainConfig = blockchain_config
        self.debug_logging: bool = debug_logging

    def interact(self, user_input: str, thread_id: int) -> str:
        """
        Processes user input and returns the generated response.

        Args:
            user_input (str): The user's input message.
            thread_id (int, optional): A thread ID for contextual execution.

        Returns:
            str: The response generated by the workflow.

        Raises:
            ValueError: If the workflow graph is not initialized.
        """
        if not self.app:
            raise ValueError("The workflow graph is not initialized.")

        # Load state from storage or initialize it
        state = self.storage.load_state(thread_id)

        # Track initial message count to identify new messages
        initial_message_count = len(state.get('messages', []))

        # Add user input as a HumanMessage
        state[Workflow.Messages].append(HumanMessage(content=user_input))

        # Initialise other state variables
        state[Workflow.ChainID] = self.blockchain_config.chainId
        state[Workflow.PrivateKey] = self.blockchain_config.private_key
        state[Workflow.SSOWalletURL] = self.blockchain_config.sso_wallet_url

        # Optional workflow configuration
        config = {Workflow.Configurable: {Workflow.ThreadID: thread_id}}

        # Show workflow start marker if debug logging is enabled
        if self.debug_logging:
            print("+" * 50)
            print("ðŸš€ WORKFLOW STARTED")
            print("+" * 50)

        # Execute the workflow
        final_state = self.app.invoke(state, config=config)

        # Track token usage for this user request only
        messages = final_state.get('messages', [])
        new_messages = messages[initial_message_count:]

        # Only track and log token usage if debug logging is enabled
        if self.debug_logging:
            print_workflow_token_usage(new_messages)

        # Save updated state to storage
        self.storage.save_state(final_state, thread_id)

        # Extract and return the final response
        return final_state[Workflow.Messages][-1].content
