# coding: utf-8

"""
    DeviceServer

    DeviceServer API  # noqa: E501

    The version of the OpenAPI document: 1.2.2
    Contact: david@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from DeviceServer.api_client import ApiClient
from DeviceServer.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SerialMuxApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def put_serial_test_message(self, device_id, port_index, serial_message, **kwargs):  # noqa: E501
        """Serial Message Test  # noqa: E501

        Send a serial message to the device SerialUSB bus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_serial_test_message(device_id, port_index, serial_message, async_req=True)
        >>> result = thread.get()

        :param device_id: Device ID (required)
        :type device_id: str
        :param port_index: Port Index (required)
        :type port_index: float
        :param serial_message: Serial message to SerialUSB (required)
        :type serial_message: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.put_serial_test_message_with_http_info(device_id, port_index, serial_message, **kwargs)  # noqa: E501

    def put_serial_test_message_with_http_info(self, device_id, port_index, serial_message, **kwargs):  # noqa: E501
        """Serial Message Test  # noqa: E501

        Send a serial message to the device SerialUSB bus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_serial_test_message_with_http_info(device_id, port_index, serial_message, async_req=True)
        >>> result = thread.get()

        :param device_id: Device ID (required)
        :type device_id: str
        :param port_index: Port Index (required)
        :type port_index: float
        :param serial_message: Serial message to SerialUSB (required)
        :type serial_message: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'device_id',
            'port_index',
            'serial_message'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_serial_test_message" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and local_var_params.get('device_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `device_id` when calling `put_serial_test_message`")  # noqa: E501
        # verify the required parameter 'port_index' is set
        if self.api_client.client_side_validation and local_var_params.get('port_index') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `port_index` when calling `put_serial_test_message`")  # noqa: E501
        # verify the required parameter 'serial_message' is set
        if self.api_client.client_side_validation and local_var_params.get('serial_message') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `serial_message` when calling `put_serial_test_message`")  # noqa: E501

        if self.api_client.client_side_validation and ('device_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['device_id']) > 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `device_id` when calling `put_serial_test_message`, length must be less than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and ('device_id' in local_var_params and  # noqa: E501
                                                        len(local_var_params['device_id']) < 36):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `device_id` when calling `put_serial_test_message`, length must be greater than or equal to `36`")  # noqa: E501
        if self.api_client.client_side_validation and 'device_id' in local_var_params and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', local_var_params['device_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `device_id` when calling `put_serial_test_message`, must conform to the pattern `/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/`")  # noqa: E501
        if self.api_client.client_side_validation and 'port_index' in local_var_params and local_var_params['port_index'] > 1000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `port_index` when calling `put_serial_test_message`, must be a value less than or equal to `1000`")  # noqa: E501
        if self.api_client.client_side_validation and 'port_index' in local_var_params and local_var_params['port_index'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `port_index` when calling `put_serial_test_message`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('serial_message' in local_var_params and  # noqa: E501
                                                        len(local_var_params['serial_message']) > 23):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `serial_message` when calling `put_serial_test_message`, length must be less than or equal to `23`")  # noqa: E501
        if self.api_client.client_side_validation and ('serial_message' in local_var_params and  # noqa: E501
                                                        len(local_var_params['serial_message']) < 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `serial_message` when calling `put_serial_test_message`, length must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'device_id' in local_var_params:
            path_params['device_id'] = local_var_params['device_id']  # noqa: E501
        if 'port_index' in local_var_params:
            path_params['port_index'] = local_var_params['port_index']  # noqa: E501

        query_params = []
        if local_var_params.get('serial_message') is not None:  # noqa: E501
            query_params.append(('serial_message', local_var_params['serial_message']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "str",
            400: None,
            401: None,
            403: None,
            404: None,
            405: None,
            500: None,
        }

        return self.api_client.call_api(
            '/SerialMux/{device_id}/Ports/{port_index}/SerialMessage', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
