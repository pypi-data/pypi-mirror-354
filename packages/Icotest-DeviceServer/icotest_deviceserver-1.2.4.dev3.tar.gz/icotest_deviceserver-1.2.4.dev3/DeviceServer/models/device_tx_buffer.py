# coding: utf-8

"""
    DeviceServer

    DeviceServer API  # noqa: E501

    The version of the OpenAPI document: 1.2.2
    Contact: david@3adesign.co.uk
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from DeviceServer.configuration import Configuration


class DeviceTxBuffer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message_id': 'str',
        'timestamp': 'int',
        'device_message': 'str',
        'device_id': 'str',
        'device_serial': 'str',
        'device_type': 'str'
    }

    attribute_map = {
        'message_id': 'message_id',
        'timestamp': 'timestamp',
        'device_message': 'device_message',
        'device_id': 'device_id',
        'device_serial': 'device_serial',
        'device_type': 'device_type'
    }

    def __init__(self, message_id=None, timestamp=None, device_message=None, device_id=None, device_serial=None, device_type=None, local_vars_configuration=None):  # noqa: E501
        """DeviceTxBuffer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._message_id = None
        self._timestamp = None
        self._device_message = None
        self._device_id = None
        self._device_serial = None
        self._device_type = None
        self.discriminator = None

        self.message_id = message_id
        if timestamp is not None:
            self.timestamp = timestamp
        if device_message is not None:
            self.device_message = device_message
        if device_id is not None:
            self.device_id = device_id
        if device_serial is not None:
            self.device_serial = device_serial
        if device_type is not None:
            self.device_type = device_type

    @property
    def message_id(self):
        """Gets the message_id of this DeviceTxBuffer.  # noqa: E501


        :return: The message_id of this DeviceTxBuffer.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this DeviceTxBuffer.


        :param message_id: The message_id of this DeviceTxBuffer.  # noqa: E501
        :type message_id: str
        """
        if self.local_vars_configuration.client_side_validation and message_id is None:  # noqa: E501
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                message_id is not None and len(message_id) > 100):
            raise ValueError("Invalid value for `message_id`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                message_id is not None and len(message_id) < 1):
            raise ValueError("Invalid value for `message_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._message_id = message_id

    @property
    def timestamp(self):
        """Gets the timestamp of this DeviceTxBuffer.  # noqa: E501


        :return: The timestamp of this DeviceTxBuffer.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeviceTxBuffer.


        :param timestamp: The timestamp of this DeviceTxBuffer.  # noqa: E501
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def device_message(self):
        """Gets the device_message of this DeviceTxBuffer.  # noqa: E501


        :return: The device_message of this DeviceTxBuffer.  # noqa: E501
        :rtype: str
        """
        return self._device_message

    @device_message.setter
    def device_message(self, device_message):
        """Sets the device_message of this DeviceTxBuffer.


        :param device_message: The device_message of this DeviceTxBuffer.  # noqa: E501
        :type device_message: str
        """
        if (self.local_vars_configuration.client_side_validation and
                device_message is not None and len(device_message) > 100):
            raise ValueError("Invalid value for `device_message`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_message is not None and len(device_message) < 1):
            raise ValueError("Invalid value for `device_message`, length must be greater than or equal to `1`")  # noqa: E501

        self._device_message = device_message

    @property
    def device_id(self):
        """Gets the device_id of this DeviceTxBuffer.  # noqa: E501


        :return: The device_id of this DeviceTxBuffer.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceTxBuffer.


        :param device_id: The device_id of this DeviceTxBuffer.  # noqa: E501
        :type device_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and len(device_id) > 36):
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and len(device_id) < 36):
            raise ValueError("Invalid value for `device_id`, length must be greater than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_id is not None and not re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}', device_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `device_id`, must be a follow pattern or equal to `/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_serial(self):
        """Gets the device_serial of this DeviceTxBuffer.  # noqa: E501


        :return: The device_serial of this DeviceTxBuffer.  # noqa: E501
        :rtype: str
        """
        return self._device_serial

    @device_serial.setter
    def device_serial(self, device_serial):
        """Sets the device_serial of this DeviceTxBuffer.


        :param device_serial: The device_serial of this DeviceTxBuffer.  # noqa: E501
        :type device_serial: str
        """
        if (self.local_vars_configuration.client_side_validation and
                device_serial is not None and len(device_serial) > 32):
            raise ValueError("Invalid value for `device_serial`, length must be less than or equal to `32`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_serial is not None and len(device_serial) < 1):
            raise ValueError("Invalid value for `device_serial`, length must be greater than or equal to `1`")  # noqa: E501

        self._device_serial = device_serial

    @property
    def device_type(self):
        """Gets the device_type of this DeviceTxBuffer.  # noqa: E501


        :return: The device_type of this DeviceTxBuffer.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceTxBuffer.


        :param device_type: The device_type of this DeviceTxBuffer.  # noqa: E501
        :type device_type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                device_type is not None and len(device_type) > 100):
            raise ValueError("Invalid value for `device_type`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                device_type is not None and len(device_type) < 1):
            raise ValueError("Invalid value for `device_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._device_type = device_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceTxBuffer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceTxBuffer):
            return True

        return self.to_dict() != other.to_dict()
