"""
–û–∫–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import tkinter as tk
from tkinter import ttk
from ..tools.logger import log_info, log_error

class BannedWindow:
    """–û–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, validation_result=None, window_type="banned"):
        self.validation_result = validation_result
        self.window_type = window_type
        self.root = None
        
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            self.root = tk.Tk()
            self._setup_window()
            self._create_widgets()
            self._center_window()
            
            log_info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –æ–∫–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞: {self.window_type}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            self.root.mainloop()
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            self._fallback_console_message()
    
    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        titles = {
            "banned": "Kilopa - –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "security_violation": "Kilopa - –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
            "license_error": "Kilopa - –û—à–∏–±–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏",
            "generic_error": "Kilopa - –û—à–∏–±–∫–∞"
        }
        
        self.root.title(titles.get(self.window_type, "Kilopa - –û—à–∏–±–∫–∞"))
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        
        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        bg_colors = {
            "banned": "#ffebee",
            "security_violation": "#fff3e0", 
            "license_error": "#f3e5f5",
            "generic_error": "#fafafa"
        }
        
        self.root.configure(bg=bg_colors.get(self.window_type, "#fafafa"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self._on_close)
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–∞–≤–µ—Ä—Ö—É
        self.root.attributes("-topmost", True)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="30")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header(main_frame)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self._create_message(main_frame)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._create_details(main_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self._create_buttons(main_frame)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞
        main_frame.columnconfigure(0, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
    
    def _create_header(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        icons = {
            "banned": "üö´",
            "security_violation": "‚ö†Ô∏è",
            "license_error": "üîí",
            "generic_error": "‚ùå"
        }
        
        titles = {
            "banned": "–î–û–°–¢–£–ü –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù",
            "security_violation": "–ù–ê–†–£–®–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò",
            "license_error": "–û–®–ò–ë–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò", 
            "generic_error": "–û–®–ò–ë–ö–ê"
        }
        
        icon = icons.get(self.window_type, "‚ùå")
        title = titles.get(self.window_type, "–û–®–ò–ë–ö–ê")
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = ttk.Label(parent, text=icon, font=("Arial", 48))
        icon_label.grid(row=0, column=0, pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            parent, 
            text=title,
            font=("Arial", 16, "bold"),
            foreground="red"
        )
        title_label.grid(row=1, column=0, pady=(0, 20))
    
    def _create_message(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        messages = {
            "banned": self._get_banned_message(),
            "security_violation": self._get_security_message(),
            "license_error": self._get_license_error_message(),
            "generic_error": self._get_generic_error_message()
        }
        
        message = messages.get(self.window_type, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        
        message_label = ttk.Label(
            parent,
            text=message,
            font=("Arial", 11),
            justify=tk.CENTER,
            wraplength=400
        )
        message_label.grid(row=2, column=0, pady=(0, 20))
    
    def _create_details(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"""
        details_frame = ttk.LabelFrame(parent, text="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", padding="10")
        details_frame.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(0, 20))
        
        details_text = self._get_details_text()
        
        details_label = ttk.Label(
            details_frame,
            text=details_text,
            font=("Courier", 9),
            justify=tk.LEFT,
            wraplength=400
        )
        details_label.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        details_frame.columnconfigure(0, weight=1)
    
    def _create_buttons(self, parent):
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏"""
        button_frame = ttk.Frame(parent)
        button_frame.grid(row=4, column=0, pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ttk.Button(
            button_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=self._on_close,
            width=15
        )
        close_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if self.window_type == "license_error":
            retry_button = ttk.Button(
                button_frame,
                text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é",
                command=self._retry_activation,
                width=20
            )
            retry_button.pack(side=tk.LEFT)
    
    def _get_banned_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        try:
            failure_type = self.validation_result.get('failure_type', 'unknown')
            
            if failure_type == 'user_banned':
                return ("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n\n"
                       "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
            
            elif failure_type == 'ip_blocked':
                return ("–í–∞—à IP-–∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
                       "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω —Å –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.")
            
            elif failure_type == 'too_many_warnings':
                return ("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.\n\n"
                       "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            
            else:
                return "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                
        except:
            return "–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    
    def _get_security_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            failure_type = self.validation_result.get('failure_type', 'unknown')
            
            if failure_type == 'tamper_detected':
                return ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n\n"
                       "–†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
            
            elif failure_type == 'time_rollback':
                return ("–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                       "–≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã.")
            
            else:
                return ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                       "–†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")
                
        except:
            return "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    
    def _get_license_error_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            results = self.validation_result.get('results', {})
            license_result = results.get('license', {})
            license_status = license_result.get('status', 'unknown')
            
            if license_status == 'revoked':
                return ("–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.\n\n"
                       "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏.")
            
            elif license_status == 'invalid':
                return ("–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.\n\n"
                       "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è.")
            
            else:
                return ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–∏.\n\n"
                       "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
                
        except:
            return "–û—à–∏–±–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    
    def _get_generic_error_message(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = self.validation_result.get('message', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n\n{message