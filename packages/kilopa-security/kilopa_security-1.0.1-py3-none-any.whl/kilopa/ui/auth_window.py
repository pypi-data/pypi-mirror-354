"""
–û–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
"""

import sys
import tkinter as tk
from tkinter import ttk, messagebox
from ..tools.logger import log_info, log_warning, log_error
from ..core.license import activate_license, validate_license
from ..runtime.attempt_counter import add_attempt

class ActivationWindow:
    """–û–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    
    def __init__(self, validation_result=None):
        self.validation_result = validation_result
        self.root = None
        self.license_entry = None
        self.status_label = None
        self.activate_button = None
        self.attempts_count = 0
        self.max_attempts = 3
        
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            self.root = tk.Tk()
            self._setup_window()
            self._create_widgets()
            self._center_window()
            
            log_info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            self.root.mainloop()
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            self._fallback_console_activation()
    
    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        self.root.title("Kilopa - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏")
        self.root.geometry("450x300")
        self.root.resizable(False, False)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ —Å—Ç–∏–ª—å
        try:
            self.root.iconname("Kilopa")
        except:
            pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self._on_close)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame, 
            text="üîê –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ Kilopa",
            font=("Arial", 14, "bold")
        )
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_text = (
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "KLP-XXXX-XXXX-XXXX-XXXX"
        )
        desc_label = ttk.Label(main_frame, text=desc_text, justify=tk.CENTER)
        desc_label.grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
        ttk.Label(main_frame, text="–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:").grid(row=2, column=0, sticky=tk.W, pady=(0, 5))
        
        self.license_entry = ttk.Entry(main_frame, width=30, font=("Courier", 10))
        self.license_entry.grid(row=3, column=0, columnspan=2, pady=(0, 10), sticky=(tk.W, tk.E))
        self.license_entry.bind('<Return>', lambda e: self._activate_license())
        self.license_entry.bind('<KeyRelease>', self._on_key_release)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=(10, 0))
        
        self.activate_button = ttk.Button(
            button_frame, 
            text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
            command=self._activate_license
        )
        self.activate_button.pack(side=tk.LEFT, padx=(0, 10))
        
        exit_button = ttk.Button(
            button_frame, 
            text="–í—ã—Ö–æ–¥", 
            command=self._on_close
        )
        exit_button.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="", foreground="blue")
        self.status_label.grid(row=5, column=0, columnspan=2, pady=(15, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
        attempts_text = f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {self.max_attempts - self.attempts_count}"
        attempts_label = ttk.Label(main_frame, text=attempts_text, foreground="gray")
        attempts_label.grid(row=6, column=0, columnspan=2, pady=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.license_entry.focus()
    
    def _center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            self.root.update_idletasks()
            
            window_width = self.root.winfo_width()
            window_height = self.root.winfo_height()
            
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            
            x = (screen_width - window_width) // 2
            y = (screen_height - window_height) // 2
            
            self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
            
        except Exception:
            pass
    
    def _on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞
            current_text = self.license_entry.get().upper()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
            clean_text = ''.join(c for c in current_text if c.isalnum())
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –±–ª–æ–∫–∏ –ø–æ 4 —Å–∏–º–≤–æ–ª–∞
            if len(clean_text) > 0:
                formatted = '-'.join([clean_text[i:i+4] for i in range(0, len(clean_text), 4)])
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                if len(clean_text) <= 16:  # 4 –±–ª–æ–∫–∞ –ø–æ 4 —Å–∏–º–≤–æ–ª–∞
                    if formatted != current_text:
                        cursor_pos = self.license_entry.index(tk.INSERT)
                        self.license_entry.delete(0, tk.END)
                        self.license_entry.insert(0, formatted)
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
                        new_pos = min(cursor_pos, len(formatted))
                        self.license_entry.icursor(new_pos)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –∫–ª—é—á –ø–æ–ª–Ω—ã–π
            if len(clean_text) == 16:
                self.activate_button.configure(state='normal')
            else:
                self.activate_button.configure(state='disabled')
                
        except Exception as e:
            log_warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
    
    def _activate_license(self):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é"""
        try:
            license_key = self.license_entry.get().strip()
            
            if not license_key:
                self._show_status("–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á", "red")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
            self.attempts_count += 1
            
            if self.attempts_count > self.max_attempts:
                self._show_status("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "red")
                add_attempt('license_activation', False, 'Too many attempts')
                self._on_close()
                return
            
            self._show_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏...", "blue")
            self.activate_button.configure(state='disabled')
            self.root.update()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
            add_attempt('license_activation', False, f'Attempt {self.attempts_count}')
            
            # –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
            license_obj = validate_license(license_key)
            
            if not license_obj or not license_obj.is_valid:
                error_msg = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á"
                if license_obj and license_obj.errors:
                    error_msg = license_obj.errors[0]
                
                self._show_status(error_msg, "red")
                self.activate_button.configure(state='normal')
                
                log_warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {error_msg}")
                return
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
            if activate_license(license_key):
                self._show_status("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", "green")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                add_attempt('license_activation', True, 'License activated successfully')
                
                log_info("–õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ UI")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                self.root.after(2000, self._close_success)
                
            else:
                self._show_status("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏", "red")
                self.activate_button.configure(state='normal')
                
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            self._show_status(f"–û—à–∏–±–∫–∞: {e}", "red")
            self.activate_button.configure(state='normal')
    
    def _show_status(self, message, color="black"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.status_label.configure(text=message, foreground=color)
            self.root.update()
        except Exception:
            pass
    
    def _close_success(self):
        """–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            self.root.quit()
            self.root.destroy()
        except Exception:
            pass
    
    def _on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            log_info("–û–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—ã—Ö–æ–¥–∞
            add_attempt('activation_window_close', False, 'User closed activation window')
            
            self.root.quit()
            self.root.destroy()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            sys.exit(1)
            
        except Exception:
            sys.exit(1)
    
    def _fallback_console_activation(self):
        """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–∫ fallback"""
        try:
            print("\n" + "="*50)
            print("–ê–ö–¢–ò–í–ê–¶–ò–Ø –õ–ò–¶–ï–ù–ó–ò–ò KILOPA")
            print("="*50)
            print("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n")
            
            for attempt in range(self.max_attempts):
                try:
                    license_key = input(f"–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_attempts}): ").strip()
                    
                    if not license_key:
                        print("‚ùå –ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n")
                        continue
                    
                    print("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏...")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
                    add_attempt('console_license_activation', False, f'Console attempt {attempt + 1}')
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    license_obj = validate_license(license_key)
                    
                    if license_obj and license_obj.is_valid:
                        if activate_license(license_key):
                            print("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                            add_attempt('console_license_activation', True, 'Console activation successful')
                            return
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏\n")
                    else:
                        error_msg = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á"
                        if license_obj and license_obj.errors:
                            error_msg = license_obj.errors[0]
                        print(f"‚ùå {error_msg}\n")
                
                except KeyboardInterrupt:
                    print("\n‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}\n")
            
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞.")
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        
        finally:
            sys.exit(1)

def show_activation_window(validation_result=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    try:
        window = ActivationWindow(validation_result)
        window.show()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        sys.exit(1)