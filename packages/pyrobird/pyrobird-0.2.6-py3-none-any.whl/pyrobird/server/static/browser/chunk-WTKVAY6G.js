import{a as G}from"./chunk-PYODGWPU.js";import{a as Y}from"./chunk-RVFV7OJL.js";import{a as v}from"./chunk-VECH5WW2.js";import"./chunk-3GIRV5GZ.js";import{e as q,f as A,g as J,k as K,l as U,m as Q,p as W,r as b,s as X}from"./chunk-RUOSGH3Z.js";import{a as M}from"./chunk-TDJROOWO.js";import"./chunk-O2YOIZWS.js";import"./chunk-C4APR3G7.js";import{a as C}from"./chunk-4U5XXNS7.js";import"./chunk-LGENSGLC.js";import"./chunk-LWQ6XHU3.js";import"./chunk-YC5SGHGH.js";import"./chunk-FYXTN3X2.js";import"./chunk-D3GAWKNQ.js";import"./chunk-K2P6CES6.js";import"./chunk-Z4ZYSIRC.js";import"./chunk-3L3RRFVB.js";import{M as y,e as R,ha as g,ia as z,na as B,oa as m,ua as T,ya as H}from"./chunk-FVXVO67X.js";import{$ as S,C as $,Ca as V,G as x,K as k,Ka as E,O as N,Oa as I,Sa as F,d as h,f as O,g as w,ib as L,l as P}from"./chunk-KYOHYQWH.js";import{k as u}from"./chunk-KYPE3LET.js";W.prototype.ShowProgress=function(s){let t,e;if(s===void 0||!Number.isFinite(s))t=e="";else if(this._break)t="Breaking ... ",e="break";else{if(this.last_progress!==s){let r=s-this.last_progress;this.aver_diff||(this.aver_diff=r),this.aver_diff=r*.3+this.aver_diff*.7}this.last_progress=s;let i=0;this.aver_diff<=0?i=0:this.aver_diff<1e-4?i=3:this.aver_diff<.001?i=2:this.aver_diff<.01&&(i=1),t=`TTree draw ${(s*100).toFixed(i)} % `}return T(t,0,()=>{this._break=1}),e};function Z(s,t,e){return u(this,null,function*(){let i=t?._typename;return!i||!w(i)?Promise.reject(Error("Object without type cannot be draw with TTree")):i.indexOf(E)===0?M.draw(s,t,e):i.indexOf(I)===0?C.draw(s,t,e):i.indexOf(F)===0?v.draw(s,t,e):i.indexOf(S)===0?G.draw(s,t,e):i===V&&t.$hist?v.draw(s,t.$hist,e).then(()=>{let r=new g(s,t,e);return r.addToPadPrimitives(),r.redraw=Y,r.redraw()}):Promise.reject(Error(`Object of type ${i} cannot be draw with TTree`))})}function j(s,t){return u(this,null,function*(){if(!(!t&&!this.last_pr)){if(this.dump||this.dump_entries||this.testio){if(!t)return;if(P()){let i=new y(this.drawid);return i.selectDom().property("_json_object_",s),i}if(O(h.drawInspector))return h.drawInspector(this.drawid,s);let e=L(N);return e.fString=$(s,2),z(this.drawid,e)}return this.last_pr||(this.last_pr=Promise.resolve(!0)),this.last_pr.then(()=>(this.obj_painter?this.last_pr=this.obj_painter.redrawObject(s).then(()=>this.obj_painter):s?this.last_pr=Z(this.drawid,s,this.drawopt).then(e=>(this.obj_painter=e,t||(this.last_pr=null),e)):(t&&console.log("no result after tree drawing"),this.last_pr=!1),t?this.last_pr:null))}})}function ee(s){return s.draw_first=!0,s.configureOnline=function(t,e,i,r,n){this.setItemName(t,"",this),this.url=e,this.root_version=r,this.askey=i,this.draw_expr=n},s.configureTree=function(t){this.local_tree=t},s.showExtraButtons=function(t){let e=this.selectDom(),i=this.local_tree?.fEntries||0;e.select(".treedraw_more").remove(),e.select(".treedraw_buttons").node().innerHTML+=`Cut: <input class="treedraw_cut ui-corner-all ui-widget" style="width:8em;margin-left:5px" title="cut expression"></input>Opt: <input class="treedraw_opt ui-corner-all ui-widget" style="width:5em;margin-left:5px" title="histogram draw options"></input>Num: <input class="treedraw_number" type='number' min="0" max="${i}" step="1000" style="width:7em;margin-left:5px" title="number of entries to process (default all)"></input>First: <input class="treedraw_first" type='number' min="0" max="${i}" step="1000" style="width:7em;margin-left:5px" title="first entry to process (default first)"></input><button class="treedraw_clear" title="Clear drawing">Clear</button>`,e.select(".treedraw_exe").on("click",()=>this.performDraw()),e.select(".treedraw_cut").property("value",t?.parse_cut||"").on("change",()=>this.performDraw()),e.select(".treedraw_opt").property("value",t?.drawopt||"").on("change",()=>this.performDraw()),e.select(".treedraw_number").attr("value",t?.numentries||""),e.select(".treedraw_first").attr("value",t?.firstentry||""),e.select(".treedraw_clear").on("click",()=>m(this.drawid))},s.showPlayer=function(t){let e=this.selectDom();this.drawid="jsroot_tree_player_"+h.id_counter+++"_draw";let i=t?.parse_cut||t?.numentries||t?.firstentry;e.html(`<div style="display:flex; flex-flow:column; height:100%; width:100%;"><div class="treedraw_buttons" style="flex: 0 1 auto;margin-top:0.2em;"><button class="treedraw_exe" title="Execute draw expression" style="margin-left:0.5em">Draw</button>Expr:<input class="treedraw_varexp treedraw_varexp_info" style="width:12em;margin-left:5px" title="draw expression"></input><label class="treedraw_varexp_info">\u24D8</label><button class="treedraw_more">More</button></div><div style="flex: 0 1 auto"><hr/></div><div id="${this.drawid}" style="flex: 1 1 auto; overflow:hidden;"></div></div>`),this.setTopPainter(),this.local_tree&&e.select(".treedraw_buttons").attr("title","Tree draw player for: "+this.local_tree.fName),e.select(".treedraw_exe").on("click",()=>this.performDraw()),e.select(".treedraw_varexp").attr("value",t?.parse_expr||this.draw_expr||"px:py").on("change",()=>this.performDraw()),e.select(".treedraw_varexp_info").attr("title",`Example of valid draw expressions:
  px - 1-dim draw
  px:py - 2-dim draw
  px:py:pz - 3-dim draw
  px+py:px-py - use any expressions
  px:py>>Graph - create and draw TGraph
  px:py>>dump - dump extracted variables
  px:py>>h(50,-5,5,50,-5,5) - custom histogram
  px:py;hbins:100 - custom number of bins`),i?this.showExtraButtons(t):e.select(".treedraw_more").on("click",()=>this.showExtraButtons(t)),this.checkResize(),H(this)},s.getValue=function(t){let e=this.selectDom().select(t);if(e.empty())return;let i=e.property("value");return i!==void 0?i:e.attr("value")},s.performLocalDraw=function(){if(!this.local_tree)return;let t=this.selectDom(),e={expr:this.getValue(".treedraw_varexp")};t.select(".treedraw_more").empty()&&(e.cut=this.getValue(".treedraw_cut"),e.cut||delete e.cut,e.drawopt=this.getValue(".treedraw_opt"),e.drawopt==="dump"&&(e.dump=!0,e.drawopt=""),e.drawopt||delete e.drawopt,e.numentries=parseInt(this.getValue(".treedraw_number")),Number.isInteger(e.numentries)||delete e.numentries,e.firstentry=parseInt(this.getValue(".treedraw_first")),Number.isInteger(e.firstentry)||delete e.firstentry),m(this.drawid),e.drawid=this.drawid,e.progress=j.bind(e),b(this.local_tree,e).then(i=>e.progress(i,!0))},s.getDrawOpt=function(){let t="player",e=this.getValue(".treedraw_varexp");return e&&(t+=":"+e),t},s.performDraw=function(){if(this.local_tree)return this.performLocalDraw();let t=this.selectDom(),e=this.url+"/exe.json.gz?compact=3&method=Draw",i=this.getValue(".treedraw_varexp"),r="h_tree_draw",n="",l=i.indexOf(">>");if(l<0)i+=`>>${r}`;else{r=i.slice(l+2),r[0]==="+"&&(r=r.slice(1));let o=r.indexOf("(");o>0&&(r=r.slice(0,o))}if(t.select(".treedraw_more").empty()){let o=this.getValue(".treedraw_cut"),c=this.getValue(".treedraw_number"),f=this.getValue(".treedraw_first");n=this.getValue(".treedraw_opt"),e+=`&prototype="const char*,const char*,Option_t*,Long64_t,Long64_t"&varexp="${i}"&selection="${o}"`,c||(c="TTree::kMaxEntries"),f||(f="0"),e+=`&option="${n}"&nentries=${c}&firstentry=${f}`}else e+=`&prototype="Option_t*"&opt="${i}"`;e+=`&_ret_object_=${r}`;let a=()=>{x(e,"object").then(o=>{m(this.drawid),Z(this.drawid,o,n)})};this.draw_expr=i,this.askey?(this.askey=!1,x(this.url+"/root.json.gz?compact=3","text").then(a)):a()},s.checkResize=function(){B(this.drawid)},s}function re(s,t,e,i){let r=s.findItem(t),n="",l=0,a=s.getTopOnlineItem(r);if(!r||!a)return null;if(i){for(n=r._name;r&&!r._ttree;)r=r._parent;if(!r)return null;t=s.itemFullName(r)}let o=s.getOnlineItemUrl(t);if(!o)return null;let c=a._root_version||400129,f=s.getDisplay();if(!f)return null;let D=f.findFrame(t,!0);if(!D)return null;let te=R(D).attr("id"),d=new y(te);if(r._childs&&!i)for(let _=0;_<r._childs.length;++_){let p=r._childs[_];p&&p._kind&&p._kind.indexOf(k+"TLeaf")===0&&l<2&&(l++>0&&(n+=":"),n+=p._name)}return ee(d),d.configureOnline(t,o,e,c,n),d.showPlayer(),d}function we(s,t){return re(s,t,!0)}function me(s,t){return re(s,t,!1,!0)}function _e(s,t,e){return u(this,null,function*(){let i=t,r=e;if(t._typename===Q?(r={expr:`.${t.func}()`,branch:t.branch},e&&e.indexOf("dump")===0?r.expr+=">>"+e:e&&(r.expr+=e),i=t.branch.$tree):t.$branch?(r={expr:`.${t.fName}${e||""}`,branch:t.$branch},(r.branch.fType===K||r.branch.fType===U)&&(r.expr=e,r.direct_branch=!0),i=t.$branch.$tree):t.$tree?(!e&&t.fStreamerType&&t.fStreamerType!==A&&t.fStreamerType>=q&&t.fStreamerType<=J&&(e="dump"),r={expr:e,branch:t},i=t.$tree):(r||(r="player"),w(r)&&(r={expr:r})),!i)throw Error("No TTree object available for TTree::Draw");if(w(r.expr)){let a=r.expr.indexOf("player");a===0?(r.player=!0,r.expr=r.expr.slice(6),r.expr[0]===":"&&(r.expr=r.expr.slice(1))):a>=0&&a===r.expr.length-6&&(r.player=!0,r.expr=r.expr.slice(0,a),a>0&&r.expr[a-1]===";"&&(r.expr=r.expr.slice(0,a-1)))}let n;r.player?(n=new g(s,t,e),ee(n),n.configureTree(i),n.showPlayer(r),r.drawid=n.drawid):r.drawid=s,r.progress=j.bind(r);let l;if(r.expr==="testio")r.testio=!0,r.showProgress=a=>T(a,-1,()=>{r._break=1}),l=X(i,r);else if(r.expr||r.branch)l=b(i,r);else return n;return l.then(a=>r.progress(a,!0))})}export{me as drawLeafPlayer,_e as drawTree,re as drawTreePlayer,we as drawTreePlayerKey};
