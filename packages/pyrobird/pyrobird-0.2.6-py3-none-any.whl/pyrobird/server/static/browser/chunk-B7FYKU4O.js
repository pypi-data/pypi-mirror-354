import{a as P}from"./chunk-TDJROOWO.js";import"./chunk-O2YOIZWS.js";import"./chunk-C4APR3G7.js";import"./chunk-LGENSGLC.js";import"./chunk-LWQ6XHU3.js";import"./chunk-YC5SGHGH.js";import"./chunk-FYXTN3X2.js";import"./chunk-D3GAWKNQ.js";import"./chunk-K2P6CES6.js";import"./chunk-Z4ZYSIRC.js";import"./chunk-3L3RRFVB.js";import{H as p,I as _,K as M,ha as X}from"./chunk-FVXVO67X.js";import{La as d,eb as g,jb as y,u as m}from"./chunk-KYOHYQWH.js";import{k as x}from"./chunk-KYPE3LET.js";var b=class w extends X{updateObject(t,i){let e=this.getObject();return e._typename!==t._typename?!1:(e!==t&&Object.assign(e,t),i!==void 0&&this.decodeOptions(i),!0)}eval(t,i){let e=i-t.fX;return t._typename==="TSplinePoly3"?t.fY+e*(t.fB+e*(t.fC+e*t.fD)):t._typename==="TSplinePoly5"?t.fY+e*(t.fB+e*(t.fC+e*(t.fD+e*(t.fE+e*t.fF)))):t.fY+e}findX(t){let i=this.getObject(),e=0,n=i.fNp-1;if(t<=i.fXmin)return 0;if(t>=i.fXmax)return n;if(i.fKstep)e=Math.round((t-i.fXmin)/i.fDelta),t<i.fPoly[e].fX?e=Math.max(e-1,0):e<n&&t>i.fPoly[e+1].fX&&++e;else for(;n-e>1;){let a=Math.round((e+n)/2);t>i.fPoly[a].fX?e=a:n=a}return e}createDummyHisto(){let t=this.getObject(),i=0,e=1,n=0,a=1;t.fPoly&&(i=e=t.fPoly[0].fX,n=a=t.fPoly[0].fY,t.fPoly.forEach(s=>{i=Math.min(s.fX,i),e=Math.max(s.fX,e),n=Math.min(s.fY,n),a=Math.max(s.fY,a)}),a>0&&(a*=1+m.fHistTopMargin),n<0&&(n*=1+m.fHistTopMargin));let r=y(d,10);return r.fName=t.fName+"_hist",r.fTitle=t.fTitle,r.fBits|=g,r.fXaxis.fXmin=i,r.fXaxis.fXmax=e,r.fYaxis.fXmin=n,r.fYaxis.fXmax=a,r.fMinimum=n,r.fMaximum=a,r}processTooltipEvent(t){let i=this.getObject(),e=this.getFramePainter()?.getGrFuncs(this.options.second_x,this.options.second_y),n=!1,a,r,s=null,f=0;t===null||!i||!e?n=!0:(a=e.revertAxis("x",t.x),f=this.findX(a),s=i.fPoly[f],r=this.eval(s,a),f<i.fN-1&&Math.abs(i.fPoly[f+1].fX-a)<Math.abs(a-s.fX)&&(s=i.fPoly[++f]),Math.abs(e.grx(s.fX)-t.x)<.5*this.knot_size?(a=s.fX,r=s.fY):(s=null,(a<i.fXmin||a>i.fXmax)&&(n=!0)));let l=this.draw_g?.selectChild(".tooltip_bin"),h=this.lineatt.width+3;if(n||!this.draw_g)return l?.remove(),null;l.empty()&&(l=this.draw_g.append("svg:circle").attr("class","tooltip_bin").style("pointer-events","none").attr("r",h).style("fill","none").call(this.lineatt.func));let o={name:this.getObject().fName,title:this.getObject().fTitle,x:e.grx(a),y:e.gry(r),color1:this.lineatt.color,lines:[],exact:s!==null||Math.abs(e.gry(r)-t.y)<h};o.changed=l.property("current_xx")!==a,o.menu=o.exact,o.menu_dist=Math.sqrt((o.x-t.x)**2+(o.y-t.y)**2),o.changed&&l.attr("cx",Math.round(o.x)).attr("cy",Math.round(o.y)).property("current_xx",a);let c=this.getObjectHint();return c&&o.lines.push(c),o.lines.push(`x = ${e.axisAsText("x",a)}`,`y = ${e.axisAsText("y",r)}`),s!==null&&(o.lines.push(`knot = ${f}`,`B = ${p(s.fB,m.fStatFormat)}`,`C = ${p(s.fC,m.fStatFormat)}`,`D = ${p(s.fD,m.fStatFormat)}`),s.fE!==void 0&&s.fF!==void 0&&o.lines.push(`E = ${p(s.fE,m.fStatFormat)}`,`F = ${p(s.fF,m.fStatFormat)}`)),o}redraw(){let t=this.getObject(),i=this.getFramePainter(),e=i.getGrFuncs(this.options.second_x,this.options.second_y),n=i.getFrameWidth(),a=i.getFrameHeight();if(this.createG(!0),this.knot_size=5,this.createAttLine({attr:t}),this.options.Line||this.options.Curve){let r=Math.max(10,t.fNpx),s=[],f=Math.max(e.scale_xmin,t.fXmin),l=Math.min(e.scale_xmax,t.fXmax),h=this.findX(f);i.logx&&(f=Math.log(f),l=Math.log(l));for(let o=0;o<r;++o){let c=f+(l-f)/r*(o-1);for(i.logx&&(c=Math.exp(c));h<t.fNp-1&&c>t.fPoly[h+1].fX;)++h;let u=this.eval(t.fPoly[h],c);s.push({x:c,y:u,grx:e.grx(c),gry:e.gry(u)})}this.draw_g.append("svg:path").attr("class","line").attr("d",M(s)).style("fill","none").call(this.lineatt.func)}if(this.options.Mark){let r="";this.createAttMarker({attr:t}),this.markeratt.resetPos(),this.knot_size=this.markeratt.getFullSize();for(let s=0;s<t.fPoly.length;s++){let f=t.fPoly[s],l=e.grx(f.fX);if(l>-this.knot_size&&l<n+this.knot_size){let h=e.gry(f.fY);h>-this.knot_size&&h<a+this.knot_size&&(r+=this.markeratt.create(l,h))}}r&&this.draw_g.append("svg:path").attr("d",r).call(this.markeratt.func)}}canZoomInside(t){return t!=="x"?!1:!!this.getObject()}decodeOptions(t){let i=new _(t);this.options||(this.options={});let e=!!this.getMainPainter();Object.assign(this.options,{Same:i.check("SAME"),Line:i.check("L"),Curve:i.check("C"),Mark:i.check("P"),Hopt:"",second_x:!1,second_y:!1}),!this.options.Line&&!this.options.Curve&&!this.options.Mark&&(this.options.Curve=!0),i.check("X+")&&(this.options.Hopt+="X+",this.options.second_x=e),i.check("Y+")&&(this.options.Hopt+="Y+",this.options.second_y=e),this.storeDrawOpt(t)}static draw(t,i,e){return x(this,null,function*(){let n=new w(t,i);n.decodeOptions(e);let a=!n.getMainPainter(),r=Promise.resolve();if(a||n.options.second_x||n.options.second_y){if(n.options.Same&&a)return console.warn("TSpline painter requires histogram to be drawn"),null;let s=n.createDummyHisto();r=P.draw(t,s,n.options.Hopt)}return r.then(()=>(n.addToPadPrimitives(),n.redraw(),n))})}};export{b as TSplinePainter};
