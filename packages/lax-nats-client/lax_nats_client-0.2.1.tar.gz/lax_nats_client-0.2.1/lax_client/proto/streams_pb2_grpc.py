# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import streams_pb2 as streams__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in streams_temp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StreamManagerStub(object):
    """StreamManager handles stream lifecycle and configuration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateStream = channel.unary_unary(
                '/broker.v1.StreamManager/CreateStream',
                request_serializer=streams__pb2.CreateStreamRequest.SerializeToString,
                response_deserializer=streams__pb2.Stream.FromString,
                _registered_method=True)
        self.GetStreamInfo = channel.unary_unary(
                '/broker.v1.StreamManager/GetStreamInfo',
                request_serializer=streams__pb2.GetStreamInfoRequest.SerializeToString,
                response_deserializer=streams__pb2.StreamInfo.FromString,
                _registered_method=True)
        self.UpdateStream = channel.unary_unary(
                '/broker.v1.StreamManager/UpdateStream',
                request_serializer=streams__pb2.UpdateStreamRequest.SerializeToString,
                response_deserializer=streams__pb2.Stream.FromString,
                _registered_method=True)
        self.DeleteStream = channel.unary_unary(
                '/broker.v1.StreamManager/DeleteStream',
                request_serializer=streams__pb2.DeleteStreamRequest.SerializeToString,
                response_deserializer=streams__pb2.DeleteStreamResponse.FromString,
                _registered_method=True)
        self.ListStreams = channel.unary_unary(
                '/broker.v1.StreamManager/ListStreams',
                request_serializer=streams__pb2.ListStreamsRequest.SerializeToString,
                response_deserializer=streams__pb2.ListStreamsResponse.FromString,
                _registered_method=True)


class StreamManagerServicer(object):
    """StreamManager handles stream lifecycle and configuration
    """

    def CreateStream(self, request, context):
        """Create a new stream with specified configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamInfo(self, request, context):
        """Get stream information and statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStream(self, request, context):
        """Update stream configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStream(self, request, context):
        """Delete a stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreams(self, request, context):
        """List all streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStream,
                    request_deserializer=streams__pb2.CreateStreamRequest.FromString,
                    response_serializer=streams__pb2.Stream.SerializeToString,
            ),
            'GetStreamInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStreamInfo,
                    request_deserializer=streams__pb2.GetStreamInfoRequest.FromString,
                    response_serializer=streams__pb2.StreamInfo.SerializeToString,
            ),
            'UpdateStream': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStream,
                    request_deserializer=streams__pb2.UpdateStreamRequest.FromString,
                    response_serializer=streams__pb2.Stream.SerializeToString,
            ),
            'DeleteStream': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStream,
                    request_deserializer=streams__pb2.DeleteStreamRequest.FromString,
                    response_serializer=streams__pb2.DeleteStreamResponse.SerializeToString,
            ),
            'ListStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStreams,
                    request_deserializer=streams__pb2.ListStreamsRequest.FromString,
                    response_serializer=streams__pb2.ListStreamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'broker.v1.StreamManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('broker.v1.StreamManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StreamManager(object):
    """StreamManager handles stream lifecycle and configuration
    """

    @staticmethod
    def CreateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.StreamManager/CreateStream',
            streams__pb2.CreateStreamRequest.SerializeToString,
            streams__pb2.Stream.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.StreamManager/GetStreamInfo',
            streams__pb2.GetStreamInfoRequest.SerializeToString,
            streams__pb2.StreamInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.StreamManager/UpdateStream',
            streams__pb2.UpdateStreamRequest.SerializeToString,
            streams__pb2.Stream.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.StreamManager/DeleteStream',
            streams__pb2.DeleteStreamRequest.SerializeToString,
            streams__pb2.DeleteStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.StreamManager/ListStreams',
            streams__pb2.ListStreamsRequest.SerializeToString,
            streams__pb2.ListStreamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
