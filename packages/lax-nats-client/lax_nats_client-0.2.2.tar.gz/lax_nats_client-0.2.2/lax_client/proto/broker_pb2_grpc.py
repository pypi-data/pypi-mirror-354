# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import broker_pb2 as broker__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in broker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrokerServiceStub(object):
    """BrokerService provides high-throughput message publishing and subscribing
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/broker.v1.BrokerService/Publish',
                request_serializer=broker__pb2.PublishRequest.SerializeToString,
                response_deserializer=broker__pb2.PublishResponse.FromString,
                _registered_method=True)
        self.BatchPublish = channel.unary_unary(
                '/broker.v1.BrokerService/BatchPublish',
                request_serializer=broker__pb2.BatchPublishRequest.SerializeToString,
                response_deserializer=broker__pb2.BatchPublishResponse.FromString,
                _registered_method=True)
        self.StreamPublish = channel.stream_stream(
                '/broker.v1.BrokerService/StreamPublish',
                request_serializer=broker__pb2.PublishRequest.SerializeToString,
                response_deserializer=broker__pb2.PublishAck.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/broker.v1.BrokerService/Subscribe',
                request_serializer=broker__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=broker__pb2.Message.FromString,
                _registered_method=True)
        self.CreateConsumerGroup = channel.unary_unary(
                '/broker.v1.BrokerService/CreateConsumerGroup',
                request_serializer=broker__pb2.ConsumerGroupRequest.SerializeToString,
                response_deserializer=broker__pb2.ConsumerGroup.FromString,
                _registered_method=True)


class BrokerServiceServicer(object):
    """BrokerService provides high-throughput message publishing and subscribing
    """

    def Publish(self, request, context):
        """Publish a single message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchPublish(self, request, context):
        """Batch publish multiple messages for higher throughput
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamPublish(self, request_iterator, context):
        """Stream publish for continuous high-volume publishing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe to messages from a stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConsumerGroup(self, request, context):
        """Create or join a consumer group for load balancing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=broker__pb2.PublishRequest.FromString,
                    response_serializer=broker__pb2.PublishResponse.SerializeToString,
            ),
            'BatchPublish': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchPublish,
                    request_deserializer=broker__pb2.BatchPublishRequest.FromString,
                    response_serializer=broker__pb2.BatchPublishResponse.SerializeToString,
            ),
            'StreamPublish': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamPublish,
                    request_deserializer=broker__pb2.PublishRequest.FromString,
                    response_serializer=broker__pb2.PublishAck.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=broker__pb2.SubscribeRequest.FromString,
                    response_serializer=broker__pb2.Message.SerializeToString,
            ),
            'CreateConsumerGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConsumerGroup,
                    request_deserializer=broker__pb2.ConsumerGroupRequest.FromString,
                    response_serializer=broker__pb2.ConsumerGroup.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'broker.v1.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('broker.v1.BrokerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """BrokerService provides high-throughput message publishing and subscribing
    """

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.BrokerService/Publish',
            broker__pb2.PublishRequest.SerializeToString,
            broker__pb2.PublishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchPublish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.BrokerService/BatchPublish',
            broker__pb2.BatchPublishRequest.SerializeToString,
            broker__pb2.BatchPublishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamPublish(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/broker.v1.BrokerService/StreamPublish',
            broker__pb2.PublishRequest.SerializeToString,
            broker__pb2.PublishAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/broker.v1.BrokerService/Subscribe',
            broker__pb2.SubscribeRequest.SerializeToString,
            broker__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateConsumerGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/broker.v1.BrokerService/CreateConsumerGroup',
            broker__pb2.ConsumerGroupRequest.SerializeToString,
            broker__pb2.ConsumerGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
