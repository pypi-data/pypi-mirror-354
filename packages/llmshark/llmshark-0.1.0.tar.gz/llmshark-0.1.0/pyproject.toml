[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "llmshark"
version = "0.1.0"
description = "Comprehensive analysis tool for LLM streaming traffic from PCAP files"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Anthony Casagrande" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Networking :: Monitoring",
]
keywords = ["llm", "streaming", "analysis", "pcap", "wireshark", "http", "sse"]
requires-python = ">=3.10"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "scapy>=2.5.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "scipy>=1.10.0",
    "httpx>=0.24.0",
    "python-dateutil>=2.8.0",
    "tabulate>=0.9.0",
    # Advanced visualization dependencies
    "bokeh>=3.2.0",
    "altair>=5.0.0",
    "streamlit>=1.28.0",
    "dash>=2.14.0",
    "dash-bootstrap-components>=1.5.0",
    "kaleido>=0.2.1",
    "scikit-learn>=1.3.0",
    "statsmodels>=0.14.0",
    "networkx>=3.1.0",
    "pillow>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
]

[project.scripts]
llmshark = "llmshark.cli:main"

[project.urls]
Homepage = "https://github.com/llmshark/llmshark"
Documentation = "https://llmshark.readthedocs.io"
Repository = "https://github.com/llmshark/llmshark"
Issues = "https://github.com/llmshark/llmshark/issues"

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PIE", # flake8-pie
    "A", # flake8-builtins
    "COM", # flake8-commas
    "S", # flake8-bandit
    "N", # pep8-naming
]
ignore = [
    "S101", # assert-used (we use assert in tests)
    "COM812", # trailing-comma-missing (conflicts with black)
    "ARG002", # unused-method-argument (common in interfaces)
    "E501", # line-too-long (we use long lines in some strings for readability)
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]

[tool.ruff.isort]
known-first-party = ["llmshark"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scapy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=llmshark",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that should not run in CI",
]

# Coverage configuration
[tool.coverage.run]
source = ["llmshark"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 