import { Layer } from "./layer";
import { IExKnot, IKnot, IMapGrammar } from "./interfaces";
import { LayerManager } from "./layer-manager";
export declare class Knot {
    protected _physicalLayer: Layer;
    protected _thematicData: number[][] | null;
    protected _knotSpecification: IKnot | IExKnot;
    protected _id: string;
    protected _shaders: any;
    protected _visible: boolean;
    protected _grammarInterpreter: any;
    protected _maps: any;
    protected _cmap: string;
    protected _range: number[];
    protected _domain: number[];
    protected _scale: string;
    constructor(id: string, physicalLayer: Layer, knotSpecification: IKnot | IExKnot, grammarInterpreter: any, visible: boolean);
    get id(): string;
    get visible(): boolean;
    get shaders(): any;
    get physicalLayer(): Layer;
    get knotSpecification(): IKnot | IExKnot;
    get thematicData(): number[][] | null;
    get cmap(): string;
    get range(): number[];
    get domain(): number[];
    get scale(): string;
    set visible(visible: boolean);
    set thematicData(thematicData: number[][] | null);
    addMap(map: any, viewId: number): void;
    render(glContext: WebGL2RenderingContext, camera: any, viewId: number): void;
    updateTimestep(timestep: number, viewId: number): void;
    overwriteSelectedElements(externalSelected: number[], viewId: number): void;
    loadShaders(glContext: WebGL2RenderingContext, centroid: (number[] | Float32Array) | undefined, viewId: number): void;
    addMeshFunction(layerManager: LayerManager): void;
    processThematicData(layerManager: LayerManager): void;
    private _getPickingArea;
    interact(glContext: WebGL2RenderingContext, eventName: string, mapGrammar: IMapGrammar, cursorPosition?: number[] | null, brushingPivot?: number[] | null, eventObject?: any | null): Promise<void>;
}
