import { Shader } from "./shader";
import { Mesh } from "./mesh";
import { IExKnot, IKnot } from "./interfaces";
export declare class ShaderFlatColor extends Shader {
    protected _coords: number[];
    protected _indices: number[];
    protected _coordsPerComp: number[];
    protected _globalColor: number[];
    protected _glCoords: WebGLBuffer | null;
    protected _glIndices: WebGLBuffer | null;
    protected _coordsDirty: boolean;
    protected _coordsId: number;
    protected _uModelViewMatrix: WebGLUniformLocation | null;
    protected _uProjectionMatrix: WebGLUniformLocation | null;
    protected _uWorldOrigin: WebGLUniformLocation | null;
    protected _uGlobalColor: WebGLUniformLocation | null;
    protected _filtered: number[];
    constructor(glContext: WebGL2RenderingContext, color: number[], grammarInterpreter: any);
    updateShaderGeometry(mesh: Mesh, centroid: (number[] | Float32Array) | undefined, viewId: number): void;
    updateShaderData(mesh: Mesh, knot: IKnot | IExKnot, currentTimestepFunction?: number): void;
    updateShaderUniforms(data: any): void;
    setHighlightElements(coordinates: number[], value: boolean): void;
    setFiltered(filtered: number[]): void;
    createUniforms(glContext: WebGL2RenderingContext): void;
    bindUniforms(glContext: WebGL2RenderingContext, camera: any): void;
    createTextures(glContext: WebGL2RenderingContext): void;
    bindTextures(glContext: WebGL2RenderingContext): void;
    createVertexArrayObject(glContext: WebGL2RenderingContext): void;
    bindVertexArrayObject(glContext: WebGL2RenderingContext, mesh: Mesh): void;
    renderPass(glContext: WebGL2RenderingContext, glPrimitive: number, camera: any, mesh: Mesh, zOrder: number): void;
}
