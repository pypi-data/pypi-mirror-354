import { Mesh } from "./mesh";
import { IExKnot, IKnot } from "./interfaces";
import { AuxiliaryShaderTriangles } from "./auxiliaryShaderTriangles";
export declare class ShaderSmoothColorMap extends AuxiliaryShaderTriangles {
    protected _coords: number[];
    protected _normals: number[];
    protected _function: number[][];
    protected _currentTimestepFunction: number;
    protected _indices: number[];
    protected _discardFuncInterval: number[];
    protected _coordsPerComp: number[];
    private _colorMap;
    private _colorMapReverse;
    private _range;
    private _domain;
    private _providedDomain;
    private _scale;
    protected _glCoords: WebGLBuffer | null;
    protected _glNormals: WebGLBuffer | null;
    protected _glFunction: WebGLBuffer | null;
    protected _glIndices: WebGLBuffer | null;
    protected _gldiscardFuncInterval: WebGLBuffer | null;
    protected _glColorOrPicked: WebGLBuffer | null;
    protected _glFiltered: WebGLBuffer | null;
    protected _coordsDirty: boolean;
    protected _functionDirty: boolean;
    protected _colorMapDirty: boolean;
    protected _colorOrPickedDirty: boolean;
    protected _overwriteDirty: boolean;
    protected _filteredDirty: boolean;
    protected _coordsId: number;
    protected _normalsId: number;
    protected _functionId: number;
    protected _discardFuncIntervalId: number;
    protected _colorOrPickedId: number;
    protected _filteredId: number;
    protected _uModelViewMatrix: WebGLUniformLocation | null;
    protected _uProjectionMatrix: WebGLUniformLocation | null;
    protected _uWorldOrigin: WebGLUniformLocation | null;
    protected _uColorMap: WebGLUniformLocation | null;
    protected _texColorMap: WebGLTexture | null;
    protected _colorOrPicked: number[];
    protected _currentPickedElement: number[];
    protected _filtered: number[];
    constructor(glContext: WebGL2RenderingContext, grammarInterpreter: any, colorMap?: string, range?: number[], domain?: number[], scale?: string);
    get currentPickedElement(): number[];
    set currentPickedElement(currentPickedElement: number[]);
    updateShaderGeometry(mesh: Mesh, centroid: (number[] | Float32Array) | undefined, viewId: number): void;
    setFiltered(filtered: number[]): void;
    normalizeFunction(mesh: Mesh, knot: IKnot | IExKnot): void;
    updateShaderData(mesh: Mesh, knot: IKnot | IExKnot, currentTimestepFunction?: number): void;
    updateShaderUniforms(data: any): void;
    createUniforms(glContext: WebGL2RenderingContext): void;
    bindUniforms(glContext: WebGL2RenderingContext, camera: any): void;
    createTextures(glContext: WebGL2RenderingContext): void;
    bindTextures(glContext: WebGL2RenderingContext): void;
    createVertexArrayObject(glContext: WebGL2RenderingContext): void;
    bindVertexArrayObject(glContext: WebGL2RenderingContext, mesh: Mesh): void;
    overwriteSelectedElements(externalSelected: number[]): void;
    setHighlightElements(coordinates: number[], value: boolean): void;
    clearPicking(): void;
    setPickedObject(ids: number[]): void;
    renderPass(glContext: WebGL2RenderingContext, glPrimitive: number, camera: any, mesh: Mesh, zOrder: number): void;
}
