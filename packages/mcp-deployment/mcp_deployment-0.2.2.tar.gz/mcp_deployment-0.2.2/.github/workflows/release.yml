name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog (simplified version)
        echo "## Changes in v$VERSION" > CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.tmp
        echo "" >> CHANGELOG.tmp
        echo "**Full Changelog**: https://github.com/$GITHUB_REPOSITORY/compare/$(git describe --tags --abbrev=0 HEAD^)...v$VERSION" >> CHANGELOG.tmp

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MCPManager v${{ steps.changelog.outputs.VERSION }}
        body_path: CHANGELOG.tmp
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/mcpmanager-*.tar.gz
        asset_name: mcpmanager-source.tar.gz
        asset_content_type: application/gzip

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          mcpmanager/mcpmanager
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm-release:
    name: Helm Chart Release
    runs-on: ubuntu-latest
    needs: create-release
    if: contains(github.repository, 'mcpmanager')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Run chart-releaser
      uses: helm/chart-releaser-action@v1.5.0
      with:
        charts_dir: deploy/charts
      env:
        CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [create-release, build-and-publish, docker-release, helm-release]
    if: always() && needs.create-release.result == 'success'

    steps:
    - name: Extract version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Notify success
      run: |
        echo "🎉 Successfully released MCPManager v$VERSION!"
        echo "📦 PyPI: https://pypi.org/project/mcpmanager/$VERSION/"
        echo "🐳 Docker Hub: https://hub.docker.com/r/mcpmanager/mcpmanager/tags"
        echo "📋 Release Notes: https://github.com/$GITHUB_REPOSITORY/releases/tag/v$VERSION"