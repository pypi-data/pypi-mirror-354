name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.py'
      - 'mkdocs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'src/**/*.py'
      - 'mkdocs.yml'

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-swagger-ui-tag

    - name: Create docs structure
      run: |
        mkdir -p docs
        
        # Create main documentation files if they don't exist
        if [ ! -f "docs/index.md" ]; then
          echo "# MCPManager Documentation" > docs/index.md
          echo "" >> docs/index.md
          echo "Welcome to MCPManager documentation!" >> docs/index.md
        fi
        
        if [ ! -f "docs/installation.md" ]; then
          echo "# Installation Guide" > docs/installation.md
          echo "" >> docs/installation.md
          echo "## Basic Installation" >> docs/installation.md
          echo "\`\`\`bash" >> docs/installation.md
          echo "pip install mcpmanager" >> docs/installation.md
          echo "\`\`\`" >> docs/installation.md
        fi
        
        if [ ! -f "docs/api.md" ]; then
          echo "# API Reference" > docs/api.md
          echo "" >> docs/api.md
          echo "::: mcpmanager" >> docs/api.md
        fi

    - name: Create mkdocs.yml if not exists
      run: |
        if [ ! -f "mkdocs.yml" ]; then
          cat > mkdocs.yml << EOF
        site_name: MCPManager Documentation
        site_description: Secure MCP Server Management Platform
        site_author: Akram Sheriff
        site_url: https://mcpmanager.github.io/mcpmanager
        
        repo_name: mcpmanager/mcpmanager
        repo_url: https://github.com/mcpmanager/mcpmanager
        
        theme:
          name: material
          palette:
            - scheme: default
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-7
                name: Switch to dark mode
            - scheme: slate
              primary: blue
              accent: blue
              toggle:
                icon: material/brightness-4
                name: Switch to light mode
          features:
            - navigation.tabs
            - navigation.sections
            - navigation.expand
            - navigation.top
            - search.highlight
            - search.share
            - content.code.annotate
        
        nav:
          - Home: index.md
          - Installation: installation.md
          - User Guide:
            - Quick Start: quickstart.md
            - Configuration: configuration.md
            - CLI Reference: cli.md
          - API Reference: api.md
          - Security: security.md
          - Contributing: contributing.md
        
        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  options:
                    docstring_style: google
        
        markdown_extensions:
          - admonition
          - pymdownx.details
          - pymdownx.superfences
          - pymdownx.highlight:
              anchor_linenums: true
          - pymdownx.inlinehilite
          - pymdownx.snippets
          - pymdownx.tabbed:
              alternate_style: true
          - toc:
              permalink: true
        EOF
        fi

    - name: Build documentation
      run: mkdocs build --strict

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-swagger-ui-tag

    - name: Create docs structure
      run: |
        mkdir -p docs
        
        # Create main documentation files
        cat > docs/index.md << 'EOF'
        # MCPManager Documentation
        
        Welcome to MCPManager - the comprehensive platform for managing MCP (Model Context Protocol) servers with enterprise-grade security and observability.
        
        ## Features
        
        - **Multi-Runtime Support**: Docker, Podman, Kubernetes
        - **Advanced Security**: Permission profiles, image verification, CA management
        - **Observability**: OpenTelemetry integration with metrics and tracing
        - **Protocol Schemes**: Direct uvx://, npx://, go:// execution
        - **Enterprise Ready**: Kubernetes operator and enterprise features
        
        ## Quick Start
        
        ```bash
        # Install MCPManager
        pip install mcpmanager
        
        # Enable auto-discovery
        mcpm config auto-discovery enable
        
        # Run an MCP server
        mcpm run fetch
        ```
        
        ## Getting Help
        
        - [GitHub Issues](https://github.com/mcpmanager/mcpmanager/issues)
        - [Discussions](https://github.com/mcpmanager/mcpmanager/discussions)
        - [Security Issues](mailto:security@mcpmanager.io)
        EOF
        
        cat > docs/quickstart.md << 'EOF'
        # Quick Start Guide
        
        This guide will help you get started with MCPManager in minutes.
        
        ## Installation
        
        ```bash
        pip install mcpmanager
        ```
        
        ## Basic Usage
        
        ```bash
        # Enable client auto-discovery
        mcpm config auto-discovery enable
        
        # Run an MCP server
        mcpm run fetch
        
        # List running servers
        mcpm list
        
        # Stop a server
        mcpm stop fetch
        ```
        
        ## Next Steps
        
        - [Configuration Guide](configuration.md)
        - [CLI Reference](cli.md)
        - [Security Features](security.md)
        EOF
        
        cat > docs/configuration.md << 'EOF'
        # Configuration Guide
        
        MCPManager uses a YAML configuration file located at `~/.mcpmanager/config.yaml`.
        
        ## Default Configuration
        
        ```yaml
        auto_discovery:
          enabled: true
          registry_url: "https://registry.mcpmanager.io"
        
        security:
          verify_images: true
          default_permission_profile: "restricted"
        
        runtime:
          default: "docker"
        
        secrets:
          provider: "encrypted"
        ```
        
        ## Environment Variables
        
        - `MCPM_CONFIG_DIR`: Configuration directory
        - `MCPM_RUNTIME`: Default runtime (docker, podman, kubernetes)
        - `MCPM_REGISTRY_URL`: Registry URL
        - `MCPM_VERIFY_IMAGES`: Enable image verification
        EOF
        
        cat > docs/cli.md << 'EOF'
        # CLI Reference
        
        Complete reference for the MCPManager CLI.
        
        ## Server Management
        
        ```bash
        mcpm run <server>                # Run server
        mcpm stop <server>               # Stop server
        mcpm restart <server>            # Restart server
        mcpm list                        # List servers
        mcpm logs <server>               # View logs
        ```
        
        ## Configuration
        
        ```bash
        mcpm config auto-discovery enable   # Enable auto-discovery
        mcpm config registry set <url>      # Set registry URL
        mcpm config ca-cert set <path>      # Set CA certificate
        ```
        
        ## Secrets Management
        
        ```bash
        mcpm secret set <name>           # Set secret
        mcpm secret get <name>           # Get secret
        mcpm secret list                 # List secrets
        mcpm secret delete <name>        # Delete secret
        ```
        
        ## Permission Profiles
        
        ```bash
        mcpm permission list             # List profiles
        mcpm permission create <name>    # Create profile
        mcpm permission validate <name>  # Validate profile
        ```
        EOF
        
        cat > docs/security.md << 'EOF'
        # Security Features
        
        MCPManager provides comprehensive security features for production deployment.
        
        ## Permission Profiles
        
        Built-in security templates:
        
        - **minimal**: Bare minimum permissions
        - **restricted**: Limited permissions for untrusted servers
        - **standard**: Balanced permissions for most use cases
        - **privileged**: Extended permissions for trusted servers
        
        ## Image Verification
        
        Automatic verification using Sigstore:
        
        ```bash
        # Enable verification
        mcpm config verify-images enable
        
        # Verify specific image
        mcpm verify <image>
        ```
        
        ## Certificate Management
        
        Complete certificate lifecycle:
        
        ```bash
        mcpm cert import <path>          # Import certificate
        mcpm cert list                   # List certificates
        mcpm cert validate <name>        # Validate certificate
        ```
        
        ## Secrets Management
        
        Multiple backends supported:
        
        - **encrypted**: Encrypted local storage
        - **1password**: 1Password integration
        - **none**: Plain text (development only)
        EOF
        
        cat > docs/contributing.md << 'EOF'
        # Contributing Guide
        
        Thank you for your interest in contributing to MCPManager!
        
        ## Development Setup
        
        ```bash
        git clone https://github.com/mcpmanager/mcpmanager.git
        cd mcpmanager
        pip install -e ".[dev]"
        ```
        
        ## Running Tests
        
        ```bash
        pytest tests/
        ```
        
        ## Code Quality
        
        ```bash
        black src/ tests/
        isort src/ tests/
        flake8 src/ tests/
        mypy src/mcpmanager
        ```
        
        ## Submitting Changes
        
        1. Fork the repository
        2. Create a feature branch
        3. Make your changes
        4. Add tests
        5. Submit a pull request
        
        ## Code of Conduct
        
        Please read and follow our [Code of Conduct](https://github.com/mcpmanager/mcpmanager/blob/main/CODE_OF_CONDUCT.md).
        EOF

    - name: Deploy to GitHub Pages
      run: mkdocs gh-deploy --force

    - name: Notify deployment
      run: |
        echo "📚 Documentation deployed to: https://mcpmanager.github.io/mcpmanager"