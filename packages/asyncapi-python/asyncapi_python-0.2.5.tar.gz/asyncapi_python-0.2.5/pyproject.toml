[tool.poetry]
name = "asyncapi-python"
version = "0.2.5"
license = "Apache-2.0"
description = "Easily generate type-safe and async Python applications from AsyncAPI 3 specifications."
authors = ["Yaroslav Petrov <yaroslav.v.petrov@gmail.com>"]
readme = "README.md"
packages = [
    { include = "asyncapi_python_pants", from = "src" },
    { include = "asyncapi_python_codegen", from = "src" },
    { include = "asyncapi_python", from = "src" },
]

[tool.poetry.scripts]
asyncapi-python-codegen = "asyncapi_python_codegen:app"

[tool.poetry.extras]
codegen = [
    "jinja2",
    "typer",
    "asyncapi_python_codegen",
    "pyyaml",
    "datamodel-code-generator",
    "black",
]
amqp = ["aio-pika"]

[tool.poetry.dependencies]
python = ">=3.9,<3.14"
pydantic = ">=2"
pytz = "*"
jinja2 = { version = "^3.1.4", optional = true }
typer = { extras = ["all"], version = "^0.12.5", optional = true }
datamodel-code-generator = { extras = [
    "http",
], version = "^0.26.4", optional = true }
aio-pika = { version = "*", optional = true }
pyyaml = { version = "*", optional = true }
black = { version = "*", optional = true }

[tool.poetry.group.dev.dependencies]
black = "*"
mypy = "*"
isort = "*"
types-pyyaml = "*"
pytest = "*"
types-pytz = "*"
pytest-asyncio = "*"
pex = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
