Metadata-Version: 2.4
Name: alita-mcp
Version: 0.1.9
Summary: ELITEA MCP Client
Author-email: Artem Rozumenko <artyom.rozumenko@gmail.com>
Maintainer-email: Aliaksei Breilian <Aliaksei_Breilian@epam.com>, Mikalai Biazruchka <Mikalai_Biazruchka@epam.com>
License-Expression: Apache-2.0
Project-URL: Homepage, https://github.com/ProjectAlita/alita-mcp-client
Project-URL: Issues, https://github.com/ProjectAlita/alita-mcp-client/issues
Project-URL: Documentation, https://github.com/ProjectAlita/alita-mcp-client#readme
Project-URL: Repository, https://github.com/ProjectAlita/alita-mcp-client.git
Keywords: client,mcp,alita
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: appdirs>=1.4.4
Requires-Dist: requests~=2.32.3
Requires-Dist: pytest~=8.3.5
Requires-Dist: mcp~=1.6.0
Requires-Dist: pydantic<3.0,>=2.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: python-socketio[client]~=5.13.0
Requires-Dist: websocket-client~=1.8.0
Requires-Dist: pystray>=0.19.0
Requires-Dist: pillow>=8.0.0
Requires-Dist: pyobjc-framework-Cocoa>=8.0; sys_platform == "darwin"
Dynamic: license-file

# Alita MCP Client

A command-line client for interacting with the MCP system.

## Installation

### Using pipx (Recommended)

[pipx](https://pypa.github.io/pipx/) installs the package in an isolated environment and makes the CLI commands available globally.

#### macOS

```bash
# Install pipx if not already installed
brew install pipx
pipx ensurepath

# Install alita-mcp
pipx install alita-mcp
```

Add the following to your `~/.zprofile` or `~/.bash_profile`:

```bash
# For zsh (~/.zprofile)
export PATH="$PATH:$HOME/.local/bin"
export PYTHONPATH="$PYTHONPATH:$HOME/.local/pipx/venvs/alita-mcp/lib/python3.x/site-packages"

# For bash (~/.bash_profile)
export PATH="$PATH:$HOME/.local/bin"
export PYTHONPATH="$PYTHONPATH:$HOME/.local/pipx/venvs/alita-mcp/lib/python3.x/site-packages"
```

Then reload your profile:

```bash
source ~/.zprofile  # or source ~/.bash_profile for bash
```

#### Windows

```powershell
# Install pipx if not already installed
python -m pip install --user pipx
python -m pipx ensurepath

# Install alita-mcp
pipx install alita-mcp
```

### From PyPI

```bash
pip install alita-mcp
```

### From Source

```bash
git clone https://github.com/yourusername/alita-mcp-client.git
cd alita-mcp-client
pip install -e .
```

## Configuration

### Bootstrap Configuration

Before using the client, you need to bootstrap it with your deployment URL and authentication token. You can do this in two ways:

#### Interactive Mode

```bash
alita-mcp bootstrap
```

First, this will prompt you to enter your deployment URL and authentication token step by step.  
Next, you will be asked to provide details for MCP servers.

#### Command Line Parameters

```bash
alita-mcp bootstrap --deployment_url https://api.example.com --auth_token YOUR_TOKEN --host 0.0.0.0 --port 8000
```

### Configuration Storage

The client stores configuration in your operating system's app data directory:

- Windows: `%APPDATA%\alita-mcp-client`
- macOS: `~/Library/Application Support/alita-mcp-client`
- Linux: `~/.config/alita-mcp-client`

### Configuration File Location

The configuration file is stored in the following locations:
- Windows: `%APPDATA%/alita-mcp-client`
- macOS: `~/Library/Application Support/alita-mcp-client`
- Linux: `~/.config/alita-mcp-client`

## System Tray Application

Alita MCP Client includes a system tray application that provides easy access to configuration and server management without GUI dependencies.

### Features

- **System Tray Icon**: Sits in your system tray for quick access
- **Configuration Management**: Open config files directly, run terminal-based bootstrap, and view configuration
- **Server Control**: Start and stop MCP servers with options for embedded or daemon mode
- **Real-time Status**: Visual feedback for server status changes with mode indicators
- **Cross-platform**: Works on Windows, macOS, and Linux (no GUI dependencies required)
- **macOS Integration**: Automatically hides from dock and runs as background-only tray application

### Starting the Tray Application

```bash
# Using the main CLI
alita-mcp tray

# Running directly
python -m alita_mcp.tray
```

### Tray Menu Features

Right-click on the tray icon to access:

- **Server Control** (when configured):
  - **Start MCP Server (Embedded)**: Start servers in the tray process
  - **Start MCP Server (Daemon)**: Start servers as background daemon (`alita-mcp serve --daemon`)
  - **Stop MCP Server**: Stop running servers (shows current mode)
- **Configuration**:
  - **Open Config File**: Open JSON configuration file in your default text editor
  - **Open Config Folder**: Open configuration directory in file manager
  - **Bootstrap (Terminal)**: Run interactive configuration in terminal
  - **View Current Config**: Display current settings in console
- **About**: Application information in console
- **Quit**: Exit the tray application

### Auto-start Setup

See `docs/TRAY_APPLICATION.md` for detailed instructions on setting up the tray application to start automatically on system boot.

## Usage

### Running with stdio Transport (Default)

The standard I/O transport is used by default for communication:

```bash
# Using a specific application within a project (application_id and version_id are optional)
alita-mcp run --project_id YOUR_PROJECT_ID [--app_id YOUR_APP_ID] [--version_id YOUR_VERSION_ID]

# Using all available agents in a project
alita-mcp run --project_id YOUR_PROJECT_ID
```

### Running with SSE Transport

Server-Sent Events (SSE) transport can be used for web-based applications:

```bash
# Using a specific application (application_id and version_id are optional)
alita-mcp run --project_id YOUR_PROJECT_ID [--app_id YOUR_APP_ID] [--version_id YOUR_VERSION_ID] --transport sse --port 8000

# Using all available agents in a project
alita-mcp run --project_id YOUR_PROJECT_ID --transport sse --port 8000
```

This will start the MCP server listening on all interfaces (0.0.0.0) on port 8000 by default. You can customize the host and port during the bootstrap process.

## Stateful vs Stateless Sessions

The client supports both stateful and stateless MCP server sessions:

### Stateless (Default)
- Each tool call creates a fresh connection
- Server state is reset between calls  
- Best for file operations, API calls, simple commands

### Stateful
- Maintains persistent connections between tool calls
- Server state persists (e.g., open browser sessions)
- Best for Playwright automation, database connections
- Configure by adding `"stateful": true` to server config

For detailed information, see [STATEFUL_SESSIONS.md](STATEFUL_SESSIONS.md).

## Publishing to PyPI

To build and publish the package to PyPI:

```bash
# Install build tools
pip install build twine

# Build the package
python -m build

# Upload to PyPI
twine upload dist/*
```

## Development

For development:

```bash
# Install in editable mode
pip install -e .

# Install development dependencies
pip install -e ".[dev]"
```
