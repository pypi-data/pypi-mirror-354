[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kodx"
version = "0.2.0"
description = "Docker-based code execution environment with LLM integration"
readme = "README.md"
requires-python = ">=3.11"
license = "Apache-2.0"
authors = [
    {name = "Jonathan Chang"},
]
urls = {repository = "https://github.com/cccntu/kodx"}
keywords = ["llm", "docker", "code", "execution", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "llmproc>=0.9.5",
    "docker>=6.0.0",
    "click>=8.1.8",
    "typer>=0.15.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]

[project.optional-dependencies]
anthropic = [
    "anthropic>=0.52.0",
]
openai = [
    "openai>=1.70.0",
]
vertex = [
    "google-cloud-aiplatform>=1.87.0",
]
gemini = [
    "google-genai>=1.9.0",
]
all = [
    "anthropic>=0.52.0",
    "openai>=1.70.0",
    "google-cloud-aiplatform>=1.87.0",
    "google-genai>=1.9.0",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-anyio>=0.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.9.9",
    "jinja2>=3.0.0",
]

[project.scripts]
kodx = "kodx.cli:app"

[tool.hatch.version]
path = "src/kodx/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/kodx"]

[tool.hatch.build.targets.wheel.sources]
"src/kodx/programs" = "kodx/programs"
"src/kodx/container_files" = "kodx/container_files"

[tool.ruff]
line-length = 120
target-version = "py311"
exclude = ["tests/"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle warnings
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "B", # flake8-bugbear
]
ignore = [
    "D203",
    "D212",
    "E501",  # Line too long
    "B904",  # Use 'raise from' in exception handling
    "F401",  # Unused imports
    "F821",  # Undefined names
    "N811",  # Constant imported as non-constant
    "D102",  # Missing docstring in public method
    # The following are primarily in test files and examples
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D205",  # 1 blank line required between summary line and description
    "D415",  # First line should end with punctuation
    "N806",  # Variable in function should be lowercase
    "UP007",  # Use X | Y for type annotations
    "F841",  # Unused variables (primarily in tests)
    "UP022",  # Prefer capture_output over stdout/stderr=PIPE (in tests)
    # Additional ignores
    "B007",  # Unused loop control variable
    "W291",  # Trailing whitespace
    "W293",  # Blank line contains whitespace
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E402", "F811"]  # Allow imports not at top and fixture redefinition in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --tb=short --color=no"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "docker: marks tests that require Docker daemon",
    "network: marks tests that require network access",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "performance: marks performance benchmark tests",
    "api: marks tests that require LLM API access",
    "llm: marks tests that require LLM API calls",
    "workflow: end-to-end workflow tests (slow and potentially redundant)"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
