# coding: utf-8

"""
    Autoenhance API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderHDRMerge(BaseModel):
    """
    OrderHDRMerge
    """ # noqa: E501
    ai_version: Optional[StrictStr] = Field(default=None, description="The version of the AI model to use for enhancing the image. Versions ending in an .x will use the latest minor version as soon as it's published.")
    cloud_type: Optional[StrictStr] = Field(default=None, description="The type of clouds in the new sky to replace the original sky with. Options include: CLEAR, LOW_CLOUD, HIGH_CLOUD")
    enhance: Optional[StrictBool] = Field(default=True, description="Whether to enhance the image.")
    enhance_type: Optional[StrictStr] = Field(default=None, description="The type of enhancement to apply to the image. PROPERTY or PROPERTY_USA is used with AI version < 4.0, for >= 4.0 use WARM or NEUTRAL..")
    lens_correction: Optional[StrictBool] = Field(default=True, description="Correct any lens distortion in the image.")
    number_of_brackets_per_image: Optional[StrictInt] = Field(default=None, description="If provided then group into an image after every specified number of brackets, if  not provided or set to 0 then we automatically group based on visual analysis.")
    privacy: Optional[StrictBool] = Field(default=None, description="Whether to blur any faces or license plates in the image.")
    sky_replacement: Optional[StrictBool] = Field(default=None, description="Enable the replacement of the original sky for a summer sky.")
    upscale: Optional[StrictBool] = Field(default=None, description="Whether to upscale the image.")
    vertical_correction: Optional[StrictBool] = Field(default=True, description="Correct any vertical distortion in the image so that it appears straight.")
    window_pull: Optional[StrictBool] = Field(default=None, description="Whether to pull the windows in the image (used with AI version >= 4.0).")
    __properties: ClassVar[List[str]] = ["ai_version", "cloud_type", "enhance", "enhance_type", "lens_correction", "number_of_brackets_per_image", "privacy", "sky_replacement", "upscale", "vertical_correction", "window_pull"]

    @field_validator('ai_version')
    def ai_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dev', '4.x', '4.7', '4.5', '4.4', '4.3', '4.2', '4.1', '4.0', '3.x', '3.5', '3.4', '3.3', '3.2', '3.1', '3.0']):
            raise ValueError("must be one of enum values ('dev', '4.x', '4.7', '4.5', '4.4', '4.3', '4.2', '4.1', '4.0', '3.x', '3.5', '3.4', '3.3', '3.2', '3.1', '3.0')")
        return value

    @field_validator('cloud_type')
    def cloud_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLEAR', 'LOW_CLOUD', 'HIGH_CLOUD']):
            raise ValueError("must be one of enum values ('CLEAR', 'LOW_CLOUD', 'HIGH_CLOUD')")
        return value

    @field_validator('enhance_type')
    def enhance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['property', 'property_usa', 'warm', 'neutral']):
            raise ValueError("must be one of enum values ('property', 'property_usa', 'warm', 'neutral')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderHDRMerge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cloud_type (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_type is None and "cloud_type" in self.model_fields_set:
            _dict['cloud_type'] = None

        # set to None if privacy (nullable) is None
        # and model_fields_set contains the field
        if self.privacy is None and "privacy" in self.model_fields_set:
            _dict['privacy'] = None

        # set to None if window_pull (nullable) is None
        # and model_fields_set contains the field
        if self.window_pull is None and "window_pull" in self.model_fields_set:
            _dict['window_pull'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderHDRMerge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ai_version": obj.get("ai_version"),
            "cloud_type": obj.get("cloud_type"),
            "enhance": obj.get("enhance") if obj.get("enhance") is not None else True,
            "enhance_type": obj.get("enhance_type"),
            "lens_correction": obj.get("lens_correction") if obj.get("lens_correction") is not None else True,
            "number_of_brackets_per_image": obj.get("number_of_brackets_per_image"),
            "privacy": obj.get("privacy"),
            "sky_replacement": obj.get("sky_replacement"),
            "upscale": obj.get("upscale"),
            "vertical_correction": obj.get("vertical_correction") if obj.get("vertical_correction") is not None else True,
            "window_pull": obj.get("window_pull")
        })
        return _obj


