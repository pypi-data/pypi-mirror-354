2025-05-30 12:58:38,826 - INFO - Creating mapping between the property and the instrumentated value.
2025-05-30 12:58:38,828 - INFO - Checking the contents in /home/verve/ml_nb_testing/comp_analysis/nbtest-gen/example/op/heart-failure-classification_instrumentation.pkl
2025-05-30 12:58:38,828 - INFO - {'df': {'isNone': False, 'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918], 'cell_no': 2, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_0': {'isNone': False, 'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456], 'cell_no': 3, 'line_no': 1}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_2': {'isNone': False, 'assert_var.sum()': [0, 0, 0, 0, 0], 'cell_no': 5, 'line_no': 1}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'df.shape': {'isNone': False, 'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'cell_no': 6, 'line_no': 1}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_3': {'isNone': False, 'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377], 'cell_no': 7, 'line_no': 1}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_4': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}], 'cell_no': 16, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.8166666666666667, 0.8833333333333333, 0.8166666666666667, 0.8333333333333334, 0.85], 'cell_no': 16, 'line_no': 10}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8815628815628815, 0.9653401797175867, 0.9230769230769231, 0.91005291005291, 0.8744343891402715], 'cell_no': 17, 'line_no': 4}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7600732600732599, 0.8440308087291399, 0.793040293040293, 0.8174603174603176, 0.840497737556561], 'cell_no': 17, 'line_no': 15}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_5': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}], 'cell_no': 18, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.75, 0.8333333333333334, 0.8333333333333334, 0.7666666666666667, 0.8166666666666667], 'cell_no': 18, 'line_no': 10}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8376068376068375, 0.8844672657252888, 0.8717948717948718, 0.7698412698412698, 0.8970588235294118], 'cell_no': 19, 'line_no': 4}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6978021978021978, 0.7792041078305519, 0.8058608058608059, 0.738095238095238, 0.8020361990950226], 'cell_no': 19, 'line_no': 15}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_6': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}], 'cell_no': 20, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7333333333333333, 0.8333333333333334, 0.8166666666666667, 0.8, 0.7833333333333333], 'cell_no': 20, 'line_no': 10}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8656898656898657, 0.9383825417201541, 0.8901098901098901, 0.8624338624338623, 0.8970588235294118], 'cell_no': 21, 'line_no': 4}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.652014652014652, 0.7933247753530167, 0.793040293040293, 0.7777777777777779, 0.7635746606334842], 'cell_no': 21, 'line_no': 15}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_7': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}], 'cell_no': 22, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.8, 0.8, 0.8666666666666667, 0.8166666666666667, 0.85], 'cell_no': 22, 'line_no': 10}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8766788766788767, 0.9679075738125803, 0.9145299145299145, 0.8591269841269842, 0.8947963800904978], 'cell_no': 23, 'line_no': 4}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7252747252747253, 0.6983311938382541, 0.8315018315018315, 0.7738095238095237, 0.840497737556561], 'cell_no': 23, 'line_no': 15}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'nbtest_tmpvar_8': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}], 'cell_no': 24, 'line_no': 3}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6833333333333333, 0.8333333333333334, 0.8, 0.8333333333333334, 0.8333333333333334], 'cell_no': 24, 'line_no': 10}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,828 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198], 'cell_no': 25, 'line_no': 4}}
2025-05-30 12:58:38,828 - INFO - 

2025-05-30 12:58:38,829 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198], 'cell_no': 25, 'line_no': 15}}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - {'nbtest_tmpvar_9': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}], 'cell_no': 26, 'line_no': 3}}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - {}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7666666666666667, 0.8333333333333334, 0.85, 0.8, 0.8666666666666667], 'cell_no': 26, 'line_no': 10}}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.887057387057387, 0.9409499358151476, 0.9236874236874236, 0.8697089947089947, 0.9027149321266968], 'cell_no': 27, 'line_no': 4}}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7216117216117216, 0.7650834403080873, 0.8186813186813188, 0.746031746031746, 0.8552036199095022], 'cell_no': 27, 'line_no': 15}}
2025-05-30 12:58:38,829 - INFO - 

2025-05-30 12:58:38,829 - INFO - df at Cell 2 Line 3 has found the instrumentation value
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_0 at Cell 3 Line 1 has found the instrumentation value
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_1 at Cell 4 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_2 at Cell 5 Line 1 has found the instrumentation value
2025-05-30 12:58:38,829 - INFO - df.shape at Cell 6 Line 1 has found the instrumentation value
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_3 at Cell 7 Line 1 has found the instrumentation value
2025-05-30 12:58:38,829 - INFO - i at Cell 8 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,829 - INFO - df[f'{i}'].value_counts() at Cell 8 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_4 at Cell 9 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_4 at Cell 9 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,829 - INFO - nbtest_tmpvar_4 at Cell 10 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_4 at Cell 10 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_4 at Cell 10 Line 4 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_4 at Cell 10 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - df.corr().abs()['DEATH_EVENT'].nlargest(15) at Cell 11 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - col_reduced at Cell 12 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - x_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - x_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - y_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - y_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_4 at Cell 16 Line 3 has found the instrumentation value
2025-05-30 12:58:38,830 - INFO - cm at Cell 16 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_5 at Cell 16 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_5 at Cell 16 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - accuracy_score(y_test, y_pred) at Cell 16 Line 10 has found the instrumentation value
2025-05-30 12:58:38,830 - INFO - roc_auc at Cell 17 Line 4 has found the instrumentation value
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_5 at Cell 17 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_5 at Cell 17 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,830 - INFO - nbtest_tmpvar_5 at Cell 17 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 17 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 17 Line 15 has found the instrumentation value
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_5 at Cell 18 Line 3 has found the instrumentation value
2025-05-30 12:58:38,831 - INFO - cm at Cell 18 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 18 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 18 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - accuracy_score(y_test, y_pred) at Cell 18 Line 10 has found the instrumentation value
2025-05-30 12:58:38,831 - INFO - roc_auc at Cell 19 Line 4 has found the instrumentation value
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 19 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 19 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 19 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,831 - INFO - nbtest_tmpvar_6 at Cell 19 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 19 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 19 Line 15 has found the instrumentation value
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_6 at Cell 20 Line 3 has found the instrumentation value
2025-05-30 12:58:38,832 - INFO - cm at Cell 20 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 20 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 20 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - accuracy_score(y_test, y_pred) at Cell 20 Line 10 has found the instrumentation value
2025-05-30 12:58:38,832 - INFO - roc_auc at Cell 21 Line 4 has found the instrumentation value
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 21 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 21 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 21 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 21 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,832 - INFO - nbtest_tmpvar_7 at Cell 21 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 21 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 21 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 21 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 21 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 21 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 21 Line 15 has found the instrumentation value
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_7 at Cell 22 Line 3 has found the instrumentation value
2025-05-30 12:58:38,833 - INFO - cm at Cell 22 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 22 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 22 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - accuracy_score(y_test, y_pred) at Cell 22 Line 10 has found the instrumentation value
2025-05-30 12:58:38,833 - INFO - roc_auc at Cell 23 Line 4 has found the instrumentation value
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,833 - INFO - nbtest_tmpvar_8 at Cell 23 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_8 at Cell 23 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_8 at Cell 23 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_8 at Cell 23 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_8 at Cell 23 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 23 Line 15 has found the instrumentation value
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_8 at Cell 24 Line 3 has found the instrumentation value
2025-05-30 12:58:38,834 - INFO - cm at Cell 24 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 24 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 24 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - accuracy_score(y_test, y_pred) at Cell 24 Line 10 has found the instrumentation value
2025-05-30 12:58:38,834 - INFO - roc_auc at Cell 25 Line 4 has found the instrumentation value
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,834 - INFO - nbtest_tmpvar_9 at Cell 25 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_9 at Cell 25 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_9 at Cell 25 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_9 at Cell 25 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 25 Line 15 has found the instrumentation value
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_9 at Cell 26 Line 3 has found the instrumentation value
2025-05-30 12:58:38,835 - INFO - cm at Cell 26 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 26 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 26 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - accuracy_score(y_test, y_pred) at Cell 26 Line 10 has found the instrumentation value
2025-05-30 12:58:38,835 - INFO - roc_auc at Cell 27 Line 4 has found the instrumentation value
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,835 - INFO - nbtest_tmpvar_10 at Cell 27 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,836 - INFO - nbtest_tmpvar_10 at Cell 27 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,836 - INFO - nbtest_tmpvar_10 at Cell 27 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 12:58:38,836 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 27 Line 15 has found the instrumentation value
2025-05-30 12:58:38,836 - INFO - Checking self.mapping
2025-05-30 12:58:38,836 - INFO - {2: [{'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918]}}]}
2025-05-30 12:58:38,836 - INFO - {3: [{'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13)]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456]}}]}
2025-05-30 12:58:38,836 - INFO - {5: [{'var': 'nbtest_tmpvar_2', 'assert_type': 'DATASET__any', 'lineno': 1, 'val': {'assert_var.sum()': [0, 0, 0, 0, 0]}}]}
2025-05-30 12:58:38,836 - INFO - {6: [{'var': 'df.shape', 'assert_type': 'DATASET__ATTRIBUTE_ACCESS', 'lineno': 1, 'val': {'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}]}
2025-05-30 12:58:38,836 - INFO - {7: [{'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13)]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377]}}]}
2025-05-30 12:58:38,836 - INFO - {16: [{'var': 'nbtest_tmpvar_4', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.8166666666666667, 0.8833333333333333, 0.8166666666666667, 0.8333333333333334, 0.85]}}]}
2025-05-30 12:58:38,836 - INFO - {17: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8815628815628815, 0.9653401797175867, 0.9230769230769231, 0.91005291005291, 0.8744343891402715]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7600732600732599, 0.8440308087291399, 0.793040293040293, 0.8174603174603176, 0.840497737556561]}}]}
2025-05-30 12:58:38,836 - INFO - {18: [{'var': 'nbtest_tmpvar_5', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.75, 0.8333333333333334, 0.8333333333333334, 0.7666666666666667, 0.8166666666666667]}}]}
2025-05-30 12:58:38,836 - INFO - {19: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8376068376068375, 0.8844672657252888, 0.8717948717948718, 0.7698412698412698, 0.8970588235294118]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6978021978021978, 0.7792041078305519, 0.8058608058608059, 0.738095238095238, 0.8020361990950226]}}]}
2025-05-30 12:58:38,836 - INFO - {20: [{'var': 'nbtest_tmpvar_6', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7333333333333333, 0.8333333333333334, 0.8166666666666667, 0.8, 0.7833333333333333]}}]}
2025-05-30 12:58:38,836 - INFO - {21: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8656898656898657, 0.9383825417201541, 0.8901098901098901, 0.8624338624338623, 0.8970588235294118]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.652014652014652, 0.7933247753530167, 0.793040293040293, 0.7777777777777779, 0.7635746606334842]}}]}
2025-05-30 12:58:38,836 - INFO - {22: [{'var': 'nbtest_tmpvar_7', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.8, 0.8, 0.8666666666666667, 0.8166666666666667, 0.85]}}]}
2025-05-30 12:58:38,836 - INFO - {23: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8766788766788767, 0.9679075738125803, 0.9145299145299145, 0.8591269841269842, 0.8947963800904978]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7252747252747253, 0.6983311938382541, 0.8315018315018315, 0.7738095238095237, 0.840497737556561]}}]}
2025-05-30 12:58:38,836 - INFO - {24: [{'var': 'nbtest_tmpvar_8', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.6833333333333333, 0.8333333333333334, 0.8, 0.8333333333333334, 0.8333333333333334]}}]}
2025-05-30 12:58:38,836 - INFO - {25: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198]}}]}
2025-05-30 12:58:38,836 - INFO - {26: [{'var': 'nbtest_tmpvar_9', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7666666666666667, 0.8333333333333334, 0.85, 0.8, 0.8666666666666667]}}]}
2025-05-30 12:58:38,836 - INFO - {27: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.887057387057387, 0.9409499358151476, 0.9236874236874236, 0.8697089947089947, 0.9027149321266968]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7216117216117216, 0.7650834403080873, 0.8186813186813188, 0.746031746031746, 0.8552036199095022]}}]}
2025-05-30 13:01:10,370 - INFO - Creating mapping between the property and the instrumentated value.
2025-05-30 13:01:10,371 - INFO - Checking the contents in /home/verve/ml_nb_testing/comp_analysis/nbtest-gen/example/op/heart-failure-classification_instrumentation.pkl
2025-05-30 13:01:10,371 - INFO - {'df': {'isNone': False, 'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918], 'cell_no': 2, 'line_no': 3}}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {'nbtest_tmpvar_0': {'isNone': False, 'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456], 'cell_no': 3, 'line_no': 1}}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {'nbtest_tmpvar_2': {'isNone': False, 'assert_var.sum()': [0, 0, 0, 0, 0], 'cell_no': 5, 'line_no': 1}}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {'df.shape': {'isNone': False, 'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)], 'cell_no': 6, 'line_no': 1}}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {'nbtest_tmpvar_3': {'isNone': False, 'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13)], 'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']], '[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']], "np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242], "np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377], 'cell_no': 7, 'line_no': 1}}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,371 - INFO - {}
2025-05-30 13:01:10,371 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_4': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}], 'cell_no': 16, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.8166666666666667, 0.8833333333333333, 0.8166666666666667, 0.8333333333333334, 0.85], 'cell_no': 16, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8815628815628815, 0.9653401797175867, 0.9230769230769231, 0.91005291005291, 0.8744343891402715], 'cell_no': 17, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7600732600732599, 0.8440308087291399, 0.793040293040293, 0.8174603174603176, 0.840497737556561], 'cell_no': 17, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_5': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}], 'cell_no': 18, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.75, 0.8333333333333334, 0.8333333333333334, 0.7666666666666667, 0.8166666666666667], 'cell_no': 18, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8376068376068375, 0.8844672657252888, 0.8717948717948718, 0.7698412698412698, 0.8970588235294118], 'cell_no': 19, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6978021978021978, 0.7792041078305519, 0.8058608058608059, 0.738095238095238, 0.8020361990950226], 'cell_no': 19, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_6': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}], 'cell_no': 20, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7333333333333333, 0.8333333333333334, 0.8166666666666667, 0.8, 0.7833333333333333], 'cell_no': 20, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8656898656898657, 0.9383825417201541, 0.8901098901098901, 0.8624338624338623, 0.8970588235294118], 'cell_no': 21, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.652014652014652, 0.7933247753530167, 0.793040293040293, 0.7777777777777779, 0.7635746606334842], 'cell_no': 21, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_7': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}], 'cell_no': 22, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.8, 0.8, 0.8666666666666667, 0.8166666666666667, 0.85], 'cell_no': 22, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.8766788766788767, 0.9679075738125803, 0.9145299145299145, 0.8591269841269842, 0.8947963800904978], 'cell_no': 23, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7252747252747253, 0.6983311938382541, 0.8315018315018315, 0.7738095238095237, 0.840497737556561], 'cell_no': 23, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_8': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}], 'cell_no': 24, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6833333333333333, 0.8333333333333334, 0.8, 0.8333333333333334, 0.8333333333333334], 'cell_no': 24, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198], 'cell_no': 25, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198], 'cell_no': 25, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'nbtest_tmpvar_9': {'isNone': False, "{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}], 'cell_no': 26, 'line_no': 3}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'accuracy_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7666666666666667, 0.8333333333333334, 0.85, 0.8, 0.8666666666666667], 'cell_no': 26, 'line_no': 10}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'roc_auc': {'isNone': False, 'assert_var': [0.887057387057387, 0.9409499358151476, 0.9236874236874236, 0.8697089947089947, 0.9027149321266968], 'cell_no': 27, 'line_no': 4}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,372 - INFO - {'sklearn.metrics.roc_auc_score(y_test, y_pred)': {'isNone': False, 'assert_var': [0.7216117216117216, 0.7650834403080873, 0.8186813186813188, 0.746031746031746, 0.8552036199095022], 'cell_no': 27, 'line_no': 15}}
2025-05-30 13:01:10,372 - INFO - 

2025-05-30 13:01:10,373 - INFO - df at Cell 2 Line 3 has found the instrumentation value
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_0 at Cell 3 Line 1 has found the instrumentation value
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_1 at Cell 4 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_2 at Cell 5 Line 1 has found the instrumentation value
2025-05-30 13:01:10,373 - INFO - df.shape at Cell 6 Line 1 has found the instrumentation value
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_3 at Cell 7 Line 1 has found the instrumentation value
2025-05-30 13:01:10,373 - INFO - i at Cell 8 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - df[f'{i}'].value_counts() at Cell 8 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 9 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 9 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 10 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 10 Line 3 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 10 Line 4 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - nbtest_tmpvar_4 at Cell 10 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,373 - INFO - df.corr().abs()['DEATH_EVENT'].nlargest(15) at Cell 11 Line 1 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - col_reduced at Cell 12 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - x_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - x_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - y_train at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - y_test at Cell 14 Line 2 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_4 at Cell 16 Line 3 has found the instrumentation value
2025-05-30 13:01:10,374 - INFO - cm at Cell 16 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 16 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 16 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - accuracy_score(y_test, y_pred) at Cell 16 Line 10 has found the instrumentation value
2025-05-30 13:01:10,374 - INFO - roc_auc at Cell 17 Line 4 has found the instrumentation value
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,374 - INFO - nbtest_tmpvar_5 at Cell 17 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_5 at Cell 17 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_5 at Cell 17 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_5 at Cell 17 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 17 Line 15 has found the instrumentation value
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_5 at Cell 18 Line 3 has found the instrumentation value
2025-05-30 13:01:10,375 - INFO - cm at Cell 18 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 18 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 18 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - accuracy_score(y_test, y_pred) at Cell 18 Line 10 has found the instrumentation value
2025-05-30 13:01:10,375 - INFO - roc_auc at Cell 19 Line 4 has found the instrumentation value
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,375 - INFO - nbtest_tmpvar_6 at Cell 19 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_6 at Cell 19 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_6 at Cell 19 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_6 at Cell 19 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 19 Line 15 has found the instrumentation value
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_6 at Cell 20 Line 3 has found the instrumentation value
2025-05-30 13:01:10,376 - INFO - cm at Cell 20 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 20 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 20 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - accuracy_score(y_test, y_pred) at Cell 20 Line 10 has found the instrumentation value
2025-05-30 13:01:10,376 - INFO - roc_auc at Cell 21 Line 4 has found the instrumentation value
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,376 - INFO - nbtest_tmpvar_7 at Cell 21 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_7 at Cell 21 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_7 at Cell 21 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 21 Line 15 has found the instrumentation value
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_7 at Cell 22 Line 3 has found the instrumentation value
2025-05-30 13:01:10,377 - INFO - cm at Cell 22 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 22 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 22 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - accuracy_score(y_test, y_pred) at Cell 22 Line 10 has found the instrumentation value
2025-05-30 13:01:10,377 - INFO - roc_auc at Cell 23 Line 4 has found the instrumentation value
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,377 - INFO - nbtest_tmpvar_8 at Cell 23 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_8 at Cell 23 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_8 at Cell 23 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 23 Line 15 has found the instrumentation value
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_8 at Cell 24 Line 3 has found the instrumentation value
2025-05-30 13:01:10,378 - INFO - cm at Cell 24 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 24 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 24 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - accuracy_score(y_test, y_pred) at Cell 24 Line 10 has found the instrumentation value
2025-05-30 13:01:10,378 - INFO - roc_auc at Cell 25 Line 4 has found the instrumentation value
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,378 - INFO - nbtest_tmpvar_9 at Cell 25 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_9 at Cell 25 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_9 at Cell 25 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 25 Line 15 has found the instrumentation value
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_9 at Cell 26 Line 3 has found the instrumentation value
2025-05-30 13:01:10,379 - INFO - cm at Cell 26 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 26 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 26 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - accuracy_score(y_test, y_pred) at Cell 26 Line 10 has found the instrumentation value
2025-05-30 13:01:10,379 - INFO - roc_auc at Cell 27 Line 4 has found the instrumentation value
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 5 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 6 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 7 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 8 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 9 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 10 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 11 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 12 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,379 - INFO - nbtest_tmpvar_10 at Cell 27 Line 13 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,380 - INFO - nbtest_tmpvar_10 at Cell 27 Line 14 didn't find the instrumentation value. No matching code_cell and line_number or variable name.
2025-05-30 13:01:10,380 - INFO - sklearn.metrics.roc_auc_score(y_test, y_pred) at Cell 27 Line 15 has found the instrumentation value
2025-05-30 13:01:10,380 - INFO - Checking self.mapping
2025-05-30 13:01:10,380 - INFO - {2: [{'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'assert_var.shape': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676, 20331.504464625676]}}, {'var': 'df', 'assert_type': 'DATASET__read_csv', 'lineno': 3, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918, 5655280085.135918]}}]}
2025-05-30 13:01:10,380 - INFO - {3: [{'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'assert_var.shape': [(10, 13), (10, 13), (10, 13), (10, 13), (10, 13)]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64'], ['int64', 'float64', 'int64', 'int64', 'int64', 'int64', 'int64', 'float64', 'float64', 'int64', 'int64', 'int64', 'int64']]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [20584.102, 20584.102, 20584.102, 20584.102, 20584.102]}}, {'var': 'nbtest_tmpvar_0', 'assert_type': 'DATASET__head', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456, 5735375787.815456]}}]}
2025-05-30 13:01:10,380 - INFO - {5: [{'var': 'nbtest_tmpvar_2', 'assert_type': 'DATASET__any', 'lineno': 1, 'val': {'assert_var.sum()': [0, 0, 0, 0, 0]}}]}
2025-05-30 13:01:10,380 - INFO - {6: [{'var': 'df.shape', 'assert_type': 'DATASET__ATTRIBUTE_ACCESS', 'lineno': 1, 'val': {'assert_var': [(299, 13), (299, 13), (299, 13), (299, 13), (299, 13)]}}]}
2025-05-30 13:01:10,380 - INFO - {7: [{'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'assert_var.shape': [(8, 13), (8, 13), (8, 13), (8, 13), (8, 13)]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'sorted(assert_var.columns)': [['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time'], ['DEATH_EVENT', 'age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets', 'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {'[str(assert_var[i].dtype) for i in sorted(assert_var.columns)]': [['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64'], ['float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64', 'float64']]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanmean(assert_var.select_dtypes(include=['number']).to_numpy())": [19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242, 19528.024571370242]}}, {'var': 'nbtest_tmpvar_3', 'assert_type': 'DATASET__describe', 'lineno': 1, 'val': {"np.nanvar(assert_var.select_dtypes(include=['number']).to_numpy())": [9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377, 9311258132.272377]}}]}
2025-05-30 13:01:10,380 - INFO - {16: [{'var': 'nbtest_tmpvar_4', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}, {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'deprecated', 'n_jobs': None, 'penalty': 'l2', 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.8166666666666667, 0.8833333333333333, 0.8166666666666667, 0.8333333333333334, 0.85]}}]}
2025-05-30 13:01:10,380 - INFO - {17: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8815628815628815, 0.9653401797175867, 0.9230769230769231, 0.91005291005291, 0.8744343891402715]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7600732600732599, 0.8440308087291399, 0.793040293040293, 0.8174603174603176, 0.840497737556561]}}]}
2025-05-30 13:01:10,380 - INFO - {18: [{'var': 'nbtest_tmpvar_5', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}, {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'euclidean', 'metric_params': None, 'n_jobs': None, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.75, 0.8333333333333334, 0.8333333333333334, 0.7666666666666667, 0.8166666666666667]}}]}
2025-05-30 13:01:10,380 - INFO - {19: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8376068376068375, 0.8844672657252888, 0.8717948717948718, 0.7698412698412698, 0.8970588235294118]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6978021978021978, 0.7792041078305519, 0.8058608058608059, 0.738095238095238, 0.8020361990950226]}}]}
2025-05-30 13:01:10,380 - INFO - {20: [{'var': 'nbtest_tmpvar_6', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}, {'C': 1.0, 'break_ties': False, 'cache_size': 200, 'class_weight': None, 'coef0': 0.0, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'rbf', 'max_iter': -1, 'probability': True, 'shrinking': True, 'tol': 0.001, 'verbose': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7333333333333333, 0.8333333333333334, 0.8166666666666667, 0.8, 0.7833333333333333]}}]}
2025-05-30 13:01:10,380 - INFO - {21: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8656898656898657, 0.9383825417201541, 0.8901098901098901, 0.8624338624338623, 0.8970588235294118]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.652014652014652, 0.7933247753530167, 0.793040293040293, 0.7777777777777779, 0.7635746606334842]}}]}
2025-05-30 13:01:10,380 - INFO - {22: [{'var': 'nbtest_tmpvar_7', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}, {'priors': None, 'var_smoothing': 1e-09}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.8, 0.8, 0.8666666666666667, 0.8166666666666667, 0.85]}}]}
2025-05-30 13:01:10,380 - INFO - {23: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.8766788766788767, 0.9679075738125803, 0.9145299145299145, 0.8591269841269842, 0.8947963800904978]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7252747252747253, 0.6983311938382541, 0.8315018315018315, 0.7738095238095237, 0.840497737556561]}}]}
2025-05-30 13:01:10,380 - INFO - {24: [{'var': 'nbtest_tmpvar_8', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}, {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'splitter': 'best'}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.6833333333333333, 0.8333333333333334, 0.8, 0.8333333333333334, 0.8333333333333334]}}]}
2025-05-30 13:01:10,380 - INFO - {25: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.6465201465201464, 0.8356867779204107, 0.7582417582417583, 0.8174603174603176, 0.8257918552036198]}}]}
2025-05-30 13:01:10,380 - INFO - {26: [{'var': 'nbtest_tmpvar_9', 'assert_type': 'MODEL_ARCH__fit', 'lineno': 3, 'val': {"{k: v for k, v in assert_var.get_params().items() if k != 'random_state' and not (hasattr(v, '__module__') and v.__module__.startswith('sklearn'))}": [{'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}, {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'entropy', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 35, 'n_jobs': None, 'oob_score': False, 'verbose': 0, 'warm_start': False}]}}, {'var': 'accuracy_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__accuracy_score', 'lineno': 10, 'val': {'assert_var': [0.7666666666666667, 0.8333333333333334, 0.85, 0.8, 0.8666666666666667]}}]}
2025-05-30 13:01:10,380 - INFO - {27: [{'var': 'roc_auc', 'assert_type': 'MODEL_PERF__auc', 'lineno': 4, 'val': {'assert_var': [0.887057387057387, 0.9409499358151476, 0.9236874236874236, 0.8697089947089947, 0.9027149321266968]}}, {'var': 'sklearn.metrics.roc_auc_score(y_test, y_pred)', 'assert_type': 'MODEL_PERF__roc_auc_score', 'lineno': 15, 'val': {'assert_var': [0.7216117216117216, 0.7650834403080873, 0.8186813186813188, 0.746031746031746, 0.8552036199095022]}}]}
