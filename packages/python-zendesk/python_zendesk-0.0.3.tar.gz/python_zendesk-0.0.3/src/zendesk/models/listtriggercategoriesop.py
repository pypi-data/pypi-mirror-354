"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from zendesk.types import BaseModel
from zendesk.utils import FieldMetadata, QueryParamMetadata


class PageTypedDict(TypedDict):
    r"""Pagination parameters"""

    after: NotRequired[str]
    before: NotRequired[str]
    size: NotRequired[int]


class Page(BaseModel):
    r"""Pagination parameters"""

    after: Annotated[Optional[str], FieldMetadata(query=True)] = None

    before: Annotated[Optional[str], FieldMetadata(query=True)] = None

    size: Annotated[Optional[int], FieldMetadata(query=True)] = None


class ListTriggerCategoriesSort(str, Enum):
    r"""Sort parameters"""

    POSITION = "position"
    MINUS_POSITION = "-position"
    NAME = "name"
    MINUS_NAME = "-name"
    CREATED_AT = "created_at"
    MINUS_CREATED_AT = "-created_at"
    UPDATED_AT = "updated_at"
    MINUS_UPDATED_AT = "-updated_at"


class Include(str, Enum):
    r"""Allowed sideloads"""

    RULE_COUNTS = "rule_counts"


class ListTriggerCategoriesRequestTypedDict(TypedDict):
    page: NotRequired[PageTypedDict]
    r"""Pagination parameters"""
    sort: NotRequired[ListTriggerCategoriesSort]
    r"""Sort parameters"""
    include: NotRequired[Include]
    r"""Allowed sideloads"""


class ListTriggerCategoriesRequest(BaseModel):
    page: Annotated[
        Optional[Page],
        FieldMetadata(query=QueryParamMetadata(style="deepObject", explode=True)),
    ] = None
    r"""Pagination parameters"""

    sort: Annotated[
        Optional[ListTriggerCategoriesSort],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sort parameters"""

    include: Annotated[
        Optional[Include],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Allowed sideloads"""


class TriggerCategoryRuleCountsTypedDict(TypedDict):
    active_count: NotRequired[int]
    inactive_count: NotRequired[int]
    created_at: NotRequired[str]
    id: NotRequired[str]
    name: NotRequired[str]
    position: NotRequired[int]
    updated_at: NotRequired[str]


class TriggerCategoryRuleCounts(BaseModel):
    active_count: Optional[int] = None

    inactive_count: Optional[int] = None

    created_at: Optional[str] = None

    id: Optional[str] = None

    name: Optional[str] = None

    position: Optional[int] = None

    updated_at: Optional[str] = None


ListTriggerCategoriesTriggerCategoryTypedDict = TriggerCategoryRuleCountsTypedDict


ListTriggerCategoriesTriggerCategory = TriggerCategoryRuleCounts


class ListTriggerCategoriesLinksTypedDict(TypedDict):
    next: NotRequired[str]
    prev: NotRequired[str]


class ListTriggerCategoriesLinks(BaseModel):
    next: Optional[str] = None

    prev: Optional[str] = None


class ListTriggerCategoriesMetaTypedDict(TypedDict):
    after_cursor: NotRequired[str]
    before_cursor: NotRequired[str]
    has_more: NotRequired[bool]


class ListTriggerCategoriesMeta(BaseModel):
    after_cursor: Optional[str] = None

    before_cursor: Optional[str] = None

    has_more: Optional[bool] = None


class ListTriggerCategoriesResponseTypedDict(TypedDict):
    r"""A paged array of ticket trigger categories"""

    trigger_categories: NotRequired[List[ListTriggerCategoriesTriggerCategoryTypedDict]]
    links: NotRequired[ListTriggerCategoriesLinksTypedDict]
    meta: NotRequired[ListTriggerCategoriesMetaTypedDict]


class ListTriggerCategoriesResponse(BaseModel):
    r"""A paged array of ticket trigger categories"""

    trigger_categories: Optional[List[ListTriggerCategoriesTriggerCategory]] = None

    links: Optional[ListTriggerCategoriesLinks] = None

    meta: Optional[ListTriggerCategoriesMeta] = None
