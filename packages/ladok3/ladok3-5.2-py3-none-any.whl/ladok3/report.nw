We want to report results from the command line.
We need the following data for each result:
\begin{itemize}
\item course identifier,
\item course component,
\item student identifier,
\item grade, and
\item date\footnote{Optional, we set today's date if not present.};
\item grader 1,
\item grader 2,
\item \dots
\end{itemize}

We provide two ways to do this:
The first is to provide positional arguments on the command line.
The second is to not provide any positional argument, and in this case we read 
CSV data from standard input.


\section{The [[report]] subcommand}\label{ReportCommand}

This is a subcommand is run as part of the [[ladok3.cli]] module.
We provide a function [[add_command_options]] that adds the subcommand options 
to a given parser.
We need access to LADOK through the [[ladok3]] module.
<<report.py>>=
import csv
import datetime
import ladok3
import sys

<<functions>>

def add_command_options(parser):
  report_parser = parser.add_parser("report",
    help="Reports course results to LADOK",
    description="Reports course results to LADOK"
  )
  report_parser.set_defaults(func=command)
  <<add report command arguments to report parser>>

def command(ladok, args):
  <<report results depending on args>>
@

As mentioned above, we provide two ways of doing this.
<<add report command arguments to report parser>>=
one_parser = report_parser.add_argument_group(
  "one result as positional args, only date is optional")
<<add one result group arguments>>
many_parser = report_parser.add_argument_group(
  "many results read from standard input as CSV, columns: "
  "course, component, student, grade, date, grader 1, ..., grader N")
<<add many results group arguments>>
@


\section{Report the results}

We provide two functions, one for each way of reporting the results.
<<functions>>=
def report_one_result(ladok, args):
  <<report results given in args>>

def report_many_results(ladok, args):
  <<report results given in stdin>>
@

In both cases, we want to specify whether or not the results should be 
finalized.
We add an option whether we want to finalize the grade for attestation by the 
examiner.
We add this argument outside the two groups, since it's valid for both.
<<finalize option help>>=
Finalize the grade (mark as ready/klarmarkera) for examiner to attest.
Note that without this option, no graders will be registered in LADOK.
<<add report command arguments to report parser>>=
report_parser.add_argument("-f", "--finalize",
  help="""<<finalize option help>>""",
  action="store_true",
  default=False
)
@


\section{Report many results given in standard input}

We want to read CSV data from standard input.
<<report results given in stdin>>=
data_reader = csv.reader(sys.stdin, delimiter=args.delimiter)
for course_code, component_code, student_id, grade, date, *graders in data_reader:
  <<report a result read from stdin>>
@ We need to add an argument for the delimiter.
<<add many results group arguments>>=
many_parser.add_argument("-d", "--delimiter",
  default="\t",
  help="The delimiter for the CSV input; "
    "default is a tab character to be compatible with POSIX commands, "
    "use `-d,` or `-d ,` to get comma-separated values.")
@

We also want to handle errors and confirmations.
When reporting in bulk, we don't want unnecessary errors.
We also want to have a summary of the changes.
<<add many results group arguments>>=
many_parser.add_argument("-v", "--verbose",
  action="count", default=0,
  help="Increases the verbosity of the output: -v will print results that "
    "were reported to standard out. Otherwise only errors are printed.")
@

Then we can actually report the result using the values read from [[stdin]].
<<report a result read from stdin>>=
try:
  set_grade(ladok, args,
            student_id, course_code, component_code, grade, date, graders)
except Exception as err:
  <<try to resolve [[student]] from [[ladok]] using [[student_id]]>>
  print(f"{course_code} {component_code}={grade} ({date}) {student}: "
        f"{err}",
        file=sys.stderr)
@

The reason we want to resolve the student from LADOK is that the [[student_id]] 
might be a personnummer or a LADOK ID---if the latter, it's not particularly 
readable for a human and we can't use the LADOK ID in the LADOK web interface 
when we want to deal with the errors manually.
But if we resolve the student, then we get a readable name.
<<try to resolve [[student]] from [[ladok]] using [[student_id]]>>=
try:
  student = ladok.get_student(student_id)
except Exception:
  student = student_id
@

When we set the grade, there are a few cases that should be handled.
If the grade isn't attested, we try to change it.
(This might still fail if the grade is finalized but not attested.)
If we've selected the verbose option, then we print what we have reported.

If the grade was attested, then we check if it's different.
If it's different, we output this.
If it's the same, we silently ignore it.
This is best for bulk reporting, because then we can always try to report for 
all students.

We want to report errors as exceptions.
<<functions>>=
def set_grade(ladok, args,
              student_id, course_code, component_code, grade, date, graders):
  student = ladok.get_student(student_id)
  <<get [[course]] from [[student]] and [[course_code]]>>
  <<get [[component]] from [[course]] and [[component_code]]>>

  if not component.attested and component.grade != grade:
    <<ensure [[date]] is a valid date for [[course]]>>
    component.set_grade(grade, date)
    if args.finalize:
      component.finalize(graders)
    if args.verbose:
      print(f"{course_code} {student}: reported "
            f"{component.component} = {component.grade} ({date}) "
            f"by {', '.join(graders)}.")
  elif component.grade != grade:
    raise Exception(f"attested {component.component} "
                    f"result {component.grade} ({component.date}) "
                    f"is different from {grade} ({date}).")
@

Now we simply want to set those objects up.
We want to throw exceptions that explain what the problem is if these don't 
exist.
<<get [[course]] from [[student]] and [[course_code]]>>=
try:
  course = student.courses(code=course_code)[0]
except IndexError:
  raise Exception(f"{course_code}: No such course for {student}")
<<get [[component]] from [[course]] and [[component_code]]>>=
try:
  component = course.results(component=component_code)[0]
except IndexError:
  raise Exception(f"{component_code}: no such component for {course_code}")
@

Finally, we want to ensure the date is correct.
The date must be at the earliest the start of the course.
The student can't finish any results before the course has started.
LADOK will not accept that.
<<ensure [[date]] is a valid date for [[course]]>>=
if not isinstance(date, datetime.date):
  date = datetime.date.fromisoformat(date)

if date < course.start:
  print(f"{course_code} {component_code}={grade} "
        f"({date}) {student}: "
        f"Grade date ({date}) is before "
        f"course start date ({course.start}), "
        f"using course start date instead.")
  date = course.start
@


\section{Report a result given on command line}

If we've chosen to give one result on the command line, then we'll need the 
following arguments.

We start with the course, component code, the student's ID and grade.
<<add one result group arguments>>=
one_parser.add_argument("course_code", nargs="?",
  help="The course code (e.g. DD1315) for which the grade is for."
)

one_parser.add_argument("component_code", nargs="?",
  help="The component code (e.g. LAB1) for which the grade is for. "
       "This can be set to the course code (e.g. DD1315) to set the "
       "final grade for the course. But all components must be "
       "certified (attested) before the course grade can be set."
)

one_parser.add_argument("student_id", nargs="?",
  help="Student identifier (personnummer or LADOK ID)."
)

one_parser.add_argument("grade", nargs="?",
  help="The grade (e.g. A or P)."
)
@ We must make them optional like this to make it work with our second 
alternative (bulk reporting through [[stdin]]), so we must check ourselves that 
we got the arguments.
<<check that we got all positional arguments>>=
if not (args.course_code and args.component_code and
  args.student_id and args.grade):
  print(f"{sys.argv[0]} report: "
        "not all positional args given: "
        "course_code, component, student, grade",
        file=sys.stderr)
  sys.exit(1)
@

Next, we have the date.
To ensure it's a valid date we'll make [[argparse]] convert it to [[datetime]] 
format.
If it's not provided, we let [[argparse]] set it to today's date.
<<add one result group arguments>>=
one_parser.add_argument("date", nargs="?",
  help="Date on ISO format (e.g. 2021-03-18), "
      f"defaults to today's date ({datetime.date.today()}).",
  type=datetime.date.fromisoformat,
  default=datetime.date.today()
)
@

Finally, we have the list of graders.
<<add one result group arguments>>=
one_parser.add_argument("graders", nargs="*",
  help="Space separated list of who did the grading, "
       "give each grader as 'First Last <email@institution.se>'.")
@

Now that we have the arguments, we can just execute the following code using 
them.
<<report results given in args>>=
<<check that we got all positional arguments>>
try:
  set_grade(ladok, args,
            args.student_id, args.course_code, args.component_code,
            args.grade, args.date, args.graders)
except Exception as err:
  student_id = args.student_id
  <<try to resolve [[student]] from [[ladok]] using [[student_id]]>>
  print(f"{args.course_code} {args.component_code}={args.grade} ({args.date}) "
        f"{student}: {err}",
        file=sys.stderr)
@


\section{Determine which function to run}

We know that if a course code is given as positional argument, then we know 
that we should report one result from the command line.
<<report results depending on args>>=
if args.course_code:
  report_one_result(ladok, args)
else:
  report_many_results(ladok, args)
@

