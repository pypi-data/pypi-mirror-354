\chapter{Baltatzis' and Maguire's original [[LadokSession]] methods}

Below are the original [[LadokSession]] methods by Baltatzis and Maguire.
These are merely kept for backwards compatibility.

The one missing is the constructor, that has been replaced by the code above.
Also, the code has been adapted to use [[self.session]] instead of 
[[self.__session]] etc.

\section{[[get_results]], [[save_result]]}

<<LadokSession data methods>>=
##############################################################
#
# LadokSession
#
# get_results      returnerar en dictionary med momentnamn och resultat
# save_result      sparar resultat för en student som utkast
#
# The original LadokSession code is from Alexander Baltatzis <alba@kth.se> on 
# 2020-07-20
#
# I (Gerald Q. Maguire Jr.) have extended on 2020-07-21 and later with the code 
# as noted below.
#
# I (Daniel Bosk) adapted (on 2021-01-08) the methods to a refactored 
# LadokSession class.

#####################################################################
#
# get_results
#
# person_nr          - personnummer, siffror i strängformat
#            t.ex. 19461212-1212
# course_code          - kurskod t.ex. DD1321
#
# RETURNERAR en dictionary från ladok med momentnamn, resultat
#
# {'LABP': {'date': '2019-01-14', 'grade': 'P', 'status': 'attested'},
#  'LABD': {'date': '2019-03-23', 'grade': 'E', 'status': 'pending(1)'},
#  'TEN1': {'date': '2019-03-13', 'grade': 'F', 'status': 'pending(2)'}}
#
#  status:  kan ha följande värden vilket gissningsvis betyder: 
#           attested   - attesterad
#           pending(1) - utkast
#           pending(2) - klarmarkerad
#
def get_results(self, person_nr_raw, course_code):
  person_nr_raw = str(person_nr_raw)
  person_nr =  format_personnummer(person_nr_raw)
  if not person_nr: raise Exception('Invalid person nr ' + person_nr_raw)
  
  student_data = self.__get_student_data(person_nr)

  student_course = next(x
    for x in self.__get_student_courses(student_data['id'])
      if x['code'] == course_code)

  # get attested results
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/resultat/studentresultat/attesterade/student/' +
        student_data['id'],
    headers=self.headers).json()
  
  results_attested_current_course = None
  results = {}  # return value
  
  for course in r['StudentresultatPerKurs']:
    if course['KursUID'] == student_course['education_id']:
      results_attested_current_course = course['Studentresultat']
      break


  if results_attested_current_course:
    for result in results_attested_current_course:
      try:
          d = { 'grade' : result['Betygsgradskod'],
                'status': 'attested',
                'date'  : result['Examinationsdatum'] }
          results[ result['Utbildningskod'] ] = d
      except:
          pass  # tillgodoräknanden har inga betyg och då är result['Utbildningskod'] == None

  # get pending results
  r = self.session.get(
    url=self.base_gui_proxy_url + '/resultat/resultat/resultat/student/' +
      student_data['id'] + '/kurs/' + student_course['education_id'] +
        '?resultatstatus=UTKAST&resultatstatus=KLARMARKERAT',
    headers=self.headers).json()
  
  for result in r['Resultat']:
      r = self.session.get(
        url=self.base_gui_proxy_url + '/resultat/utbildningsinstans/' +
          result['UtbildningsinstansUID'],
        headers=self.headers).json()
      d_grade = result['Betygsgradsobjekt']['Kod']
      d_status = "pending(" + str(result['ProcessStatus']) + ")"
      # utkast har inte datum tydligen ...
      d_date = "0" if 'Examinationsdatum' not in result \
                    else result['Examinationsdatum']
      d = { 'grade' : d_grade ,
            'status': d_status,
            'date'  : d_date      } 
      results[ r['Utbildningskod'] ] = d
  return results

#####################################################################
#
# save_result
#
# person_nr           - personnummer, flera format accepteras enligt regex:
#                       (\d\d)?(\d\d)(\d\d\d\d)[+\-]?(\w\w\w\w)
# course_code         - kurskod t.ex. DD1321
# course_moment       - ladokmoment/kursbetyg t.ex. TEN1, LAB1, DD1321 (!)
#                       om labmomententet är samma som course_code så sätts kursbetyg!
# result_date         - betygsdatum, flera format accepteras enligt regex
#                       (\d\d)?(\d\d)-?(\d\d)-?(\d\d)
# grade_code          - det betyg som ska sättas
# grade_scale         - betygsskala t.ex. AF eller PF. Möjliga betygsskalor
#                       listas i self.__grade_scales. 
#
# RETURNERAR True om det gått bra, kastar (förhoppningsvis) undantag
#            om det går dåligt. 
def save_result(self, person_nr_raw, course_code, course_moment,
  result_date_raw, grade_raw, grade_scale):
  if grade_raw in ["AF", "PF"]:
      raise Exception('Invalid grade: ' + grade_raw + ' looks like a grade_scale') 

  if (grade_raw == 'P' and grade_scale == "AF") or \
     (grade_raw in "ABCDE" and grade_scale == "PF"):
    raise Exception('Invalid grade: ' + grade_raw +
      ' does not match grade_scale ' + grade_scale)
  
  person_nr =  format_personnummer(person_nr_raw)
  if not person_nr: raise Exception('Invalid person nr ' + person_nr_raw)
  
  result_date = self.__validate_date(result_date_raw)
  if not result_date:
    raise Exception('Invalid grade date: ' + result_date_raw + ' pnr: ' +
      person_nr_raw + ' moment: ' + course_moment)
  
  student_data = self.__get_student_data(person_nr)
  student_course = next(x
    for x in self.__get_student_courses(student_data['id'])
      if x['code'] == course_code)
  
  # momentkod = kurskod => vi hanterar kursbetyg
  if course_moment == student_course['code']:
      course_moment_id = student_course['instance_id']
  else:
      for x in self.__get_student_course_moments(student_course['round_id'], 
        student_data['id']):
        if x['code'] == course_moment:
          course_moment_id = x['course_moment_id']
      
  student_course_results = self.__get_student_course_results(
    student_course['round_id'], student_data['id'])
  
  grade_scale = self.__get_grade_scale_by_code(grade_scale)
  grade = grade_scale.grades(code=grade_raw)[0]
              
  headers = self.headers.copy()
  headers['Content-Type'] = 'application/vnd.ladok-resultat+json'
  headers['X-XSRF-TOKEN'] = self.__get_xsrf_token()
  headers['Referer'] = self.base_gui_url
  
  previous_result = None
  
  for result in student_course_results['results']:
      if result['pending'] is not None:
          if result['pending']['moment_id'] == course_moment_id:
              previous_result = result['pending']
              break
  
  # uppdatera befintligt utkast
  if previous_result:
      put_data = {
          'Resultat': [{
              'ResultatUID': previous_result['id'],
              'Betygsgrad': grade.id,
              'Noteringar': [],
              'BetygsskalaID': grade_scale.id,
              'Examinationsdatum': result_date,
              'SenasteResultatandring': previous_result['last_modified']
          }]
      }
      
      r = self.session.put(
        url=self.base_gui_proxy_url + '/resultat/studieresultat/uppdatera',
        json=put_data,
        headers=headers)
  
  # lägg in nytt betygsutkast
  else:
      post_data = {
          'Resultat': [{
              'StudieresultatUID': student_course_results['id'],
              'UtbildningsinstansUID': course_moment_id,
              'Betygsgrad': grade.id,
              'Noteringar': [],
              'BetygsskalaID': grade_scale.id,
              'Examinationsdatum': result_date
          }]
      }
      r = self.session.post(
        url=self.base_gui_proxy_url + '/resultat/studieresultat/skapa',
        json=post_data,
        headers=headers)
  
  if not 'Resultat' in r.json():
    raise Exception("Couldn't register " +
      course_moment + "=" + grade_raw + " " + result_date_raw + ": " +
        r.json()["Meddelande"])
  
  return True
@


\section{[[get_student_data]], [[get_student_name]]}

<<LadokSession data methods>>=
#####################################################################
#
# get_student_data
#
# person_nr           - personnummer, flera format accepteras enligt regex:
#                       (\d\d)?(\d\d)(\d\d\d\d)[+\-]?(\w\w\w\w)
#
# RETURNERAR {'id': 'xxxx', 'first_name': 'x', 'last_name': 'y', 'person_nr': 'xxx', 'alive': True}

def get_student_data(self, person_nr_raw):
  person_nr =  format_personnummer(person_nr_raw)
  
  if not person_nr: raise Exception('Invalid person nr ' + person_nr_raw)
  
  student_data = self.__get_student_data(person_nr)
  return student_data

#####################################################################
#
# get_student_name
#
# person_nr          - personnummer, flera format accepteras enligt regex:
#                      (\d\d)?(\d\d)(\d\d\d\d)[+\-]?(\w\w\w\w)
#
# RETURNERAR en dictionary med för- och efternamn
#
# {"first_name" : 'Anna', "last_name : 'Andersson'}
#
def get_student_name(self, person_nr_raw):
  person_nr =  format_personnummer(person_nr_raw)
  
  if not person_nr: raise Exception('Invalid person nr ' + person_nr_raw)
  
  student_data = self.__get_student_data(person_nr)
  return {
    "first_name": student_data["first_name"],
    "last_name" : student_data["last_name"]
  }
@


\section{[[all_grading_scale]]}

This is just to maintain the old method name.
<<LadokSession data methods>>=
# added by GQMJr
#####################################################################
#
# all_grading_scale
#
#
# RETURNERAR en dictionary of the grading scales
def all_grading_scale(self):
  return self.get_grade_scales()
@


\section{[[change_locale]]}

This probably changes the default locale in the LADOK web interface.
And that might affect the default languages in responses.
Needs testing though.
<<LadokSession data methods>>=
# added by GQMJr
#####################################################################
#
# change_locale
#
# lang               - language code 'en' or 'sv', defaults to 'sv'
#
# RETURNERAR reponse to the request
def change_locale(self, lang = 'sv'):
  r = self.session.get(
    url=self.base_gui_url+'/services/i18n/changeLocale?lang='+lang,
    headers=self.headers).json()
  return r
@


\section{[[period_info_JSON]]}

This no longer works.
We should investigate if there is another API call to get this information.
<<LadokSession data methods>>=
# added by GQMJr
#####################################################################
#
# period_info_JSON
#
# RETURNERAR JSON of /resultat/grunddata/period
def period_info_JSON(self):
  r = self.session.get(
    url=self.base_gui_proxy_url + '/resultat/internal/grunddata/period',
    # doesn't work, but also not after adding 'internal/' between 'resultat/' 
    # and 'grunddata' /CO
    headers=self.headers).json()
  return r
@


\section{[[organisation_by_uid_JSON]]}

<<LadokSession data methods>>=
# added by GQMJr
#####################################################################
#
# organisation_by_uid_JSON
#
# organisationUid           -- organization's UID
#
# RETURNERAR JSON of selected organization
def organisation_by_uid_JSON(self, organisationUid):
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/kataloginformation/organisation/'+organisationUid,
    headers=self.headers).json()
  return r

# returns:
# {   'Benamning': {'en': 'EECS/Computer Science', 'sv': 'EECS/Datavetenskap'},
# 'Giltighetsperiod': {'Startdatum': '2019-01-01', 'link': []},
# 'Organisationsenhetstyp': 1,
# 'Organisationskod': 'JH',
# 'Uid': '2474f616-dc41-11e8-8cc1-eaeeb71b497f',
# 'link': [   {   'mediaType': 'application/vnd.ladok+xml,application/vnd.ladok-kataloginformation+xml,application/vnd.ladok-kataloginformation+json',
#                 'method': 'GET',
#                 'rel': 'self',
#                 'uri': 'https://api.ladok.se:443/kataloginformation/organisation/2474f616-dc41-11e8-8cc1-eaeeb71b497f'}]}
@


\section{[[examen_student_uid_JSON]]}

This doesn't work anymore.
<<LadokSession data methods>>=
# added by GQMJr
def examen_student_uid_JSON(self, studentUID):
  """
  Returns the student's degree.
  """
  r = self.session.get(
    url=self.base_gui_proxy_url + 'examen/internal/student/+studentUID',
    headers=self.headers).json()
  return r
@


\section{[[student_participation_JSON]]}

This doesn't seem to work anymore.
<<LadokSession data methods>>=
# added by GQMJr
def student_participation_JSON (self, studentUID):
  """
  Returns the student's participation in courses.
  """
  headers = self.headers.copy()
  headers['Content-Type'] = 'application/vnd.ladok-studiedeltagande'
  headers['Accept'] += ', application/vnd.ladok-studiedeltagande'
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/studiedeltagande/internal/tillfallesdeltagande' +
      '/kurstillfallesdeltagande/' + studentUID,
    headers=self.headers)
  return r.json()
@

\section{[[hamtaStudieResultatForStudent_JSON]]}

This doesn't seem to work.
<<LadokSession data methods>>=
# added by GQMJr
def hamtaStudieResultatForStudent_JSON (self, studentUID):
  """
  Returns the study results for a student.
  """
  r = self.session.get(url = self.base_gui_proxy_url +
        '/resultat/internal/studieresultat/resultat/student/'+studentUID,
        headers = self.headers).json()
  return r
@

Let's add a test.
This function should return a dictionary.
<<test functions>>=
def test_hamtaStudieResultatForStudent_JSON():
  r = ladok.hamtaStudieResultatForStudent_JSON(student_uid)
  assert type(r) == dict
@

The output looks like this:
\begin{pycode}[apitest]
print(r"\begin{minted}{JSON}")
print(json.dumps(ladok3.clean_data(
                    ladok.hamtaStudieResultatForStudent_JSON(student_uid)),
                 indent=2))
print(r"\end{minted}")
\end{pycode}


\section{Helper methods}

<<LadokSession data methods>>=
#################################################################
##
## private methods
##

def __get_xsrf_token(self):
  return self.xsrf_token

def get_xsrf_token(self):
  return self.xsrf_token


# returns None or a LADOK-formated date
def __validate_date(self, date_raw):
  datregex = re.compile(r"(\d\d)?(\d\d)-?(\d\d)-?(\d\d)")
  dat = datregex.match(date_raw)
  if dat:
    if dat.group(1) == None: # add 20, ladok3 won't survive till 2100
      return "20" + dat.group(2) + "-" + dat.group(3) + "-" + dat.group(4)
    else:
      return dat.group(1) + dat.group(2) + \
        "-" + dat.group(3) + "-" + dat.group(4)
  else:
    return None

def __get_grade_scale_by_id(self, grade_scale_id):
  return next(grade_scale
    for grade_scale in self.get_grade_scales()
      if grade_scale.id == grade_scale_id)


def __get_grade_scale_by_code(self, grade_scale_code):
  return next(grade_scale
    for grade_scale in self.get_grade_scales()
      if grade_scale.code == grade_scale_code)


def __get_grade_by_id(self, grade_id):
  for grade_scale in self.get_grade_scales():
    for grade in grade_scale.grades():
      if grade.id == grade_id:
        return grade
  
  return None


def __get_student_data(self, person_nr):
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/studentinformation/student/filtrera?limit=2&orderby=EFTERNAMN_ASC&orderby=FORNAMN_ASC&orderby=PERSONNUMMER_ASC&page=1&personnummer='
        + person_nr + '&skipCount=false&sprakkod=sv',
    headers=self.headers).json()['Resultat']
  
  if len(r) != 1: return None
  
  r = r[0]
  # from schemas/schemas.ladok.se-studentinformation.xsd
  #   <xs:complexType name="Student">
  #   <xs:complexContent>
  #     <xs:extension base="base:BaseEntitet">
  #       <xs:sequence>
  #         <xs:element name="Avliden" type="xs:boolean"/>
  #         <xs:element minOccurs="0" name="Efternamn" type="xs:string"/>
  #         <xs:element minOccurs="0" name="ExterntUID" type="xs:string"/>
  #         <xs:element name="FelVidEtableringExternt" type="xs:boolean"/>
  #         <xs:element minOccurs="0" name="Fodelsedata" type="xs:string"/>
  #         <xs:element minOccurs="0" name="Fornamn" type="xs:string"/>
  #         <xs:element minOccurs="0" name="KonID" type="xs:int"/>
  #         <xs:element minOccurs="0" name="Personnummer" type="xs:string"/>
  #         <xs:element minOccurs="0" name="Skyddsstatus" type="xs:string"/>
  #         <xs:element minOccurs="0" ref="si:UnikaIdentifierare"/>
  #       </xs:sequence>
  #     </xs:extension>
  #   </xs:complexContent>
  # </xs:complexType>

  return {
    'id':         r['Uid'], # Ladok-ID
    'first_name': r['Fornamn'],
    'last_name':  r['Efternamn'],
    'person_nr':  r['Personnummer'], # tolv siffror, utan bindestreck eller plustecken
    'alive':  not r['Avliden']
  }

# detta är egentligen kurstillfällen, inte kurser (ID-numret är alltså ett ID-nummer för ett kurstillfälle)
def __get_student_courses(self, student_id):
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/studiedeltagande/tillfallesdeltagande/kurstillfallesdeltagande/student/'
        + student_id,
    headers=self.headers).json()
  
  results = []
  
  for course in r['Tillfallesdeltaganden']:
    if not course['Nuvarande'] or \
       'Utbildningskod' not in course['Utbildningsinformation']:
      continue
    
    results.append({
      'id': course['Uid'],
      'round_id': course['Utbildningsinformation']['UtbildningstillfalleUID'], # ett Ladok-ID för kursomgången
      'education_id': course['Utbildningsinformation']['UtbildningUID'], # ett Ladok-ID för något annat som rör kursen
      'instance_id': course['Utbildningsinformation']['UtbildningsinstansUID'], # ett Ladok-ID för att rapportera in kursresultat
      'code': course['Utbildningsinformation']['Utbildningskod'], # kurskod KOPPS
      'name': course['Utbildningsinformation']['Benamning']['sv']
    })
  
  return results


def __get_student_course_moments(self, course_round_id, student_id):
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/resultat/kurstillfalle/' + str(course_round_id) +
        '/student/' + str(student_id) + '/moment',
    headers=self.headers).json()
  
  return [{
    'course_moment_id': moment['UtbildningsinstansUID'],
    'code': moment['Utbildningskod'],
    'education_id': moment['UtbildningUID'],
    'name': moment['Benamning']['sv']
  } for moment in r['IngaendeMoment']]


def __get_student_course_results(self, course_round_id, student_id):
  r = self.session.get(
    url=self.base_gui_proxy_url +
      '/resultat/studieresultat/student/' + student_id +
        '/utbildningstillfalle/' + course_round_id,
    headers=self.headers).json()
  
  return {
    'id': r['Uid'],
    'results': [{
      'education_id': result['UtbildningUID'],
      'pending': {
        'id': result['Arbetsunderlag']['Uid'],
        'moment_id': result['Arbetsunderlag']['UtbildningsinstansUID'],
        'grade': self.__get_grade_by_id(result['Arbetsunderlag']['Betygsgrad']),
        'date': result['Arbetsunderlag']['Examinationsdatum'],
        'grade_scale': self.__get_grade_scale_by_id(result['Arbetsunderlag']['BetygsskalaID']),
        # behövs vid uppdatering av betygsutkast
        'last_modified': result['Arbetsunderlag']['SenasteResultatandring']
      } if 'Arbetsunderlag' in result else None,
      'attested': {
        'id': result['SenastAttesteradeResultat']['Uid'],
        'moment_id': result['SenastAttesteradeResultat']['UtbildningsinstansUID'],
        'grade': self.__get_grade_by_id(result['SenastAttesteradeResultat']['Betygsgrad']),
        'date': result['SenastAttesteradeResultat']['Examinationsdatum'],
        'grade_scale': self.__get_grade_scale_by_id(result['SenastAttesteradeResultat']['BetygsskalaID'])
      } if 'SenastAttesteradeResultat' in result else None
    } for result in r['ResultatPaUtbildningar']]
  }
@

