---
source: crates/cribo/tests/integration_tests.rs
description: Bundle and requirements generation for project with third-party dependencies
expression: output
---
=== BUNDLE CONTENT ===
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

# Preserved imports
import re

# ─ Module: schemas.user ─
import types
schemas = types.ModuleType('schemas')
schemas.user = types.ModuleType('schemas.user')
exec('"""User schema definitions using Pydantic."""\nfrom pydantic import BaseModel, EmailStr, Field\nfrom typing import Optional\nclass UserSchema(BaseModel):\n    """User model with Pydantic validation."""\n    name: str = Field(..., min_length=1, max_length=100, description="User\'s full name")\n    email: EmailStr = Field(..., description="User\'s email address")\n    age: int = Field(..., ge=0, le=150, description="User\'s age")\n    is_active: bool = Field(default=True, description="Whether the user is active")\n    bio: Optional[str] = Field(default=None, max_length=500, description="User\'s biography")\n\n    class Config:\n        """Pydantic configuration."""\n        json_encoders = {}\n        schema_extra = {"example": {"name": "John Doe", "email": "john@example.com", "age": 30, "is_active": True, "bio": "Software developer"}}\nclass CreateUserRequest(BaseModel):\n    """Request model for creating a new user."""\n    name: str = Field(..., min_length=1, max_length=100)\n    email: EmailStr\n    age: Optional[int] = Field(default=None, ge=0, le=150)\n    bio: Optional[str] = Field(default=None, max_length=500)\nclass UserResponse(BaseModel):\n    """Response model for user data."""\n    id: int\n    name: str\n    email: str\n    age: int\n    is_active: bool\n    bio: Optional[str] = None', schemas.user.__dict__)

# ─ Module: utils.validation ─
import types
utils = types.ModuleType('utils')
utils.validation = types.ModuleType('utils.validation')
exec('"""Validation utilities."""\nimport re\nfrom typing import Union\ndef validate_email(email: str) -> bool:\n    """Simple email validation."""\n    pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\'\n    return bool(re.match(pattern, email))\ndef sanitize_input(text: str) -> str:\n    """Sanitize input text."""\n    dangerous_chars = [\'<\', \'>\', \'"\', "\'", \'&\']\n    sanitized = text\n    for char in dangerous_chars:\n        sanitized = sanitized.replace(char, \'\')\n    return sanitized.strip()\ndef validate_age(age: Union[int, str]) -> bool:\n    """Validate age value."""\n    try:\n        age_int = int(age)\n        return 0 <= age_int <= 150\n    except (ValueError, TypeError):\n        return False', utils.validation.__dict__)

# ─ Module: schemas ─
UserSchema = schemas.user.UserSchema
CreateUserRequest = schemas.user.CreateUserRequest
UserResponse = schemas.user.UserResponse
"""Schemas package initialization."""
__all__ = ["UserSchema", "CreateUserRequest", "UserResponse"]

# ─ Module: utils ─
validate_email = utils.validation.validate_email
sanitize_input = utils.validation.sanitize_input
validate_age = utils.validation.validate_age
"""Utils package initialization."""
__all__ = ["validate_email", "sanitize_input", "validate_age"]

# ─ Entry Module: main ─
UserSchema = schemas.user.UserSchema
CreateUserRequest = schemas.user.CreateUserRequest
validate_email = utils.validation.validate_email
"""Pydantic test project entry point."""
def main():
    """Main function demonstrating Pydantic usage."""
    user_data = {"name": "John Doe", "email": "john@example.com", "age": 25}
    try:
        user = UserSchema(**user_data)
        print(f"Created user: {user}")
        if validate_email(user.email):
            print("Email validation passed")
        user_json = user.model_dump_json()
        print(f"User JSON: {user_json}")
        request = CreateUserRequest(name="Jane Doe", email="jane@example.com")
        print(f"Create request: {request}")
    except ValidationError as e:
        print(f"Validation error: {e}")
if __name__ == "__main__":
    main()
=== END BUNDLE CONTENT ===

=== REQUIREMENTS.TXT ===
pydantic
=== END REQUIREMENTS.TXT ===
