---
source: crates/cribo/tests/test_circular_dependencies.rs
expression: bundled_content
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

# ─ Module: module_a ─
import types
module_a = types.ModuleType('module_a')
exec('def start_process():\n    """Start the processing chain A -> B -> C -> D -> A"""\n    return f"A({process_in_b()})"\ndef final_step():\n    """Final step called by module_d to complete the cycle"""\n    return "A_final"', module_a.__dict__)

# ─ Module: module_b ─
def process_in_b():
    """Process in B, depends on C"""
    return f"B({process_in_c()})"
def step_b():
    return "B_step"

# ─ Module: module_c ─
def process_in_c():
    """Process in C, depends on D"""
    return f"C({process_in_d()})"
def step_c():
    return "C_step"

# ─ Module: module_d ─
def process_in_d():
    """Process in D, depends back on A - completes the 4-module cycle"""
    return f"D({final_step()})"
def step_d():
    return "D_step"

# ─ Entry Module: main ─
def main():
    result = module_a.start_process()
    print(f"Four module cycle result: {result}")
if __name__ == "__main__":
    main()
