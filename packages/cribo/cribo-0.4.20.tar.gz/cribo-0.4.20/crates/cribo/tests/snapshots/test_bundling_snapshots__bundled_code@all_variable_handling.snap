---
source: crates/cribo/tests/test_bundling_snapshots.rs
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

# ─ Module: simple_module ─
import types
simple_module = types.ModuleType('simple_module')
exec('__all__ = ["public_func", "CONSTANT"]\ndef public_func():\n    """A public function that should be exported."""\n    return "Hello from public_func"\ndef _private_func():\n    """A private function that should not be exported."""\n    return "This is private"\nCONSTANT = 42\n_PRIVATE_CONSTANT = "secret"\nclass InternalClass:\n    pass', globals(), simple_module.__dict__)

# ─ Module: nested_package.submodule ─
import types
nested_package = types.ModuleType('nested_package')
nested_package.submodule = types.ModuleType('nested_package.submodule')
exec('__all__ = ["sub_function", "SUB_CONSTANT"]\ndef sub_function():\n    """Function from submodule"""\n    return "Hello from submodule"\ndef _private_sub_func():\n    """Private function in submodule"""\n    return "private submodule function"\nSUB_CONSTANT = "submodule_value"\n__nested_package_submodule_message = "from submodule"', globals(), nested_package.submodule.__dict__)
nested_package.submodule.message = getattr(nested_package.submodule, '__nested_package_submodule_message')

# ─ Module: nested_package.utils ─
import types
nested_package.utils = types.ModuleType('nested_package.utils')
exec('def helper_func():\n    """Helper function used by other modules"""\n    return "helper result"\ndef another_helper():\n    """Another helper function"""\n    return "another helper"\nUTILS_CONSTANT = "utils value"', nested_package.utils.__dict__)

# ─ Module: conflict_module ─
__all__ = ["message", "SHARED_NAME"]
__conflict_module_message = "from conflict_module"
SHARED_NAME = "conflict_module_version"
def internal_func():
    """Internal function not in __all__"""
    return "internal"
__all__backup = "this is not the real __all__"

# ─ Module: nested_package ─
exec('global sub_function, helper_func\nsub_function = nested_package.submodule.sub_function\nhelper_func = nested_package.utils.helper_func\n__all__ = ["exported_from_init", "sub_function"]\ndef exported_from_init():\n    """Function exported from package __init__.py"""\n    return f"From init, using helper: {helper_func()}"\ndef _internal_init_func():\n    """Internal function not exported"""\n    return "internal"\nPACKAGE_CONSTANT = "from_package"\nlocals()[\'sub_function\'] = sub_function\nlocals()[\'helper_func\'] = helper_func', {**globals(), 'nested_package': nested_package}, nested_package.__dict__)

# ─ Entry Module: main ─
public_func = simple_module.public_func
CONSTANT = simple_module.CONSTANT
exported_from_init = nested_package.exported_from_init
sub_function = nested_package.submodule.sub_function
message = __conflict_module_message
sub = nested_package.submodule
print("Testing simple module exports:")
print(f"public_func() = {public_func()}")
print(f"CONSTANT = {CONSTANT}")
print("\nTesting nested package exports:")
print(f"exported_from_init() = {exported_from_init()}")
print(f"sub_function() = {sub_function()}")
print("\nTesting conflict resolution:")
print(f"message = {message}")
print(f"\nsimple_module.__all__ = {simple_module.__all__}")
print(f"submodule.__all__ = {sub.__all__}")
