---
source: crates/cribo/tests/test_circular_dependencies.rs
expression: bundled_content
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys
import types
def __cribo_init___cribo_1444c2_module_a():
    if '__cribo_1444c2_module_a' in sys.modules:
        return sys.modules['__cribo_1444c2_module_a']
    module = types.ModuleType('__cribo_1444c2_module_a')
    module.__file__ = __file__
    sys.modules['__cribo_1444c2_module_a'] = module
    sys.modules['module_a'] = module

    def start_process():
        """Start the processing chain A -> B -> C -> D -> A"""
        return f"A({process_in_b()})"
    module.start_process = start_process

    def final_step():
        """Final step called by module_d to complete the cycle"""
        return "A_final"
    module.final_step = final_step
    return module
__cribo_modules = {'module_a': '__cribo_1444c2_module_a'}
__cribo_init_functions = {'__cribo_1444c2_module_a': __cribo_init___cribo_1444c2_module_a}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
def process_in_b():
    """Process in B, depends on C"""
    return f"B({process_in_c()})"
def step_b():
    return "B_step"
def process_in_c():
    """Process in C, depends on D"""
    return f"C({process_in_d()})"
def step_c():
    return "C_step"
def process_in_d():
    """Process in D, depends back on A - completes the 4-module cycle"""
    return f"D({final_step()})"
def step_d():
    return "D_step"
__cribo_init___cribo_1444c2_module_a()
sys.modules['module_a'].process_in_b = process_in_b
module_a = sys.modules['module_a']
def main():
    result = module_a.start_process()
    print(f"Four module cycle result: {result}")
if __name__ == "__main__":
    main()
