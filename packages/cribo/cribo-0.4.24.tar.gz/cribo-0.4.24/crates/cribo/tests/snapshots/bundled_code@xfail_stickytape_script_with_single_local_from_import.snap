---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/bundling/xfail_stickytape_script_with_single_local_from_import/main.py
---
import sys, types
def __cribo_init___cribo_2d7403_greeting():
    if '__cribo_2d7403_greeting' in sys.modules:
        return sys.modules['__cribo_2d7403_greeting']
    module = types.ModuleType('__cribo_2d7403_greeting')
    module.__file__ = '/Volumes/workplace/GitHub/ophidiarium/cribo/crates/cribo/tests/fixtures/bundling/xfail_stickytape_script_with_single_local_from_import/greeting.py'
    sys.modules['__cribo_2d7403_greeting'] = module
    sys.modules['greeting'] = module
    message = "Hello"
    module.message = message
    return module
__cribo_modules = {'greeting': '__cribo_2d7403_greeting'}
__cribo_init_functions = {'__cribo_2d7403_greeting': __cribo_init___cribo_2d7403_greeting}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
__cribo_init___cribo_2d7403_greeting()
message = sys.modules['greeting'].message
print(message)
