---
source: crates/cribo/tests/test_circular_dependencies.rs
expression: bundled_content
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys, types
def __cribo_init___cribo_176078_pkg1():
    if '__cribo_176078_pkg1' in sys.modules:
        return sys.modules['__cribo_176078_pkg1']
    module = types.ModuleType('__cribo_176078_pkg1')
    module.__file__ = __file__
    sys.modules['__cribo_176078_pkg1'] = module
    sys.modules['pkg1'] = module

    def main_function():
        """Main function that uses helper from pkg2"""
        return f"pkg1.main({helper_function()})"
    module.main_function = main_function

    def utility_function():
        """Utility that pkg2 will import"""
        return "pkg1_utility"
    module.utility_function = utility_function
    return module
__cribo_modules = {'pkg1': '__cribo_176078_pkg1'}
__cribo_init_functions = {'__cribo_176078_pkg1': __cribo_init___cribo_176078_pkg1}
class CriboBundledFinder:

    def __init__(self, module_registry, init_functions):
        self.module_registry = module_registry
        self.init_functions = init_functions

    def find_spec(self, fullname, path, target=None):
        if fullname in self.module_registry:
            synthetic_name = self.module_registry[fullname]
            if synthetic_name not in sys.modules:
                init_func = self.init_functions.get(synthetic_name)
                if init_func:
                    init_func()
            import importlib.util
            return importlib.util.find_spec(synthetic_name)
        return None
sys.meta_path.insert(0, CriboBundledFinder(__cribo_modules, __cribo_init_functions))
def helper_function():
    """Helper function that depends on pkg1"""
    util_result = utility_function()
    return f"pkg2.helper(using_{util_result})"
def another_helper():
    """Another function in pkg2"""
    return "pkg2_helper"
__cribo_init___cribo_176078_pkg1()
sys.modules['pkg1'].helper_function = helper_function
pkg1 = sys.modules['pkg1']
def main():
    result = pkg1.main_function()
    print(f"Package cycle result: {result}")
if __name__ == "__main__":
    main()
