Metadata-Version: 2.4
Name: sphinx_reports
Version: 0.9.7
Summary: A Sphinx extension providing reports and summaries embedded in documentation pages.
Home-page: https://GitHub.com/pyTooling/sphinx_reports
Author: Patrick Lehmann
Author-email: Paebbels@gmail.com
License: Apache-2.0
Project-URL: Documentation, https://pyTooling.GitHub.io/sphinx_reports
Project-URL: Source Code, https://GitHub.com/pyTooling/sphinx_reports
Project-URL: Issue Tracker, https://GitHub.com/pyTooling/sphinx_reports/issues
Keywords: Python3,Sphinx,Extension,Report,doc-string,interrogate,Code Coverage,Coverage,Documentation Coverage,Unittest,Dependencies,Summary
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Classifier: Framework :: Sphinx
Classifier: Framework :: Sphinx :: Domain
Classifier: Framework :: Sphinx :: Extension
Classifier: Topic :: Documentation :: Sphinx
Classifier: Topic :: Software Development :: Documentation
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Software Development :: Testing :: Unit
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Development Status :: 4 - Beta
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: pyEDAA.Reports~=0.17
Requires-Dist: pyTooling<9.0,>=6.7
Requires-Dist: docutils~=0.21
Requires-Dist: sphinx~=8.2
Requires-Dist: docstr_coverage~=2.3.2
Requires-Dist: Coverage~=7.8
Requires-Dist: docutils_stubs~=0.0.22
Provides-Extra: doc
Requires-Dist: pyEDAA.Reports~=0.17; extra == "doc"
Requires-Dist: sphinx_autodoc_typehints~=3.2; extra == "doc"
Requires-Dist: sphinx_rtd_theme~=3.0; extra == "doc"
Requires-Dist: pyTooling<9.0,>=6.7; extra == "doc"
Requires-Dist: docutils~=0.21; extra == "doc"
Requires-Dist: sphinx~=8.2; extra == "doc"
Requires-Dist: docstr_coverage~=2.3.2; extra == "doc"
Requires-Dist: autoapi~=2.0.1; extra == "doc"
Requires-Dist: Coverage~=7.8; extra == "doc"
Requires-Dist: sphinx_design~=0.6.1; extra == "doc"
Requires-Dist: sphinxcontrib-mermaid~=1.0; extra == "doc"
Requires-Dist: sphinx-copybutton~=0.5.2; extra == "doc"
Requires-Dist: docutils_stubs~=0.0.22; extra == "doc"
Provides-Extra: test
Requires-Dist: pyEDAA.Reports~=0.17; extra == "test"
Requires-Dist: pyTooling<9.0,>=6.7; extra == "test"
Requires-Dist: docutils~=0.21; extra == "test"
Requires-Dist: sphinx~=8.2; extra == "test"
Requires-Dist: docstr_coverage~=2.3.2; extra == "test"
Requires-Dist: mypy~=1.16; extra == "test"
Requires-Dist: Coverage~=7.8; extra == "test"
Requires-Dist: lxml~=5.4; extra == "test"
Requires-Dist: pytest-cov~=6.1; extra == "test"
Requires-Dist: typing_extensions~=4.13; extra == "test"
Requires-Dist: pytest~=8.4; extra == "test"
Requires-Dist: docutils_stubs~=0.0.22; extra == "test"
Provides-Extra: all
Requires-Dist: pyEDAA.Reports~=0.17; extra == "all"
Requires-Dist: sphinx_autodoc_typehints~=3.2; extra == "all"
Requires-Dist: sphinx_rtd_theme~=3.0; extra == "all"
Requires-Dist: docutils~=0.21; extra == "all"
Requires-Dist: pyTooling<9.0,>=6.7; extra == "all"
Requires-Dist: sphinx~=8.2; extra == "all"
Requires-Dist: docstr_coverage~=2.3.2; extra == "all"
Requires-Dist: autoapi~=2.0.1; extra == "all"
Requires-Dist: Coverage~=7.8; extra == "all"
Requires-Dist: mypy~=1.16; extra == "all"
Requires-Dist: pytest-cov~=6.1; extra == "all"
Requires-Dist: lxml~=5.4; extra == "all"
Requires-Dist: sphinx_design~=0.6.1; extra == "all"
Requires-Dist: typing_extensions~=4.13; extra == "all"
Requires-Dist: sphinxcontrib-mermaid~=1.0; extra == "all"
Requires-Dist: sphinx-copybutton~=0.5.2; extra == "all"
Requires-Dist: pytest~=8.4; extra == "all"
Requires-Dist: docutils_stubs~=0.0.22; extra == "all"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

[![Sourcecode on GitHub](https://img.shields.io/badge/pyTooling-sphinx--reports-323131.svg?logo=github&longCache=true)](https://github.com/pyTooling/sphinx-reports)
[![Sourcecode License](https://img.shields.io/pypi/l/sphinx-reports?longCache=true&style=flat-square&logo=Apache&label=code)](LICENSE.md)
[![Documentation](https://img.shields.io/website?longCache=true&style=flat-square&label=pyTooling.github.io%2Fsphinx-reports&logo=GitHub&logoColor=fff&up_color=blueviolet&up_message=Read%20now%20%E2%9E%9A&url=https%3A%2F%2FpyTooling.github.io%2Fsphinx%2Dreports%2Findex.html)](https://pyTooling.github.io/sphinx-reports/)
[![Documentation License](https://img.shields.io/badge/doc-CC--BY%204.0-green?longCache=true&style=flat-square&logo=CreativeCommons&logoColor=fff)](LICENSE.md)  
[![PyPI](https://img.shields.io/pypi/v/sphinx-reports?longCache=true&style=flat-square&logo=PyPI&logoColor=FBE072)](https://pypi.org/project/sphinx-reports/)
![PyPI - Status](https://img.shields.io/pypi/status/sphinx-reports?longCache=true&style=flat-square&logo=PyPI&logoColor=FBE072)
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sphinx-reports?longCache=true&style=flat-square&logo=PyPI&logoColor=FBE072)  
[![GitHub Workflow - Build and Test Status](https://img.shields.io/github/actions/workflow/status/pyTooling/sphinx-reports/Pipeline.yml?branch=main&longCache=true&style=flat-square&label=build%20and%20test&logo=GitHub%20Actions&logoColor=FFFFFF)](https://GitHub.com/pyTooling/sphinx-reports/actions/workflows/Pipeline.yml)
[![Libraries.io status for latest release](https://img.shields.io/librariesio/release/pypi/sphinx-reports?longCache=true&style=flat-square&logo=Libraries.io&logoColor=fff)](https://libraries.io/github/pyTooling/sphinx-reports)
[![Codacy - Quality](https://img.shields.io/codacy/grade/9a89bbc1d2c04a699ea14abea75588c7?longCache=true&style=flat-square&logo=Codacy)](https://www.codacy.com/gh/pyTooling/sphinx-reports)
[![Codacy - Coverage](https://img.shields.io/codacy/coverage/9a89bbc1d2c04a699ea14abea75588c7?longCache=true&style=flat-square&logo=Codacy)](https://www.codacy.com/gh/pyTooling/sphinx-reports)
[![Codecov - Branch Coverage](https://img.shields.io/codecov/c/github/pyTooling/sphinx-reports?longCache=true&style=flat-square&logo=Codecov)](https://codecov.io/gh/pyTooling/sphinx-reports)


<!--
[![GitHub release date](https://img.shields.io/github/release-date/pyTooling/sphinx-reports?logo=GitHub&)](https://github.com/pyTooling/sphinx-reports/releases)  
[![Dependent repos (via libraries.io)](https://img.shields.io/librariesio/dependent-repos/pypi/sphinx-reports)](https://github.com/pyTooling/sphinx-reports/network/dependents)  
-->


# Sphinx Reports

The Sphinx extension `sphinx_reports` offers a set of directives to integrate reports and summaries into the
documentation generated by Sphinx.

Supported format reports are:
* ‚úÖüöß Unit Test summaries (by [pytest](https://github.com/pytest-dev/pytest))
  * ‚úÖ Summary page (displaying `unittest.xml`)
  * üöß Show logging, output and error messages.
* üöß Code coverage (by [Coverage.py](https://github.com/nedbat/coveragepy))
  * ‚úÖ Summary page (displaying `coverage.json`)
  * üöß Individual Sphinx documents per package/module
  * üöß Highlighted source code with syntax highlighting and coverage highlighting
* üöß Documentation coverage
  * ‚úÖ Summary page (displaying data from ["""docstr_coverage"""](https://github.com/HunterMcGushion/docstr_coverage))
  * ‚ùì Additionally support [interrogate](https://github.com/econchick/interrogate) as data source.
  * üöß Individual Sphinx documents per package/module
  * üöß Highlighted source code with syntax highlighting and coverage highlighting 
* üöß Package Dependencies
  * üöß Summary page (displaying `requirements.txt`)


## Extension Configuration

This README demonstrates a quick and minimal configuration for the Sphinx extension and it's provided directives. See
the [sphinx-reports documentation](https://pyTooling.github.io/sphinx-reports) for more details.

At first, add the extension name to the list of extensions in `conf.py`, so the extension is loaded by Sphinx.

```Python
# Sphinx extensions
extensions = [
  # ...
  "sphinx_reports",
]
```

Each report directive might require an individual configuration, therefore see the next sections for details.


## Unittest Report Summary

The *Unittests Report* collects the success or failure of unittests. The results are typically stored in an XML file,
which can be read by **sphinx-reports**. After reading the structure of testsuites and testcases, the report can be
visualized. The user  

![Unitest Summary Page](doc/_static/Unittest.png)


This is a quick and minimal configuration for the *unittest summary* directives.
See the [unittest](https://pyTooling.github.io/sphinx-reports/Unittest/index.html) documentation for more details.

<details><summary>Quick Configuration - Step-by-Step</summary>

1. Configure one or more coverage analysis reports in `conf.py` by adding a new 'section' defining some configuration
   variables. Each unittest report is identified by an ID, which is later referred to by the report directive. Here, the
   ID is called ``src`` (dictionary key). Each unittest report needs 1 configuration entry:

   * `xml_report` - The unittest report as XML file as generated by *pytest*.

   ```Python
   report_unittest_testsuites = {
     "src": {
       "xml_report": "../report/unit/unittest.xml"
     }
   }
   ```
2. Add the `unittest-summary` directive into your Restructured Text (ReST) document.

   * `reportid` - The ID used in `conf.py` to describe a report.

   ```ReST
   .. report:unittest-summary::
      :reportid: src
   ```

</details>

## Code Coverage Summary

*Code Coverage* checks if a source code was used during execution. Usually, testcases are run by a testcase execution
framework like [pytest](https://github.com/pytest-dev/pytest), which also offers to instrument the code for code
coverage collection using the `pytest-cov` plugin. For Python, coverage collection is usually based on
[Coverage.py](https://github.com/nedbat/coveragepy>), which supports statement and branch coverage collection either as
XML or JSON files. **sphinx-reports** can visualize a code coverage summary from JSON files. 

![Code Coverage Summary Page](doc/_static/CodeCoverage.png)


This is a quick and minimal configuration for the *code coverage* directives.
See the [code coverage](https://pyTooling.github.io/sphinx-reports/CodeCov/index.html) documentation for more details.

<details><summary>Quick Configuration - Step-by-Step</summary>

1. Configure one or more coverage analysis reports in `conf.py` by adding a new 'section' defining some configuration
   variables. Each analysis report is identified by an ID, which is later referred to by the report directive. Here, the
   ID is called ``src`` (dictionary key). Each analysis report needs 4 configuration entries:

   * `name` - Name of the Python package[^1].
   * `json_report` - The code coverage report as JSON file as generated by *Coverage.py*.
   * `fail_below` - An integer value in range 0..100, for when a code coverage is considered FAILED.
   * `levels` - A predefined color pallet name or a dictionary of coverage limits, their description and CSS style classes.

   ```Python
   # ==============================================================================
   # Sphinx-reports - CodeCov
   # ==============================================================================
   report_codecov_packages = {
     "src": {
       "name":        "myPackage",
       "json_report": "../report/coverage/coverage.json",
       "fail_below":  80,
       "levels":      "default"
     }
   }
   ```
2. Add the `code-coverage` directive into your Restructured Text (ReST) document.

   * `reportid` - The ID used in `conf.py` to describe a Python package.

   ```ReST
   .. report:code-coverage::
      :reportid: src
   ```

</details>


## Documentation Coverage Summary

*Documentation Coverage* counts how many publicly accessible members are documented using a Python *doc-string*. Based
on the count of possibly documented public members and the actual number of non-empty *doc-strings*, a percentage of
documentation coverage can be computed.

Documentation coverage is a measure of code quality, which expresses how well documented (completeness or documentation,
but not necessarily quality/helpfulness of documentation) source code is. Well documented code helps to use and maintain
the existing code base. It also allows for automated documentation generation.

![Documentation Coverage Summary Page](doc/_static/DocCoverage.png)


This is a quick and minimal configuration for the *documentation coverage* directives.
See the [documentation coverage](https://pyTooling.github.io/sphinx-reports/DocCov/index.html) documentation for more
details.

<details><summary>Quick Configuration - Step-by-Step</summary>

1. Configure one or more Python packages for documentation coverage analysis in `conf.py` by adding a new 'section' 
   defining some configuration variables. Each package is identified by an ID, which is later referred to by the report
   directive. Here, the ID is called `src` (dictionary key). Each package needs 4 configuration entries:

   * `name` - Name of the Python package[^1].
   * `directory` - The directory of the package to analyze.
   * `fail_below` - An integer value in range 0..100, for when a documentation coverage is considered FAILED.
   * `levels` - A predefined color pallet name or a dictionary of coverage limits, their description and CSS style classes.

   ```Python
   # ==============================================================================
   # Sphinx-reports - DocCov
   # ==============================================================================
   report_doccov_packages = {
     "src": {
       "name":       "myPackage",
       "directory":  "../myPackage",
       "fail_below": 80,
       "levels":     "default"
     }
   }
   ```
2. Add the `doc-coverage` directive into your Restructured Text (ReST) document.
 
   * `reportid` - The ID used in `conf.py` to describe a Python package.

   ```ReST
   .. report:doc-coverage::
      :reportid: src
   ```

</details>


## Package Dependencies

üöß In planning phase üöß



## Contributors

* [Patrick Lehmann](https://github.com/Paebbels) (Maintainer)
* [and more...](https://GitHub.com/pyTooling/sphinx-reports/graphs/contributors)


## License

This Python package (source code) is licensed under [Apache License 2.0](LICENSE.md).  
The accompanying documentation is licensed under Creative Commons - Attribution-4.0 (CC-BY 4.0).


-------------------------

SPDX-License-Identifier: Apache-2.0


[^1]: Toplevel Python packages can reside in a directory not matching the package name. This is possible because the
      toplevel package name is set in the package installation description. This is not good practice, but possible and
      unfortunately widely used. E.g. `src` as directory name.
