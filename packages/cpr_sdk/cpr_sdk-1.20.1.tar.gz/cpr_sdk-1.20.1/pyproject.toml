[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "cpr_sdk"
# This version is a placeholder that is overwritten during release.
# The placeholder is replaced by the value from the cpr_sdk package itself.
version = "1.20.1"
description = ""
authors = ["CPR Tech <tech@climatepolicyradar.org>"]
readme = "README.md"
packages = [{ include = "cpr_sdk", from = "src" }]
classifiers = [
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

license = "LICENSE"

[project.urls]
Homepage = "https://github.com/climatepolicyradar/cpr-sdk"
Repository = "https://github.com/climatepolicyradar/cpr-sdk"
Changelog = "https://github.com/climatepolicyradar/cpr-sdk/blob/main/CHANGELOG.md"


[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.10.4"
boto3 = "^1.35.86"
tqdm = "^4.67.1"
aws-error-utils = "^2.7.0"
pandas = "^2.2.3"
datasets = "^3.2.0"
langdetect = "^1.0.9"
deprecation = "^2.1.0"
numpy = "<2"
pyvespa = { version = "^0.45.0", optional = true }
pyyaml = { version = "^6.0.2", optional = true }
spacy = { version = "^3.7.5", optional = true }
prefect = { extras=["slack"], version = ">=3.0.0", optional = true }
poetry = "^1.8.5"
flatten-dict = "^0.4.2"
rich = "^13.9.4"

[tool.poetry.extras]
vespa = ["pyvespa", "pyyaml", "sentence-transformers", "torch"]
spacy = ["spacy"]
datasets = ["datasets"]
orchestration = ["prefect"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
pyright = "^1.1.391"
pytest = "^8.3.4"
black = "^24.10.0"
moto = { extras = ["s3"], version = "^5.0.24" }
pytest-dotenv = "^0.5.2"

[tool.poetry.group.search_tests]
optional = true

[tool.poetry.group.search_tests.dependencies]
typer = "^0.12.5"
pytest = "^8.3.3"
pytest-html = "^4.1.1"
ipykernel = "^6.29.5"
pyvespa = "^0.45.0"
python-dotenv = ">=0.21.0"
pytest-dotenv = "^0.5.2"

[tool.poetry.group.tools_agents]
optional = true

[tool.poetry.group.tools_agents.dependencies]
pydantic-ai = "^0.1.9"

[tool.pytest.ini_options]
addopts = "-p no:cacheprovider"
env_files = """
    .env.test
    .env
"""
markers = ["vespa", "search_test"]

[tool.black-jupyter]
line-length = 88
target-version = ["py39"]

[tool.ruff]
line-length = 88
lint.select = ["E", "F", "D"]
# Docstring Ignores:
# D100 - Missing docstring in public module
# D103 - Missing docstring in public function
# D104 - Missing docstring in public package
# D107 - Missing docstring in __init__
# D202 - No blank lines allowed after function docstring
# D203 - 1 blank line required before class docstring
# D213 - Multi-line docstring summary should start at the first line
# D400 - First line should end with a period
# D401 - First line should be in imperative mood
# D406 - Section name should end with a newline
# D407 - Missing dashed underline after section
# D413 - Missing blank line after last section
# D415 - First line should end with a period, question mark, or exclamation point
lint.ignore = [
  "D100",
  "D103",
  "D104",
  "D107",
  "D202",
  "D203",
  "D212",
  "D400",
  "D401",
  "D406",
  "D407",
  "D413",
  "D415",
  "E501",
]

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]
