# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common import common_pb2 as common_dot_common__pb2
from exchanger_cabinet import courses_pb2 as exchanger__cabinet_dot_courses__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in exchanger_cabinet/courses_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CourseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCourses = channel.unary_unary(
                '/exchanger_course_router.CourseService/GetCourses',
                request_serializer=common_dot_common__pb2.GetCoursesRequest.SerializeToString,
                response_deserializer=common_dot_common__pb2.GetCoursesResponse.FromString,
                _registered_method=True)
        self.SetParams = channel.unary_unary(
                '/exchanger_course_router.CourseService/SetParams',
                request_serializer=exchanger__cabinet_dot_courses__pb2.SetParamsRequest.SerializeToString,
                response_deserializer=exchanger__cabinet_dot_courses__pb2.SetParamsResponse.FromString,
                _registered_method=True)
        self.CountDirections = channel.unary_unary(
                '/exchanger_course_router.CourseService/CountDirections',
                request_serializer=exchanger__cabinet_dot_courses__pb2.CountDirectionsRequest.SerializeToString,
                response_deserializer=exchanger__cabinet_dot_courses__pb2.CountDirectionsResponse.FromString,
                _registered_method=True)


class CourseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCourses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountDirections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CourseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCourses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourses,
                    request_deserializer=common_dot_common__pb2.GetCoursesRequest.FromString,
                    response_serializer=common_dot_common__pb2.GetCoursesResponse.SerializeToString,
            ),
            'SetParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetParams,
                    request_deserializer=exchanger__cabinet_dot_courses__pb2.SetParamsRequest.FromString,
                    response_serializer=exchanger__cabinet_dot_courses__pb2.SetParamsResponse.SerializeToString,
            ),
            'CountDirections': grpc.unary_unary_rpc_method_handler(
                    servicer.CountDirections,
                    request_deserializer=exchanger__cabinet_dot_courses__pb2.CountDirectionsRequest.FromString,
                    response_serializer=exchanger__cabinet_dot_courses__pb2.CountDirectionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exchanger_course_router.CourseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('exchanger_course_router.CourseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CourseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCourses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchanger_course_router.CourseService/GetCourses',
            common_dot_common__pb2.GetCoursesRequest.SerializeToString,
            common_dot_common__pb2.GetCoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchanger_course_router.CourseService/SetParams',
            exchanger__cabinet_dot_courses__pb2.SetParamsRequest.SerializeToString,
            exchanger__cabinet_dot_courses__pb2.SetParamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountDirections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exchanger_course_router.CourseService/CountDirections',
            exchanger__cabinet_dot_courses__pb2.CountDirectionsRequest.SerializeToString,
            exchanger__cabinet_dot_courses__pb2.CountDirectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
