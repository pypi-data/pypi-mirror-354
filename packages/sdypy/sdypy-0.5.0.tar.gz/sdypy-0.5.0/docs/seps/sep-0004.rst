=====================================
SEP 4 — SDyPy package content roadmap
=====================================

:Authors: Janko Slavič <janko.slavic@fs.uni-lj.si>, 
          Klemen Zaletelj <klemen.zaletelj@fs.uni-lj.si>,
          Domen Gorjup <domen.gorjup@fs.uni-lj.si> 
:Status: Draft
:Type: Process
:Created: 2021-04-12


Abstract
--------

This roadmap should be clear about what should be the core 
capabilities of the SDyPy (namespace) packages. This roadmap should also serve as a radar of packages which 
could be integrated (if this is suggested by the autors) into SDyPy.

Motivation and Scope
--------------------

SDyPy is supporting individual user(s) driven packages. However, for long-term stability of the effort it is
better that the development and governance is transfered to an independent, multi-institution, open and transparent 
organisation.
SDyPy organisation was established to provide this long-term stability. If individual packages are based 
on the SDyPy project template then they can easily transition from level 4 or 3 to level 2 or 1 namespace 
packages. The integration to the SDyPy package/organisation is made if:
   * the authors propose such integration and
   * the functionalities of the package extend the capabilities of the sdypy package as written in this SEP 
     (this SEP is open always for discussion and extensions).

The transition to SDyPy should preserve as much of development history as possible (git).

Detailed description
--------------------
The structure of SDyPy is defined with this SEP and should reflect the scientific topics typically researched. 
It is prefered that general numerical methods, applicable to different fields of science, should be developed 
elsewhere, e.g. in Scipy.

The long-term functionalities the sdypy package should have are:

* ``sdypy.excitation``: Excitation signal generation
   * short term goal inclusion of ``pyExSi`` as a namespace package
   * currently prefered package: ``pyExSi``

* ``sdypy.control``: Control of dynamic systems
   * looking for contributors

* ``sdypy.model``: System modeling (FEM,...)
   * lumped mass system generator
   * looking for contributors

* ``sdypy.system``: System identification methods
   * methods for damping identification
   * methods for joint identification
   * looking for contributors

* ``sdypy.FRF``: Frequency Response Function computation
   * short/long term goal is to develop a new package (based on pyFRF or any other package(s)) 
     with MIMO, windowing, units, delay handling, etc.
   * currently prefered package: ``pyFRF``

* ``sdypy.view``: Visualisation of data (models, time/frequency domain)
   * 2D/3D model support, probably based on ``pyVista``
   * 2D ploting 
   * looking for contributors

* ``sdypy.EMA``: Experimental Modal Analysis
   * implemented as ``sdypy.EMA``, further development required (e.g. MIMO identification)

* ``sdypy.OMA``: Operational Modal Analysis
   * probably OMA will be integrated under EMA with specific parameters. This issue is open.

* ``sdypy.reduction``: Model reduction and coupling
   * looking for contributors

* ``sdypy.fatigue``: Vibration fatigue in frequency-domain
   * short term goal inclusion of ``FLife`` as a namespace package
   * currently prefered package: ``FLife``

* ``sdypy.holography``: Methods to identify vibrational response using acoustic holography
   * looking for contributors
   
* ``sdypy.image``: Methods to identify vibrational response from image data
   * image based methods, pyIDI a good candidate
   * looking for contributors

* ``sdypy.io``: Input/Output methods
   * short term goal is importing ``pyUFF`` and ``lvm_read`` into the ``sdypy.io`` package.
   * long term goal is the implementation of various input/output methods into the ``sdypy.io`` package.
   * currently prefered package: ``pyUFF``


Discussion
----------

This section may just be a bullet list including links to any discussions
regarding the SEP:

- This includes links to mailing list threads or relevant GitHub issues.


References and Footnotes
------------------------

.. [1] Each SEP must either be explicitly labeled as placed in the public domain (see
   this SEP as an example) or licensed under the `Open Publication License`_.

.. _Open Publication License: https://www.opencontent.org/openpub/


Copyright
---------

This document has been placed in the public domain. [1]_
