"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[515],{5515:(e,t,a)=>{a.r(t),a.d(t,{default:()=>E});var n=a(5063),o=a(9674),r=a(9389),i=a(3549),c=a(9560),s=a(1689),d=a(6313),l=a(8607),h=a(2088),m=a(1767),g=a(1542),u=a(4918),p=a(484),y=a(7262),C=a(3826);const v={id:"jupyterlab-chat-extension:chatCommandRegistry",description:"The chat command registry used by the jupyterlab-chat-extension.",autoStart:!0,provides:o.IChatCommandRegistry,activate:e=>new o.ChatCommandRegistry};class f{constructor(){this.id="jupyter-chat:emoji-commands",this._slash_commands=[{name:":heart:",replaceWith:"❤ ",providerId:this.id,description:"Emoji",icon:"❤"},{name:":smile:",replaceWith:"🙂 ",providerId:this.id,description:"Emoji",icon:"🙂"},{name:":thinking:",replaceWith:"🤔 ",providerId:this.id,description:"Emoji",icon:"🤔"},{name:":cool:",replaceWith:"😎 ",providerId:this.id,description:"Emoji",icon:"😎"}],this._regex=/^:\w*:?/}async getChatCommands(e){var t,a;const n=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];return n?this._slash_commands.filter((e=>e.name.startsWith(n))):[]}async handleChatCommand(e,t){}}const I={id:"jupyterlab-chat-extension:emojiCommandsPlugin",description:"Plugin which adds emoji commands to the chat.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new f)}};var w=a(3345),b=a.n(w);const M={id:"jupyterlab-chat-extension:mentionCommandsPlugin",description:"Plugin which adds user mention commands.",autoStart:!0,requires:[o.IChatCommandRegistry],activate:(e,t)=>{t.addProvider(new T)}};class T{constructor(){this.id="jupyter-chat:mention-commands",this._regex=/^@[\w-]*:?/,this._users=new Map}async getChatCommands(e){var t,a;this._users.clear();const n=null===(a=null===(t=e.currentWord)||void 0===t?void 0:t.match(this._regex))||void 0===a?void 0:a[0];return n?(e.chatContext.users.forEach((e=>{let t=e.mention_name;t||(t=R.getMentionName(e),e.mention_name=t),this._users.set(t,{user:e,icon:b().createElement(o.Avatar,{user:e})})})),Array.from(this._users).sort().filter((e=>e[0].toLowerCase().startsWith(n.toLowerCase()))).map((e=>({name:e[0],providerId:this.id,icon:e[1].icon})))):[]}async handleChatCommand(e,t){var a;t.replaceCurrentWord(`${e.name} `),this._users.has(e.name)&&(null===(a=t.addMention)||void 0===a||a.call(t,this._users.get(e.name).user))}}var R;!function(e){e.getMentionName=function(e){var t,a;return`@${(null!==(a=null!==(t=e.display_name)&&void 0!==t?t:e.name)&&void 0!==a?a:e.username).replace(/ /g,"-")}`}}(R||(R={}));const x="Chat",W="jupyterlab-chat-extension:factory",F={id:"jupyterlab-chat-extension:attachmentOpener",description:"The attachment opener registry.",autoStart:!0,provides:o.IAttachmentOpenerRegistry,activate:e=>{const t=new o.AttachmentOpenerRegistry;return t.set("file",(t=>{e.commands.execute("docmanager:open",{path:t.value})})),t}},D={id:W,description:"Document factories for chat.",autoStart:!0,requires:[m.IRenderMimeRegistry],optional:[C.IActiveCellManagerToken,o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,r.ICollaborativeContentProvider,d.IDefaultFileBrowser,C.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,C.ISelectionWatcherToken,g.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,u.ITranslator,C.IWelcomeMessage],provides:C.IChatFactory,activate:(e,t,a,n,r,i,s,d,l,h,m,g,p,v,f,I)=>{const w=null!=f?f:u.nullTranslator;let b;const M=new C.WidgetConfig({});function T(t){const a=M.config.defaultDirectory,n=t.get("defaultDirectory").composite;i&&a&&a!==n&&e.serviceManager.contents.get(a).then((t=>{0===t.content.length&&e.serviceManager.contents.delete(a).catch((e=>{}))})).catch((()=>{}));let o=Promise.resolve(null);i&&n&&a!==n&&(o=e.serviceManager.contents.get(n,{content:!1}).catch((async()=>e.serviceManager.contents.newUntitled({type:"directory"}).then((async t=>e.serviceManager.contents.rename(t.path,n).catch((a=>{throw e.serviceManager.contents.delete(t.path),new Error(a)})))).catch((e=>{throw new Error(e)}))))),o.then((()=>{M.config={sendWithShiftEnter:t.get("sendWithShiftEnter").composite,stackMessages:t.get("stackMessages").composite,unreadNotifications:t.get("unreadNotifications").composite,enableCodeToolbar:t.get("enableCodeToolbar").composite,sendTypingNotification:t.get("sendTypingNotification").composite,defaultDirectory:n}}))}g&&(v&&(b=(0,c.createToolbarFactory)(v,g,x,W,w)),Promise.all([e.restored,g.load(W)]).then((([,e])=>{T(e),e.changed.connect(T)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const R=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(C.chatFileType),i){const e=()=>C.YChat.create();i.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new C.LabChatModelFactory({user:t,widgetConfig:M,commands:e.commands,activeCellManager:a,selectionWatcher:m,documentManager:null==s?void 0:s.model.manager});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const F=new C.ChatWidgetFactory({name:x,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:p,rmRegistry:t,toolbarFactory:b,translator:w,chatCommandRegistry:r,attachmentOpenerRegistry:n,inputToolbarFactory:d,messageFooterRegistry:h,welcomeMessage:I});if(F.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{R.save(a)})),R.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(C.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(F),l){const t=new y.PromiseDelegate,a=()=>{e.commands.hasCommand(C.CommandIDs.openChat)&&(t.resolve(),e.commands.commandChanged.disconnect(a))};e.commands.commandChanged.connect(a),l.restore(R,{command:C.CommandIDs.openChat,args:e=>{var t;return{filepath:null!==(t=e.model.name)&&void 0!==t?t:"",inSidePanel:e instanceof o.ChatWidget}},name:e=>e.model.name,when:t.promise})}return{widgetConfig:M,tracker:R}}},j={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[r.ICollaborativeContentProvider,C.IChatFactory],optional:[C.IActiveCellManagerToken,C.IChatPanel,c.ICommandPalette,d.IDefaultFileBrowser,l.ILauncher,C.ISelectionWatcherToken],activate:(e,t,a,r,i,d,l,h,m)=>{const{commands:g}=e,{tracker:u,widgetConfig:p}=a;g.addCommand(C.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async t=>{var a,n;const o=null!==(a=t.inSidePanel)&&void 0!==a&&a;let r=null!==(n=t.name)&&void 0!==n?n:null,i="";if(r||(r=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===r)return;r&&(i=r.endsWith(C.chatFileType.extensions[0])?r:`${r}${C.chatFileType.extensions[0]}`,i=s.PathExt.join(p.config.defaultDirectory||"",i));let d=!0;if(i?await e.serviceManager.contents.get(i,{content:!1}).catch((()=>{d=!1})):d=!1,!d){let t=await e.serviceManager.contents.newUntitled({type:"file",ext:C.chatFileType.extensions[0]});if(i&&(t=await e.serviceManager.contents.rename(t.path,i)),!t)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";i=t.path}if(g.hasCommand(C.CommandIDs.openChat))return g.execute(C.CommandIDs.openChat,{filepath:i,inSidePanel:o});g.execute("docmanager:open",{path:`${i}`,factory:x})}}),d&&d.addItem({category:"Chat",command:C.CommandIDs.createChat,args:{isPalette:!0}}),h&&h.add({command:C.CommandIDs.createChat,category:"Other"}),g.addCommand(C.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==u.currentWidget&&u.currentWidget===e.shell.currentWidget&&u.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof C.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${C.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),u.currentChanged.connect((()=>{g.notifyCommandChanged(C.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const o=e.serviceManager.user.identity;g.addCommand(C.CommandIDs.openChat,{label:"Open a chat",execute:async s=>{var d,h,u,y;const v=null!==(d=s.inSidePanel)&&void 0!==d&&d;let f=null!==(h=s.filepath)&&void 0!==h?h:null;if(null===f&&(f=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!f)return;let I=!0;if(await e.serviceManager.contents.get(f,{content:!1}).catch((()=>{I=!1})),I)if(v&&i){if(e.shell instanceof n.NotebookShell){const t=e.shell;(null===(y=null===(u=t.leftHandler)||void 0===u?void 0:u.currentWidget)||void 0===y?void 0:y.id)===i.id&&t.leftHandler.isVisible||t.activateById(i.id)}else e.shell.activateById(i.id);if(i.openIfExists(f))return;const c=await e.serviceManager.contents.get(f),s=t.sharedModelFactory.createNew({path:c.path,format:c.format,contentType:C.chatFileType.contentType,collaborative:!0}),d=new C.LabChatModel({user:o,sharedModel:s,widgetConfig:p,commands:g,activeCellManager:r,selectionWatcher:m,documentManager:null==l?void 0:l.model.manager});d.name=c.path;const h=i.addChat(d);a.tracker.add(h)}else g.execute("docmanager:open",{path:`${f}`,factory:x});else(0,c.showErrorMessage)("Error opening chat",`'${f}' is not a valid path`)}}),d&&d.addItem({category:"Chat",command:C.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),g.addCommand(C.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==u.currentWidget,execute:()=>{const t=u.currentWidget;t&&(t instanceof o.ChatWidget&&i?(e.shell.activateById(i.id),i.openIfExists(t.model.name)):e.shell.activateById(t.id),t.model.input.focus())}})}},P={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:C.IChatPanel,requires:[C.IChatFactory,r.ICollaborativeContentProvider,m.IRenderMimeRegistry],optional:[o.IAttachmentOpenerRegistry,o.IChatCommandRegistry,C.IInputToolbarRegistryFactory,i.ILayoutRestorer,o.IMessageFooterRegistry,c.IThemeManager,C.IWelcomeMessage],activate:(e,t,a,n,r,i,c,s,d,l,h)=>{const{commands:m}=e,g=t.widgetConfig.config.defaultDirectory||"",u=new C.ChatPanel({commands:m,contentsManager:e.serviceManager.contents,rmRegistry:n,themeManager:l,defaultDirectory:g,chatCommandRegistry:i,attachmentOpenerRegistry:r,inputToolbarFactory:c,messageFooterRegistry:d,welcomeMessage:h});u.id="JupyterlabChat:sidepanel",u.title.icon=o.chatIcon,u.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(u.defaultDirectory=t.defaultDirectory)})),e.shell.add(u,"left",{rank:2e3}),s&&s.add(u,"jupyter-chat");const y=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;y.includes(e)&&t.path.endsWith(C.chatFileType.extensions[0])&&u.updateChatList()}})),m.addCommand(C.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:p.launchIcon,isEnabled:()=>m.hasCommand(C.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof C.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${C.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();m.execute(C.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),u}},k={id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[h.INotebookTracker],provides:C.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},S={id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,provides:C.ISelectionWatcherToken,activate:e=>new o.SelectionWatcher({shell:e.shell})},_={id:"jupyterlab-chat-extension:inputToolbarFactory",description:"The input toolbar registry plugin.",autoStart:!0,provides:C.IInputToolbarRegistryFactory,activate:e=>({create:()=>o.InputToolbarRegistry.defaultToolbarRegistry()})},E=[k,F,j,v,P,D,{id:"jupyterlab-chat/footerRegistry",description:"The footer registry plugin.",autoStart:!0,provides:o.IMessageFooterRegistry,activate:e=>new o.MessageFooterRegistry},_,S,I,M]}}]);