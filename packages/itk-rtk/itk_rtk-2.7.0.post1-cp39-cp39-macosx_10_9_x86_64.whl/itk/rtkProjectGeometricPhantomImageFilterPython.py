# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkProjectGeometricPhantomImageFilterPython
else:
    import _rtkProjectGeometricPhantomImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkGeometricPhantomPython
import itk.rtkConvexShapePython

def rtkProjectGeometricPhantomImageFilterID3ID3_New():
    return rtkProjectGeometricPhantomImageFilterID3ID3.New()

class rtkProjectGeometricPhantomImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkProjectGeometricPhantomImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkProjectGeometricPhantomImageFilterID3ID3_Pointer"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkProjectGeometricPhantomImageFilterID3ID3_Pointer"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_Clone(self)

    def GetGeometricPhantom(self):
        r"""GetGeometricPhantom(self) -> rtkGeometricPhantom"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetGeometricPhantom(self)

    def SetGeometricPhantom(self, _arg):
        r"""
        SetGeometricPhantom(self, _arg)

        Parameters
        ----------
        _arg: rtkGeometricPhantom const *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetGeometricPhantom(self, _arg)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetGeometry(self, _arg)

    def SetConfigFile(self, _arg):
        r"""
        SetConfigFile(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetConfigFile(self, _arg)

    def GetConfigFile(self):
        r"""GetConfigFile(self) -> std::string"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetConfigFile(self)

    def GetPhantomScale(self):
        r"""GetPhantomScale(self) -> itkVectorD3"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetPhantomScale(self)

    def SetPhantomScale(self, *args):
        r"""
        SetPhantomScale(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetPhantomScale(self, _arg)

        Parameters
        ----------
        _arg: double const

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetPhantomScale(self, *args)

    def SetOriginOffset(self, _arg):
        r"""
        SetOriginOffset(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetOriginOffset(self, _arg)

    def GetOriginOffset(self):
        r"""GetOriginOffset(self) -> itkVectorD3"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetOriginOffset(self)

    def SetIsForbildConfigFile(self, _arg):
        r"""
        SetIsForbildConfigFile(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetIsForbildConfigFile(self, _arg)

    def GetIsForbildConfigFile(self):
        r"""GetIsForbildConfigFile(self) -> bool"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetIsForbildConfigFile(self)

    def IsForbildConfigFileOn(self):
        r"""IsForbildConfigFileOn(self)"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_IsForbildConfigFileOn(self)

    def IsForbildConfigFileOff(self):
        r"""IsForbildConfigFileOff(self)"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_IsForbildConfigFileOff(self)

    def SetRotationMatrix(self, _arg):
        r"""
        SetRotationMatrix(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetRotationMatrix(self, _arg)

    def GetRotationMatrix(self):
        r"""GetRotationMatrix(self) -> itkMatrixD33"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_GetRotationMatrix(self)

    def AddClipPlane(self, dir, pos):
        r"""
        AddClipPlane(self, dir, pos)

        Parameters
        ----------
        dir: itkVectorD3 const &
        pos: double const &

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_AddClipPlane(self, dir, pos)

    def SetClipPlanes(self, dir, pos):
        r"""
        SetClipPlanes(self, dir, pos)

        Parameters
        ----------
        dir: std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &
        pos: std::vector< double,std::allocator< double > > const &

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_SetClipPlanes(self, dir, pos)
    __swig_destroy__ = _rtkProjectGeometricPhantomImageFilterPython.delete_rtkProjectGeometricPhantomImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkProjectGeometricPhantomImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkProjectGeometricPhantomImageFilterID3ID3

        Create a new object of the class rtkProjectGeometricPhantomImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectGeometricPhantomImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectGeometricPhantomImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectGeometricPhantomImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectGeometricPhantomImageFilterID3ID3 in _rtkProjectGeometricPhantomImageFilterPython:
_rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterID3ID3_swigregister(rtkProjectGeometricPhantomImageFilterID3ID3)

def rtkProjectGeometricPhantomImageFilterIF3IF3_New():
    return rtkProjectGeometricPhantomImageFilterIF3IF3.New()

class rtkProjectGeometricPhantomImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkProjectGeometricPhantomImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkProjectGeometricPhantomImageFilterIF3IF3_Pointer"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkProjectGeometricPhantomImageFilterIF3IF3_Pointer"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_Clone(self)

    def GetGeometricPhantom(self):
        r"""GetGeometricPhantom(self) -> rtkGeometricPhantom"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetGeometricPhantom(self)

    def SetGeometricPhantom(self, _arg):
        r"""
        SetGeometricPhantom(self, _arg)

        Parameters
        ----------
        _arg: rtkGeometricPhantom const *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetGeometricPhantom(self, _arg)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetGeometry(self, _arg)

    def SetConfigFile(self, _arg):
        r"""
        SetConfigFile(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetConfigFile(self, _arg)

    def GetConfigFile(self):
        r"""GetConfigFile(self) -> std::string"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetConfigFile(self)

    def GetPhantomScale(self):
        r"""GetPhantomScale(self) -> itkVectorD3"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetPhantomScale(self)

    def SetPhantomScale(self, *args):
        r"""
        SetPhantomScale(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        SetPhantomScale(self, _arg)

        Parameters
        ----------
        _arg: double const

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetPhantomScale(self, *args)

    def SetOriginOffset(self, _arg):
        r"""
        SetOriginOffset(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetOriginOffset(self, _arg)

    def GetOriginOffset(self):
        r"""GetOriginOffset(self) -> itkVectorD3"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetOriginOffset(self)

    def SetIsForbildConfigFile(self, _arg):
        r"""
        SetIsForbildConfigFile(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetIsForbildConfigFile(self, _arg)

    def GetIsForbildConfigFile(self):
        r"""GetIsForbildConfigFile(self) -> bool"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetIsForbildConfigFile(self)

    def IsForbildConfigFileOn(self):
        r"""IsForbildConfigFileOn(self)"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_IsForbildConfigFileOn(self)

    def IsForbildConfigFileOff(self):
        r"""IsForbildConfigFileOff(self)"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_IsForbildConfigFileOff(self)

    def SetRotationMatrix(self, _arg):
        r"""
        SetRotationMatrix(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetRotationMatrix(self, _arg)

    def GetRotationMatrix(self):
        r"""GetRotationMatrix(self) -> itkMatrixD33"""
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_GetRotationMatrix(self)

    def AddClipPlane(self, dir, pos):
        r"""
        AddClipPlane(self, dir, pos)

        Parameters
        ----------
        dir: itkVectorD3 const &
        pos: double const &

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_AddClipPlane(self, dir, pos)

    def SetClipPlanes(self, dir, pos):
        r"""
        SetClipPlanes(self, dir, pos)

        Parameters
        ----------
        dir: std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &
        pos: std::vector< double,std::allocator< double > > const &

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_SetClipPlanes(self, dir, pos)
    __swig_destroy__ = _rtkProjectGeometricPhantomImageFilterPython.delete_rtkProjectGeometricPhantomImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkProjectGeometricPhantomImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkProjectGeometricPhantomImageFilterIF3IF3

        Create a new object of the class rtkProjectGeometricPhantomImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectGeometricPhantomImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectGeometricPhantomImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectGeometricPhantomImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectGeometricPhantomImageFilterIF3IF3 in _rtkProjectGeometricPhantomImageFilterPython:
_rtkProjectGeometricPhantomImageFilterPython.rtkProjectGeometricPhantomImageFilterIF3IF3_swigregister(rtkProjectGeometricPhantomImageFilterIF3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def project_geometric_phantom_image_filter(*args: itkt.ImageLike,  geometric_phantom=..., geometry=..., config_file: str=..., phantom_scale: Union[Sequence[float], float]=..., origin_offset: Sequence[float]=..., is_forbild_config_file: bool=..., rotation_matrix=..., clip_planes=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ProjectGeometricPhantomImageFilter"""
    import itk

    kwarg_typehints = { 'geometric_phantom':geometric_phantom,'geometry':geometry,'config_file':config_file,'phantom_scale':phantom_scale,'origin_offset':origin_offset,'is_forbild_config_file':is_forbild_config_file,'rotation_matrix':rotation_matrix,'clip_planes':clip_planes }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ProjectGeometricPhantomImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def project_geometric_phantom_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ProjectGeometricPhantomImageFilter
    project_geometric_phantom_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    project_geometric_phantom_image_filter.__doc__ = filter_object.__doc__



