# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDeconstructSoftThresholdReconstructImageFilterPython
else:
    import _rtkDeconstructSoftThresholdReconstructImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def rtkDeconstructSoftThresholdReconstructImageFilterID2_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterID2.New()

class rtkDeconstructSoftThresholdReconstructImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterID2_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterID2_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterID2

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterID2 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID2_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterID2)

def rtkDeconstructSoftThresholdReconstructImageFilterID3_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterID3.New()

class rtkDeconstructSoftThresholdReconstructImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterID3_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterID3_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterID3

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterID3 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID3_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterID3)

def rtkDeconstructSoftThresholdReconstructImageFilterID4_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterID4.New()

class rtkDeconstructSoftThresholdReconstructImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterID4_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterID4_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterID4

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterID4 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterID4_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterID4)

def rtkDeconstructSoftThresholdReconstructImageFilterIF2_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterIF2.New()

class rtkDeconstructSoftThresholdReconstructImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterIF2_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterIF2_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterIF2

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterIF2 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF2_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterIF2)

def rtkDeconstructSoftThresholdReconstructImageFilterIF3_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterIF3.New()

class rtkDeconstructSoftThresholdReconstructImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterIF3_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterIF3_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterIF3

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterIF3 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF3_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterIF3)

def rtkDeconstructSoftThresholdReconstructImageFilterIF4_New():
    return rtkDeconstructSoftThresholdReconstructImageFilterIF4.New()

class rtkDeconstructSoftThresholdReconstructImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkDeconstructSoftThresholdReconstructImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDeconstructSoftThresholdReconstructImageFilterIF4_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDeconstructSoftThresholdReconstructImageFilterIF4_Pointer"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_Clone(self)

    def SetNumberOfLevels(self, levels):
        r"""
        SetNumberOfLevels(self, levels)

        Parameters
        ----------
        levels: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_SetNumberOfLevels(self, levels)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDeconstructSoftThresholdReconstructImageFilterPython.delete_rtkDeconstructSoftThresholdReconstructImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDeconstructSoftThresholdReconstructImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDeconstructSoftThresholdReconstructImageFilterIF4

        Create a new object of the class rtkDeconstructSoftThresholdReconstructImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDeconstructSoftThresholdReconstructImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDeconstructSoftThresholdReconstructImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDeconstructSoftThresholdReconstructImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDeconstructSoftThresholdReconstructImageFilterIF4 in _rtkDeconstructSoftThresholdReconstructImageFilterPython:
_rtkDeconstructSoftThresholdReconstructImageFilterPython.rtkDeconstructSoftThresholdReconstructImageFilterIF4_swigregister(rtkDeconstructSoftThresholdReconstructImageFilterIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def deconstruct_soft_threshold_reconstruct_image_filter(*args: itkt.ImageLike,  number_of_levels: int=..., order: int=..., threshold: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DeconstructSoftThresholdReconstructImageFilter"""
    import itk

    kwarg_typehints = { 'number_of_levels':number_of_levels,'order':order,'threshold':threshold }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DeconstructSoftThresholdReconstructImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def deconstruct_soft_threshold_reconstruct_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.DeconstructSoftThresholdReconstructImageFilter
    deconstruct_soft_threshold_reconstruct_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    deconstruct_soft_threshold_reconstruct_image_filter.__doc__ = filter_object.__doc__



