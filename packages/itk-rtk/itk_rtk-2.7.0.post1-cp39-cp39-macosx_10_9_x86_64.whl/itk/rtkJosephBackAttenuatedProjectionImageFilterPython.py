# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkJosephBackAttenuatedProjectionImageFilterPython
else:
    import _rtkJosephBackAttenuatedProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
class rtkComputeAttenuationCorrectionBackProjectionDD(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionBackProjectionDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionBackProjectionDD

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkComputeAttenuationCorrectionBackProjectionDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___eq__(self, other)

    def __call__(self, rayValue, attenuationRay, stepInMM, isNewRay):
        r"""
        __call__(self, rayValue, attenuationRay, stepInMM, isNewRay) -> double

        Parameters
        ----------
        rayValue: double const
        attenuationRay: double const
        stepInMM: itkVectorD3 const &
        isNewRay: bool &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___call__(self, rayValue, attenuationRay, stepInMM, isNewRay)

    def SetAttenuationPixel(self, attenuationPixel):
        r"""
        SetAttenuationPixel(self, attenuationPixel)

        Parameters
        ----------
        attenuationPixel: double *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_SetAttenuationPixel(self, attenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionBackProjectionDD
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionBackProjectionDD

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionBackProjectionDD(*args))

# Register rtkComputeAttenuationCorrectionBackProjectionDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_swigregister(rtkComputeAttenuationCorrectionBackProjectionDD)
class rtkComputeAttenuationCorrectionBackProjectionFF(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionBackProjectionFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionBackProjectionFF

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkComputeAttenuationCorrectionBackProjectionFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___eq__(self, other)

    def __call__(self, rayValue, attenuationRay, stepInMM, isNewRay):
        r"""
        __call__(self, rayValue, attenuationRay, stepInMM, isNewRay) -> float

        Parameters
        ----------
        rayValue: float const
        attenuationRay: float const
        stepInMM: itkVectorD3 const &
        isNewRay: bool &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___call__(self, rayValue, attenuationRay, stepInMM, isNewRay)

    def SetAttenuationPixel(self, attenuationPixel):
        r"""
        SetAttenuationPixel(self, attenuationPixel)

        Parameters
        ----------
        attenuationPixel: float *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_SetAttenuationPixel(self, attenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionBackProjectionFF
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionBackProjectionFF

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionFF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionBackProjectionFF(*args))

# Register rtkComputeAttenuationCorrectionBackProjectionFF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_swigregister(rtkComputeAttenuationCorrectionBackProjectionFF)
class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___eq__(self, other)

    def __call__(self, stepLengthInVoxel, weight, p, i):
        r"""
        __call__(self, stepLengthInVoxel, weight, p, i) -> double

        Parameters
        ----------
        stepLengthInVoxel: double const
        weight: double const
        p: double const *
        i: int const

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___call__(self, stepLengthInVoxel, weight, p, i)

    def SetAttenuationMinusEmissionMapsPtrDiff(self, pd):
        r"""
        SetAttenuationMinusEmissionMapsPtrDiff(self, pd)

        Parameters
        ----------
        pd: long

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_SetAttenuationMinusEmissionMapsPtrDiff(self, pd)

    def GetAttenuationPixel(self):
        r"""GetAttenuationPixel(self) -> double *"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_GetAttenuationPixel(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD)
class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___eq__(self, other)

    def __call__(self, stepLengthInVoxel, weight, p, i):
        r"""
        __call__(self, stepLengthInVoxel, weight, p, i) -> float

        Parameters
        ----------
        stepLengthInVoxel: double const
        weight: float const
        p: float const *
        i: int const

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___call__(self, stepLengthInVoxel, weight, p, i)

    def SetAttenuationMinusEmissionMapsPtrDiff(self, pd):
        r"""
        SetAttenuationMinusEmissionMapsPtrDiff(self, pd)

        Parameters
        ----------
        pd: long

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_SetAttenuationMinusEmissionMapsPtrDiff(self, pd)

    def GetAttenuationPixel(self):
        r"""GetAttenuationPixel(self) -> float *"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_GetAttenuationPixel(self)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF)
class rtkFunctorSplatWeightMultiplicationAttenuatedDDD(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationAttenuatedDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationAttenuatedDDD

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSplatWeightMultiplicationAttenuatedDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___eq__(self, other)

    def __call__(self, rayValue, output, stepLengthInVoxel, arg3, weight):
        r"""
        __call__(self, rayValue, output, stepLengthInVoxel, arg3, weight)

        Parameters
        ----------
        rayValue: double const &
        output: double &
        stepLengthInVoxel: double const
        arg3: double const
        weight: double const

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___call__(self, rayValue, output, stepLengthInVoxel, arg3, weight)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedDDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationAttenuatedDDD(*args))

# Register rtkFunctorSplatWeightMultiplicationAttenuatedDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD_swigregister(rtkFunctorSplatWeightMultiplicationAttenuatedDDD)
class rtkFunctorSplatWeightMultiplicationAttenuatedFDF(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationAttenuatedFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationAttenuatedFDF

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedFDF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSplatWeightMultiplicationAttenuatedFDF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___eq__(self, other)

    def __call__(self, rayValue, output, stepLengthInVoxel, arg3, weight):
        r"""
        __call__(self, rayValue, output, stepLengthInVoxel, arg3, weight)

        Parameters
        ----------
        rayValue: float const &
        output: float &
        stepLengthInVoxel: double const
        arg3: double const
        weight: double const

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___call__(self, rayValue, output, stepLengthInVoxel, arg3, weight)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedFDF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationAttenuatedFDF(*args))

# Register rtkFunctorSplatWeightMultiplicationAttenuatedFDF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF_swigregister(rtkFunctorSplatWeightMultiplicationAttenuatedFDF)

def rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_New():
    return rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New()

class rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD
        GetInterpolationWeightMultiplication(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetInterpolationWeightMultiplication(self, _arg)

    def GetSplatWeightMultiplication(self, *args):
        r"""
        GetSplatWeightMultiplication(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD
        GetSplatWeightMultiplication(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSplatWeightMultiplication(self, *args)

    def SetSplatWeightMultiplication(self, _arg):
        r"""
        SetSplatWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkFunctorSplatWeightMultiplicationAttenuatedDDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSplatWeightMultiplication(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtkComputeAttenuationCorrectionBackProjectionDD
        GetSumAlongRay(self) -> rtkComputeAttenuationCorrectionBackProjectionDD
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtkComputeAttenuationCorrectionBackProjectionDD const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSumAlongRay(self, _arg)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS

        Create a new object of the class rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_swigregister(rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS)

def rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_New():
    return rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New()

class rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF
        GetInterpolationWeightMultiplication(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetInterpolationWeightMultiplication(self, _arg)

    def GetSplatWeightMultiplication(self, *args):
        r"""
        GetSplatWeightMultiplication(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF
        GetSplatWeightMultiplication(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSplatWeightMultiplication(self, *args)

    def SetSplatWeightMultiplication(self, _arg):
        r"""
        SetSplatWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkFunctorSplatWeightMultiplicationAttenuatedFDF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSplatWeightMultiplication(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtkComputeAttenuationCorrectionBackProjectionFF
        GetSumAlongRay(self) -> rtkComputeAttenuationCorrectionBackProjectionFF
        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtkComputeAttenuationCorrectionBackProjectionFF const &

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSumAlongRay(self, _arg)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS

        Create a new object of the class rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_swigregister(rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS)

def rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_New():
    return rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New()

class rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD(rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS):
    r"""Proxy of C++ rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_Clone(self)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD

        Create a new object of the class rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_swigregister(rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD)

def rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_New():
    return rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New()

class rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF(rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS):
    r"""Proxy of C++ rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_Pointer"""
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_Clone(self)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF

        Create a new object of the class rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_swigregister(rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_back_attenuated_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., splat_weight_multiplication=..., sum_along_ray=..., inferior_clip: float=..., superior_clip: float=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephBackAttenuatedProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'splat_weight_multiplication':splat_weight_multiplication,'sum_along_ray':sum_along_ray,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephBackAttenuatedProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_back_attenuated_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephBackAttenuatedProjectionImageFilter
    joseph_back_attenuated_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_back_attenuated_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_back_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., splat_weight_multiplication=..., sum_along_ray=..., inferior_clip: float=..., superior_clip: float=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephBackProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'splat_weight_multiplication':splat_weight_multiplication,'sum_along_ray':sum_along_ray,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephBackProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_back_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephBackProjectionImageFilter
    joseph_back_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_back_projection_image_filter.__doc__ = filter_object.__doc__



