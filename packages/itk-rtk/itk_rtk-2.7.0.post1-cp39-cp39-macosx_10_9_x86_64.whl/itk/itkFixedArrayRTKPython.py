# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFixedArrayRTKPython
else:
    import _itkFixedArrayRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.pyBasePython
class itkFixedArrayi2(object):
    r"""Proxy of C++ itkFixedArrayi2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __eq__(self, r):
        r"""
        __eq__(self, r) -> bool

        Parameters
        ----------
        r: itkFixedArrayi2 const &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2___eq__(self, r)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkFixedArrayi2 const &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2___ne__(self, other)

    def SetElement(self, index, value):
        r"""
        SetElement(self, index, value)

        Parameters
        ----------
        index: unsigned int
        value: int const &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_SetElement(self, index, value)

    def GetElement(self, index):
        r"""
        GetElement(self, index) -> int const &

        Parameters
        ----------
        index: unsigned int

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_GetElement(self, index)

    def GetDataPointer(self, *args):
        r"""
        GetDataPointer(self) -> int
        GetDataPointer(self) -> int const *
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_GetDataPointer(self, *args)

    def data(self, *args):
        r"""
        data(self) -> int
        data(self) -> int const *
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(self):
        r"""cbegin(self) -> int const *"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_cbegin(self)

    def begin(self, *args):
        r"""
        begin(self) -> int
        begin(self) -> int const *
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_begin(self, *args)

    def cend(self):
        r"""cend(self) -> int const *"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_cend(self)

    def end(self, *args):
        r"""
        end(self) -> int
        end(self) -> int const *
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_end(self, *args)

    def crbegin(self):
        r"""crbegin(self) -> std::reverse_iterator< int const * >"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(self) -> std::reverse_iterator< int * >
        rbegin(self) -> std::reverse_iterator< int const * >
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_rbegin(self, *args)

    def crend(self):
        r"""crend(self) -> std::reverse_iterator< int const * >"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_crend(self)

    def rend(self, *args):
        r"""
        rend(self) -> std::reverse_iterator< int * >
        rend(self) -> std::reverse_iterator< int const * >
        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_rend(self, *args)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_Size(self)

    def size(self):
        r"""size(self) -> unsigned int"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2_size(self)

    def Fill(self, arg0):
        r"""
        Fill(self, arg0)

        Parameters
        ----------
        arg0: int const &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_Fill(self, arg0)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkFixedArrayi2 &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_swap(self, other)

    @staticmethod
    def Filled(value):
        r"""
        Filled(value) -> itkFixedArrayi2

        Parameters
        ----------
        value: int const &

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2_Filled(value)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkFixedArrayi2
        __init__(self, r) -> itkFixedArrayi2

        Parameters
        ----------
        r: int const *

        __init__(self, arg0) -> itkFixedArrayi2

        Parameters
        ----------
        arg0: int const &

        __init__(self, stdArray) -> itkFixedArrayi2

        Parameters
        ----------
        stdArray: std::array< int,2 > const &

        __init__(self, arg0) -> itkFixedArrayi2

        Parameters
        ----------
        arg0: itkFixedArrayi2 const &

        """
        _itkFixedArrayRTKPython.itkFixedArrayi2_swiginit(self, _itkFixedArrayRTKPython.new_itkFixedArrayi2(*args))
    __swig_destroy__ = _itkFixedArrayRTKPython.delete_itkFixedArrayi2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> int

        Parameters
        ----------
        d: unsigned long

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: int

        """
        return _itkFixedArrayRTKPython.itkFixedArrayi2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkFixedArrayRTKPython.itkFixedArrayi2___repr__(self)

# Register itkFixedArrayi2 in _itkFixedArrayRTKPython:
_itkFixedArrayRTKPython.itkFixedArrayi2_swigregister(itkFixedArrayi2)

