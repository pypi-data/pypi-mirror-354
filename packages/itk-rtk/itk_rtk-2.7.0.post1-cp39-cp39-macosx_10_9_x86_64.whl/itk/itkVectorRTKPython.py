# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorRTKPython
else:
    import _itkVectorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayRTKPython
class itkVectori2(itk.itkFixedArrayRTKPython.itkFixedArrayi2):
    r"""Proxy of C++ itkVectori2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetVectorDimension():
        r"""GetVectorDimension() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2_GetVectorDimension()

    def SetVnlVector(self, arg0):
        r"""
        SetVnlVector(self, arg0)

        Parameters
        ----------
        arg0: vnl_vectorSI const &

        """
        return _itkVectorRTKPython.itkVectori2_SetVnlVector(self, arg0)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refSI
        GetVnlVector(self) -> vnl_vectorSI
        """
        return _itkVectorRTKPython.itkVectori2_GetVnlVector(self, *args)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkVectori2

        Parameters
        ----------
        vec: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkVectori2

        Parameters
        ----------
        vec: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___isub__(self, vec)

    def __neg__(self):
        r"""__neg__(self) -> itkVectori2"""
        return _itkVectorRTKPython.itkVectori2___neg__(self)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkVectori2

        Parameters
        ----------
        vec: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___add__(self, vec)

    def __sub__(self, vec):
        r"""
        __sub__(self, vec) -> itkVectori2

        Parameters
        ----------
        vec: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___sub__(self, vec)

    def __mul__(self, *args):
        r"""
        __mul__(self, other) -> int

        Parameters
        ----------
        other: itkVectori2 const &

        __mul__(self, value) -> itkVectori2

        Parameters
        ----------
        value: int const &

        """
        return _itkVectorRTKPython.itkVectori2___mul__(self, *args)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVectori2 const &

        """
        return _itkVectorRTKPython.itkVectori2___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVectorRTKPython.itkVectori2_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVectorRTKPython.itkVectori2_GetSquaredNorm(self)

    @staticmethod
    def GetNumberOfComponents():
        r"""GetNumberOfComponents() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2_GetNumberOfComponents()

    def Normalize(self):
        r"""Normalize(self) -> double"""
        return _itkVectorRTKPython.itkVectori2_Normalize(self)

    def SetNthComponent(self, c, v):
        r"""
        SetNthComponent(self, c, v)

        Parameters
        ----------
        c: int
        v: int const &

        """
        return _itkVectorRTKPython.itkVectori2_SetNthComponent(self, c, v)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVectori2
        __init__(self, r) -> itkVectori2

        Parameters
        ----------
        r: int const &

        __init__(self, r) -> itkVectori2

        Parameters
        ----------
        r: int const *

        __init__(self, stdArray) -> itkVectori2

        Parameters
        ----------
        stdArray: std::array< int,2 > const &

        __init__(self, arg0) -> itkVectori2

        Parameters
        ----------
        arg0: itkVectori2 const &

        """
        _itkVectorRTKPython.itkVectori2_swiginit(self, _itkVectorRTKPython.new_itkVectori2(*args))
    __swig_destroy__ = _itkVectorRTKPython.delete_itkVectori2

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> int

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVectorRTKPython.itkVectori2___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: int

        """
        return _itkVectorRTKPython.itkVectori2___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkVectorRTKPython.itkVectori2___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVectorRTKPython.itkVectori2___repr__(self)

# Register itkVectori2 in _itkVectorRTKPython:
_itkVectorRTKPython.itkVectori2_swigregister(itkVectori2)

