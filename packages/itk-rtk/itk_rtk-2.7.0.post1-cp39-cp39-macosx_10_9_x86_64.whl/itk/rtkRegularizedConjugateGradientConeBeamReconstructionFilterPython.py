# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython
else:
    import _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkIterativeConeBeamReconstructionFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterAPython
import itk.rtkForwardProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkBackProjectionImageFilterPython

def rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_New():
    return rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3.New()

class rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3):
    r"""Proxy of C++ rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_Clone(self)

    def SetInputVolume(self, Volume):
        r"""
        SetInputVolume(self, Volume)

        Parameters
        ----------
        Volume: itkImageD3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetInputVolume(self, Volume)

    def GetInputVolume(self):
        r"""GetInputVolume(self) -> itkImageD3_ConstPointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetInputVolume(self)

    def SetInputProjectionStack(self, Projection):
        r"""
        SetInputProjectionStack(self, Projection)

        Parameters
        ----------
        Projection: itkImageD3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetInputProjectionStack(self, Projection)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageD3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetInputProjectionStack(self)

    def SetInputWeights(self, Weights):
        r"""
        SetInputWeights(self, Weights)

        Parameters
        ----------
        Weights: itkImageD3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetInputWeights(self, Weights)

    def GetInputWeights(self):
        r"""GetInputWeights(self) -> itkImageD3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetInputWeights(self)

    def SetSupportMask(self, SupportMask):
        r"""
        SetSupportMask(self, SupportMask)

        Parameters
        ----------
        SupportMask: itkImageD3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetSupportMask(self, SupportMask)

    def GetSupportMask(self):
        r"""GetSupportMask(self) -> itkImageD3_ConstPointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetSupportMask(self)

    def SetPerformPositivity(self, _arg):
        r"""
        SetPerformPositivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetPerformPositivity(self, _arg)

    def GetPerformPositivity(self):
        r"""GetPerformPositivity(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetPerformPositivity(self)

    def SetPerformTVSpatialDenoising(self, _arg):
        r"""
        SetPerformTVSpatialDenoising(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetPerformTVSpatialDenoising(self, _arg)

    def GetPerformTVSpatialDenoising(self):
        r"""GetPerformTVSpatialDenoising(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetPerformTVSpatialDenoising(self)

    def SetPerformWaveletsSpatialDenoising(self, _arg):
        r"""
        SetPerformWaveletsSpatialDenoising(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetPerformWaveletsSpatialDenoising(self, _arg)

    def GetPerformWaveletsSpatialDenoising(self):
        r"""GetPerformWaveletsSpatialDenoising(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetPerformWaveletsSpatialDenoising(self)

    def SetPerformSoftThresholdOnImage(self, _arg):
        r"""
        SetPerformSoftThresholdOnImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetPerformSoftThresholdOnImage(self, _arg)

    def GetPerformSoftThresholdOnImage(self):
        r"""GetPerformSoftThresholdOnImage(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetPerformSoftThresholdOnImage(self)

    def SetGammaTV(self, _arg):
        r"""
        SetGammaTV(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetGammaTV(self, _arg)

    def GetGammaTV(self):
        r"""GetGammaTV(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetGammaTV(self)

    def SetSoftThresholdWavelets(self, _arg):
        r"""
        SetSoftThresholdWavelets(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetSoftThresholdWavelets(self, _arg)

    def GetSoftThresholdWavelets(self):
        r"""GetSoftThresholdWavelets(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetSoftThresholdWavelets(self)

    def SetSoftThresholdOnImage(self, _arg):
        r"""
        SetSoftThresholdOnImage(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetSoftThresholdOnImage(self, _arg)

    def GetSoftThresholdOnImage(self):
        r"""GetSoftThresholdOnImage(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetSoftThresholdOnImage(self)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetNumberOfLevels(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetNumberOfLevels(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetOrder(self, _arg)

    def SetMainLoop_iterations(self, _arg):
        r"""
        SetMainLoop_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetMainLoop_iterations(self, _arg)

    def GetMainLoop_iterations(self):
        r"""GetMainLoop_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetMainLoop_iterations(self)

    def SetCG_iterations(self, _arg):
        r"""
        SetCG_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetCG_iterations(self, _arg)

    def GetCG_iterations(self):
        r"""GetCG_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetCG_iterations(self)

    def SetTV_iterations(self, _arg):
        r"""
        SetTV_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetTV_iterations(self, _arg)

    def GetTV_iterations(self):
        r"""GetTV_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetTV_iterations(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetGeometry(self, _arg)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetGeometry(self, *args)

    def SetPreconditioned(self, _arg):
        r"""
        SetPreconditioned(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetPreconditioned(self, _arg)

    def GetPreconditioned(self):
        r"""GetPreconditioned(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetPreconditioned(self)

    def SetTikhonov(self, _arg):
        r"""
        SetTikhonov(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetTikhonov(self, _arg)

    def GetTikhonov(self):
        r"""GetTikhonov(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetTikhonov(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetGamma(self)

    def SetCudaConjugateGradient(self, _arg):
        r"""
        SetCudaConjugateGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetCudaConjugateGradient(self, _arg)

    def GetCudaConjugateGradient(self):
        r"""GetCudaConjugateGradient(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetCudaConjugateGradient(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_GetDisableDisplacedDetectorFilter(self)
    __swig_destroy__ = _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.delete_rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3

        Create a new object of the class rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3 in _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython:
_rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3_swigregister(rtkRegularizedConjugateGradientConeBeamReconstructionFilterID3)

def rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_New():
    return rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3.New()

class rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    r"""Proxy of C++ rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_Clone(self)

    def SetInputVolume(self, Volume):
        r"""
        SetInputVolume(self, Volume)

        Parameters
        ----------
        Volume: itkImageF3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetInputVolume(self, Volume)

    def GetInputVolume(self):
        r"""GetInputVolume(self) -> itkImageF3_ConstPointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetInputVolume(self)

    def SetInputProjectionStack(self, Projection):
        r"""
        SetInputProjectionStack(self, Projection)

        Parameters
        ----------
        Projection: itkImageF3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetInputProjectionStack(self, Projection)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageF3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetInputProjectionStack(self)

    def SetInputWeights(self, Weights):
        r"""
        SetInputWeights(self, Weights)

        Parameters
        ----------
        Weights: itkImageF3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetInputWeights(self, Weights)

    def GetInputWeights(self):
        r"""GetInputWeights(self) -> itkImageF3_Pointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetInputWeights(self)

    def SetSupportMask(self, SupportMask):
        r"""
        SetSupportMask(self, SupportMask)

        Parameters
        ----------
        SupportMask: itkImageF3 const *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetSupportMask(self, SupportMask)

    def GetSupportMask(self):
        r"""GetSupportMask(self) -> itkImageF3_ConstPointer"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetSupportMask(self)

    def SetPerformPositivity(self, _arg):
        r"""
        SetPerformPositivity(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetPerformPositivity(self, _arg)

    def GetPerformPositivity(self):
        r"""GetPerformPositivity(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetPerformPositivity(self)

    def SetPerformTVSpatialDenoising(self, _arg):
        r"""
        SetPerformTVSpatialDenoising(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetPerformTVSpatialDenoising(self, _arg)

    def GetPerformTVSpatialDenoising(self):
        r"""GetPerformTVSpatialDenoising(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetPerformTVSpatialDenoising(self)

    def SetPerformWaveletsSpatialDenoising(self, _arg):
        r"""
        SetPerformWaveletsSpatialDenoising(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetPerformWaveletsSpatialDenoising(self, _arg)

    def GetPerformWaveletsSpatialDenoising(self):
        r"""GetPerformWaveletsSpatialDenoising(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetPerformWaveletsSpatialDenoising(self)

    def SetPerformSoftThresholdOnImage(self, _arg):
        r"""
        SetPerformSoftThresholdOnImage(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetPerformSoftThresholdOnImage(self, _arg)

    def GetPerformSoftThresholdOnImage(self):
        r"""GetPerformSoftThresholdOnImage(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetPerformSoftThresholdOnImage(self)

    def SetGammaTV(self, _arg):
        r"""
        SetGammaTV(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetGammaTV(self, _arg)

    def GetGammaTV(self):
        r"""GetGammaTV(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetGammaTV(self)

    def SetSoftThresholdWavelets(self, _arg):
        r"""
        SetSoftThresholdWavelets(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetSoftThresholdWavelets(self, _arg)

    def GetSoftThresholdWavelets(self):
        r"""GetSoftThresholdWavelets(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetSoftThresholdWavelets(self)

    def SetSoftThresholdOnImage(self, _arg):
        r"""
        SetSoftThresholdOnImage(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetSoftThresholdOnImage(self, _arg)

    def GetSoftThresholdOnImage(self):
        r"""GetSoftThresholdOnImage(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetSoftThresholdOnImage(self)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetNumberOfLevels(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetNumberOfLevels(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetOrder(self, _arg)

    def SetMainLoop_iterations(self, _arg):
        r"""
        SetMainLoop_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetMainLoop_iterations(self, _arg)

    def GetMainLoop_iterations(self):
        r"""GetMainLoop_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetMainLoop_iterations(self)

    def SetCG_iterations(self, _arg):
        r"""
        SetCG_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetCG_iterations(self, _arg)

    def GetCG_iterations(self):
        r"""GetCG_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetCG_iterations(self)

    def SetTV_iterations(self, _arg):
        r"""
        SetTV_iterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetTV_iterations(self, _arg)

    def GetTV_iterations(self):
        r"""GetTV_iterations(self) -> int"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetTV_iterations(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetGeometry(self, _arg)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetGeometry(self, *args)

    def SetPreconditioned(self, _arg):
        r"""
        SetPreconditioned(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetPreconditioned(self, _arg)

    def GetPreconditioned(self):
        r"""GetPreconditioned(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetPreconditioned(self)

    def SetTikhonov(self, _arg):
        r"""
        SetTikhonov(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetTikhonov(self, _arg)

    def GetTikhonov(self):
        r"""GetTikhonov(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetTikhonov(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> float"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetGamma(self)

    def SetCudaConjugateGradient(self, _arg):
        r"""
        SetCudaConjugateGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetCudaConjugateGradient(self, _arg)

    def GetCudaConjugateGradient(self):
        r"""GetCudaConjugateGradient(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetCudaConjugateGradient(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter(self)
    __swig_destroy__ = _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.delete_rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3

        Create a new object of the class rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3 in _rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython:
_rtkRegularizedConjugateGradientConeBeamReconstructionFilterPython.rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3_swigregister(rtkRegularizedConjugateGradientConeBeamReconstructionFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def regularized_conjugate_gradient_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  input_volume: itkt.Image=..., input_projection_stack: itkt.Image=..., input_weights: itkt.Image=..., support_mask: itkt.Image=..., perform_positivity: bool=..., perform_tv_spatial_denoising: bool=..., perform_wavelets_spatial_denoising: bool=..., perform_soft_threshold_on_image: bool=..., gamma_tv: float=..., soft_threshold_wavelets: float=..., soft_threshold_on_image: float=..., number_of_levels: int=..., order: int=..., main_loop_iterations: int=..., cg_iterations: int=..., tv_iterations: int=..., geometry=..., preconditioned: bool=..., tikhonov: float=..., gamma: float=..., cuda_conjugate_gradient: bool=..., disable_displaced_detector_filter: bool=..., forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=..., step_size: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RegularizedConjugateGradientConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'input_volume':input_volume,'input_projection_stack':input_projection_stack,'input_weights':input_weights,'support_mask':support_mask,'perform_positivity':perform_positivity,'perform_tv_spatial_denoising':perform_tv_spatial_denoising,'perform_wavelets_spatial_denoising':perform_wavelets_spatial_denoising,'perform_soft_threshold_on_image':perform_soft_threshold_on_image,'gamma_tv':gamma_tv,'soft_threshold_wavelets':soft_threshold_wavelets,'soft_threshold_on_image':soft_threshold_on_image,'number_of_levels':number_of_levels,'order':order,'main_loop_iterations':main_loop_iterations,'cg_iterations':cg_iterations,'tv_iterations':tv_iterations,'geometry':geometry,'preconditioned':preconditioned,'tikhonov':tikhonov,'gamma':gamma,'cuda_conjugate_gradient':cuda_conjugate_gradient,'disable_displaced_detector_filter':disable_displaced_detector_filter,'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf,'step_size':step_size }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.RegularizedConjugateGradientConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def regularized_conjugate_gradient_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.RegularizedConjugateGradientConeBeamReconstructionFilter
    regularized_conjugate_gradient_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    regularized_conjugate_gradient_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__



