# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixRTKPython
else:
    import _itkMatrixRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkCovariantVectorRTKPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointRTKPython

def itkMatrixD11_New():
  return itkMatrixD11.New()

class itkMatrixD11(object):
    r"""Proxy of C++ itkMatrixD11 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __add__(self, matrix):
        r"""
        __add__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___add__(self, matrix)

    def __iadd__(self, matrix):
        r"""
        __iadd__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___iadd__(self, matrix)

    def __sub__(self, matrix):
        r"""
        __sub__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___sub__(self, matrix)

    def __isub__(self, matrix):
        r"""
        __isub__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___isub__(self, matrix)

    def __imul__(self, *args):
        r"""
        __imul__(self, matrix)

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        __imul__(self, matrix)

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __imul__(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___imul__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(self, vect) -> itkVectorD1

        Parameters
        ----------
        vect: itkVectorD1 const &

        __mul__(self, pnt) -> itkPointD1

        Parameters
        ----------
        pnt: itkPointD1 const &

        __mul__(self, covect) -> itkCovariantVectorD1

        Parameters
        ----------
        covect: itkCovariantVectorD1 const &

        __mul__(self, inVNLvect) -> vnl_vector_fixed< double,1 >

        Parameters
        ----------
        inVNLvect: vnl_vector_fixed< double,1 > const &

        __mul__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        __mul__(self, matrix) -> vnl_matrixD

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __mul__(self, vc) -> vnl_vectorD

        Parameters
        ----------
        vc: vnl_vectorD const &

        __mul__(self, value) -> itkMatrixD11

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___mul__(self, *args)

    def __itruediv__(self, *args):
        return _itkMatrixRTKPython.itkMatrixD11___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixRTKPython.itkMatrixD11___truediv__(self, *args)
    __div__ = __truediv__



    def __call__(self, *args):
        r"""
        __call__(self, row, col) -> double

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        __call__(self, row, col) -> double const &

        Parameters
        ----------
        row: unsigned int
        col: unsigned int

        """
        return _itkMatrixRTKPython.itkMatrixD11___call__(self, *args)

    def __GetVnlMatrix_orig__(self, *args):
        r"""
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,1,1 >
        __GetVnlMatrix_orig__(self) -> vnl_matrix_fixed< double,1,1 > const &
        """
        return _itkMatrixRTKPython.itkMatrixD11___GetVnlMatrix_orig__(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(self)"""
        return _itkMatrixRTKPython.itkMatrixD11_SetIdentity(self)

    @staticmethod
    def GetIdentity():
        r"""GetIdentity() -> itkMatrixD11"""
        return _itkMatrixRTKPython.itkMatrixD11_GetIdentity()

    def Fill(self, value):
        r"""
        Fill(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkMatrixRTKPython.itkMatrixD11_Fill(self, value)

    def __eq__(self, matrix):
        r"""
        __eq__(self, matrix) -> bool

        Parameters
        ----------
        matrix: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___eq__(self, matrix)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkMatrixD11 const &

        """
        return _itkMatrixRTKPython.itkMatrixD11___ne__(self, other)

    def GetInverse(self):
        r"""GetInverse(self) -> vnl_matrix_fixed< double,1,1 >"""
        return _itkMatrixRTKPython.itkMatrixD11_GetInverse(self)

    def GetTranspose(self):
        r"""GetTranspose(self) -> vnl_matrix_fixed< double,1,1 >"""
        return _itkMatrixRTKPython.itkMatrixD11_GetTranspose(self)

    def swap(self, other):
        r"""
        swap(self, other)

        Parameters
        ----------
        other: itkMatrixD11 &

        """
        return _itkMatrixRTKPython.itkMatrixD11_swap(self, other)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD11

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,1,1 > const &

        __init__(self) -> itkMatrixD11
        __init__(self, arg0) -> itkMatrixD11

        Parameters
        ----------
        arg0: itkMatrixD11 const &

        """
        _itkMatrixRTKPython.itkMatrixD11_swiginit(self, _itkMatrixRTKPython.new_itkMatrixD11(*args))
    __swig_destroy__ = _itkMatrixRTKPython.delete_itkMatrixD11

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.array_from_matrix(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        matrix = itk.matrix_from_array(state)
        self.__init__(matrix)


# Register itkMatrixD11 in _itkMatrixRTKPython:
_itkMatrixRTKPython.itkMatrixD11_swigregister(itkMatrixD11)

