# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointRTKPython
else:
    import _itkPointRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
class vectoritkPointD1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkPointRTKPython.vectoritkPointD1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkPointD1

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type
        j: std::vector< itkPointD1 >::difference_type

        """
        return _itkPointRTKPython.vectoritkPointD1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type
        j: std::vector< itkPointD1 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type
        j: std::vector< itkPointD1 >::difference_type
        v: std::vector< itkPointD1,std::allocator< itkPointD1 > > const &

        """
        return _itkPointRTKPython.vectoritkPointD1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type
        j: std::vector< itkPointD1 >::difference_type

        """
        return _itkPointRTKPython.vectoritkPointD1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkPointRTKPython.vectoritkPointD1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkPointD1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkPointD1

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type

        """
        return _itkPointRTKPython.vectoritkPointD1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkPointD1,std::allocator< itkPointD1 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkPointD1 >::difference_type
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkPointRTKPython.vectoritkPointD1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkPointD1 > &

        """
        return _itkPointRTKPython.vectoritkPointD1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkPointD1 >::iterator"""
        return _itkPointRTKPython.vectoritkPointD1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkPointD1 >::iterator"""
        return _itkPointRTKPython.vectoritkPointD1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkPointD1 >::reverse_iterator"""
        return _itkPointRTKPython.vectoritkPointD1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkPointD1 >::reverse_iterator"""
        return _itkPointRTKPython.vectoritkPointD1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkPointRTKPython.vectoritkPointD1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkPointD1 >::allocator_type"""
        return _itkPointRTKPython.vectoritkPointD1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkPointRTKPython.vectoritkPointD1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkPointD1 >::iterator

        Parameters
        ----------
        pos: std::vector< itkPointD1 >::iterator

        erase(self, first, last) -> std::vector< itkPointD1 >::iterator

        Parameters
        ----------
        first: std::vector< itkPointD1 >::iterator
        last: std::vector< itkPointD1 >::iterator

        """
        return _itkPointRTKPython.vectoritkPointD1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD1
        __init__(self, other) -> vectoritkPointD1

        Parameters
        ----------
        other: std::vector< itkPointD1 > const &

        __init__(self, size) -> vectoritkPointD1

        Parameters
        ----------
        size: std::vector< itkPointD1 >::size_type

        __init__(self, size, value) -> vectoritkPointD1

        Parameters
        ----------
        size: std::vector< itkPointD1 >::size_type
        value: std::vector< itkPointD1 >::value_type const &

        """
        _itkPointRTKPython.vectoritkPointD1_swiginit(self, _itkPointRTKPython.new_vectoritkPointD1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1_push_back(self, x)

    def front(self):
        r"""front(self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_front(self)

    def back(self):
        r"""back(self) -> itkPointD1"""
        return _itkPointRTKPython.vectoritkPointD1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkPointD1 >::size_type
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkPointD1 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkPointD1 >::size_type
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkPointD1 >::iterator

        Parameters
        ----------
        pos: std::vector< itkPointD1 >::iterator
        x: std::vector< itkPointD1 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkPointD1 >::iterator
        n: std::vector< itkPointD1 >::size_type
        x: std::vector< itkPointD1 >::value_type const &

        """
        return _itkPointRTKPython.vectoritkPointD1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkPointD1 >::size_type

        """
        return _itkPointRTKPython.vectoritkPointD1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkPointD1 >::size_type"""
        return _itkPointRTKPython.vectoritkPointD1_capacity(self)
    __swig_destroy__ = _itkPointRTKPython.delete_vectoritkPointD1

# Register vectoritkPointD1 in _itkPointRTKPython:
_itkPointRTKPython.vectoritkPointD1_swigregister(vectoritkPointD1)
class itkPointD1(itk.itkFixedArrayPython.itkFixedArrayD1):
    r"""Proxy of C++ itkPointD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetPointDimension():
        r"""GetPointDimension() -> unsigned int"""
        return _itkPointRTKPython.itkPointD1_GetPointDimension()

    def __eq__(self, pt):
        r"""
        __eq__(self, pt) -> bool

        Parameters
        ----------
        pt: itkPointD1 const &

        """
        return _itkPointRTKPython.itkPointD1___eq__(self, pt)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkPointD1 const &

        """
        return _itkPointRTKPython.itkPointD1___ne__(self, other)

    def __iadd__(self, vec):
        r"""
        __iadd__(self, vec) -> itkPointD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkPointRTKPython.itkPointD1___iadd__(self, vec)

    def __isub__(self, vec):
        r"""
        __isub__(self, vec) -> itkPointD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkPointRTKPython.itkPointD1___isub__(self, vec)

    def __add__(self, vec):
        r"""
        __add__(self, vec) -> itkPointD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkPointRTKPython.itkPointD1___add__(self, vec)

    def __sub__(self, *args):
        r"""
        __sub__(self, pnt) -> itkVectorD1

        Parameters
        ----------
        pnt: itkPointD1 const &

        __sub__(self, vec) -> itkPointD1

        Parameters
        ----------
        vec: itkVectorD1 const &

        """
        return _itkPointRTKPython.itkPointD1___sub__(self, *args)

    def GetVectorFromOrigin(self):
        r"""GetVectorFromOrigin(self) -> itkVectorD1"""
        return _itkPointRTKPython.itkPointD1_GetVectorFromOrigin(self)

    def GetVnlVector(self, *args):
        r"""
        GetVnlVector(self) -> vnl_vector_refD
        GetVnlVector(self) -> vnl_vectorD
        """
        return _itkPointRTKPython.itkPointD1_GetVnlVector(self, *args)

    def SetToMidPoint(self, arg0, arg1):
        r"""
        SetToMidPoint(self, arg0, arg1)

        Parameters
        ----------
        arg0: itkPointD1 const &
        arg1: itkPointD1 const &

        """
        return _itkPointRTKPython.itkPointD1_SetToMidPoint(self, arg0, arg1)

    def SetToBarycentricCombination(self, *args):
        r"""
        SetToBarycentricCombination(self, A, B, alpha)

        Parameters
        ----------
        A: itkPointD1 const &
        B: itkPointD1 const &
        alpha: double

        SetToBarycentricCombination(self, A, B, C, weightForA, weightForB)

        Parameters
        ----------
        A: itkPointD1 const &
        B: itkPointD1 const &
        C: itkPointD1 const &
        weightForA: double
        weightForB: double

        SetToBarycentricCombination(self, P, weights, N)

        Parameters
        ----------
        P: itkPointD1 const *
        weights: double const *
        N: unsigned int

        """
        return _itkPointRTKPython.itkPointD1_SetToBarycentricCombination(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD1
        __init__(self, r) -> itkPointD1

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD1

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD1

        Parameters
        ----------
        stdArray: std::array< double,1 > const &

        __init__(self, arg0) -> itkPointD1

        Parameters
        ----------
        arg0: itkPointD1 const &

        """
        _itkPointRTKPython.itkPointD1_swiginit(self, _itkPointRTKPython.new_itkPointD1(*args))
    __swig_destroy__ = _itkPointRTKPython.delete_itkPointD1

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> double

        Parameters
        ----------
        d: unsigned long

        """
        return _itkPointRTKPython.itkPointD1___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: double

        """
        return _itkPointRTKPython.itkPointD1___setitem__(self, d, v)

    @staticmethod
    def __len__():
        r"""__len__() -> unsigned int"""
        return _itkPointRTKPython.itkPointD1___len__()

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkPointRTKPython.itkPointD1___repr__(self)

# Register itkPointD1 in _itkPointRTKPython:
_itkPointRTKPython.itkPointD1_swigregister(itkPointD1)

