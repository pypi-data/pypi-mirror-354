# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkSubSelectImageFilterPython
else:
    import _rtkSubSelectImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
class rtkSubSelectImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkSubSelectImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInputProjectionStack(self, Projections):
        r"""
        SetInputProjectionStack(self, Projections)

        Parameters
        ----------
        Projections: itkImageD3 const *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_SetInputProjectionStack(self, Projections)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageD3_ConstPointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_GetInputProjectionStack(self)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_SetInputGeometry(self, _arg)

    def GetModifiableInputGeometry(self):
        r"""GetModifiableInputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_GetModifiableInputGeometry(self)

    def GetInputGeometry(self, *args):
        r"""
        GetInputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetInputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_GetInputGeometry(self, *args)

    def GetSelectedProjections(self):
        r"""GetSelectedProjections(self) -> vectorB"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_GetSelectedProjections(self)

    def GetOutputGeometry(self):
        r"""GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_GetOutputGeometry(self)
    __swig_destroy__ = _rtkSubSelectImageFilterPython.delete_rtkSubSelectImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkSubSelectImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_cast(obj)

# Register rtkSubSelectImageFilterID3 in _rtkSubSelectImageFilterPython:
_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterID3_swigregister(rtkSubSelectImageFilterID3)
class rtkSubSelectImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkSubSelectImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInputProjectionStack(self, Projections):
        r"""
        SetInputProjectionStack(self, Projections)

        Parameters
        ----------
        Projections: itkImageF3 const *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputProjectionStack(self, Projections)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageF3_ConstPointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputProjectionStack(self)

    def SetInputGeometry(self, _arg):
        r"""
        SetInputGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_SetInputGeometry(self, _arg)

    def GetModifiableInputGeometry(self):
        r"""GetModifiableInputGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetModifiableInputGeometry(self)

    def GetInputGeometry(self, *args):
        r"""
        GetInputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetInputGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetInputGeometry(self, *args)

    def GetSelectedProjections(self):
        r"""GetSelectedProjections(self) -> vectorB"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetSelectedProjections(self)

    def GetOutputGeometry(self):
        r"""GetOutputGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_GetOutputGeometry(self)
    __swig_destroy__ = _rtkSubSelectImageFilterPython.delete_rtkSubSelectImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkSubSelectImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_cast(obj)

# Register rtkSubSelectImageFilterIF3 in _rtkSubSelectImageFilterPython:
_rtkSubSelectImageFilterPython.rtkSubSelectImageFilterIF3_swigregister(rtkSubSelectImageFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def sub_select_image_filter(*args: itkt.ImageLike,  input_projection_stack: itkt.Image=..., input_geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SubSelectImageFilter"""
    import itk

    kwarg_typehints = { 'input_projection_stack':input_projection_stack,'input_geometry':input_geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SubSelectImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sub_select_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.SubSelectImageFilter
    sub_select_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sub_select_image_filter.__doc__ = filter_object.__doc__



