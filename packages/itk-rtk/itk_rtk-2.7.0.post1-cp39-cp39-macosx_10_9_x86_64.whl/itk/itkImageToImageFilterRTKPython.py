# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterRTKPython
else:
    import _itkImageToImageFilterRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionRTKPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageSourceRTKPython
class itkImageToImageFilterICVD23ICVD23(itk.itkImageSourceRTKPython.itkImageSourceICVD23):
    r"""Proxy of C++ itkImageToImageFilterICVD23ICVD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVD23 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVD23 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVD23
        GetInput(self, idx) -> itkImageCVD23

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVD23 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVD23 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterICVD23ICVD23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVD23ICVD23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_cast(obj)

# Register itkImageToImageFilterICVD23ICVD23 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD23ICVD23_swigregister(itkImageToImageFilterICVD23ICVD23)
class itkImageToImageFilterICVD33ICVD33(itk.itkImageSourcePython.itkImageSourceICVD33):
    r"""Proxy of C++ itkImageToImageFilterICVD33ICVD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVD33 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVD33 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVD33
        GetInput(self, idx) -> itkImageCVD33

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVD33 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVD33 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterICVD33ICVD33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVD33ICVD33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_cast(obj)

# Register itkImageToImageFilterICVD33ICVD33 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD33ICVD33_swigregister(itkImageToImageFilterICVD33ICVD33)
class itkImageToImageFilterICVD43ICVD43(itk.itkImageSourceRTKPython.itkImageSourceICVD43):
    r"""Proxy of C++ itkImageToImageFilterICVD43ICVD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVD43 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVD43 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVD43
        GetInput(self, idx) -> itkImageCVD43

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVD43 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVD43 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterICVD43ICVD43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVD43ICVD43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_cast(obj)

# Register itkImageToImageFilterICVD43ICVD43 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD43ICVD43_swigregister(itkImageToImageFilterICVD43ICVD43)
class itkImageToImageFilterICVD53ICVD53(itk.itkImageSourceRTKPython.itkImageSourceICVD53):
    r"""Proxy of C++ itkImageToImageFilterICVD53ICVD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageCVD53 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageCVD53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageCVD53
        GetInput(self, idx) -> itkImageCVD53

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageCVD53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageCVD53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterICVD53ICVD53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterICVD53ICVD53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_cast(obj)

# Register itkImageToImageFilterICVD53ICVD53 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterICVD53ICVD53_swigregister(itkImageToImageFilterICVD53ICVD53)
class itkImageToImageFilterID1ID1(itk.itkImageSourceRTKPython.itkImageSourceID1):
    r"""Proxy of C++ itkImageToImageFilterID1ID1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD1 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD1
        GetInput(self, idx) -> itkImageD1

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterID1ID1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID1ID1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_cast(obj)

# Register itkImageToImageFilterID1ID1 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterID1ID1_swigregister(itkImageToImageFilterID1ID1)
class itkImageToImageFilterID2ID1(itk.itkImageSourceRTKPython.itkImageSourceID1):
    r"""Proxy of C++ itkImageToImageFilterID2ID1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD2
        GetInput(self, idx) -> itkImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterID2ID1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID2ID1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_cast(obj)

# Register itkImageToImageFilterID2ID1 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterID2ID1_swigregister(itkImageToImageFilterID2ID1)
class itkImageToImageFilterID3VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterID3VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageD3
        GetInput(self, idx) -> itkImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterID3VID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterID3VID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_cast(obj)

# Register itkImageToImageFilterID3VID2 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterID3VID2_swigregister(itkImageToImageFilterID3VID2)
class itkImageToImageFilterIF1IF1(itk.itkImageSourceRTKPython.itkImageSourceIF1):
    r"""Proxy of C++ itkImageToImageFilterIF1IF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF1 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF1
        GetInput(self, idx) -> itkImageF1

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF1 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF1IF1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF1IF1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_cast(obj)

# Register itkImageToImageFilterIF1IF1 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIF1IF1_swigregister(itkImageToImageFilterIF1IF1)
class itkImageToImageFilterIF2IF1(itk.itkImageSourceRTKPython.itkImageSourceIF1):
    r"""Proxy of C++ itkImageToImageFilterIF2IF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF2
        GetInput(self, idx) -> itkImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF2IF1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF2IF1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_cast(obj)

# Register itkImageToImageFilterIF2IF1 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIF2IF1_swigregister(itkImageToImageFilterIF2IF1)
class itkImageToImageFilterIF3ID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterIF3ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF3ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_cast(obj)

# Register itkImageToImageFilterIF3ID2 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3ID2_swigregister(itkImageToImageFilterIF3ID2)
class itkImageToImageFilterIF3VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterIF3VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageF3
        GetInput(self, idx) -> itkImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIF3VIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIF3VIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_cast(obj)

# Register itkImageToImageFilterIF3VIF2 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIF3VIF2_swigregister(itkImageToImageFilterIF3VIF2)
class itkImageToImageFilterIVF24IVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ itkImageToImageFilterIVF24IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF24 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF24
        GetInput(self, idx) -> itkImageVF24

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF24 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF24IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF24IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_cast(obj)

# Register itkImageToImageFilterIVF24IVF23 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF24IVF23_swigregister(itkImageToImageFilterIVF24IVF23)
class itkImageToImageFilterIVF34IVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ itkImageToImageFilterIVF34IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF34 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF34
        GetInput(self, idx) -> itkImageVF34

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF34 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF34IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF34IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_cast(obj)

# Register itkImageToImageFilterIVF34IVF33 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF34IVF33_swigregister(itkImageToImageFilterIVF34IVF33)
class itkImageToImageFilterIVF44IVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ itkImageToImageFilterIVF44IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF44 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF44
        GetInput(self, idx) -> itkImageVF44

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF44 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF44IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF44IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_cast(obj)

# Register itkImageToImageFilterIVF44IVF43 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF44IVF43_swigregister(itkImageToImageFilterIVF44IVF43)
class itkImageToImageFilterIVF52IVF52(itk.itkImageSourceRTKPython.itkImageSourceIVF52):
    r"""Proxy of C++ itkImageToImageFilterIVF52IVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF52 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF52 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF52
        GetInput(self, idx) -> itkImageVF52

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF52 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF52 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF52IVF52

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF52IVF52

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_cast(obj)

# Register itkImageToImageFilterIVF52IVF52 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF52IVF52_swigregister(itkImageToImageFilterIVF52IVF52)
class itkImageToImageFilterIVF53IVF53(itk.itkImageSourceRTKPython.itkImageSourceIVF53):
    r"""Proxy of C++ itkImageToImageFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF53 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF53
        GetInput(self, idx) -> itkImageVF53

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF53 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF53IVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF53IVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_cast(obj)

# Register itkImageToImageFilterIVF53IVF53 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF53IVF53_swigregister(itkImageToImageFilterIVF53IVF53)
class itkImageToImageFilterIVF54IVF53(itk.itkImageSourceRTKPython.itkImageSourceIVF53):
    r"""Proxy of C++ itkImageToImageFilterIVF54IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF54
        GetInput(self, idx) -> itkImageVF54

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF54IVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF54IVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_cast(obj)

# Register itkImageToImageFilterIVF54IVF53 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF53_swigregister(itkImageToImageFilterIVF54IVF53)
class itkImageToImageFilterIVF54IVF54(itk.itkImageSourceRTKPython.itkImageSourceIVF54):
    r"""Proxy of C++ itkImageToImageFilterIVF54IVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkImageVF54
        GetInput(self, idx) -> itkImageVF54

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkImageVF54 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterIVF54IVF54

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterIVF54IVF54

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_cast(obj)

# Register itkImageToImageFilterIVF54IVF54 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterIVF54IVF54_swigregister(itkImageToImageFilterIVF54IVF54)
class itkImageToImageFilterVID2ID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterVID2ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD2
        GetInput(self, idx) -> itkVectorImageD2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVID2ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID2ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_cast(obj)

# Register itkImageToImageFilterVID2ID3 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3_swigregister(itkImageToImageFilterVID2ID3)
class itkImageToImageFilterVID3ID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ itkImageToImageFilterVID3ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageD3
        GetInput(self, idx) -> itkVectorImageD3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageD3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVID3ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVID3ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_cast(obj)

# Register itkImageToImageFilterVID3ID4 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4_swigregister(itkImageToImageFilterVID3ID4)
class itkImageToImageFilterVIF2IF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterVIF2IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF2
        GetInput(self, idx) -> itkVectorImageF2

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF2 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVIF2IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF2IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_cast(obj)

# Register itkImageToImageFilterVIF2IF3 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3_swigregister(itkImageToImageFilterVIF2IF3)
class itkImageToImageFilterVIF3IF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ itkImageToImageFilterVIF3IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        SetInput(self, arg0, image)

        Parameters
        ----------
        arg0: unsigned int
        image: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetInput(self, *args)

    def GetInput(self, *args):
        r"""
        GetInput(self) -> itkVectorImageF3
        GetInput(self, idx) -> itkVectorImageF3

        Parameters
        ----------
        idx: unsigned int

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetInput(self, *args)

    def PushBackInput(self, input):
        r"""
        PushBackInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushBackInput(self, input)

    def PopBackInput(self):
        r"""PopBackInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopBackInput(self)

    def PushFrontInput(self, input):
        r"""
        PushFrontInput(self, input)

        Parameters
        ----------
        input: itkVectorImageF3 const *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PushFrontInput(self, input)

    def PopFrontInput(self):
        r"""PopFrontInput(self)"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_PopFrontInput(self)

    def SetCoordinateTolerance(self, _arg):
        r"""
        SetCoordinateTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetCoordinateTolerance(self, _arg)

    def GetCoordinateTolerance(self):
        r"""GetCoordinateTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetCoordinateTolerance(self)

    def SetDirectionTolerance(self, _arg):
        r"""
        SetDirectionTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_SetDirectionTolerance(self, _arg)

    def GetDirectionTolerance(self):
        r"""GetDirectionTolerance(self) -> double"""
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_GetDirectionTolerance(self)
    __swig_destroy__ = _itkImageToImageFilterRTKPython.delete_itkImageToImageFilterVIF3IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageToImageFilterVIF3IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_cast(obj)

# Register itkImageToImageFilterVIF3IF4 in _itkImageToImageFilterRTKPython:
_itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4_swigregister(itkImageToImageFilterVIF3IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__



