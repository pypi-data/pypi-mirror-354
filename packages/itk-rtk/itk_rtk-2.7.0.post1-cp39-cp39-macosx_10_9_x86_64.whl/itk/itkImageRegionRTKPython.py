# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRegionRTKPython
else:
    import _itkImageRegionRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
class vectoritkImageRegion1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageRegion1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageRegion1 >::size_type"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageRegion1

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type
        j: std::vector< itkImageRegion1 >::difference_type

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type
        j: std::vector< itkImageRegion1 >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type
        j: std::vector< itkImageRegion1 >::difference_type
        v: std::vector< itkImageRegion1,std::allocator< itkImageRegion1 > > const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type
        j: std::vector< itkImageRegion1 >::difference_type

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageRegion1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> itkImageRegion1

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageRegion1,std::allocator< itkImageRegion1 > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageRegion1 >::difference_type
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> itkImageRegion1"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageRegion1 >::size_type"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageRegion1 > &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageRegion1 >::iterator"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageRegion1 >::iterator"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageRegion1 >::reverse_iterator"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageRegion1 >::reverse_iterator"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageRegion1 >::allocator_type"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageRegion1 >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRegion1 >::iterator

        erase(self, first, last) -> std::vector< itkImageRegion1 >::iterator

        Parameters
        ----------
        first: std::vector< itkImageRegion1 >::iterator
        last: std::vector< itkImageRegion1 >::iterator

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageRegion1
        __init__(self, other) -> vectoritkImageRegion1

        Parameters
        ----------
        other: std::vector< itkImageRegion1 > const &

        __init__(self, size) -> vectoritkImageRegion1

        Parameters
        ----------
        size: std::vector< itkImageRegion1 >::size_type

        __init__(self, size, value) -> vectoritkImageRegion1

        Parameters
        ----------
        size: std::vector< itkImageRegion1 >::size_type
        value: std::vector< itkImageRegion1 >::value_type const &

        """
        _itkImageRegionRTKPython.vectoritkImageRegion1_swiginit(self, _itkImageRegionRTKPython.new_vectoritkImageRegion1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_push_back(self, x)

    def front(self):
        r"""front(self) -> itkImageRegion1"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_front(self)

    def back(self):
        r"""back(self) -> itkImageRegion1"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageRegion1 >::size_type
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageRegion1 >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageRegion1 >::size_type
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageRegion1 >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageRegion1 >::iterator
        x: std::vector< itkImageRegion1 >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageRegion1 >::iterator
        n: std::vector< itkImageRegion1 >::size_type
        x: std::vector< itkImageRegion1 >::value_type const &

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageRegion1 >::size_type

        """
        return _itkImageRegionRTKPython.vectoritkImageRegion1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageRegion1 >::size_type"""
        return _itkImageRegionRTKPython.vectoritkImageRegion1_capacity(self)
    __swig_destroy__ = _itkImageRegionRTKPython.delete_vectoritkImageRegion1

# Register vectoritkImageRegion1 in _itkImageRegionRTKPython:
_itkImageRegionRTKPython.vectoritkImageRegion1_swigregister(vectoritkImageRegion1)
class itkImageRegion1(itk.ITKCommonBasePython.itkRegion):
    r"""Proxy of C++ itkImageRegion1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImageRegionRTKPython.itkImageRegion1_GetImageDimension()

    def Print(self, os, indent=0):
        r"""
        Print(self, os, indent=0)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkImageRegionRTKPython.itkImageRegion1_Print(self, os, indent)
    __swig_destroy__ = _itkImageRegionRTKPython.delete_itkImageRegion1

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageRegion1
        __init__(self, arg0) -> itkImageRegion1

        Parameters
        ----------
        arg0: itkImageRegion1 const &

        __init__(self, index, size) -> itkImageRegion1

        Parameters
        ----------
        index: itkIndex1 const &
        size: itkSize1 const &

        __init__(self, size) -> itkImageRegion1

        Parameters
        ----------
        size: itkSize1 const &

        """
        _itkImageRegionRTKPython.itkImageRegion1_swiginit(self, _itkImageRegionRTKPython.new_itkImageRegion1(*args))

    def __GetModifiableIndex_orig__(self):
        r"""__GetModifiableIndex_orig__(self) -> itkIndex1"""
        return _itkImageRegionRTKPython.itkImageRegion1___GetModifiableIndex_orig__(self)

    def __GetModifiableSize_orig__(self):
        r"""__GetModifiableSize_orig__(self) -> itkSize1"""
        return _itkImageRegionRTKPython.itkImageRegion1___GetModifiableSize_orig__(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, size)

        Parameters
        ----------
        size: itkSize1 const &

        SetSize(self, i, sze)

        Parameters
        ----------
        i: unsigned int
        sze: unsigned long

        """
        return _itkImageRegionRTKPython.itkImageRegion1_SetSize(self, *args)

    def __GetSize_orig__(self, *args):
        r"""
        __GetSize_orig__(self) -> itkSize1
        __GetSize_orig__(self, i) -> unsigned long

        Parameters
        ----------
        i: unsigned int

        """
        return _itkImageRegionRTKPython.itkImageRegion1___GetSize_orig__(self, *args)

    def SetIndex(self, *args):
        r"""
        SetIndex(self, index)

        Parameters
        ----------
        index: itkIndex1 const &

        SetIndex(self, i, sze)

        Parameters
        ----------
        i: unsigned int
        sze: long

        """
        return _itkImageRegionRTKPython.itkImageRegion1_SetIndex(self, *args)

    def __GetIndex_orig__(self, *args):
        r"""
        __GetIndex_orig__(self) -> itkIndex1
        __GetIndex_orig__(self, i) -> long

        Parameters
        ----------
        i: unsigned int

        """
        return _itkImageRegionRTKPython.itkImageRegion1___GetIndex_orig__(self, *args)

    def GetUpperIndex(self):
        r"""GetUpperIndex(self) -> itkIndex1"""
        return _itkImageRegionRTKPython.itkImageRegion1_GetUpperIndex(self)

    def SetUpperIndex(self, idx):
        r"""
        SetUpperIndex(self, idx)

        Parameters
        ----------
        idx: itkIndex1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1_SetUpperIndex(self, idx)

    def ComputeOffsetTable(self, offsetTable):
        r"""
        ComputeOffsetTable(self, offsetTable)

        Parameters
        ----------
        offsetTable: long *

        """
        return _itkImageRegionRTKPython.itkImageRegion1_ComputeOffsetTable(self, offsetTable)

    def __eq__(self, region):
        r"""
        __eq__(self, region) -> bool

        Parameters
        ----------
        region: itkImageRegion1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1___eq__(self, region)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkImageRegion1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1___ne__(self, other)

    def IsInside(self, *args):
        r"""
        IsInside(self, index) -> bool

        Parameters
        ----------
        index: itkIndex1 const &

        IsInside(self, otherRegion) -> bool

        Parameters
        ----------
        otherRegion: itkImageRegion1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1_IsInside(self, *args)

    def GetNumberOfPixels(self):
        r"""GetNumberOfPixels(self) -> unsigned long"""
        return _itkImageRegionRTKPython.itkImageRegion1_GetNumberOfPixels(self)

    def PadByRadius(self, *args):
        r"""
        PadByRadius(self, radius)

        Parameters
        ----------
        radius: long

        PadByRadius(self, radius)

        Parameters
        ----------
        radius: long const *

        PadByRadius(self, radius)

        Parameters
        ----------
        radius: itkSize1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1_PadByRadius(self, *args)

    def ShrinkByRadius(self, *args):
        r"""
        ShrinkByRadius(self, radius) -> bool

        Parameters
        ----------
        radius: long

        ShrinkByRadius(self, radius) -> bool

        Parameters
        ----------
        radius: long const *

        ShrinkByRadius(self, radius) -> bool

        Parameters
        ----------
        radius: itkSize1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1_ShrinkByRadius(self, *args)

    def Crop(self, region):
        r"""
        Crop(self, region) -> bool

        Parameters
        ----------
        region: itkImageRegion1 const &

        """
        return _itkImageRegionRTKPython.itkImageRegion1_Crop(self, region)

    def Slice(self, dim):
        r"""
        Slice(self, dim) -> itkImageRegion1

        Parameters
        ----------
        dim: unsigned int const

        """
        return _itkImageRegionRTKPython.itkImageRegion1_Slice(self, dim)

    def GetIndex(self):
        var = self.__GetIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableIndex(self):
        var = self.__GetModifiableIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetSize(self):
        var = self.__GetSize_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableSize(self):
        var = self.__GetModifiableSize_orig__()
        var_copy = type(var)(var)
        return var_copy


    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkImageRegionRTKPython.itkImageRegion1___repr__(self)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        state = (tuple(self.GetIndex()), tuple(self.GetSize()))
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        self.__init__(*state)


# Register itkImageRegion1 in _itkImageRegionRTKPython:
_itkImageRegionRTKPython.itkImageRegion1_swigregister(itkImageRegion1)

