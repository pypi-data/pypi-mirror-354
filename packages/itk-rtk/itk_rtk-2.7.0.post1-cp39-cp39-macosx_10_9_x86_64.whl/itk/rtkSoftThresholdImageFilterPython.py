# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkSoftThresholdImageFilterPython
else:
    import _rtkSoftThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkUnaryFunctorImageFilterID3ID3STDD_New():
    return itkUnaryFunctorImageFilterID3ID3STDD.New()

class itkUnaryFunctorImageFilterID3ID3STDD(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkUnaryFunctorImageFilterID3ID3STDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkUnaryFunctorImageFilterID3ID3STDD_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkUnaryFunctorImageFilterID3ID3STDD_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> rtkFunctorSoftThresholdDD
        GetFunctor(self) -> rtkFunctorSoftThresholdDD
        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: rtkFunctorSoftThresholdDD const &

        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_SetFunctor(self, functor)
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_itkUnaryFunctorImageFilterID3ID3STDD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkUnaryFunctorImageFilterID3ID3STDD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_cast(obj)

    def New(*args, **kargs):
        """New() -> itkUnaryFunctorImageFilterID3ID3STDD

        Create a new object of the class itkUnaryFunctorImageFilterID3ID3STDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFunctorImageFilterID3ID3STDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFunctorImageFilterID3ID3STDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFunctorImageFilterID3ID3STDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFunctorImageFilterID3ID3STDD in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterID3ID3STDD_swigregister(itkUnaryFunctorImageFilterID3ID3STDD)

def itkUnaryFunctorImageFilterIF3IF3STFF_New():
    return itkUnaryFunctorImageFilterIF3IF3STFF.New()

class itkUnaryFunctorImageFilterIF3IF3STFF(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkUnaryFunctorImageFilterIF3IF3STFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkUnaryFunctorImageFilterIF3IF3STFF_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkUnaryFunctorImageFilterIF3IF3STFF_Pointer"""
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_Clone(self)

    def GetFunctor(self, *args):
        r"""
        GetFunctor(self) -> rtkFunctorSoftThresholdFF
        GetFunctor(self) -> rtkFunctorSoftThresholdFF
        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_GetFunctor(self, *args)

    def SetFunctor(self, functor):
        r"""
        SetFunctor(self, functor)

        Parameters
        ----------
        functor: rtkFunctorSoftThresholdFF const &

        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_SetFunctor(self, functor)
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_itkUnaryFunctorImageFilterIF3IF3STFF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkUnaryFunctorImageFilterIF3IF3STFF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_cast(obj)

    def New(*args, **kargs):
        """New() -> itkUnaryFunctorImageFilterIF3IF3STFF

        Create a new object of the class itkUnaryFunctorImageFilterIF3IF3STFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryFunctorImageFilterIF3IF3STFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryFunctorImageFilterIF3IF3STFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryFunctorImageFilterIF3IF3STFF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryFunctorImageFilterIF3IF3STFF in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.itkUnaryFunctorImageFilterIF3IF3STFF_swigregister(itkUnaryFunctorImageFilterIF3IF3STFF)
class rtkFunctorSoftThresholdDD(object):
    r"""Proxy of C++ rtkFunctorSoftThresholdDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkFunctorSoftThresholdDD

    def SetThreshold(self, thresh):
        r"""
        SetThreshold(self, thresh)

        Parameters
        ----------
        thresh: double const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_SetThreshold(self, thresh)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSoftThresholdDD const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___ne__(self, other)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSoftThresholdDD const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___eq__(self, other)

    def __call__(self, A):
        r"""
        __call__(self, A) -> double

        Parameters
        ----------
        A: double const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD___call__(self, A)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSoftThresholdDD
        __init__(self, arg0) -> rtkFunctorSoftThresholdDD

        Parameters
        ----------
        arg0: rtkFunctorSoftThresholdDD const &

        """
        _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_swiginit(self, _rtkSoftThresholdImageFilterPython.new_rtkFunctorSoftThresholdDD(*args))

# Register rtkFunctorSoftThresholdDD in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdDD_swigregister(rtkFunctorSoftThresholdDD)
class rtkFunctorSoftThresholdFF(object):
    r"""Proxy of C++ rtkFunctorSoftThresholdFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkFunctorSoftThresholdFF

    def SetThreshold(self, thresh):
        r"""
        SetThreshold(self, thresh)

        Parameters
        ----------
        thresh: float const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_SetThreshold(self, thresh)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSoftThresholdFF const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___ne__(self, other)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkFunctorSoftThresholdFF const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___eq__(self, other)

    def __call__(self, A):
        r"""
        __call__(self, A) -> float

        Parameters
        ----------
        A: float const &

        """
        return _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF___call__(self, A)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSoftThresholdFF
        __init__(self, arg0) -> rtkFunctorSoftThresholdFF

        Parameters
        ----------
        arg0: rtkFunctorSoftThresholdFF const &

        """
        _rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swiginit(self, _rtkSoftThresholdImageFilterPython.new_rtkFunctorSoftThresholdFF(*args))

# Register rtkFunctorSoftThresholdFF in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkFunctorSoftThresholdFF_swigregister(rtkFunctorSoftThresholdFF)

def rtkSoftThresholdImageFilterID3ID3_New():
    return rtkSoftThresholdImageFilterID3ID3.New()

class rtkSoftThresholdImageFilterID3ID3(itkUnaryFunctorImageFilterID3ID3STDD):
    r"""Proxy of C++ rtkSoftThresholdImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkSoftThresholdImageFilterID3ID3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkSoftThresholdImageFilterID3ID3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_Clone(self)

    def SetThreshold(self, threshold):
        r"""
        SetThreshold(self, threshold)

        Parameters
        ----------
        threshold: double const

        """
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_SetThreshold(self, threshold)
    OutputEqualityComparableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkSoftThresholdImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkSoftThresholdImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkSoftThresholdImageFilterID3ID3

        Create a new object of the class rtkSoftThresholdImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSoftThresholdImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSoftThresholdImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSoftThresholdImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSoftThresholdImageFilterID3ID3 in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterID3ID3_swigregister(rtkSoftThresholdImageFilterID3ID3)

def rtkSoftThresholdImageFilterIF3IF3_New():
    return rtkSoftThresholdImageFilterIF3IF3.New()

class rtkSoftThresholdImageFilterIF3IF3(itkUnaryFunctorImageFilterIF3IF3STFF):
    r"""Proxy of C++ rtkSoftThresholdImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkSoftThresholdImageFilterIF3IF3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkSoftThresholdImageFilterIF3IF3_Pointer"""
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_Clone(self)

    def SetThreshold(self, threshold):
        r"""
        SetThreshold(self, threshold)

        Parameters
        ----------
        threshold: float const

        """
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_SetThreshold(self, threshold)
    OutputEqualityComparableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _rtkSoftThresholdImageFilterPython.delete_rtkSoftThresholdImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkSoftThresholdImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkSoftThresholdImageFilterIF3IF3

        Create a new object of the class rtkSoftThresholdImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSoftThresholdImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSoftThresholdImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSoftThresholdImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSoftThresholdImageFilterIF3IF3 in _rtkSoftThresholdImageFilterPython:
_rtkSoftThresholdImageFilterPython.rtkSoftThresholdImageFilterIF3IF3_swigregister(rtkSoftThresholdImageFilterIF3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def soft_threshold_image_filter(*args: itkt.ImageLike,  threshold: float=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SoftThresholdImageFilter"""
    import itk

    kwarg_typehints = { 'threshold':threshold,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SoftThresholdImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def soft_threshold_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.SoftThresholdImageFilter
    soft_threshold_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    soft_threshold_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def unary_functor_image_filter(*args: itkt.ImageLike,  functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for UnaryFunctorImageFilter"""
    import itk

    kwarg_typehints = { 'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.UnaryFunctorImageFilter
    unary_functor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    unary_functor_image_filter.__doc__ = filter_object.__doc__



