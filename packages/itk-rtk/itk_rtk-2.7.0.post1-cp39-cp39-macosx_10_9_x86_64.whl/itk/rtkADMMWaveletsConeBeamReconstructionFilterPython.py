# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkADMMWaveletsConeBeamReconstructionFilterPython
else:
    import _rtkADMMWaveletsConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkIterativeConeBeamReconstructionFilterPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterAPython
import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkBackProjectionImageFilterPython

def rtkADMMWaveletsConeBeamReconstructionFilterID3_New():
    return rtkADMMWaveletsConeBeamReconstructionFilterID3.New()

class rtkADMMWaveletsConeBeamReconstructionFilterID3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3):
    r"""Proxy of C++ rtkADMMWaveletsConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkADMMWaveletsConeBeamReconstructionFilterID3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkADMMWaveletsConeBeamReconstructionFilterID3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_Clone(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetGeometry(self, _arg)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetBeta(self)

    def SetAL_iterations(self, _arg):
        r"""
        SetAL_iterations(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetAL_iterations(self, _arg)

    def GetAL_iterations(self):
        r"""GetAL_iterations(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetAL_iterations(self)

    def SetCG_iterations(self, _arg):
        r"""
        SetCG_iterations(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetCG_iterations(self, _arg)

    def GetCG_iterations(self):
        r"""GetCG_iterations(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetCG_iterations(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetOrder(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetNumberOfLevels(self, _arg)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetNumberOfLevels(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_GetDisableDisplacedDetectorFilter(self)
    __swig_destroy__ = _rtkADMMWaveletsConeBeamReconstructionFilterPython.delete_rtkADMMWaveletsConeBeamReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkADMMWaveletsConeBeamReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkADMMWaveletsConeBeamReconstructionFilterID3

        Create a new object of the class rtkADMMWaveletsConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkADMMWaveletsConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkADMMWaveletsConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkADMMWaveletsConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkADMMWaveletsConeBeamReconstructionFilterID3 in _rtkADMMWaveletsConeBeamReconstructionFilterPython:
_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterID3_swigregister(rtkADMMWaveletsConeBeamReconstructionFilterID3)

def rtkADMMWaveletsConeBeamReconstructionFilterIF3_New():
    return rtkADMMWaveletsConeBeamReconstructionFilterIF3.New()

class rtkADMMWaveletsConeBeamReconstructionFilterIF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    r"""Proxy of C++ rtkADMMWaveletsConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkADMMWaveletsConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkADMMWaveletsConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_Clone(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetGeometry(self, _arg)

    def SetAlpha(self, _arg):
        r"""
        SetAlpha(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAlpha(self, _arg)

    def GetAlpha(self):
        r"""GetAlpha(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAlpha(self)

    def SetBeta(self, _arg):
        r"""
        SetBeta(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetBeta(self, _arg)

    def GetBeta(self):
        r"""GetBeta(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetBeta(self)

    def SetAL_iterations(self, _arg):
        r"""
        SetAL_iterations(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetAL_iterations(self, _arg)

    def GetAL_iterations(self):
        r"""GetAL_iterations(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetAL_iterations(self)

    def SetCG_iterations(self, _arg):
        r"""
        SetCG_iterations(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetCG_iterations(self, _arg)

    def GetCG_iterations(self):
        r"""GetCG_iterations(self) -> float"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetCG_iterations(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetOrder(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetOrder(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetNumberOfLevels(self, _arg)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetNumberOfLevels(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter(self)
    __swig_destroy__ = _rtkADMMWaveletsConeBeamReconstructionFilterPython.delete_rtkADMMWaveletsConeBeamReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkADMMWaveletsConeBeamReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkADMMWaveletsConeBeamReconstructionFilterIF3

        Create a new object of the class rtkADMMWaveletsConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkADMMWaveletsConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkADMMWaveletsConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkADMMWaveletsConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkADMMWaveletsConeBeamReconstructionFilterIF3 in _rtkADMMWaveletsConeBeamReconstructionFilterPython:
_rtkADMMWaveletsConeBeamReconstructionFilterPython.rtkADMMWaveletsConeBeamReconstructionFilterIF3_swigregister(rtkADMMWaveletsConeBeamReconstructionFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def admm_wavelets_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  geometry=..., alpha: float=..., beta: float=..., al_iterations: float=..., cg_iterations: float=..., order: int=..., number_of_levels: int=..., disable_displaced_detector_filter: bool=..., forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=..., step_size: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ADMMWaveletsConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'alpha':alpha,'beta':beta,'al_iterations':al_iterations,'cg_iterations':cg_iterations,'order':order,'number_of_levels':number_of_levels,'disable_displaced_detector_filter':disable_displaced_detector_filter,'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf,'step_size':step_size }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ADMMWaveletsConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def admm_wavelets_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ADMMWaveletsConeBeamReconstructionFilter
    admm_wavelets_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    admm_wavelets_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__



