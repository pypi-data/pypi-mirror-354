# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageBaseRTKPython
else:
    import _itkImageBaseRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSizePython
import itk.pyBasePython
import itk.itkImageRegionRTKPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython

def itkImageBase1_New():
    return itkImageBase1.New()

class itkImageBase1(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkImageBase1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageBase1_Pointer"""
        return _itkImageBaseRTKPython.itkImageBase1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageBase1_Pointer"""
        return _itkImageBaseRTKPython.itkImageBase1_Clone(self)

    @staticmethod
    def GetImageDimension():
        r"""GetImageDimension() -> unsigned int"""
        return _itkImageBaseRTKPython.itkImageBase1_GetImageDimension()

    def SetOrigin(self, *args):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD1

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: double const *

        SetOrigin(self, origin)

        Parameters
        ----------
        origin: float const *

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetOrigin(self, *args)

    def __SetDirection_orig__(self, direction):
        r"""
        __SetDirection_orig__(self, direction)

        Parameters
        ----------
        direction: itkMatrixD11 const &

        """
        return _itkImageBaseRTKPython.itkImageBase1___SetDirection_orig__(self, direction)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD11"""
        return _itkImageBaseRTKPython.itkImageBase1_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD11"""
        return _itkImageBaseRTKPython.itkImageBase1_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD1"""
        return _itkImageBaseRTKPython.itkImageBase1_GetOrigin(self)

    def Allocate(self, initialize=False):
        r"""
        Allocate(self, initialize=False)

        Parameters
        ----------
        initialize: bool

        """
        return _itkImageBaseRTKPython.itkImageBase1_Allocate(self, initialize)

    def AllocateInitialized(self):
        r"""AllocateInitialized(self)"""
        return _itkImageBaseRTKPython.itkImageBase1_AllocateInitialized(self)

    def SetLargestPossibleRegion(self, region):
        r"""
        SetLargestPossibleRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion1 const &

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetLargestPossibleRegion(self, region)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1___GetLargestPossibleRegion_orig__(self)

    def SetBufferedRegion(self, region):
        r"""
        SetBufferedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion1 const &

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetBufferedRegion(self, region)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1___GetBufferedRegion_orig__(self)

    def SetRequestedRegion(self, *args):
        r"""
        SetRequestedRegion(self, region)

        Parameters
        ----------
        region: itkImageRegion1 const &

        SetRequestedRegion(self, data)

        Parameters
        ----------
        data: itkDataObject const *

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetRequestedRegion(self, *args)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion1"""
        return _itkImageBaseRTKPython.itkImageBase1___GetRequestedRegion_orig__(self)

    def SetRegions(self, *args):
        r"""
        SetRegions(self, region)

        Parameters
        ----------
        region: itkImageRegion1 const &

        SetRegions(self, size)

        Parameters
        ----------
        size: itkSize1 const &

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetRegions(self, *args)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageBaseRTKPython.itkImageBase1_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex1 const &

        """
        return _itkImageBaseRTKPython.itkImageBase1_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex1

        Parameters
        ----------
        offset: long

        """
        return _itkImageBaseRTKPython.itkImageBase1_ComputeIndex(self, offset)

    def SetSpacing(self, *args):
        r"""
        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: itkVectorD1 const &

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: double const *

        SetSpacing(self, spacing)

        Parameters
        ----------
        spacing: float const *

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetSpacing(self, *args)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageBase1 const *

        """
        return _itkImageBaseRTKPython.itkImageBase1_Graft(self, image)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase1 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageBaseRTKPython.itkImageBase1_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase1 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageBaseRTKPython.itkImageBase1_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageBaseRTKPython.itkImageBase1_GetNumberOfComponentsPerPixel(self)

    def SetNumberOfComponentsPerPixel(self, arg0):
        r"""
        SetNumberOfComponentsPerPixel(self, arg0)

        Parameters
        ----------
        arg0: unsigned int

        """
        return _itkImageBaseRTKPython.itkImageBase1_SetNumberOfComponentsPerPixel(self, arg0)
    __swig_destroy__ = _itkImageBaseRTKPython.delete_itkImageBase1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageBase1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageBaseRTKPython.itkImageBase1_cast(obj)

    def GetBufferedRegion(self):
        var = self.__GetBufferedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetLargestPossibleRegion(self):
        var = self.__GetLargestPossibleRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetRequestedRegion(self):
        var = self.__GetRequestedRegion_orig__()
        var_copy = type(var)(var)
        return var_copy


    def TransformPhysicalPointToIndex(self, point):
        r"""
        TransformPhysicalPointToIndex(self, point) -> itkIndex1

        Parameters
        ----------
        point: itkPointD1 &

        """
        return _itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToIndex(self, point)

    def TransformPhysicalPointToContinuousIndex(self, point):
        r"""
        TransformPhysicalPointToContinuousIndex(self, point) -> itkContinuousIndexD1

        Parameters
        ----------
        point: itkPointD1 &

        """
        return _itkImageBaseRTKPython.itkImageBase1_TransformPhysicalPointToContinuousIndex(self, point)

    def TransformContinuousIndexToPhysicalPoint(self, idx):
        r"""
        TransformContinuousIndexToPhysicalPoint(self, idx) -> itkPointD1

        Parameters
        ----------
        idx: itkContinuousIndexD1 &

        """
        return _itkImageBaseRTKPython.itkImageBase1_TransformContinuousIndexToPhysicalPoint(self, idx)

    def TransformIndexToPhysicalPoint(self, idx):
        r"""
        TransformIndexToPhysicalPoint(self, idx) -> itkPointD1

        Parameters
        ----------
        idx: itkIndex1 &

        """
        return _itkImageBaseRTKPython.itkImageBase1_TransformIndexToPhysicalPoint(self, idx)

    def _SetBase(self, base):
        """Internal method to keep a reference when creating a view of a NumPy array."""
        self.base = base

    @property
    def ndim(self):
        """Equivalent to the np.ndarray ndim attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        spatial_dims = self.GetImageDimension()
        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            return spatial_dims + 1
        else:
            return spatial_dims

    @property
    def shape(self):
        """Equivalent to the np.ndarray shape attribute when converted
        to an image with itk.array_view_from_image."""
        import itk

        itksize = self.GetLargestPossibleRegion().GetSize()
        dim = len(itksize)
        result = [int(itksize[idx]) for idx in range(dim)]

        if self.GetNumberOfComponentsPerPixel() > 1 or isinstance(self, itk.VectorImage):
            result = [self.GetNumberOfComponentsPerPixel(), ] + result
#ITK is C-order. The shape needs to be reversed unless we are a view on
#a NumPy array that is Fortran-order.
        reverse = True
        base = self
        while hasattr(base, 'base'):
            if hasattr(base, 'flags'):
                reverse = not base.flags.f_contiguous
                break
            base = base.base
        if reverse:
            result.reverse()
        return tuple(result)

    @property
    def dtype(self):
        """Equivalent to the np.ndarray dtype attribute when converted
        to an image with itk.array_view_from_image."""
        import itk
        first_template_arg = itk.template(self)[1][0]
        if hasattr(first_template_arg, 'dtype'):
            return first_template_arg.dtype
        else:
#Multi-component pixel types, e.g. Vector,
#CovariantVector, etc.
            return itk.template(first_template_arg)[1][0].dtype

    def astype(self, pixel_type):
        """Cast the image to the provided itk pixel type or equivalent NumPy dtype."""
        import itk
        import numpy as np
        from itk.support import types

#if both a numpy dtype and a ctype exist, use the latter.
        if type(pixel_type) is type:
            c_pixel_type = types.itkCType.GetCTypeForDType(pixel_type)
            if c_pixel_type is not None:
                pixel_type = c_pixel_type

#input_image_template is Image or VectorImage
        (input_image_template, (input_pixel_type, input_image_dimension)) = itk.template(self)

        if input_pixel_type is pixel_type:
            return self
        OutputImageType = input_image_template[pixel_type, input_image_dimension]
        cast = itk.cast_image_filter(self, ttype=(type(self), OutputImageType))
        return cast

    def SetDirection(self, direction):
        from itk.support import helpers
        if helpers.is_arraylike(direction):
            import itk
            import numpy as np

            array = np.asarray(direction).astype(np.float64)
            dimension = self.GetImageDimension()
            for dim in array.shape:
                if dim != dimension:
                    raise ValueError('Array does not have the expected shape')
            matrix = itk.matrix_from_array(array)
            self.__SetDirection_orig__(matrix)
        else:
            self.__SetDirection_orig__(direction)

    def keys(self):
        """Return keys related to the image's metadata.

        These keys are used in the dictionary resulting from dict(image).

        These keys include MetaDataDictionary keys along with
        'origin', 'spacing', and 'direction' keys, which
        correspond to the image's Origin, Spacing, and Direction. However,
        they are in (z, y, x) order as opposed to (x, y, z) order to
        correspond to the indexing of the shape of the pixel buffer
        array resulting from np.array(image).
        """
        meta_keys = self.GetMetaDataDictionary().GetKeys()
#Ignore deprecated, legacy members that cause issues
        result = list(filter(lambda k: not k.startswith('ITK_original'), meta_keys))
        result.extend(['origin', 'spacing', 'direction'])
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        import itk
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                return np.flip(np.asarray(self.GetOrigin()), axis=None)
            elif key == 'spacing':
                return np.flip(np.asarray(self.GetSpacing()), axis=None)
            elif key == 'direction':
                return np.flip(itk.array_from_matrix(self.GetDirection()), axis=None)
            else:
                return self.GetMetaDataDictionary()[key]
        else:
            return itk.array_view_from_image(self).__getitem__(key)

    def __setitem__(self, key, value):
        """Set metadata keys, see help(image.keys), for string
        keys, otherwise provide NumPy indexing to the pixel buffer
        array view. The index order follows NumPy array indexing
        order, i.e. [z, y, x] versus [x, y, z]."""
        if isinstance(key, str):
            import numpy as np
            if key == 'origin':
                self.SetOrigin(np.flip(value, axis=None))
            elif key == 'spacing':
                self.SetSpacing(np.flip(value, axis=None))
            elif key == 'direction':
                self.SetDirection(np.flip(value, axis=None))
            else:
                self.GetMetaDataDictionary()[key] = value
        else:
            import itk
            itk.array_view_from_image(self).__setitem__(key, value)

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_image(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.image_from_dict(state)
        self.__dict__['this'] = deserialized
        self.SetOrigin(state['origin'])
        self.SetSpacing(state['spacing'])
        direction = np.asarray(self.GetDirection())
        self.SetDirection(direction)



    def New(*args, **kargs):
        """New() -> itkImageBase1

        Create a new object of the class itkImageBase1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageBase1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageBase1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageBase1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageBase1 in _itkImageBaseRTKPython:
_itkImageBaseRTKPython.itkImageBase1_swigregister(itkImageBase1)

