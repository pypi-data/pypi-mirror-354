# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkThreeDCircularProjectionGeometryPython
else:
    import _rtkThreeDCircularProjectionGeometryPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkProjectionGeometryPython
import itk.ITKCommonBasePython

def rtkThreeDCircularProjectionGeometry_New():
    return rtkThreeDCircularProjectionGeometry.New()

class rtkThreeDCircularProjectionGeometry(itk.rtkProjectionGeometryPython.rtkProjectionGeometry3):
    r"""Proxy of C++ rtkThreeDCircularProjectionGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_Clone(self)

    def AddProjectionInRadians(self, sid, sdd, gantryAngle, projOffsetX=0., projOffsetY=0., outOfPlaneAngle=0., inPlaneAngle=0., sourceOffsetX=0., sourceOffsetY=0.):
        r"""
        AddProjectionInRadians(self, sid, sdd, gantryAngle, projOffsetX=0., projOffsetY=0., outOfPlaneAngle=0., inPlaneAngle=0., sourceOffsetX=0., sourceOffsetY=0.)

        Parameters
        ----------
        sid: double const
        sdd: double const
        gantryAngle: double const
        projOffsetX: double const
        projOffsetY: double const
        outOfPlaneAngle: double const
        inPlaneAngle: double const
        sourceOffsetX: double const
        sourceOffsetY: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_AddProjectionInRadians(self, sid, sdd, gantryAngle, projOffsetX, projOffsetY, outOfPlaneAngle, inPlaneAngle, sourceOffsetX, sourceOffsetY)

    def AddProjection(self, *args):
        r"""
        AddProjection(self, sid, sdd, gantryAngle, projOffsetX=0., projOffsetY=0., outOfPlaneAngle=0., inPlaneAngle=0., sourceOffsetX=0., sourceOffsetY=0.)

        Parameters
        ----------
        sid: double const
        sdd: double const
        gantryAngle: double const
        projOffsetX: double const
        projOffsetY: double const
        outOfPlaneAngle: double const
        inPlaneAngle: double const
        sourceOffsetX: double const
        sourceOffsetY: double const

        AddProjection(self, sourcePosition, detectorPosition, detectorRowVector, detectorColumnVector) -> bool

        Parameters
        ----------
        sourcePosition: itkPointD3 const &
        detectorPosition: itkPointD3 const &
        detectorRowVector: itkVectorD3 const &
        detectorColumnVector: itkVectorD3 const &

        AddProjection(self, pMat) -> bool

        Parameters
        ----------
        pMat: itkMatrixD34 const &

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_AddProjection(self, *args)

    def GetGantryAngles(self):
        r"""GetGantryAngles(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetGantryAngles(self)

    def GetOutOfPlaneAngles(self):
        r"""GetOutOfPlaneAngles(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetOutOfPlaneAngles(self)

    def GetInPlaneAngles(self):
        r"""GetInPlaneAngles(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetInPlaneAngles(self)

    def GetSourceToIsocenterDistances(self):
        r"""GetSourceToIsocenterDistances(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceToIsocenterDistances(self)

    def GetSourceOffsetsX(self):
        r"""GetSourceOffsetsX(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceOffsetsX(self)

    def GetSourceOffsetsY(self):
        r"""GetSourceOffsetsY(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceOffsetsY(self)

    def GetSourceToDetectorDistances(self):
        r"""GetSourceToDetectorDistances(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceToDetectorDistances(self)

    def GetProjectionOffsetsX(self):
        r"""GetProjectionOffsetsX(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionOffsetsX(self)

    def GetProjectionOffsetsY(self):
        r"""GetProjectionOffsetsY(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionOffsetsY(self)

    def GetSourceAngles(self):
        r"""GetSourceAngles(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceAngles(self)

    def GetTiltAngles(self):
        r"""GetTiltAngles(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetTiltAngles(self)

    def GetSortedAngles(self, angles):
        r"""
        GetSortedAngles(self, angles) -> std::multimap< double,unsigned int > const

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > > const &

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSortedAngles(self, angles)

    def GetUniqueSortedAngles(self, angles):
        r"""
        GetUniqueSortedAngles(self, angles) -> std::map< double,unsigned int,std::less< double >,std::allocator< std::pair< double const,unsigned int > > > const

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > > const &

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetUniqueSortedAngles(self, angles)

    def GetAngularGapsWithNext(self, angles):
        r"""
        GetAngularGapsWithNext(self, angles) -> vectorD

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > > const &

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetAngularGapsWithNext(self, angles)

    def GetAngularGaps(self, angles):
        r"""
        GetAngularGaps(self, angles) -> vectorD

        Parameters
        ----------
        angles: std::vector< double,std::allocator< double > > const &

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetAngularGaps(self, angles)

    @staticmethod
    def ComputeRotationHomogeneousMatrix(angleX, angleY, angleZ):
        r"""
        ComputeRotationHomogeneousMatrix(angleX, angleY, angleZ) -> itkMatrixD44

        Parameters
        ----------
        angleX: double
        angleY: double
        angleZ: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeRotationHomogeneousMatrix(angleX, angleY, angleZ)

    @staticmethod
    def ComputeTranslationHomogeneousMatrix(*args):
        r"""
        ComputeTranslationHomogeneousMatrix(transX, transY) -> itkMatrixD33

        Parameters
        ----------
        transX: double
        transY: double

        ComputeTranslationHomogeneousMatrix(transX, transY, transZ) -> itkMatrixD44

        Parameters
        ----------
        transX: double
        transY: double
        transZ: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeTranslationHomogeneousMatrix(*args)

    @staticmethod
    def ComputeProjectionMagnificationMatrix(sdd, sid):
        r"""
        ComputeProjectionMagnificationMatrix(sdd, sid) -> itkMatrixD34

        Parameters
        ----------
        sdd: double
        sid: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ComputeProjectionMagnificationMatrix(sdd, sid)

    def GetProjectionTranslationMatrices(self):
        r"""GetProjectionTranslationMatrices(self) -> std::vector< itkMatrixD33,std::allocator< itkMatrixD33 > > const &"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionTranslationMatrices(self)

    def GetProjectionTranslationMatrix(self, i):
        r"""
        GetProjectionTranslationMatrix(self, i) -> itkMatrixD33

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionTranslationMatrix(self, i)

    def GetRotationMatrices(self):
        r"""GetRotationMatrices(self) -> std::vector< itkMatrixD44,std::allocator< itkMatrixD44 > > const &"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRotationMatrices(self)

    def GetRotationMatrix(self, i):
        r"""
        GetRotationMatrix(self, i) -> itkMatrixD44

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRotationMatrix(self, i)

    def GetSourceTranslationMatrices(self, *args):
        r"""
        GetSourceTranslationMatrices(self) -> std::vector< itkMatrixD44,std::allocator< itkMatrixD44 > > const
        GetSourceTranslationMatrices(self, i) -> itkMatrixD44

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourceTranslationMatrices(self, *args)

    def GetMagnificationMatrices(self, *args):
        r"""
        GetMagnificationMatrices(self) -> std::vector< itkMatrixD34,std::allocator< itkMatrixD34 > > const
        GetMagnificationMatrices(self, i) -> itkMatrixD34

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetMagnificationMatrices(self, *args)

    def GetCollimationUInf(self):
        r"""GetCollimationUInf(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationUInf(self)

    def GetCollimationUSup(self):
        r"""GetCollimationUSup(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationUSup(self)

    def GetCollimationVInf(self):
        r"""GetCollimationVInf(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationVInf(self)

    def GetCollimationVSup(self):
        r"""GetCollimationVSup(self) -> vectorD"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetCollimationVSup(self)

    def SetCollimationOfLastProjection(self, uinf, usup, vinf, vsup):
        r"""
        SetCollimationOfLastProjection(self, uinf, usup, vinf, vsup)

        Parameters
        ----------
        uinf: double const
        usup: double const
        vinf: double const
        vsup: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetCollimationOfLastProjection(self, uinf, usup, vinf, vsup)

    def GetSourcePosition(self, i):
        r"""
        GetSourcePosition(self, i) -> itkVectorD4

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetSourcePosition(self, i)

    def GetProjectionCoordinatesToDetectorSystemMatrix(self, i):
        r"""
        GetProjectionCoordinatesToDetectorSystemMatrix(self, i) -> itkMatrixD44

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionCoordinatesToDetectorSystemMatrix(self, i)

    def GetProjectionCoordinatesToFixedSystemMatrix(self, i):
        r"""
        GetProjectionCoordinatesToFixedSystemMatrix(self, i) -> itkMatrixD44

        Parameters
        ----------
        i: unsigned int const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetProjectionCoordinatesToFixedSystemMatrix(self, i)

    @staticmethod
    def ConvertAngleBetween0And360Degrees(a):
        r"""
        ConvertAngleBetween0And360Degrees(a) -> double

        Parameters
        ----------
        a: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And360Degrees(a)

    @staticmethod
    def ConvertAngleBetween0And2PIRadians(a):
        r"""
        ConvertAngleBetween0And2PIRadians(a) -> double

        Parameters
        ----------
        a: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetween0And2PIRadians(a)

    @staticmethod
    def ConvertAngleBetweenMinusAndPlusPIRadians(a):
        r"""
        ConvertAngleBetweenMinusAndPlusPIRadians(a) -> double

        Parameters
        ----------
        a: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ConvertAngleBetweenMinusAndPlusPIRadians(a)

    def ToUntiltedCoordinateAtIsocenter(self, noProj, tiltedCoord):
        r"""
        ToUntiltedCoordinateAtIsocenter(self, noProj, tiltedCoord) -> double

        Parameters
        ----------
        noProj: unsigned int const
        tiltedCoord: double const

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_ToUntiltedCoordinateAtIsocenter(self, noProj, tiltedCoord)

    def GetRadiusCylindricalDetector(self):
        r"""GetRadiusCylindricalDetector(self) -> double"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetRadiusCylindricalDetector(self)

    def SetRadiusCylindricalDetector(self, _arg):
        r"""
        SetRadiusCylindricalDetector(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetRadiusCylindricalDetector(self, _arg)

    def GetVerifyAnglesTolerance(self):
        r"""GetVerifyAnglesTolerance(self) -> double"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetVerifyAnglesTolerance(self)

    def SetVerifyAnglesTolerance(self, _arg):
        r"""
        SetVerifyAnglesTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetVerifyAnglesTolerance(self, _arg)

    def GetFixAnglesTolerance(self):
        r"""GetFixAnglesTolerance(self) -> double"""
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_GetFixAnglesTolerance(self)

    def SetFixAnglesTolerance(self, _arg):
        r"""
        SetFixAnglesTolerance(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_SetFixAnglesTolerance(self, _arg)
    __swig_destroy__ = _rtkThreeDCircularProjectionGeometryPython.delete_rtkThreeDCircularProjectionGeometry

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkThreeDCircularProjectionGeometry

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkThreeDCircularProjectionGeometry

        Create a new object of the class rtkThreeDCircularProjectionGeometry and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkThreeDCircularProjectionGeometry.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkThreeDCircularProjectionGeometry.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkThreeDCircularProjectionGeometry.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkThreeDCircularProjectionGeometry in _rtkThreeDCircularProjectionGeometryPython:
_rtkThreeDCircularProjectionGeometryPython.rtkThreeDCircularProjectionGeometry_swigregister(rtkThreeDCircularProjectionGeometry)

