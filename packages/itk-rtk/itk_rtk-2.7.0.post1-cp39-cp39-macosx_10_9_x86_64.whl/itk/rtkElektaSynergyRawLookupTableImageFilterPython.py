# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkElektaSynergyRawLookupTableImageFilterPython
else:
    import _rtkElektaSynergyRawLookupTableImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkLookupTableImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkCastImageFilterPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython

def rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_New():
    return rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2.New()

class rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2(itk.rtkLookupTableImageFilterPython.rtkLookupTableImageFilterIUS2IUS2):
    r"""Proxy of C++ rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_Pointer"""
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_Pointer"""
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_Clone(self)
    SameTypeCheck = _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_SameTypeCheck
    
    __swig_destroy__ = _rtkElektaSynergyRawLookupTableImageFilterPython.delete_rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2

        Create a new object of the class rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2 in _rtkElektaSynergyRawLookupTableImageFilterPython:
_rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2_swigregister(rtkElektaSynergyRawLookupTableImageFilterIUS2IUS2)

def rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_New():
    return rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3.New()

class rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3(itk.rtkLookupTableImageFilterPython.rtkLookupTableImageFilterIUS3IUS3):
    r"""Proxy of C++ rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_Pointer"""
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_Pointer"""
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_Clone(self)
    SameTypeCheck = _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_SameTypeCheck
    
    __swig_destroy__ = _rtkElektaSynergyRawLookupTableImageFilterPython.delete_rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3

        Create a new object of the class rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3 in _rtkElektaSynergyRawLookupTableImageFilterPython:
_rtkElektaSynergyRawLookupTableImageFilterPython.rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3_swigregister(rtkElektaSynergyRawLookupTableImageFilterIUS3IUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def elekta_synergy_raw_lookup_table_image_filter(*args: itkt.ImageLike,  lookup_table: itkt.Image=..., functor=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ElektaSynergyRawLookupTableImageFilter"""
    import itk

    kwarg_typehints = { 'lookup_table':lookup_table,'functor':functor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ElektaSynergyRawLookupTableImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def elekta_synergy_raw_lookup_table_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ElektaSynergyRawLookupTableImageFilter
    elekta_synergy_raw_lookup_table_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    elekta_synergy_raw_lookup_table_image_filter.__doc__ = filter_object.__doc__



