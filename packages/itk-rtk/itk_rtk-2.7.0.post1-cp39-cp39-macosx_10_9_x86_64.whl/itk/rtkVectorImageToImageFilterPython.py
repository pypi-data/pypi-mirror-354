# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkVectorImageToImageFilterPython
else:
    import _rtkVectorImageToImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterBPython

def rtkVectorImageToImageFilterVID2ID2_New():
    return rtkVectorImageToImageFilterVID2ID2.New()

class rtkVectorImageToImageFilterVID2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2):
    r"""Proxy of C++ rtkVectorImageToImageFilterVID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVID2ID2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVID2ID2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID2_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVID2ID2

        Create a new object of the class rtkVectorImageToImageFilterVID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVID2ID2 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID2_swigregister(rtkVectorImageToImageFilterVID2ID2)

def rtkVectorImageToImageFilterVID2ID3_New():
    return rtkVectorImageToImageFilterVID2ID3.New()

class rtkVectorImageToImageFilterVID2ID3(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterVID2ID3):
    r"""Proxy of C++ rtkVectorImageToImageFilterVID2ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVID2ID3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVID2ID3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID3_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVID2ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVID2ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVID2ID3

        Create a new object of the class rtkVectorImageToImageFilterVID2ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVID2ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVID2ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVID2ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVID2ID3 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID2ID3_swigregister(rtkVectorImageToImageFilterVID2ID3)

def rtkVectorImageToImageFilterVID3ID3_New():
    return rtkVectorImageToImageFilterVID3ID3.New()

class rtkVectorImageToImageFilterVID3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3):
    r"""Proxy of C++ rtkVectorImageToImageFilterVID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVID3ID3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVID3ID3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID3_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVID3ID3

        Create a new object of the class rtkVectorImageToImageFilterVID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVID3ID3 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID3_swigregister(rtkVectorImageToImageFilterVID3ID3)

def rtkVectorImageToImageFilterVID3ID4_New():
    return rtkVectorImageToImageFilterVID3ID4.New()

class rtkVectorImageToImageFilterVID3ID4(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterVID3ID4):
    r"""Proxy of C++ rtkVectorImageToImageFilterVID3ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVID3ID4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVID3ID4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID4_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVID3ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVID3ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVID3ID4

        Create a new object of the class rtkVectorImageToImageFilterVID3ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVID3ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVID3ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVID3ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVID3ID4 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVID3ID4_swigregister(rtkVectorImageToImageFilterVID3ID4)

def rtkVectorImageToImageFilterVIF2IF2_New():
    return rtkVectorImageToImageFilterVIF2IF2.New()

class rtkVectorImageToImageFilterVIF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2):
    r"""Proxy of C++ rtkVectorImageToImageFilterVIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVIF2IF2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVIF2IF2_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF2IF2

        Create a new object of the class rtkVectorImageToImageFilterVIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVIF2IF2 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF2_swigregister(rtkVectorImageToImageFilterVIF2IF2)

def rtkVectorImageToImageFilterVIF2IF3_New():
    return rtkVectorImageToImageFilterVIF2IF3.New()

class rtkVectorImageToImageFilterVIF2IF3(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterVIF2IF3):
    r"""Proxy of C++ rtkVectorImageToImageFilterVIF2IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVIF2IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVIF2IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF2IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVIF2IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF2IF3

        Create a new object of the class rtkVectorImageToImageFilterVIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF2IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF2IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVIF2IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVIF2IF3 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF2IF3_swigregister(rtkVectorImageToImageFilterVIF2IF3)

def rtkVectorImageToImageFilterVIF3IF3_New():
    return rtkVectorImageToImageFilterVIF3IF3.New()

class rtkVectorImageToImageFilterVIF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3):
    r"""Proxy of C++ rtkVectorImageToImageFilterVIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVIF3IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVIF3IF3_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF3IF3

        Create a new object of the class rtkVectorImageToImageFilterVIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVIF3IF3 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF3_swigregister(rtkVectorImageToImageFilterVIF3IF3)

def rtkVectorImageToImageFilterVIF3IF4_New():
    return rtkVectorImageToImageFilterVIF3IF4.New()

class rtkVectorImageToImageFilterVIF3IF4(itk.itkImageToImageFilterRTKPython.itkImageToImageFilterVIF3IF4):
    r"""Proxy of C++ rtkVectorImageToImageFilterVIF3IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkVectorImageToImageFilterVIF3IF4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkVectorImageToImageFilterVIF3IF4_Pointer"""
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_Clone(self)
    __swig_destroy__ = _rtkVectorImageToImageFilterPython.delete_rtkVectorImageToImageFilterVIF3IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkVectorImageToImageFilterVIF3IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkVectorImageToImageFilterVIF3IF4

        Create a new object of the class rtkVectorImageToImageFilterVIF3IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkVectorImageToImageFilterVIF3IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkVectorImageToImageFilterVIF3IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkVectorImageToImageFilterVIF3IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkVectorImageToImageFilterVIF3IF4 in _rtkVectorImageToImageFilterPython:
_rtkVectorImageToImageFilterPython.rtkVectorImageToImageFilterVIF3IF4_swigregister(rtkVectorImageToImageFilterVIF3IF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vector_image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VectorImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.VectorImageToImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def vector_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.VectorImageToImageFilter
    vector_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vector_image_to_image_filter.__doc__ = filter_object.__doc__



