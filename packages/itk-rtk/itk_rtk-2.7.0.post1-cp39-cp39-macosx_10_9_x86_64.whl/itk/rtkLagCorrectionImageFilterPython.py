# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkLagCorrectionImageFilterPython
else:
    import _rtkLagCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def rtkLagCorrectionImageFilterID31_New():
    return rtkLagCorrectionImageFilterID31.New()

class rtkLagCorrectionImageFilterID31(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID31 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterID31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterID31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF1 const
        B: itkVectorF1 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID31

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterID31

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID31

        Create a new object of the class rtkLagCorrectionImageFilterID31 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID31.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID31.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID31.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID31 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID31_swigregister(rtkLagCorrectionImageFilterID31)

def rtkLagCorrectionImageFilterID32_New():
    return rtkLagCorrectionImageFilterID32.New()

class rtkLagCorrectionImageFilterID32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterID32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterID32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF2 const
        B: itkVectorF2 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterID32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID32

        Create a new object of the class rtkLagCorrectionImageFilterID32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID32 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID32_swigregister(rtkLagCorrectionImageFilterID32)

def rtkLagCorrectionImageFilterID33_New():
    return rtkLagCorrectionImageFilterID33.New()

class rtkLagCorrectionImageFilterID33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterID33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterID33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF3 const
        B: itkVectorF3 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterID33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID33

        Create a new object of the class rtkLagCorrectionImageFilterID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID33 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID33_swigregister(rtkLagCorrectionImageFilterID33)

def rtkLagCorrectionImageFilterID34_New():
    return rtkLagCorrectionImageFilterID34.New()

class rtkLagCorrectionImageFilterID34(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterID34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterID34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterID34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF4 const
        B: itkVectorF4 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterID34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterID34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterID34

        Create a new object of the class rtkLagCorrectionImageFilterID34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterID34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterID34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterID34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterID34 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterID34_swigregister(rtkLagCorrectionImageFilterID34)

def rtkLagCorrectionImageFilterIF31_New():
    return rtkLagCorrectionImageFilterIF31.New()

class rtkLagCorrectionImageFilterIF31(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF31 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterIF31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterIF31_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF1"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF1 const
        B: itkVectorF1 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF31

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterIF31

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF31

        Create a new object of the class rtkLagCorrectionImageFilterIF31 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF31.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF31.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF31.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF31 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF31_swigregister(rtkLagCorrectionImageFilterIF31)

def rtkLagCorrectionImageFilterIF32_New():
    return rtkLagCorrectionImageFilterIF32.New()

class rtkLagCorrectionImageFilterIF32(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterIF32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterIF32_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF2"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF2 const
        B: itkVectorF2 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterIF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF32

        Create a new object of the class rtkLagCorrectionImageFilterIF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF32 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF32_swigregister(rtkLagCorrectionImageFilterIF32)

def rtkLagCorrectionImageFilterIF33_New():
    return rtkLagCorrectionImageFilterIF33.New()

class rtkLagCorrectionImageFilterIF33(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterIF33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterIF33_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF3"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF3 const
        B: itkVectorF3 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterIF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF33

        Create a new object of the class rtkLagCorrectionImageFilterIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF33 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF33_swigregister(rtkLagCorrectionImageFilterIF33)

def rtkLagCorrectionImageFilterIF34_New():
    return rtkLagCorrectionImageFilterIF34.New()

class rtkLagCorrectionImageFilterIF34(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkLagCorrectionImageFilterIF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkLagCorrectionImageFilterIF34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkLagCorrectionImageFilterIF34_Pointer"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_Clone(self)

    def GetA(self):
        r"""GetA(self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetA(self)

    def GetB(self):
        r"""GetB(self) -> itkVectorF4"""
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_GetB(self)

    def SetCoefficients(self, A, B):
        r"""
        SetCoefficients(self, A, B)

        Parameters
        ----------
        A: itkVectorF4 const
        B: itkVectorF4 const

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_SetCoefficients(self, A, B)
    __swig_destroy__ = _rtkLagCorrectionImageFilterPython.delete_rtkLagCorrectionImageFilterIF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkLagCorrectionImageFilterIF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkLagCorrectionImageFilterIF34

        Create a new object of the class rtkLagCorrectionImageFilterIF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkLagCorrectionImageFilterIF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkLagCorrectionImageFilterIF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkLagCorrectionImageFilterIF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkLagCorrectionImageFilterIF34 in _rtkLagCorrectionImageFilterPython:
_rtkLagCorrectionImageFilterPython.rtkLagCorrectionImageFilterIF34_swigregister(rtkLagCorrectionImageFilterIF34)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def lag_correction_image_filter(*args: itkt.ImageLike,  coefficients: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LagCorrectionImageFilter"""
    import itk

    kwarg_typehints = { 'coefficients':coefficients }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.LagCorrectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def lag_correction_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.LagCorrectionImageFilter
    lag_correction_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    lag_correction_image_filter.__doc__ = filter_object.__doc__



