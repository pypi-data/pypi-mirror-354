# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkConjugateGradientConeBeamReconstructionFilterPython
else:
    import _rtkConjugateGradientConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkIterativeConeBeamReconstructionFilterPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRegionRTKPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageToImageFilterAPython
import itk.rtkForwardProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkBackProjectionImageFilterPython

def rtkConjugateGradientConeBeamReconstructionFilterID3_New():
    return rtkConjugateGradientConeBeamReconstructionFilterID3.New()

class rtkConjugateGradientConeBeamReconstructionFilterID3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3):
    r"""Proxy of C++ rtkConjugateGradientConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConjugateGradientConeBeamReconstructionFilterID3_Pointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConjugateGradientConeBeamReconstructionFilterID3_Pointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_Clone(self)

    def SetInputVolume(self, vol):
        r"""
        SetInputVolume(self, vol)

        Parameters
        ----------
        vol: itkImageD3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputVolume(self, vol)

    def SetInputProjectionStack(self, projs):
        r"""
        SetInputProjectionStack(self, projs)

        Parameters
        ----------
        projs: itkImageD3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputProjectionStack(self, projs)

    def SetInputWeights(self, weights):
        r"""
        SetInputWeights(self, weights)

        Parameters
        ----------
        weights: itkImageD3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputWeights(self, weights)

    def SetLocalRegularizationWeights(self, weights):
        r"""
        SetLocalRegularizationWeights(self, weights)

        Parameters
        ----------
        weights: itkImageD3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetLocalRegularizationWeights(self, weights)

    def SetSupportMask(self, SupportMask):
        r"""
        SetSupportMask(self, SupportMask)

        Parameters
        ----------
        SupportMask: itkImageD3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetSupportMask(self, SupportMask)

    def GetSupportMask(self):
        r"""GetSupportMask(self) -> itkImageD3_ConstPointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetSupportMask(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetGeometry(self, _arg)

    def SetNumberOfIterations(self, _arg):
        r"""
        SetNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetNumberOfIterations(self, _arg)

    def GetNumberOfIterations(self):
        r"""GetNumberOfIterations(self) -> int"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetNumberOfIterations(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetDisableDisplacedDetectorFilter(self)

    def SetTikhonov(self, _arg):
        r"""
        SetTikhonov(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetTikhonov(self, _arg)

    def GetTikhonov(self):
        r"""GetTikhonov(self) -> float"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetTikhonov(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> float"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetGamma(self)

    def GetCudaConjugateGradient(self):
        r"""GetCudaConjugateGradient(self) -> bool"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetCudaConjugateGradient(self)

    def SetCudaConjugateGradient(self, _arg):
        r"""
        SetCudaConjugateGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetCudaConjugateGradient(self, _arg)
    __swig_destroy__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.delete_rtkConjugateGradientConeBeamReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConjugateGradientConeBeamReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConjugateGradientConeBeamReconstructionFilterID3

        Create a new object of the class rtkConjugateGradientConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConjugateGradientConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConjugateGradientConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConjugateGradientConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConjugateGradientConeBeamReconstructionFilterID3 in _rtkConjugateGradientConeBeamReconstructionFilterPython:
_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_swigregister(rtkConjugateGradientConeBeamReconstructionFilterID3)

def rtkConjugateGradientConeBeamReconstructionFilterIF3_New():
    return rtkConjugateGradientConeBeamReconstructionFilterIF3.New()

class rtkConjugateGradientConeBeamReconstructionFilterIF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    r"""Proxy of C++ rtkConjugateGradientConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConjugateGradientConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConjugateGradientConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_Clone(self)

    def SetInputVolume(self, vol):
        r"""
        SetInputVolume(self, vol)

        Parameters
        ----------
        vol: itkImageF3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputVolume(self, vol)

    def SetInputProjectionStack(self, projs):
        r"""
        SetInputProjectionStack(self, projs)

        Parameters
        ----------
        projs: itkImageF3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputProjectionStack(self, projs)

    def SetInputWeights(self, weights):
        r"""
        SetInputWeights(self, weights)

        Parameters
        ----------
        weights: itkImageF3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputWeights(self, weights)

    def SetLocalRegularizationWeights(self, weights):
        r"""
        SetLocalRegularizationWeights(self, weights)

        Parameters
        ----------
        weights: itkImageF3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetLocalRegularizationWeights(self, weights)

    def SetSupportMask(self, SupportMask):
        r"""
        SetSupportMask(self, SupportMask)

        Parameters
        ----------
        SupportMask: itkImageF3 const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetSupportMask(self, SupportMask)

    def GetSupportMask(self):
        r"""GetSupportMask(self) -> itkImageF3_ConstPointer"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetSupportMask(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetGeometry(self, _arg)

    def SetNumberOfIterations(self, _arg):
        r"""
        SetNumberOfIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetNumberOfIterations(self, _arg)

    def GetNumberOfIterations(self):
        r"""GetNumberOfIterations(self) -> int"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetNumberOfIterations(self)

    def SetDisableDisplacedDetectorFilter(self, _arg):
        r"""
        SetDisableDisplacedDetectorFilter(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter(self, _arg)

    def GetDisableDisplacedDetectorFilter(self):
        r"""GetDisableDisplacedDetectorFilter(self) -> bool"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter(self)

    def SetTikhonov(self, _arg):
        r"""
        SetTikhonov(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetTikhonov(self, _arg)

    def GetTikhonov(self):
        r"""GetTikhonov(self) -> float"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetTikhonov(self)

    def SetGamma(self, _arg):
        r"""
        SetGamma(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetGamma(self, _arg)

    def GetGamma(self):
        r"""GetGamma(self) -> float"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetGamma(self)

    def GetCudaConjugateGradient(self):
        r"""GetCudaConjugateGradient(self) -> bool"""
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetCudaConjugateGradient(self)

    def SetCudaConjugateGradient(self, _arg):
        r"""
        SetCudaConjugateGradient(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetCudaConjugateGradient(self, _arg)
    __swig_destroy__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.delete_rtkConjugateGradientConeBeamReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConjugateGradientConeBeamReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConjugateGradientConeBeamReconstructionFilterIF3

        Create a new object of the class rtkConjugateGradientConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConjugateGradientConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConjugateGradientConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConjugateGradientConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConjugateGradientConeBeamReconstructionFilterIF3 in _rtkConjugateGradientConeBeamReconstructionFilterPython:
_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_swigregister(rtkConjugateGradientConeBeamReconstructionFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def conjugate_gradient_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  input_volume: itkt.Image=..., input_projection_stack: itkt.Image=..., input_weights: itkt.Image=..., local_regularization_weights: itkt.Image=..., support_mask: itkt.Image=..., geometry=..., number_of_iterations: int=..., disable_displaced_detector_filter: bool=..., tikhonov: float=..., gamma: float=..., cuda_conjugate_gradient: bool=..., forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=..., step_size: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConjugateGradientConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'input_volume':input_volume,'input_projection_stack':input_projection_stack,'input_weights':input_weights,'local_regularization_weights':local_regularization_weights,'support_mask':support_mask,'geometry':geometry,'number_of_iterations':number_of_iterations,'disable_displaced_detector_filter':disable_displaced_detector_filter,'tikhonov':tikhonov,'gamma':gamma,'cuda_conjugate_gradient':cuda_conjugate_gradient,'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf,'step_size':step_size }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConjugateGradientConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def conjugate_gradient_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ConjugateGradientConeBeamReconstructionFilter
    conjugate_gradient_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    conjugate_gradient_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__



