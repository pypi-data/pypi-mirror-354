# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkPolynomialGainCorrectionImageFilterPython
else:
    import _rtkPolynomialGainCorrectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def rtkPolynomialGainCorrectionImageFilterID3ID3_New():
    return rtkPolynomialGainCorrectionImageFilterID3ID3.New()

class rtkPolynomialGainCorrectionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkPolynomialGainCorrectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkPolynomialGainCorrectionImageFilterID3ID3_Pointer"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkPolynomialGainCorrectionImageFilterID3ID3_Pointer"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_Clone(self)

    def SetDarkImage(self, darkImage):
        r"""
        SetDarkImage(self, darkImage)

        Parameters
        ----------
        darkImage: itkImageD3 *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_SetDarkImage(self, darkImage)

    def SetGainCoefficients(self, gain):
        r"""
        SetGainCoefficients(self, gain)

        Parameters
        ----------
        gain: itkImageD3 *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_SetGainCoefficients(self, gain)

    def SetK(self, _arg):
        r"""
        SetK(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_SetK(self, _arg)

    def GetK(self):
        r"""GetK(self) -> float"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_GetK(self)
    __swig_destroy__ = _rtkPolynomialGainCorrectionImageFilterPython.delete_rtkPolynomialGainCorrectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkPolynomialGainCorrectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkPolynomialGainCorrectionImageFilterID3ID3

        Create a new object of the class rtkPolynomialGainCorrectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkPolynomialGainCorrectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkPolynomialGainCorrectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkPolynomialGainCorrectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkPolynomialGainCorrectionImageFilterID3ID3 in _rtkPolynomialGainCorrectionImageFilterPython:
_rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterID3ID3_swigregister(rtkPolynomialGainCorrectionImageFilterID3ID3)

def rtkPolynomialGainCorrectionImageFilterIF3IF3_New():
    return rtkPolynomialGainCorrectionImageFilterIF3IF3.New()

class rtkPolynomialGainCorrectionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkPolynomialGainCorrectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkPolynomialGainCorrectionImageFilterIF3IF3_Pointer"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkPolynomialGainCorrectionImageFilterIF3IF3_Pointer"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_Clone(self)

    def SetDarkImage(self, darkImage):
        r"""
        SetDarkImage(self, darkImage)

        Parameters
        ----------
        darkImage: itkImageF3 *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_SetDarkImage(self, darkImage)

    def SetGainCoefficients(self, gain):
        r"""
        SetGainCoefficients(self, gain)

        Parameters
        ----------
        gain: itkImageF3 *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_SetGainCoefficients(self, gain)

    def SetK(self, _arg):
        r"""
        SetK(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_SetK(self, _arg)

    def GetK(self):
        r"""GetK(self) -> float"""
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_GetK(self)
    __swig_destroy__ = _rtkPolynomialGainCorrectionImageFilterPython.delete_rtkPolynomialGainCorrectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkPolynomialGainCorrectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkPolynomialGainCorrectionImageFilterIF3IF3

        Create a new object of the class rtkPolynomialGainCorrectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkPolynomialGainCorrectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkPolynomialGainCorrectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkPolynomialGainCorrectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkPolynomialGainCorrectionImageFilterIF3IF3 in _rtkPolynomialGainCorrectionImageFilterPython:
_rtkPolynomialGainCorrectionImageFilterPython.rtkPolynomialGainCorrectionImageFilterIF3IF3_swigregister(rtkPolynomialGainCorrectionImageFilterIF3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def polynomial_gain_correction_image_filter(*args: itkt.ImageLike,  dark_image: itkt.Image=..., gain_coefficients: itkt.Image=..., k: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PolynomialGainCorrectionImageFilter"""
    import itk

    kwarg_typehints = { 'dark_image':dark_image,'gain_coefficients':gain_coefficients,'k':k }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.PolynomialGainCorrectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def polynomial_gain_correction_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.PolynomialGainCorrectionImageFilter
    polynomial_gain_correction_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    polynomial_gain_correction_image_filter.__doc__ = filter_object.__doc__



