# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython
else:
    import _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_New():
    return rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4.New()

class rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_Pointer"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_Pointer"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_Clone(self)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_GetNumberOfLevels(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_SetNumberOfLevels(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.delete_rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4

        Create a new object of the class rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4 in _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython:
_rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4_swigregister(rtkDaubechiesWaveletsDenoiseSequenceImageFilterID4)

def rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_New():
    return rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4.New()

class rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_Pointer"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_Pointer"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_Clone(self)

    def GetNumberOfLevels(self):
        r"""GetNumberOfLevels(self) -> unsigned int"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_GetNumberOfLevels(self)

    def SetNumberOfLevels(self, _arg):
        r"""
        SetNumberOfLevels(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_SetNumberOfLevels(self, _arg)

    def GetOrder(self):
        r"""GetOrder(self) -> unsigned int"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_GetOrder(self)

    def SetOrder(self, _arg):
        r"""
        SetOrder(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_SetOrder(self, _arg)

    def GetThreshold(self):
        r"""GetThreshold(self) -> float"""
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_GetThreshold(self)

    def SetThreshold(self, _arg):
        r"""
        SetThreshold(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_SetThreshold(self, _arg)
    __swig_destroy__ = _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.delete_rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4

        Create a new object of the class rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4 in _rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython:
_rtkDaubechiesWaveletsDenoiseSequenceImageFilterPython.rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4_swigregister(rtkDaubechiesWaveletsDenoiseSequenceImageFilterIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def daubechies_wavelets_denoise_sequence_image_filter(*args: itkt.ImageLike,  number_of_levels: int=..., order: int=..., threshold: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DaubechiesWaveletsDenoiseSequenceImageFilter"""
    import itk

    kwarg_typehints = { 'number_of_levels':number_of_levels,'order':order,'threshold':threshold }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DaubechiesWaveletsDenoiseSequenceImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def daubechies_wavelets_denoise_sequence_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.DaubechiesWaveletsDenoiseSequenceImageFilter
    daubechies_wavelets_denoise_sequence_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    daubechies_wavelets_denoise_sequence_image_filter.__doc__ = filter_object.__doc__



