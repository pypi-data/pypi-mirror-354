# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVariableLengthVectorRTKPython
else:
    import _itkVariableLengthVectorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.pyBasePython
class itkVariableLengthVectorI(object):
    r"""Proxy of C++ itkVariableLengthVectorI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        r"""
        __init__(self) -> itkVariableLengthVectorI
        __init__(self, length) -> itkVariableLengthVectorI

        Parameters
        ----------
        length: unsigned int

        __init__(self, datain, sz, LetArrayManageMemory=False) -> itkVariableLengthVectorI

        Parameters
        ----------
        datain: int *
        sz: unsigned int
        LetArrayManageMemory: bool

        __init__(self, datain, sz, LetArrayManageMemory=False) -> itkVariableLengthVectorI

        Parameters
        ----------
        datain: int const *
        sz: unsigned int
        LetArrayManageMemory: bool

        __init__(self, v) -> itkVariableLengthVectorI

        Parameters
        ----------
        v: itkVariableLengthVectorI const &

        """
        _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_swiginit(self, _itkVariableLengthVectorRTKPython.new_itkVariableLengthVectorI(*args))

    def Swap(self, v):
        r"""
        Swap(self, v)

        Parameters
        ----------
        v: itkVariableLengthVectorI &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Swap(self, v)

    def Fill(self, v):
        r"""
        Fill(self, v)

        Parameters
        ----------
        v: int const &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Fill(self, v)

    def FastAssign(self, v):
        r"""
        FastAssign(self, v) -> itkVariableLengthVectorI

        Parameters
        ----------
        v: itkVariableLengthVectorI const &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_FastAssign(self, v)

    def Size(self):
        r"""Size(self) -> unsigned int"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Size(self)

    def GetSize(self):
        r"""GetSize(self) -> unsigned int"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetSize(self)

    def GetNumberOfElements(self):
        r"""GetNumberOfElements(self) -> unsigned int"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetNumberOfElements(self)

    def GetElement(self, i):
        r"""
        GetElement(self, i) -> int const &

        Parameters
        ----------
        i: unsigned int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetElement(self, i)

    def SetElement(self, i, value):
        r"""
        SetElement(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: int const &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetElement(self, i, value)

    def SetSize(self, sz, destroyExistingData=True):
        r"""
        SetSize(self, sz, destroyExistingData=True)

        Parameters
        ----------
        sz: unsigned int
        destroyExistingData: bool

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetSize(self, sz, destroyExistingData)

    def DestroyExistingData(self):
        r"""DestroyExistingData(self)"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_DestroyExistingData(self)

    def SetData(self, *args):
        r"""
        SetData(self, datain, LetArrayManageMemory=False)

        Parameters
        ----------
        datain: int *
        LetArrayManageMemory: bool

        SetData(self, datain, sz, LetArrayManageMemory=False)

        Parameters
        ----------
        datain: int *
        sz: unsigned int
        LetArrayManageMemory: bool

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_SetData(self, *args)
    __swig_destroy__ = _itkVariableLengthVectorRTKPython.delete_itkVariableLengthVectorI

    def Reserve(self, size):
        r"""
        Reserve(self, size)

        Parameters
        ----------
        size: unsigned int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_Reserve(self, size)

    def AllocateElements(self, size):
        r"""
        AllocateElements(self, size) -> int *

        Parameters
        ----------
        size: unsigned int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_AllocateElements(self, size)

    def GetDataPointer(self):
        r"""GetDataPointer(self) -> int const *"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetDataPointer(self)

    def __isub__(self, s):
        r"""
        __isub__(self, s) -> itkVariableLengthVectorI

        Parameters
        ----------
        s: int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___isub__(self, s)

    def __iadd__(self, s):
        r"""
        __iadd__(self, s) -> itkVariableLengthVectorI

        Parameters
        ----------
        s: int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___iadd__(self, s)

    def __imul__(self, s):
        r"""
        __imul__(self, s) -> itkVariableLengthVectorI

        Parameters
        ----------
        s: int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___imul__(self, s)

    def __neg__(self):
        r"""__neg__(self) -> itkVariableLengthVectorI"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___neg__(self)

    def __eq__(self, v):
        r"""
        __eq__(self, v) -> bool

        Parameters
        ----------
        v: itkVariableLengthVectorI const &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___eq__(self, v)

    def __ne__(self, other):
        r"""
        __ne__(self, other) -> bool

        Parameters
        ----------
        other: itkVariableLengthVectorI const &

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___ne__(self, other)

    def GetNorm(self):
        r"""GetNorm(self) -> double"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetNorm(self)

    def GetSquaredNorm(self):
        r"""GetSquaredNorm(self) -> double"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_GetSquaredNorm(self)

    def IsAProxy(self):
        r"""IsAProxy(self) -> bool"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_IsAProxy(self)

    def __add__(self, v2):
        r"""
        __add__(self, v2) -> itkVariableLengthVectorI

        Parameters
        ----------
        v2: itkVariableLengthVectorI

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___add__(self, v2)

    def __sub__(self, v2):
        r"""
        __sub__(self, v2) -> itkVariableLengthVectorI

        Parameters
        ----------
        v2: itkVariableLengthVectorI

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___sub__(self, v2)

    def __getitem__(self, d):
        r"""
        __getitem__(self, d) -> int

        Parameters
        ----------
        d: unsigned long

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___getitem__(self, d)

    def __setitem__(self, d, v):
        r"""
        __setitem__(self, d, v)

        Parameters
        ----------
        d: unsigned long
        v: int

        """
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___setitem__(self, d, v)

    def __len__(self):
        r"""__len__(self) -> unsigned int"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___len__(self)

    def __repr__(self):
        r"""__repr__(self) -> std::string"""
        return _itkVariableLengthVectorRTKPython.itkVariableLengthVectorI___repr__(self)

# Register itkVariableLengthVectorI in _itkVariableLengthVectorRTKPython:
_itkVariableLengthVectorRTKPython.itkVariableLengthVectorI_swigregister(itkVariableLengthVectorI)

