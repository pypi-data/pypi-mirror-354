# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKConeBeamReconstructionFilterPython
else:
    import _rtkFDKConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkThreeDCircularProjectionGeometryPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.rtkProjectionGeometryPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.rtkFDKWeightProjectionFilterPython
import itk.rtkFFTRampImageFilterPython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.rtkFDKBackProjectionImageFilterPython
import itk.rtkBackProjectionImageFilterPython

def rtkFDKConeBeamReconstructionFilterID3_New():
    return rtkFDKConeBeamReconstructionFilterID3.New()

class rtkFDKConeBeamReconstructionFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKConeBeamReconstructionFilterID3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKConeBeamReconstructionFilterID3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetGeometry(self, _arg)

    def GetWeightFilter(self):
        r"""GetWeightFilter(self) -> rtkFDKWeightProjectionFilterID3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetWeightFilter(self)

    def GetRampFilter(self):
        r"""GetRampFilter(self) -> rtkFFTRampImageFilterID3ID3D_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetRampFilter(self)

    def GetProjectionSubsetSize(self):
        r"""GetProjectionSubsetSize(self) -> unsigned int"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetProjectionSubsetSize(self)

    def SetProjectionSubsetSize(self, _arg):
        r"""
        SetProjectionSubsetSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetProjectionSubsetSize(self, _arg)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkFDKBackProjectionImageFilterID3ID3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetBackProjectionFilter(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkFDKBackProjectionImageFilterID3ID3 *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetBackProjectionFilter(self, _arg)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKConeBeamReconstructionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterID3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterID3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_swigregister(rtkFDKConeBeamReconstructionFilterID3)

def rtkFDKConeBeamReconstructionFilterIF3_New():
    return rtkFDKConeBeamReconstructionFilterIF3.New()

class rtkFDKConeBeamReconstructionFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKConeBeamReconstructionFilterIF3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetGeometry(self, _arg)

    def GetWeightFilter(self):
        r"""GetWeightFilter(self) -> rtkFDKWeightProjectionFilterIF3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetWeightFilter(self)

    def GetRampFilter(self):
        r"""GetRampFilter(self) -> rtkFFTRampImageFilterIF3IF3D_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetRampFilter(self)

    def GetProjectionSubsetSize(self):
        r"""GetProjectionSubsetSize(self) -> unsigned int"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetProjectionSubsetSize(self)

    def SetProjectionSubsetSize(self, _arg):
        r"""
        SetProjectionSubsetSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetProjectionSubsetSize(self, _arg)

    def GetBackProjectionFilter(self):
        r"""GetBackProjectionFilter(self) -> rtkFDKBackProjectionImageFilterIF3IF3_Pointer"""
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetBackProjectionFilter(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkFDKBackProjectionImageFilterIF3IF3 *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetBackProjectionFilter(self, _arg)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKConeBeamReconstructionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterIF3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterIF3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_swigregister(rtkFDKConeBeamReconstructionFilterIF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fdk_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FDKConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FDKConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fdk_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FDKConeBeamReconstructionFilter
    fdk_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fdk_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__



