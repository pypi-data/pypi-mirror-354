# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKWeightProjectionFilterPython
else:
    import _rtkFDKWeightProjectionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.rtkThreeDCircularProjectionGeometryPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.rtkProjectionGeometryPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def rtkFDKWeightProjectionFilterID2_New():
    return rtkFDKWeightProjectionFilterID2.New()

class rtkFDKWeightProjectionFilterID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterID2_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterID2_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterID2

        Create a new object of the class rtkFDKWeightProjectionFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterID2 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID2_swigregister(rtkFDKWeightProjectionFilterID2)

def rtkFDKWeightProjectionFilterID3_New():
    return rtkFDKWeightProjectionFilterID3.New()

class rtkFDKWeightProjectionFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterID3_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterID3_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterID3

        Create a new object of the class rtkFDKWeightProjectionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterID3 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID3_swigregister(rtkFDKWeightProjectionFilterID3)

def rtkFDKWeightProjectionFilterID4_New():
    return rtkFDKWeightProjectionFilterID4.New()

class rtkFDKWeightProjectionFilterID4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterID4_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterID4_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterID4

        Create a new object of the class rtkFDKWeightProjectionFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterID4 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterID4_swigregister(rtkFDKWeightProjectionFilterID4)

def rtkFDKWeightProjectionFilterIF2_New():
    return rtkFDKWeightProjectionFilterIF2.New()

class rtkFDKWeightProjectionFilterIF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterIF2_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterIF2_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterIF2

        Create a new object of the class rtkFDKWeightProjectionFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterIF2 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF2_swigregister(rtkFDKWeightProjectionFilterIF2)

def rtkFDKWeightProjectionFilterIF3_New():
    return rtkFDKWeightProjectionFilterIF3.New()

class rtkFDKWeightProjectionFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterIF3_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterIF3_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterIF3

        Create a new object of the class rtkFDKWeightProjectionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterIF3 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF3_swigregister(rtkFDKWeightProjectionFilterIF3)

def rtkFDKWeightProjectionFilterIF4_New():
    return rtkFDKWeightProjectionFilterIF4.New()

class rtkFDKWeightProjectionFilterIF4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ rtkFDKWeightProjectionFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkFDKWeightProjectionFilterIF4_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkFDKWeightProjectionFilterIF4_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4_Clone(self)

    def GetGeometry(self):
        r"""GetGeometry(self) -> rtkThreeDCircularProjectionGeometry_Pointer"""
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4_GetGeometry(self)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4_SetGeometry(self, _arg)
    __swig_destroy__ = _rtkFDKWeightProjectionFilterPython.delete_rtkFDKWeightProjectionFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkFDKWeightProjectionFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkFDKWeightProjectionFilterIF4

        Create a new object of the class rtkFDKWeightProjectionFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKWeightProjectionFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKWeightProjectionFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKWeightProjectionFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKWeightProjectionFilterIF4 in _rtkFDKWeightProjectionFilterPython:
_rtkFDKWeightProjectionFilterPython.rtkFDKWeightProjectionFilterIF4_swigregister(rtkFDKWeightProjectionFilterIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fdk_weight_projection_filter(*args: itkt.ImageLike,  geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FDKWeightProjectionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FDKWeightProjectionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def fdk_weight_projection_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FDKWeightProjectionFilter
    fdk_weight_projection_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fdk_weight_projection_filter.__doc__ = filter_object.__doc__



