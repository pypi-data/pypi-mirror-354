# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRTKPython
else:
    import _itkImageRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
class vectoritkImageUS1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUS1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageUS1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUS1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUS1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUS1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUS1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUS1

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type
        j: std::vector< itkImageUS1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUS1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type
        j: std::vector< itkImageUS1_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type
        j: std::vector< itkImageUS1_Pointer >::difference_type
        v: std::vector< itkImageUS1_Pointer,std::allocator< itkImageUS1_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageUS1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type
        j: std::vector< itkImageUS1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUS1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageUS1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUS1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUS1_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUS1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUS1_Pointer,std::allocator< itkImageUS1_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUS1_Pointer >::difference_type
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUS1_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageUS1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUS1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUS1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUS1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUS1_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageUS1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUS1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageUS1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUS1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageUS1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUS1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageUS1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUS1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageUS1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageUS1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUS1_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageUS1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageUS1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUS1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS1_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUS1_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUS1_Pointer >::iterator
        last: std::vector< itkImageUS1_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageUS1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUS1
        __init__(self, other) -> vectoritkImageUS1

        Parameters
        ----------
        other: std::vector< itkImageUS1_Pointer > const &

        __init__(self, size) -> vectoritkImageUS1

        Parameters
        ----------
        size: std::vector< itkImageUS1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUS1

        Parameters
        ----------
        size: std::vector< itkImageUS1_Pointer >::size_type
        value: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageUS1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUS1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUS1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageUS1_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUS1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageUS1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUS1_Pointer >::size_type
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUS1_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUS1_Pointer >::size_type
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUS1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUS1_Pointer >::iterator
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUS1_Pointer >::iterator
        n: std::vector< itkImageUS1_Pointer >::size_type
        x: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUS1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUS1_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageUS1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUS1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUS1_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUS1

# Register vectoritkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUS1_swigregister(vectoritkImageUS1)
class vectoritkImageUC1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUC1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageUC1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUC1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUC1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageUC1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUC1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageUC1

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type
        j: std::vector< itkImageUC1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUC1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type
        j: std::vector< itkImageUC1_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type
        j: std::vector< itkImageUC1_Pointer >::difference_type
        v: std::vector< itkImageUC1_Pointer,std::allocator< itkImageUC1_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageUC1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type
        j: std::vector< itkImageUC1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUC1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageUC1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageUC1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageUC1_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageUC1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageUC1_Pointer,std::allocator< itkImageUC1_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageUC1_Pointer >::difference_type
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageUC1_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageUC1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageUC1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageUC1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUC1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageUC1_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageUC1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageUC1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageUC1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageUC1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageUC1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageUC1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageUC1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageUC1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageUC1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageUC1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageUC1_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageUC1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageUC1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageUC1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC1_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageUC1_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageUC1_Pointer >::iterator
        last: std::vector< itkImageUC1_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageUC1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUC1
        __init__(self, other) -> vectoritkImageUC1

        Parameters
        ----------
        other: std::vector< itkImageUC1_Pointer > const &

        __init__(self, size) -> vectoritkImageUC1

        Parameters
        ----------
        size: std::vector< itkImageUC1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUC1

        Parameters
        ----------
        size: std::vector< itkImageUC1_Pointer >::size_type
        value: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageUC1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUC1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageUC1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageUC1_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageUC1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageUC1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageUC1_Pointer >::size_type
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageUC1_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageUC1_Pointer >::size_type
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageUC1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageUC1_Pointer >::iterator
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageUC1_Pointer >::iterator
        n: std::vector< itkImageUC1_Pointer >::size_type
        x: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageUC1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageUC1_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageUC1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageUC1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageUC1_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUC1

# Register vectoritkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUC1_swigregister(vectoritkImageUC1)
class vectoritkImageF1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageF1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageF1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageF1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageF1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageF1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageF1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageF1

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type
        j: std::vector< itkImageF1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageF1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type
        j: std::vector< itkImageF1_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type
        j: std::vector< itkImageF1_Pointer >::difference_type
        v: std::vector< itkImageF1_Pointer,std::allocator< itkImageF1_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageF1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type
        j: std::vector< itkImageF1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageF1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageF1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageF1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageF1_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageF1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageF1_Pointer,std::allocator< itkImageF1_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageF1_Pointer >::difference_type
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageF1_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageF1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageF1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageF1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageF1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageF1_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageF1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageF1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageF1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageF1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageF1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageF1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageF1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageF1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageF1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageF1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageF1_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageF1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageF1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageF1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF1_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageF1_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageF1_Pointer >::iterator
        last: std::vector< itkImageF1_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageF1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageF1
        __init__(self, other) -> vectoritkImageF1

        Parameters
        ----------
        other: std::vector< itkImageF1_Pointer > const &

        __init__(self, size) -> vectoritkImageF1

        Parameters
        ----------
        size: std::vector< itkImageF1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageF1

        Parameters
        ----------
        size: std::vector< itkImageF1_Pointer >::size_type
        value: std::vector< itkImageF1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageF1_swiginit(self, _itkImageRTKPython.new_vectoritkImageF1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageF1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageF1_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageF1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageF1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageF1_Pointer >::size_type
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageF1_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageF1_Pointer >::size_type
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageF1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageF1_Pointer >::iterator
        x: std::vector< itkImageF1_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageF1_Pointer >::iterator
        n: std::vector< itkImageF1_Pointer >::size_type
        x: std::vector< itkImageF1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageF1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageF1_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageF1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageF1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageF1_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageF1

# Register vectoritkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageF1_swigregister(vectoritkImageF1)
class vectoritkImageD1(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageD1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageD1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageD1___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageD1___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageD1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageD1___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageD1

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type
        j: std::vector< itkImageD1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageD1___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type
        j: std::vector< itkImageD1_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type
        j: std::vector< itkImageD1_Pointer >::difference_type
        v: std::vector< itkImageD1_Pointer,std::allocator< itkImageD1_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageD1___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type
        j: std::vector< itkImageD1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageD1___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageD1___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageD1

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageD1_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageD1___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageD1_Pointer,std::allocator< itkImageD1_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageD1_Pointer >::difference_type
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageD1_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageD1_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageD1_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageD1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageD1_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageD1_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageD1_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageD1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageD1_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageD1_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageD1_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageD1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageD1_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageD1_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageD1_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageD1_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageD1_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageD1_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageD1_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageD1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD1_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageD1_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageD1_Pointer >::iterator
        last: std::vector< itkImageD1_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageD1_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageD1
        __init__(self, other) -> vectoritkImageD1

        Parameters
        ----------
        other: std::vector< itkImageD1_Pointer > const &

        __init__(self, size) -> vectoritkImageD1

        Parameters
        ----------
        size: std::vector< itkImageD1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageD1

        Parameters
        ----------
        size: std::vector< itkImageD1_Pointer >::size_type
        value: std::vector< itkImageD1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageD1_swiginit(self, _itkImageRTKPython.new_vectoritkImageD1(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageD1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageD1_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageD1_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageD1_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageD1_Pointer >::size_type
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageD1_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageD1_Pointer >::size_type
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageD1_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageD1_Pointer >::iterator
        x: std::vector< itkImageD1_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageD1_Pointer >::iterator
        n: std::vector< itkImageD1_Pointer >::size_type
        x: std::vector< itkImageD1_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageD1_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageD1_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageD1_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageD1_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageD1_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageD1

# Register vectoritkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageD1_swigregister(vectoritkImageD1)
class vectoritkImageVF52(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageVF52_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF52___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF52___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF52___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF52

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type
        j: std::vector< itkImageVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF52___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type
        j: std::vector< itkImageVF52_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type
        j: std::vector< itkImageVF52_Pointer >::difference_type
        v: std::vector< itkImageVF52_Pointer,std::allocator< itkImageVF52_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageVF52___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type
        j: std::vector< itkImageVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF52___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageVF52___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF52

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF52_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF52___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF52_Pointer,std::allocator< itkImageVF52_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF52_Pointer >::difference_type
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF52_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageVF52_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF52_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF52_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF52_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageVF52_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF52_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF52_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF52_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF52_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF52_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF52_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF52_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF52_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageVF52_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF52_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageVF52_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageVF52_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF52_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF52_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF52_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF52_Pointer >::iterator
        last: std::vector< itkImageVF52_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageVF52_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF52
        __init__(self, other) -> vectoritkImageVF52

        Parameters
        ----------
        other: std::vector< itkImageVF52_Pointer > const &

        __init__(self, size) -> vectoritkImageVF52

        Parameters
        ----------
        size: std::vector< itkImageVF52_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF52

        Parameters
        ----------
        size: std::vector< itkImageVF52_Pointer >::size_type
        value: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF52(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF52_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF52_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF52_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF52_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF52_Pointer >::size_type
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF52_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF52_Pointer >::size_type
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF52_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF52_Pointer >::iterator
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF52_Pointer >::iterator
        n: std::vector< itkImageVF52_Pointer >::size_type
        x: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF52_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF52_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageVF52_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF52_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF52

# Register vectoritkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF52_swigregister(vectoritkImageVF52)
class vectoritkImageCVF52(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageCVF52_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF52___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF52___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF52___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF52

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type
        j: std::vector< itkImageCVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF52___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type
        j: std::vector< itkImageCVF52_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type
        j: std::vector< itkImageCVF52_Pointer >::difference_type
        v: std::vector< itkImageCVF52_Pointer,std::allocator< itkImageCVF52_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type
        j: std::vector< itkImageCVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF52___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageCVF52___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF52

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF52_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF52___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF52_Pointer,std::allocator< itkImageCVF52_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF52_Pointer >::difference_type
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF52_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageCVF52_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF52_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF52_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF52_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF52_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF52_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF52_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF52_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF52_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF52_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF52_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF52_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageCVF52_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF52_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageCVF52_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageCVF52_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF52_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF52_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF52_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF52_Pointer >::iterator
        last: std::vector< itkImageCVF52_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageCVF52_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF52
        __init__(self, other) -> vectoritkImageCVF52

        Parameters
        ----------
        other: std::vector< itkImageCVF52_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF52

        Parameters
        ----------
        size: std::vector< itkImageCVF52_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF52

        Parameters
        ----------
        size: std::vector< itkImageCVF52_Pointer >::size_type
        value: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF52(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF52_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF52_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF52_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF52_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF52_Pointer >::size_type
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF52_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF52_Pointer >::size_type
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF52_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF52_Pointer >::iterator
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF52_Pointer >::iterator
        n: std::vector< itkImageCVF52_Pointer >::size_type
        x: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF52_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF52_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageCVF52_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF52_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF52_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF52

# Register vectoritkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF52_swigregister(vectoritkImageCVF52)
class vectoritkImageVF53(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageVF53_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF53___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF53___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF53___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF53

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF53___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type
        v: std::vector< itkImageVF53_Pointer,std::allocator< itkImageVF53_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageVF53___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        j: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF53___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageVF53___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF53

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF53_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF53___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF53_Pointer,std::allocator< itkImageVF53_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF53_Pointer >::difference_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF53_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageVF53_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF53_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF53_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF53_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageVF53_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF53_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF53_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF53_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF53_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageVF53_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF53_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageVF53_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageVF53_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF53_Pointer >::iterator
        last: std::vector< itkImageVF53_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageVF53_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF53
        __init__(self, other) -> vectoritkImageVF53

        Parameters
        ----------
        other: std::vector< itkImageVF53_Pointer > const &

        __init__(self, size) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type
        value: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF53(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF53_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF53_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF53_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF53_Pointer >::iterator
        n: std::vector< itkImageVF53_Pointer >::size_type
        x: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF53_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF53_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageVF53_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF53_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF53

# Register vectoritkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF53_swigregister(vectoritkImageVF53)
class vectoritkImageCVF53(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageCVF53_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF53___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF53___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF53___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF53

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type
        j: std::vector< itkImageCVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF53___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type
        j: std::vector< itkImageCVF53_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type
        j: std::vector< itkImageCVF53_Pointer >::difference_type
        v: std::vector< itkImageCVF53_Pointer,std::allocator< itkImageCVF53_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type
        j: std::vector< itkImageCVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF53___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageCVF53___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF53

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF53_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF53___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF53_Pointer,std::allocator< itkImageCVF53_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF53_Pointer >::difference_type
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF53_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageCVF53_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF53_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF53_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF53_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF53_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF53_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF53_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF53_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageCVF53_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF53_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageCVF53_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageCVF53_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF53_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF53_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF53_Pointer >::iterator
        last: std::vector< itkImageCVF53_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageCVF53_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF53
        __init__(self, other) -> vectoritkImageCVF53

        Parameters
        ----------
        other: std::vector< itkImageCVF53_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF53

        Parameters
        ----------
        size: std::vector< itkImageCVF53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF53

        Parameters
        ----------
        size: std::vector< itkImageCVF53_Pointer >::size_type
        value: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF53(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF53_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF53_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF53_Pointer >::size_type
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF53_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF53_Pointer >::size_type
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF53_Pointer >::iterator
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF53_Pointer >::iterator
        n: std::vector< itkImageCVF53_Pointer >::size_type
        x: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF53_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF53_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageCVF53_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF53_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF53

# Register vectoritkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF53_swigregister(vectoritkImageCVF53)
class vectoritkImageVF54(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageVF54_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF54___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF54___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF54___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageVF54

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type
        j: std::vector< itkImageVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF54___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type
        j: std::vector< itkImageVF54_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type
        j: std::vector< itkImageVF54_Pointer >::difference_type
        v: std::vector< itkImageVF54_Pointer,std::allocator< itkImageVF54_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageVF54___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type
        j: std::vector< itkImageVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF54___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageVF54___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageVF54

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageVF54_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageVF54___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageVF54_Pointer,std::allocator< itkImageVF54_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageVF54_Pointer >::difference_type
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageVF54_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageVF54_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageVF54_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF54_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageVF54_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageVF54_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageVF54_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF54_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageVF54_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageVF54_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageVF54_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF54_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageVF54_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageVF54_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageVF54_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageVF54_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageVF54_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageVF54_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageVF54_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF54_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageVF54_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageVF54_Pointer >::iterator
        last: std::vector< itkImageVF54_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageVF54_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF54
        __init__(self, other) -> vectoritkImageVF54

        Parameters
        ----------
        other: std::vector< itkImageVF54_Pointer > const &

        __init__(self, size) -> vectoritkImageVF54

        Parameters
        ----------
        size: std::vector< itkImageVF54_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF54

        Parameters
        ----------
        size: std::vector< itkImageVF54_Pointer >::size_type
        value: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF54(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageVF54_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF54_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageVF54_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageVF54_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageVF54_Pointer >::size_type
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageVF54_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageVF54_Pointer >::size_type
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageVF54_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageVF54_Pointer >::iterator
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageVF54_Pointer >::iterator
        n: std::vector< itkImageVF54_Pointer >::size_type
        x: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageVF54_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageVF54_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageVF54_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageVF54_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF54

# Register vectoritkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF54_swigregister(vectoritkImageVF54)
class vectoritkImageCVF54(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageCVF54_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF54___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF54___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF54___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVF54

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type
        j: std::vector< itkImageCVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF54___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type
        j: std::vector< itkImageCVF54_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type
        j: std::vector< itkImageCVF54_Pointer >::difference_type
        v: std::vector< itkImageCVF54_Pointer,std::allocator< itkImageCVF54_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type
        j: std::vector< itkImageCVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF54___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageCVF54___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVF54

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVF54_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVF54___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVF54_Pointer,std::allocator< itkImageCVF54_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVF54_Pointer >::difference_type
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVF54_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageCVF54_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVF54_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF54_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVF54_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVF54_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF54_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVF54_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVF54_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVF54_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF54_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVF54_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVF54_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageCVF54_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVF54_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageCVF54_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageCVF54_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVF54_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF54_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVF54_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVF54_Pointer >::iterator
        last: std::vector< itkImageCVF54_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageCVF54_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF54
        __init__(self, other) -> vectoritkImageCVF54

        Parameters
        ----------
        other: std::vector< itkImageCVF54_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF54

        Parameters
        ----------
        size: std::vector< itkImageCVF54_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF54

        Parameters
        ----------
        size: std::vector< itkImageCVF54_Pointer >::size_type
        value: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF54(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVF54_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF54_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVF54_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVF54_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVF54_Pointer >::size_type
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF54_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVF54_Pointer >::size_type
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVF54_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVF54_Pointer >::iterator
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVF54_Pointer >::iterator
        n: std::vector< itkImageCVF54_Pointer >::size_type
        x: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVF54_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVF54_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageCVF54_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVF54_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVF54_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF54

# Register vectoritkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF54_swigregister(vectoritkImageCVF54)
class vectoritkImageCVD53(collections.abc.MutableSequence if _swig_python_version_info >= (3, 3) else collections.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _itkImageRTKPython.vectoritkImageCVD53_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVD53___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVD53___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< itkImageCVD53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVD53___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(self, i, j) -> vectoritkImageCVD53

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type
        j: std::vector< itkImageCVD53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVD53___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type
        j: std::vector< itkImageCVD53_Pointer >::difference_type

        __setslice__(self, i, j, v)

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type
        j: std::vector< itkImageCVD53_Pointer >::difference_type
        v: std::vector< itkImageCVD53_Pointer,std::allocator< itkImageCVD53_Pointer > > const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(self, i, j)

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type
        j: std::vector< itkImageCVD53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVD53___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type

        __delitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _itkImageRTKPython.vectoritkImageCVD53___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> vectoritkImageCVD53

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(self, i) -> std::vector< itkImageCVD53_Pointer >::value_type const &

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type

        """
        return _itkImageRTKPython.vectoritkImageCVD53___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< itkImageCVD53_Pointer,std::allocator< itkImageCVD53_Pointer > > const &

        __setitem__(self, slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(self, i, x)

        Parameters
        ----------
        i: std::vector< itkImageCVD53_Pointer >::difference_type
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< itkImageCVD53_Pointer >::value_type"""
        return _itkImageRTKPython.vectoritkImageCVD53_pop(self)

    def append(self, x):
        r"""
        append(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _itkImageRTKPython.vectoritkImageCVD53_empty(self)

    def size(self):
        r"""size(self) -> std::vector< itkImageCVD53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVD53_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::vector< itkImageCVD53_Pointer > &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< itkImageCVD53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVD53_begin(self)

    def end(self):
        r"""end(self) -> std::vector< itkImageCVD53_Pointer >::iterator"""
        return _itkImageRTKPython.vectoritkImageCVD53_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< itkImageCVD53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVD53_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< itkImageCVD53_Pointer >::reverse_iterator"""
        return _itkImageRTKPython.vectoritkImageCVD53_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _itkImageRTKPython.vectoritkImageCVD53_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< itkImageCVD53_Pointer >::allocator_type"""
        return _itkImageRTKPython.vectoritkImageCVD53_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _itkImageRTKPython.vectoritkImageCVD53_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< itkImageCVD53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD53_Pointer >::iterator

        erase(self, first, last) -> std::vector< itkImageCVD53_Pointer >::iterator

        Parameters
        ----------
        first: std::vector< itkImageCVD53_Pointer >::iterator
        last: std::vector< itkImageCVD53_Pointer >::iterator

        """
        return _itkImageRTKPython.vectoritkImageCVD53_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD53
        __init__(self, other) -> vectoritkImageCVD53

        Parameters
        ----------
        other: std::vector< itkImageCVD53_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD53

        Parameters
        ----------
        size: std::vector< itkImageCVD53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD53

        Parameters
        ----------
        size: std::vector< itkImageCVD53_Pointer >::size_type
        value: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVD53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVD53(*args))

    def push_back(self, x):
        r"""
        push_back(self, x)

        Parameters
        ----------
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< itkImageCVD53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVD53_front(self)

    def back(self):
        r"""back(self) -> std::vector< itkImageCVD53_Pointer >::value_type const &"""
        return _itkImageRTKPython.vectoritkImageCVD53_back(self)

    def assign(self, n, x):
        r"""
        assign(self, n, x)

        Parameters
        ----------
        n: std::vector< itkImageCVD53_Pointer >::size_type
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD53_Pointer >::size_type

        resize(self, new_size, x)

        Parameters
        ----------
        new_size: std::vector< itkImageCVD53_Pointer >::size_type
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< itkImageCVD53_Pointer >::iterator

        Parameters
        ----------
        pos: std::vector< itkImageCVD53_Pointer >::iterator
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        insert(self, pos, n, x)

        Parameters
        ----------
        pos: std::vector< itkImageCVD53_Pointer >::iterator
        n: std::vector< itkImageCVD53_Pointer >::size_type
        x: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        return _itkImageRTKPython.vectoritkImageCVD53_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(self, n)

        Parameters
        ----------
        n: std::vector< itkImageCVD53_Pointer >::size_type

        """
        return _itkImageRTKPython.vectoritkImageCVD53_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< itkImageCVD53_Pointer >::size_type"""
        return _itkImageRTKPython.vectoritkImageCVD53_capacity(self)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVD53

# Register vectoritkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVD53_swigregister(vectoritkImageCVD53)

def itkImageCVD53_New():
    return itkImageCVD53.New()

class itkImageCVD53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVD53_Pointer"""
        return _itkImageRTKPython.itkImageCVD53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVD53_Pointer"""
        return _itkImageRTKPython.itkImageCVD53_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageCVD53_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorD5 const &

        """
        return _itkImageRTKPython.itkImageCVD53_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorD5 const &

        """
        return _itkImageRTKPython.itkImageCVD53_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorD5

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorD5

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageRTKPython.itkImageCVD53_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorD5
        GetBufferPointer(self) -> itkCovariantVectorD5
        """
        return _itkImageRTKPython.itkImageCVD53_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,5 > > const *
        """
        return _itkImageRTKPython.itkImageCVD53_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< double,5 > > *

        """
        return _itkImageRTKPython.itkImageCVD53_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVD53 const *

        """
        return _itkImageRTKPython.itkImageCVD53_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< double,5 > > const
        """
        return _itkImageRTKPython.itkImageCVD53_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,5 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< double,5 >,3 > > const
        """
        return _itkImageRTKPython.itkImageCVD53_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVD53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVD53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageCVD53_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD53

        Create a new object of the class itkImageCVD53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVD53_swigregister(itkImageCVD53)
class itkImageCVF24_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF24_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF24_ConstPointer
        __init__(self, p) -> itkImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkImageCVF24_ConstPointer const &

        __init__(self, p) -> itkImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkImageCVF24 const *

        """
        _itkImageRTKPython.itkImageCVF24_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF24_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF24_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageCVF24"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageCVF24"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageCVF24"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageCVF24"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageCVF24

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageCVF24_ConstPointer &

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageCVF24_Pointer"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF2
        GetBufferPointer(self) -> itkCovariantVectorF2
        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,2 > > const *
        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,2 > > const
        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,2 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF24_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageCVF24_ConstPointer_GetReferenceCount(self)

# Register itkImageCVF24_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF24_ConstPointer_swigregister(itkImageCVF24_ConstPointer)
class itkImageCVF34_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF34_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF34_ConstPointer
        __init__(self, p) -> itkImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkImageCVF34_ConstPointer const &

        __init__(self, p) -> itkImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkImageCVF34 const *

        """
        _itkImageRTKPython.itkImageCVF34_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF34_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageCVF34"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageCVF34

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageCVF34_ConstPointer &

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageCVF34_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF3
        GetBufferPointer(self) -> itkCovariantVectorF3
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float > > const *
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float > > const
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF34_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageCVF34_ConstPointer_GetReferenceCount(self)

# Register itkImageCVF34_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF34_ConstPointer_swigregister(itkImageCVF34_ConstPointer)
class itkImageCVF44_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF44_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF44_ConstPointer
        __init__(self, p) -> itkImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkImageCVF44_ConstPointer const &

        __init__(self, p) -> itkImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkImageCVF44 const *

        """
        _itkImageRTKPython.itkImageCVF44_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF44_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF44_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageCVF44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageCVF44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageCVF44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageCVF44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageCVF44

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageCVF44_ConstPointer &

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageCVF44_Pointer"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF4
        GetBufferPointer(self) -> itkCovariantVectorF4
        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,4 > > const *
        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,4 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF44_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageCVF44_ConstPointer_GetReferenceCount(self)

# Register itkImageCVF44_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF44_ConstPointer_swigregister(itkImageCVF44_ConstPointer)

def itkImageCVF52_New():
    return itkImageCVF52.New()

class itkImageCVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageCVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF52_Pointer"""
        return _itkImageRTKPython.itkImageCVF52___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF52_Pointer"""
        return _itkImageRTKPython.itkImageCVF52_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageCVF52_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF52_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF52_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageRTKPython.itkImageCVF52_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF5
        GetBufferPointer(self) -> itkCovariantVectorF5
        """
        return _itkImageRTKPython.itkImageCVF52_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageCVF52_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageCVF52_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF52 const *

        """
        return _itkImageRTKPython.itkImageCVF52_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageCVF52_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 > > > const
        """
        return _itkImageRTKPython.itkImageCVF52_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF52

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF52

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageCVF52_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF52

        Create a new object of the class itkImageCVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF52.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF52_swigregister(itkImageCVF52)

def itkImageCVF53_New():
    return itkImageCVF53.New()

class itkImageCVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF53_Pointer"""
        return _itkImageRTKPython.itkImageCVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF53_Pointer"""
        return _itkImageRTKPython.itkImageCVF53_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageCVF53_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF53_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF53_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageRTKPython.itkImageCVF53_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF5
        GetBufferPointer(self) -> itkCovariantVectorF5
        """
        return _itkImageRTKPython.itkImageCVF53_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageCVF53_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageCVF53_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF53 const *

        """
        return _itkImageRTKPython.itkImageCVF53_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageCVF53_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,3 > > const
        """
        return _itkImageRTKPython.itkImageCVF53_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageCVF53_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF53

        Create a new object of the class itkImageCVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF53_swigregister(itkImageCVF53)

def itkImageCVF54_New():
    return itkImageCVF54.New()

class itkImageCVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageCVF54_Pointer"""
        return _itkImageRTKPython.itkImageCVF54___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageCVF54_Pointer"""
        return _itkImageRTKPython.itkImageCVF54_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageCVF54_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF54_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkCovariantVectorF5 const &

        """
        return _itkImageRTKPython.itkImageCVF54_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkCovariantVectorF5

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageCVF54_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF5
        GetBufferPointer(self) -> itkCovariantVectorF5
        """
        return _itkImageRTKPython.itkImageCVF54_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageCVF54_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageCVF54_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageCVF54 const *

        """
        return _itkImageRTKPython.itkImageCVF54_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageCVF54_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF54_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageCVF54

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageCVF54_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF54

        Create a new object of the class itkImageCVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF54.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_swigregister(itkImageCVF54)
class itkImageCVF54_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF54_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF54_ConstPointer
        __init__(self, p) -> itkImageCVF54_ConstPointer

        Parameters
        ----------
        p: itkImageCVF54_ConstPointer const &

        __init__(self, p) -> itkImageCVF54_ConstPointer

        Parameters
        ----------
        p: itkImageCVF54 const *

        """
        _itkImageRTKPython.itkImageCVF54_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF54_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageCVF54"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageCVF54"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageCVF54"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageCVF54"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageCVF54

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageCVF54_ConstPointer &

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageCVF54_Pointer"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkCovariantVectorF5
        GetBufferPointer(self) -> itkCovariantVectorF5
        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::CovariantVector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::CovariantVector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float,5 >,4 > > const
        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF54_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageCVF54_ConstPointer_GetReferenceCount(self)

# Register itkImageCVF54_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_ConstPointer_swigregister(itkImageCVF54_ConstPointer)

def itkImageD1_New():
    return itkImageD1.New()

class itkImageD1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageD1_Pointer"""
        return _itkImageRTKPython.itkImageD1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageD1_Pointer"""
        return _itkImageRTKPython.itkImageD1_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageD1_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: double const &

        """
        return _itkImageRTKPython.itkImageD1_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex1 const &
        value: double const &

        """
        return _itkImageRTKPython.itkImageD1_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> double const

        Parameters
        ----------
        index: itkIndex1 const &

        GetPixel(self, index) -> double &

        Parameters
        ----------
        index: itkIndex1 const &

        """
        return _itkImageRTKPython.itkImageD1_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImageRTKPython.itkImageD1_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkImageRTKPython.itkImageD1_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,double > *

        """
        return _itkImageRTKPython.itkImageD1_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageD1 const *

        """
        return _itkImageRTKPython.itkImageD1_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImageRTKPython.itkImageD1_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,1 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,1 > > const
        """
        return _itkImageRTKPython.itkImageD1_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageD1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageD1_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD1

        Create a new object of the class itkImageD1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageD1_swigregister(itkImageD1)
class itkImageD3_ConstPointer(object):
    r"""Proxy of C++ itkImageD3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageD3_ConstPointer
        __init__(self, p) -> itkImageD3_ConstPointer

        Parameters
        ----------
        p: itkImageD3_ConstPointer const &

        __init__(self, p) -> itkImageD3_ConstPointer

        Parameters
        ----------
        p: itkImageD3 const *

        """
        _itkImageRTKPython.itkImageD3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageD3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageD3_ConstPointer &

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageD3_Pointer"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,3 > > const
        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageD3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageD3_ConstPointer_GetReferenceCount(self)

# Register itkImageD3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD3_ConstPointer_swigregister(itkImageD3_ConstPointer)
class itkImageD4_ConstPointer(object):
    r"""Proxy of C++ itkImageD4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageD4_ConstPointer
        __init__(self, p) -> itkImageD4_ConstPointer

        Parameters
        ----------
        p: itkImageD4_ConstPointer const &

        __init__(self, p) -> itkImageD4_ConstPointer

        Parameters
        ----------
        p: itkImageD4 const *

        """
        _itkImageRTKPython.itkImageD4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageD4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageD4_ConstPointer &

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageD4_Pointer"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> double
        GetBufferPointer(self) -> double const *
        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,double > const *
        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< double > const
        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< double,4 > > const
        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageD4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageD4_ConstPointer_GetReferenceCount(self)

# Register itkImageD4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD4_ConstPointer_swigregister(itkImageD4_ConstPointer)

def itkImageF1_New():
    return itkImageF1.New()

class itkImageF1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageF1_Pointer"""
        return _itkImageRTKPython.itkImageF1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageF1_Pointer"""
        return _itkImageRTKPython.itkImageF1_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageF1_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: float const &

        """
        return _itkImageRTKPython.itkImageF1_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex1 const &
        value: float const &

        """
        return _itkImageRTKPython.itkImageF1_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> float const

        Parameters
        ----------
        index: itkIndex1 const &

        GetPixel(self, index) -> float &

        Parameters
        ----------
        index: itkIndex1 const &

        """
        return _itkImageRTKPython.itkImageF1_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImageRTKPython.itkImageF1_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF1_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,float > *

        """
        return _itkImageRTKPython.itkImageF1_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageF1 const *

        """
        return _itkImageRTKPython.itkImageF1_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF1_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,1 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,1 > > const
        """
        return _itkImageRTKPython.itkImageF1_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageF1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageF1_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF1

        Create a new object of the class itkImageF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageF1_swigregister(itkImageF1)
class itkImageF2_ConstPointer(object):
    r"""Proxy of C++ itkImageF2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF2_ConstPointer
        __init__(self, p) -> itkImageF2_ConstPointer

        Parameters
        ----------
        p: itkImageF2_ConstPointer const &

        __init__(self, p) -> itkImageF2_ConstPointer

        Parameters
        ----------
        p: itkImageF2 const *

        """
        _itkImageRTKPython.itkImageF2_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF2_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageF2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageF2

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageF2_ConstPointer &

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageF2_Pointer"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float > > const
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD22"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion2"""
        return _itkImageRTKPython.itkImageF2_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex2 const &

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex2

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase2 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF2_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageF2_ConstPointer_GetReferenceCount(self)

# Register itkImageF2_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF2_ConstPointer_swigregister(itkImageF2_ConstPointer)
class itkImageF3_ConstPointer(object):
    r"""Proxy of C++ itkImageF3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF3_ConstPointer
        __init__(self, p) -> itkImageF3_ConstPointer

        Parameters
        ----------
        p: itkImageF3_ConstPointer const &

        __init__(self, p) -> itkImageF3_ConstPointer

        Parameters
        ----------
        p: itkImageF3 const *

        """
        _itkImageRTKPython.itkImageF3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF3_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageF3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageF3

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageF3_ConstPointer &

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageF3_Pointer"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,3 > > const
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD33"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion3"""
        return _itkImageRTKPython.itkImageF3_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex3 const &

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex3

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase3 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF3_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageF3_ConstPointer_GetReferenceCount(self)

# Register itkImageF3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF3_ConstPointer_swigregister(itkImageF3_ConstPointer)
class itkImageF4_ConstPointer(object):
    r"""Proxy of C++ itkImageF4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF4_ConstPointer
        __init__(self, p) -> itkImageF4_ConstPointer

        Parameters
        ----------
        p: itkImageF4_ConstPointer const &

        __init__(self, p) -> itkImageF4_ConstPointer

        Parameters
        ----------
        p: itkImageF4 const *

        """
        _itkImageRTKPython.itkImageF4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4_ConstPointer

    def __deref__(self):
        r"""__deref__(self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___deref__(self)

    def __ref__(self):
        r"""__ref__(self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___ref__(self)

    def IsNotNull(self):
        r"""IsNotNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsNotNull(self)

    def IsNull(self):
        r"""IsNull(self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsNull(self)

    def GetPointer(self):
        r"""GetPointer(self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPointer(self)

    def get(self):
        r"""get(self) -> itkImageF4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_get(self)

    def Print(self, os):
        r"""
        Print(self, os) -> itkImageF4

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_Print(self, os)

    def Swap(self, other):
        r"""
        Swap(self, other)

        Parameters
        ----------
        other: itkImageF4_ConstPointer &

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_Swap(self, other)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def Clone(self):
        r"""Clone(self) -> itkImageF4_Pointer"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_Clone(self)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> float
        GetBufferPointer(self) -> float const *
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,float > const *
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPixelContainer(self, *args)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< float > const
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< float,4 > > const
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNeighborhoodAccessor(self, *args)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDirection(self)

    def GetInverseDirection(self):
        r"""GetInverseDirection(self) -> itkMatrixD44"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetInverseDirection(self)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSpacing(self)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetOrigin(self)

    def __GetLargestPossibleRegion_orig__(self):
        r"""__GetLargestPossibleRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___GetLargestPossibleRegion_orig__(self)

    def __GetBufferedRegion_orig__(self):
        r"""__GetBufferedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___GetBufferedRegion_orig__(self)

    def __GetRequestedRegion_orig__(self):
        r"""__GetRequestedRegion_orig__(self) -> itkImageRegion4"""
        return _itkImageRTKPython.itkImageF4_ConstPointer___GetRequestedRegion_orig__(self)

    def GetOffsetTable(self):
        r"""GetOffsetTable(self) -> long const *"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetOffsetTable(self)

    def ComputeOffset(self, ind):
        r"""
        ComputeOffset(self, ind) -> long

        Parameters
        ----------
        ind: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_ComputeOffset(self, ind)

    def ComputeIndex(self, offset):
        r"""
        ComputeIndex(self, offset) -> itkIndex4

        Parameters
        ----------
        offset: long

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_ComputeIndex(self, offset)

    def IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance):
        r"""
        IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsCongruentImageGeometry(self, otherImage, coordinateTolerance, directionTolerance)

    def IsSameImageGeometryAs(self, *args):
        r"""
        IsSameImageGeometryAs(self, otherImage, coordinateTolerance=itk::DefaultImageCoordinateTolerance, directionTolerance=itk::DefaultImageDirectionTolerance) -> bool

        Parameters
        ----------
        otherImage: itkImageBase4 const *
        coordinateTolerance: double
        directionTolerance: double

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_IsSameImageGeometryAs(self, *args)

    def GetNumberOfComponentsPerPixel(self):
        r"""GetNumberOfComponentsPerPixel(self) -> unsigned int"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNumberOfComponentsPerPixel(self)

    def GetSource(self):
        r"""GetSource(self) -> itkProcessObject_Pointer"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSource(self)

    def GetSourceOutputName(self):
        r"""GetSourceOutputName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputName(self)

    def GetSourceOutputIndex(self):
        r"""GetSourceOutputIndex(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputIndex(self)

    def UpdateSource(self):
        r"""UpdateSource(self)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_UpdateSource(self)

    def GetReleaseDataFlag(self):
        r"""GetReleaseDataFlag(self) -> bool const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetReleaseDataFlag(self)

    def ShouldIReleaseData(self):
        r"""ShouldIReleaseData(self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_ShouldIReleaseData(self)

    def GetDataReleased(self):
        r"""GetDataReleased(self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDataReleased(self)

    def GetPipelineMTime(self):
        r"""GetPipelineMTime(self) -> unsigned long const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        r"""GetUpdateMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetUpdateMTime(self)

    def GetRealTimeStamp(self):
        r"""GetRealTimeStamp(self) -> itkRealTimeStamp"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetRealTimeStamp(self)

    def DebugOn(self):
        r"""DebugOn(self)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_DebugOn(self)

    def DebugOff(self):
        r"""DebugOff(self)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_DebugOff(self)

    def GetDebug(self):
        r"""GetDebug(self) -> bool"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetDebug(self)

    def SetDebug(self, debugFlag):
        r"""
        SetDebug(self, debugFlag)

        Parameters
        ----------
        debugFlag: bool

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_SetDebug(self, debugFlag)

    def GetMTime(self):
        r"""GetMTime(self) -> unsigned long"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetMTime(self)

    def GetTimeStamp(self):
        r"""GetTimeStamp(self) -> itkTimeStamp"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetTimeStamp(self)

    def Modified(self):
        r"""Modified(self)"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_Modified(self)

    def AddObserver(self, *args):
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF4_ConstPointer_AddObserver(self, *args)


    def InvokeEvent(self, *args):
        r"""
        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        InvokeEvent(self, arg0)

        Parameters
        ----------
        arg0: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_InvokeEvent(self, *args)

    def HasObserver(self, event):
        r"""
        HasObserver(self, event) -> bool

        Parameters
        ----------
        event: itkEventObject const &

        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_HasObserver(self, event)

    def GetMetaDataDictionary(self, *args):
        r"""
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetMetaDataDictionary(self, *args)

    def GetObjectName(self):
        r"""GetObjectName(self) -> std::string const &"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetObjectName(self)

    def CreateAnother(self):
        r"""CreateAnother(self) -> itkLightObject_Pointer"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_CreateAnother(self)

    def GetNameOfClass(self):
        r"""GetNameOfClass(self) -> char const *"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetNameOfClass(self)

    def GetReferenceCount(self):
        r"""GetReferenceCount(self) -> int"""
        return _itkImageRTKPython.itkImageF4_ConstPointer_GetReferenceCount(self)

# Register itkImageF4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF4_ConstPointer_swigregister(itkImageF4_ConstPointer)

def itkImageUC1_New():
    return itkImageUC1.New()

class itkImageUC1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUC1_Pointer"""
        return _itkImageRTKPython.itkImageUC1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUC1_Pointer"""
        return _itkImageRTKPython.itkImageUC1_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageUC1_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned char const &

        """
        return _itkImageRTKPython.itkImageUC1_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex1 const &
        value: unsigned char const &

        """
        return _itkImageRTKPython.itkImageUC1_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned char const

        Parameters
        ----------
        index: itkIndex1 const &

        GetPixel(self, index) -> unsigned char &

        Parameters
        ----------
        index: itkIndex1 const &

        """
        return _itkImageRTKPython.itkImageUC1_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned char
        GetBufferPointer(self) -> unsigned char const *
        """
        return _itkImageRTKPython.itkImageUC1_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned char > const *
        """
        return _itkImageRTKPython.itkImageUC1_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned char > *

        """
        return _itkImageRTKPython.itkImageUC1_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUC1 const *

        """
        return _itkImageRTKPython.itkImageUC1_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned char > const
        """
        return _itkImageRTKPython.itkImageUC1_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,1 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char,1 > > const
        """
        return _itkImageRTKPython.itkImageUC1_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUC1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUC1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageUC1_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC1

        Create a new object of the class itkImageUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUC1_swigregister(itkImageUC1)

def itkImageUS1_New():
    return itkImageUS1.New()

class itkImageUS1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageUS1_Pointer"""
        return _itkImageRTKPython.itkImageUS1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageUS1_Pointer"""
        return _itkImageRTKPython.itkImageUS1_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageUS1_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: unsigned short const &

        """
        return _itkImageRTKPython.itkImageUS1_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex1 const &
        value: unsigned short const &

        """
        return _itkImageRTKPython.itkImageUS1_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> unsigned short const

        Parameters
        ----------
        index: itkIndex1 const &

        GetPixel(self, index) -> unsigned short &

        Parameters
        ----------
        index: itkIndex1 const &

        """
        return _itkImageRTKPython.itkImageUS1_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> unsigned short
        GetBufferPointer(self) -> unsigned short const *
        """
        return _itkImageRTKPython.itkImageUS1_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,unsigned short > const *
        """
        return _itkImageRTKPython.itkImageUS1_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,unsigned short > *

        """
        return _itkImageRTKPython.itkImageUS1_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageUS1 const *

        """
        return _itkImageRTKPython.itkImageUS1_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< unsigned short > const
        """
        return _itkImageRTKPython.itkImageUS1_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,1 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short,1 > > const
        """
        return _itkImageRTKPython.itkImageUS1_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUS1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageUS1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageUS1_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS1

        Create a new object of the class itkImageUS1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUS1_swigregister(itkImageUS1)

def itkImageVF52_New():
    return itkImageVF52.New()

class itkImageVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF52_Pointer"""
        return _itkImageRTKPython.itkImageVF52___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF52_Pointer"""
        return _itkImageRTKPython.itkImageVF52_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageVF52_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF52_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex2 const &
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF52_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex2 const &

        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex2 const &

        """
        return _itkImageRTKPython.itkImageVF52_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF5
        GetBufferPointer(self) -> itkVectorF5
        """
        return _itkImageRTKPython.itkImageVF52_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageVF52_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageVF52_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF52 const *

        """
        return _itkImageRTKPython.itkImageVF52_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageVF52_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 > > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 > > > const
        """
        return _itkImageRTKPython.itkImageVF52_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF52

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF52

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageVF52_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF52

        Create a new object of the class itkImageVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF52.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF52_swigregister(itkImageVF52)

def itkImageVF53_New():
    return itkImageVF53.New()

class itkImageVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF53_Pointer"""
        return _itkImageRTKPython.itkImageVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF53_Pointer"""
        return _itkImageRTKPython.itkImageVF53_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageVF53_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF53_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex3 const &
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF53_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex3 const &

        """
        return _itkImageRTKPython.itkImageVF53_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF5
        GetBufferPointer(self) -> itkVectorF5
        """
        return _itkImageRTKPython.itkImageVF53_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageVF53_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageVF53_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF53 const *

        """
        return _itkImageRTKPython.itkImageVF53_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageVF53_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > > const
        """
        return _itkImageRTKPython.itkImageVF53_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageVF53_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF53_swigregister(itkImageVF53)

def itkImageVF54_New():
    return itkImageVF54.New()

class itkImageVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageVF54_Pointer"""
        return _itkImageRTKPython.itkImageVF54___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageVF54_Pointer"""
        return _itkImageRTKPython.itkImageVF54_Clone(self)

    def Allocate(self, initializePixels=False):
        r"""
        Allocate(self, initializePixels=False)

        Parameters
        ----------
        initializePixels: bool

        """
        return _itkImageRTKPython.itkImageVF54_Allocate(self, initializePixels)

    def FillBuffer(self, value):
        r"""
        FillBuffer(self, value)

        Parameters
        ----------
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF54_FillBuffer(self, value)

    def SetPixel(self, index, value):
        r"""
        SetPixel(self, index, value)

        Parameters
        ----------
        index: itkIndex4 const &
        value: itkVectorF5 const &

        """
        return _itkImageRTKPython.itkImageVF54_SetPixel(self, index, value)

    def GetPixel(self, *args):
        r"""
        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex4 const &

        GetPixel(self, index) -> itkVectorF5

        Parameters
        ----------
        index: itkIndex4 const &

        """
        return _itkImageRTKPython.itkImageVF54_GetPixel(self, *args)

    def GetBufferPointer(self, *args):
        r"""
        GetBufferPointer(self) -> itkVectorF5
        GetBufferPointer(self) -> itkVectorF5
        """
        return _itkImageRTKPython.itkImageVF54_GetBufferPointer(self, *args)

    def GetPixelContainer(self, *args):
        r"""
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > >
        GetPixelContainer(self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > const *
        """
        return _itkImageRTKPython.itkImageVF54_GetPixelContainer(self, *args)

    def SetPixelContainer(self, container):
        r"""
        SetPixelContainer(self, container)

        Parameters
        ----------
        container: itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > *

        """
        return _itkImageRTKPython.itkImageVF54_SetPixelContainer(self, container)

    def Graft(self, image):
        r"""
        Graft(self, image)

        Parameters
        ----------
        image: itkImageVF54 const *

        """
        return _itkImageRTKPython.itkImageVF54_Graft(self, image)

    def GetPixelAccessor(self, *args):
        r"""
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > >
        GetPixelAccessor(self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > > const
        """
        return _itkImageRTKPython.itkImageVF54_GetPixelAccessor(self, *args)

    def GetNeighborhoodAccessor(self, *args):
        r"""
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,4 > >
        GetNeighborhoodAccessor(self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,4 > > const
        """
        return _itkImageRTKPython.itkImageVF54_GetNeighborhoodAccessor(self, *args)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF54

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageVF54

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageRTKPython.itkImageVF54_cast(obj)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF54

        Create a new object of the class itkImageVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF54.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF54_swigregister(itkImageVF54)

