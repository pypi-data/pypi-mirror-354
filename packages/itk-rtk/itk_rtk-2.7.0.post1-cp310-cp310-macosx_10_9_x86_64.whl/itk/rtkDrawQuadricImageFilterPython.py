# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDrawQuadricImageFilterPython
else:
    import _rtkDrawQuadricImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.rtkDrawConvexImageFilterPython
import itk.rtkConvexShapePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def rtkDrawQuadricImageFilterID3ID3_New():
    return rtkDrawQuadricImageFilterID3ID3.New()

class rtkDrawQuadricImageFilterID3ID3(itk.rtkDrawConvexImageFilterPython.rtkDrawConvexImageFilterID3ID3):
    r"""Proxy of C++ rtkDrawQuadricImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDrawQuadricImageFilterID3ID3_Pointer"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDrawQuadricImageFilterID3ID3_Pointer"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_Clone(self)

    def GetDensity(self):
        r"""GetDensity(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetDensity(self)

    def SetDensity(self, _arg):
        r"""
        SetDensity(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetDensity(self, _arg)

    def GetPlaneDirections(self):
        r"""GetPlaneDirections(self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetPlaneDirections(self)

    def GetPlanePositions(self):
        r"""GetPlanePositions(self) -> vectorD"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetPlanePositions(self)

    def AddClipPlane(self, dir, pos):
        r"""
        AddClipPlane(self, dir, pos)

        Parameters
        ----------
        dir: itkVectorD3 const &
        pos: double const &

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_AddClipPlane(self, dir, pos)

    def GetA(self):
        r"""GetA(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetA(self)

    def SetA(self, _arg):
        r"""
        SetA(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetA(self, _arg)

    def GetB(self):
        r"""GetB(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetB(self)

    def SetB(self, _arg):
        r"""
        SetB(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetB(self, _arg)

    def GetC(self):
        r"""GetC(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetC(self)

    def SetC(self, _arg):
        r"""
        SetC(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetC(self, _arg)

    def GetD(self):
        r"""GetD(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetD(self)

    def SetD(self, _arg):
        r"""
        SetD(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetD(self, _arg)

    def GetE(self):
        r"""GetE(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetE(self)

    def SetE(self, _arg):
        r"""
        SetE(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetE(self, _arg)

    def GetF(self):
        r"""GetF(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetF(self)

    def SetF(self, _arg):
        r"""
        SetF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetF(self, _arg)

    def GetG(self):
        r"""GetG(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetG(self)

    def SetG(self, _arg):
        r"""
        SetG(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetG(self, _arg)

    def GetH(self):
        r"""GetH(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetH(self)

    def SetH(self, _arg):
        r"""
        SetH(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetH(self, _arg)

    def GetI(self):
        r"""GetI(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetI(self)

    def SetI(self, _arg):
        r"""
        SetI(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetI(self, _arg)

    def GetJ(self):
        r"""GetJ(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_GetJ(self)

    def SetJ(self, _arg):
        r"""
        SetJ(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_SetJ(self, _arg)
    __swig_destroy__ = _rtkDrawQuadricImageFilterPython.delete_rtkDrawQuadricImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDrawQuadricImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDrawQuadricImageFilterID3ID3

        Create a new object of the class rtkDrawQuadricImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDrawQuadricImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDrawQuadricImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDrawQuadricImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDrawQuadricImageFilterID3ID3 in _rtkDrawQuadricImageFilterPython:
_rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterID3ID3_swigregister(rtkDrawQuadricImageFilterID3ID3)

def rtkDrawQuadricImageFilterIF3IF3_New():
    return rtkDrawQuadricImageFilterIF3IF3.New()

class rtkDrawQuadricImageFilterIF3IF3(itk.rtkDrawConvexImageFilterPython.rtkDrawConvexImageFilterIF3IF3):
    r"""Proxy of C++ rtkDrawQuadricImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkDrawQuadricImageFilterIF3IF3_Pointer"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkDrawQuadricImageFilterIF3IF3_Pointer"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_Clone(self)

    def GetDensity(self):
        r"""GetDensity(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetDensity(self)

    def SetDensity(self, _arg):
        r"""
        SetDensity(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetDensity(self, _arg)

    def GetPlaneDirections(self):
        r"""GetPlaneDirections(self) -> std::vector< itkVectorD3,std::allocator< itkVectorD3 > > const &"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetPlaneDirections(self)

    def GetPlanePositions(self):
        r"""GetPlanePositions(self) -> vectorD"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetPlanePositions(self)

    def AddClipPlane(self, dir, pos):
        r"""
        AddClipPlane(self, dir, pos)

        Parameters
        ----------
        dir: itkVectorD3 const &
        pos: double const &

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_AddClipPlane(self, dir, pos)

    def GetA(self):
        r"""GetA(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetA(self)

    def SetA(self, _arg):
        r"""
        SetA(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetA(self, _arg)

    def GetB(self):
        r"""GetB(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetB(self)

    def SetB(self, _arg):
        r"""
        SetB(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetB(self, _arg)

    def GetC(self):
        r"""GetC(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetC(self)

    def SetC(self, _arg):
        r"""
        SetC(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetC(self, _arg)

    def GetD(self):
        r"""GetD(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetD(self)

    def SetD(self, _arg):
        r"""
        SetD(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetD(self, _arg)

    def GetE(self):
        r"""GetE(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetE(self)

    def SetE(self, _arg):
        r"""
        SetE(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetE(self, _arg)

    def GetF(self):
        r"""GetF(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetF(self)

    def SetF(self, _arg):
        r"""
        SetF(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetF(self, _arg)

    def GetG(self):
        r"""GetG(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetG(self)

    def SetG(self, _arg):
        r"""
        SetG(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetG(self, _arg)

    def GetH(self):
        r"""GetH(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetH(self)

    def SetH(self, _arg):
        r"""
        SetH(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetH(self, _arg)

    def GetI(self):
        r"""GetI(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetI(self)

    def SetI(self, _arg):
        r"""
        SetI(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetI(self, _arg)

    def GetJ(self):
        r"""GetJ(self) -> double"""
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_GetJ(self)

    def SetJ(self, _arg):
        r"""
        SetJ(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_SetJ(self, _arg)
    __swig_destroy__ = _rtkDrawQuadricImageFilterPython.delete_rtkDrawQuadricImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkDrawQuadricImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkDrawQuadricImageFilterIF3IF3

        Create a new object of the class rtkDrawQuadricImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDrawQuadricImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDrawQuadricImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDrawQuadricImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDrawQuadricImageFilterIF3IF3 in _rtkDrawQuadricImageFilterPython:
_rtkDrawQuadricImageFilterPython.rtkDrawQuadricImageFilterIF3IF3_swigregister(rtkDrawQuadricImageFilterIF3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def draw_quadric_image_filter(*args: itkt.ImageLike,  density: float=..., a: float=..., b: float=..., c: float=..., d: float=..., e: float=..., f: float=..., g: float=..., h: float=..., i: float=..., j: float=..., convex_shape=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DrawQuadricImageFilter"""
    import itk

    kwarg_typehints = { 'density':density,'a':a,'b':b,'c':c,'d':d,'e':e,'f':f,'g':g,'h':h,'i':i,'j':j,'convex_shape':convex_shape }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DrawQuadricImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def draw_quadric_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.DrawQuadricImageFilter
    draw_quadric_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    draw_quadric_image_filter.__doc__ = filter_object.__doc__



