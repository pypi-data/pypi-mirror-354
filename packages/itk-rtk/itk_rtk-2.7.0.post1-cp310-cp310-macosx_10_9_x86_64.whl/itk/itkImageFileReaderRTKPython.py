# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageFileReaderRTKPython
else:
    import _itkImageFileReaderRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceRTKPython
import itk.itkImageSourceCommonPython
import itk.itkImageRTKPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.ITKIOImageBaseBasePython

def itkImageFileReaderID1_New():
    return itkImageFileReaderID1.New()

class itkImageFileReaderID1(itk.itkImageSourceRTKPython.itkImageSourceID1):
    r"""Proxy of C++ itkImageFileReaderID1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderID1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderID1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderID1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderID1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderID1_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderID1

        Create a new object of the class itkImageFileReaderID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderID1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderID1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderID1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderID1 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderID1_swigregister(itkImageFileReaderID1)

def itkImageFileReaderIF1_New():
    return itkImageFileReaderIF1.New()

class itkImageFileReaderIF1(itk.itkImageSourceRTKPython.itkImageSourceIF1):
    r"""Proxy of C++ itkImageFileReaderIF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIF1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIF1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIF1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIF1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIF1_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIF1

        Create a new object of the class itkImageFileReaderIF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIF1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIF1 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIF1_swigregister(itkImageFileReaderIF1)

def itkImageFileReaderIUC1_New():
    return itkImageFileReaderIUC1.New()

class itkImageFileReaderIUC1(itk.itkImageSourceRTKPython.itkImageSourceIUC1):
    r"""Proxy of C++ itkImageFileReaderIUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIUC1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIUC1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIUC1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIUC1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUC1_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUC1

        Create a new object of the class itkImageFileReaderIUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUC1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUC1 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIUC1_swigregister(itkImageFileReaderIUC1)

def itkImageFileReaderIUS1_New():
    return itkImageFileReaderIUS1.New()

class itkImageFileReaderIUS1(itk.itkImageSourceRTKPython.itkImageSourceIUS1):
    r"""Proxy of C++ itkImageFileReaderIUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIUS1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIUS1_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIUS1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIUS1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIUS1_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUS1

        Create a new object of the class itkImageFileReaderIUS1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUS1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUS1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUS1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUS1 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIUS1_swigregister(itkImageFileReaderIUS1)

def itkImageFileReaderIVF52_New():
    return itkImageFileReaderIVF52.New()

class itkImageFileReaderIVF52(itk.itkImageSourceRTKPython.itkImageSourceIVF52):
    r"""Proxy of C++ itkImageFileReaderIVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF52_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF52_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIVF52

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF52

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF52_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF52

        Create a new object of the class itkImageFileReaderIVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF52.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF52 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIVF52_swigregister(itkImageFileReaderIVF52)

def itkImageFileReaderIVF53_New():
    return itkImageFileReaderIVF53.New()

class itkImageFileReaderIVF53(itk.itkImageSourceRTKPython.itkImageSourceIVF53):
    r"""Proxy of C++ itkImageFileReaderIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF53_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF53_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF53

        Create a new object of the class itkImageFileReaderIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF53 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIVF53_swigregister(itkImageFileReaderIVF53)

def itkImageFileReaderIVF54_New():
    return itkImageFileReaderIVF54.New()

class itkImageFileReaderIVF54(itk.itkImageSourceRTKPython.itkImageSourceIVF54):
    r"""Proxy of C++ itkImageFileReaderIVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkImageFileReaderIVF54_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkImageFileReaderIVF54_Pointer"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_Clone(self)

    def SetFileNameInput(self, _arg):
        r"""
        SetFileNameInput(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_SetFileNameInput(self, _arg)

    def SetFileName(self, *args):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: itkSimpleDataObjectDecoratorstring const *

        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string const &

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_SetFileName(self, *args)

    def GetFileNameInput(self):
        r"""GetFileNameInput(self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_GetFileNameInput(self)

    def GetFileName(self):
        r"""GetFileName(self) -> std::string const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_GetFileName(self)

    def SetImageIO(self, imageIO):
        r"""
        SetImageIO(self, imageIO)

        Parameters
        ----------
        imageIO: itkImageIOBase *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_SetImageIO(self, imageIO)

    def GetModifiableImageIO(self):
        r"""GetModifiableImageIO(self) -> itkImageIOBase"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_GetModifiableImageIO(self)

    def GetImageIO(self, *args):
        r"""
        GetImageIO(self) -> itkImageIOBase
        GetImageIO(self) -> itkImageIOBase
        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_GetImageIO(self, *args)

    def SetUseStreaming(self, _arg):
        r"""
        SetUseStreaming(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_SetUseStreaming(self, _arg)

    def GetUseStreaming(self):
        r"""GetUseStreaming(self) -> bool const &"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_GetUseStreaming(self)

    def UseStreamingOn(self):
        r"""UseStreamingOn(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_UseStreamingOn(self)

    def UseStreamingOff(self):
        r"""UseStreamingOff(self)"""
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_UseStreamingOff(self)
    __swig_destroy__ = _itkImageFileReaderRTKPython.delete_itkImageFileReaderIVF54

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkImageFileReaderIVF54

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkImageFileReaderRTKPython.itkImageFileReaderIVF54_cast(obj)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF54

        Create a new object of the class itkImageFileReaderIVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF54.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF54 in _itkImageFileReaderRTKPython:
_itkImageFileReaderRTKPython.itkImageFileReaderIVF54_swigregister(itkImageFileReaderIVF54)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_file_reader(*args,  file_name_input=..., file_name: str=..., image_io=..., use_streaming: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageFileReader"""
    import itk

    kwarg_typehints = { 'file_name_input':file_name_input,'file_name':file_name,'image_io':image_io,'use_streaming':use_streaming }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageFileReader.New(*args, **kwargs)

    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ImageFileReader
    image_file_reader.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_file_reader.__doc__ = filter_object.__doc__



