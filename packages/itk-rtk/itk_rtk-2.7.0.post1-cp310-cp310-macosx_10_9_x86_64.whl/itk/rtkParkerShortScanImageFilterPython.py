# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkParkerShortScanImageFilterPython
else:
    import _rtkParkerShortScanImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython

def rtkParkerShortScanImageFilterID2_New():
    return rtkParkerShortScanImageFilterID2.New()

class rtkParkerShortScanImageFilterID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ rtkParkerShortScanImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterID2_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterID2_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterID2

        Create a new object of the class rtkParkerShortScanImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterID2 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID2_swigregister(rtkParkerShortScanImageFilterID2)

def rtkParkerShortScanImageFilterID3_New():
    return rtkParkerShortScanImageFilterID3.New()

class rtkParkerShortScanImageFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkParkerShortScanImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterID3_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterID3_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterID3

        Create a new object of the class rtkParkerShortScanImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterID3 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID3_swigregister(rtkParkerShortScanImageFilterID3)

def rtkParkerShortScanImageFilterID4_New():
    return rtkParkerShortScanImageFilterID4.New()

class rtkParkerShortScanImageFilterID4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ rtkParkerShortScanImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterID4_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterID4_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterID4

        Create a new object of the class rtkParkerShortScanImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterID4 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterID4_swigregister(rtkParkerShortScanImageFilterID4)

def rtkParkerShortScanImageFilterIF2_New():
    return rtkParkerShortScanImageFilterIF2.New()

class rtkParkerShortScanImageFilterIF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ rtkParkerShortScanImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterIF2_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterIF2_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterIF2

        Create a new object of the class rtkParkerShortScanImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterIF2 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF2_swigregister(rtkParkerShortScanImageFilterIF2)

def rtkParkerShortScanImageFilterIF3_New():
    return rtkParkerShortScanImageFilterIF3.New()

class rtkParkerShortScanImageFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkParkerShortScanImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterIF3_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterIF3_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterIF3

        Create a new object of the class rtkParkerShortScanImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterIF3 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF3_swigregister(rtkParkerShortScanImageFilterIF3)

def rtkParkerShortScanImageFilterIF4_New():
    return rtkParkerShortScanImageFilterIF4.New()

class rtkParkerShortScanImageFilterIF4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ rtkParkerShortScanImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkParkerShortScanImageFilterIF4_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkParkerShortScanImageFilterIF4_Pointer"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_Clone(self)

    def GetModifiableGeometry(self):
        r"""GetModifiableGeometry(self) -> rtkThreeDCircularProjectionGeometry"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_GetModifiableGeometry(self)

    def GetGeometry(self, *args):
        r"""
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        GetGeometry(self) -> rtkThreeDCircularProjectionGeometry
        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_GetGeometry(self, *args)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_SetGeometry(self, _arg)

    def GetAngularGapThreshold(self):
        r"""GetAngularGapThreshold(self) -> double"""
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_GetAngularGapThreshold(self)

    def SetAngularGapThreshold(self, _arg):
        r"""
        SetAngularGapThreshold(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_SetAngularGapThreshold(self, _arg)
    __swig_destroy__ = _rtkParkerShortScanImageFilterPython.delete_rtkParkerShortScanImageFilterIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkParkerShortScanImageFilterIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkParkerShortScanImageFilterIF4

        Create a new object of the class rtkParkerShortScanImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkParkerShortScanImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkParkerShortScanImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkParkerShortScanImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkParkerShortScanImageFilterIF4 in _rtkParkerShortScanImageFilterPython:
_rtkParkerShortScanImageFilterPython.rtkParkerShortScanImageFilterIF4_swigregister(rtkParkerShortScanImageFilterIF4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parker_short_scan_image_filter(*args: itkt.ImageLike,  geometry=..., angular_gap_threshold: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParkerShortScanImageFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'angular_gap_threshold':angular_gap_threshold }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ParkerShortScanImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def parker_short_scan_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ParkerShortScanImageFilter
    parker_short_scan_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parker_short_scan_image_filter.__doc__ = filter_object.__doc__



