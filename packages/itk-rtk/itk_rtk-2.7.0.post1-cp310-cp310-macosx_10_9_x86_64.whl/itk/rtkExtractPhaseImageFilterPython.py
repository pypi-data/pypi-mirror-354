# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkExtractPhaseImageFilterPython
else:
    import _rtkExtractPhaseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython

def rtkExtractPhaseImageFilterID1_New():
    return rtkExtractPhaseImageFilterID1.New()

class rtkExtractPhaseImageFilterID1(itk.itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterID1ID1):
    r"""Proxy of C++ rtkExtractPhaseImageFilterID1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ModelType_LOCAL_PHASE = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_ModelType_LOCAL_PHASE
    
    ModelType_LINEAR_BETWEEN_MINIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_ModelType_LINEAR_BETWEEN_MINIMA
    
    ModelType_LINEAR_BETWEEN_MAXIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_ModelType_LINEAR_BETWEEN_MAXIMA
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkExtractPhaseImageFilterID1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkExtractPhaseImageFilterID1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_Clone(self)

    def SetMovingAverageSize(self, _arg):
        r"""
        SetMovingAverageSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetMovingAverageSize(self, _arg)

    def GetMovingAverageSize(self):
        r"""GetMovingAverageSize(self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMovingAverageSize(self)

    def SetUnsharpMaskSize(self, _arg):
        r"""
        SetUnsharpMaskSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetUnsharpMaskSize(self, _arg)

    def GetUnsharpMaskSize(self):
        r"""GetUnsharpMaskSize(self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetUnsharpMaskSize(self)

    def GetMinimaPositions(self):
        r"""GetMinimaPositions(self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMinimaPositions(self)

    def GetMaximaPositions(self):
        r"""GetMaximaPositions(self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetMaximaPositions(self)

    def SetModel(self, _arg):
        r"""
        SetModel(self, _arg)

        Parameters
        ----------
        _arg: enum rtkExtractPhaseImageFilterID1::ModelType

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_SetModel(self, _arg)

    def GetModel(self):
        r"""GetModel(self) -> rtkExtractPhaseImageFilterID1::ModelType"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_GetModel(self)
    __swig_destroy__ = _rtkExtractPhaseImageFilterPython.delete_rtkExtractPhaseImageFilterID1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkExtractPhaseImageFilterID1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkExtractPhaseImageFilterID1

        Create a new object of the class rtkExtractPhaseImageFilterID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkExtractPhaseImageFilterID1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkExtractPhaseImageFilterID1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkExtractPhaseImageFilterID1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkExtractPhaseImageFilterID1 in _rtkExtractPhaseImageFilterPython:
_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterID1_swigregister(rtkExtractPhaseImageFilterID1)

def rtkExtractPhaseImageFilterIF1_New():
    return rtkExtractPhaseImageFilterIF1.New()

class rtkExtractPhaseImageFilterIF1(itk.itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterIF1IF1):
    r"""Proxy of C++ rtkExtractPhaseImageFilterIF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ModelType_LOCAL_PHASE = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_ModelType_LOCAL_PHASE
    
    ModelType_LINEAR_BETWEEN_MINIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_ModelType_LINEAR_BETWEEN_MINIMA
    
    ModelType_LINEAR_BETWEEN_MAXIMA = _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_ModelType_LINEAR_BETWEEN_MAXIMA
    

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkExtractPhaseImageFilterIF1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkExtractPhaseImageFilterIF1_Pointer"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_Clone(self)

    def SetMovingAverageSize(self, _arg):
        r"""
        SetMovingAverageSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetMovingAverageSize(self, _arg)

    def GetMovingAverageSize(self):
        r"""GetMovingAverageSize(self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMovingAverageSize(self)

    def SetUnsharpMaskSize(self, _arg):
        r"""
        SetUnsharpMaskSize(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetUnsharpMaskSize(self, _arg)

    def GetUnsharpMaskSize(self):
        r"""GetUnsharpMaskSize(self) -> unsigned long"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetUnsharpMaskSize(self)

    def GetMinimaPositions(self):
        r"""GetMinimaPositions(self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMinimaPositions(self)

    def GetMaximaPositions(self):
        r"""GetMaximaPositions(self) -> vectorI"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetMaximaPositions(self)

    def SetModel(self, _arg):
        r"""
        SetModel(self, _arg)

        Parameters
        ----------
        _arg: enum rtkExtractPhaseImageFilterIF1::ModelType

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_SetModel(self, _arg)

    def GetModel(self):
        r"""GetModel(self) -> rtkExtractPhaseImageFilterIF1::ModelType"""
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_GetModel(self)
    __swig_destroy__ = _rtkExtractPhaseImageFilterPython.delete_rtkExtractPhaseImageFilterIF1

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkExtractPhaseImageFilterIF1

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkExtractPhaseImageFilterIF1

        Create a new object of the class rtkExtractPhaseImageFilterIF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkExtractPhaseImageFilterIF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkExtractPhaseImageFilterIF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkExtractPhaseImageFilterIF1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkExtractPhaseImageFilterIF1 in _rtkExtractPhaseImageFilterPython:
_rtkExtractPhaseImageFilterPython.rtkExtractPhaseImageFilterIF1_swigregister(rtkExtractPhaseImageFilterIF1)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def extract_phase_image_filter(*args: itkt.ImageLike,  moving_average_size: int=..., unsharp_mask_size: int=..., model=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ExtractPhaseImageFilter"""
    import itk

    kwarg_typehints = { 'moving_average_size':moving_average_size,'unsharp_mask_size':unsharp_mask_size,'model':model }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ExtractPhaseImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def extract_phase_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ExtractPhaseImageFilter
    extract_phase_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    extract_phase_image_filter.__doc__ = filter_object.__doc__



