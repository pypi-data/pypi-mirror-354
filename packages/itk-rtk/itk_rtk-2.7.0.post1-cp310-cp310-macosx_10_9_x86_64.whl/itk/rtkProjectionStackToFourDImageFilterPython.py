# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkProjectionStackToFourDImageFilterPython
else:
    import _rtkProjectionStackToFourDImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkArray2DPython
import itk.itkImageRTKPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython

def rtkProjectionStackToFourDImageFilterID4ID3D_New():
    return rtkProjectionStackToFourDImageFilterID4ID3D.New()

class rtkProjectionStackToFourDImageFilterID4ID3D(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkProjectionStackToFourDImageFilterID4ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkProjectionStackToFourDImageFilterID4ID3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkProjectionStackToFourDImageFilterID4ID3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_Clone(self)

    def SetInputVolumeSeries(self, VolumeSeries):
        r"""
        SetInputVolumeSeries(self, VolumeSeries)

        Parameters
        ----------
        VolumeSeries: itkImageD4 const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetInputVolumeSeries(self, VolumeSeries)

    def GetInputVolumeSeries(self):
        r"""GetInputVolumeSeries(self) -> itkImageD4_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetInputVolumeSeries(self)

    def SetInputProjectionStack(self, Projection):
        r"""
        SetInputProjectionStack(self, Projection)

        Parameters
        ----------
        Projection: itkImageD3 const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetInputProjectionStack(self, Projection)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageD3_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetInputProjectionStack(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkBackProjectionImageFilterID3ID3 *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetBackProjectionFilter(self, _arg)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetGeometry(self, _arg)

    def SetUseCudaSplat(self, _arg):
        r"""
        SetUseCudaSplat(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetUseCudaSplat(self, _arg)

    def GetUseCudaSplat(self):
        r"""GetUseCudaSplat(self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetUseCudaSplat(self)

    def SetUseCudaSources(self, _arg):
        r"""
        SetUseCudaSources(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetUseCudaSources(self, _arg)

    def GetUseCudaSources(self):
        r"""GetUseCudaSources(self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetUseCudaSources(self)

    def GetWeights(self):
        r"""GetWeights(self) -> itkArray2DF"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_GetWeights(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkArray2DF

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetWeights(self, _arg)

    def SetSignal(self, signal):
        r"""
        SetSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_SetSignal(self, signal)
    __swig_destroy__ = _rtkProjectionStackToFourDImageFilterPython.delete_rtkProjectionStackToFourDImageFilterID4ID3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkProjectionStackToFourDImageFilterID4ID3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkProjectionStackToFourDImageFilterID4ID3D

        Create a new object of the class rtkProjectionStackToFourDImageFilterID4ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectionStackToFourDImageFilterID4ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectionStackToFourDImageFilterID4ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectionStackToFourDImageFilterID4ID3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectionStackToFourDImageFilterID4ID3D in _rtkProjectionStackToFourDImageFilterPython:
_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterID4ID3D_swigregister(rtkProjectionStackToFourDImageFilterID4ID3D)

def rtkProjectionStackToFourDImageFilterIF4IF3D_New():
    return rtkProjectionStackToFourDImageFilterIF4IF3D.New()

class rtkProjectionStackToFourDImageFilterIF4IF3D(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkProjectionStackToFourDImageFilterIF4IF3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkProjectionStackToFourDImageFilterIF4IF3D_Pointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_Clone(self)

    def SetInputVolumeSeries(self, VolumeSeries):
        r"""
        SetInputVolumeSeries(self, VolumeSeries)

        Parameters
        ----------
        VolumeSeries: itkImageF4 const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputVolumeSeries(self, VolumeSeries)

    def GetInputVolumeSeries(self):
        r"""GetInputVolumeSeries(self) -> itkImageF4_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputVolumeSeries(self)

    def SetInputProjectionStack(self, Projection):
        r"""
        SetInputProjectionStack(self, Projection)

        Parameters
        ----------
        Projection: itkImageF3 const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetInputProjectionStack(self, Projection)

    def GetInputProjectionStack(self):
        r"""GetInputProjectionStack(self) -> itkImageF3_ConstPointer"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetInputProjectionStack(self)

    def SetBackProjectionFilter(self, _arg):
        r"""
        SetBackProjectionFilter(self, _arg)

        Parameters
        ----------
        _arg: rtkBackProjectionImageFilterIF3IF3 *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetBackProjectionFilter(self, _arg)

    def SetGeometry(self, _arg):
        r"""
        SetGeometry(self, _arg)

        Parameters
        ----------
        _arg: rtkThreeDCircularProjectionGeometry const *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetGeometry(self, _arg)

    def SetUseCudaSplat(self, _arg):
        r"""
        SetUseCudaSplat(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSplat(self, _arg)

    def GetUseCudaSplat(self):
        r"""GetUseCudaSplat(self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSplat(self)

    def SetUseCudaSources(self, _arg):
        r"""
        SetUseCudaSources(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetUseCudaSources(self, _arg)

    def GetUseCudaSources(self):
        r"""GetUseCudaSources(self) -> bool"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetUseCudaSources(self)

    def GetWeights(self):
        r"""GetWeights(self) -> itkArray2DF"""
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_GetWeights(self)

    def SetWeights(self, _arg):
        r"""
        SetWeights(self, _arg)

        Parameters
        ----------
        _arg: itkArray2DF

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetWeights(self, _arg)

    def SetSignal(self, signal):
        r"""
        SetSignal(self, signal)

        Parameters
        ----------
        signal: std::vector< double,std::allocator< double > > const

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_SetSignal(self, signal)
    __swig_destroy__ = _rtkProjectionStackToFourDImageFilterPython.delete_rtkProjectionStackToFourDImageFilterIF4IF3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkProjectionStackToFourDImageFilterIF4IF3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkProjectionStackToFourDImageFilterIF4IF3D

        Create a new object of the class rtkProjectionStackToFourDImageFilterIF4IF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkProjectionStackToFourDImageFilterIF4IF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkProjectionStackToFourDImageFilterIF4IF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkProjectionStackToFourDImageFilterIF4IF3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkProjectionStackToFourDImageFilterIF4IF3D in _rtkProjectionStackToFourDImageFilterPython:
_rtkProjectionStackToFourDImageFilterPython.rtkProjectionStackToFourDImageFilterIF4IF3D_swigregister(rtkProjectionStackToFourDImageFilterIF4IF3D)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def projection_stack_to_four_d_image_filter(*args: itkt.ImageLike,  input_volume_series: itkt.Image=..., input_projection_stack: itkt.Image=..., back_projection_filter=..., geometry=..., use_cuda_splat: bool=..., use_cuda_sources: bool=..., weights=..., signal: Sequence[float]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ProjectionStackToFourDImageFilter"""
    import itk

    kwarg_typehints = { 'input_volume_series':input_volume_series,'input_projection_stack':input_projection_stack,'back_projection_filter':back_projection_filter,'geometry':geometry,'use_cuda_splat':use_cuda_splat,'use_cuda_sources':use_cuda_sources,'weights':weights,'signal':signal }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ProjectionStackToFourDImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def projection_stack_to_four_d_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ProjectionStackToFourDImageFilter
    projection_stack_to_four_d_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    projection_stack_to_four_d_image_filter.__doc__ = filter_object.__doc__



