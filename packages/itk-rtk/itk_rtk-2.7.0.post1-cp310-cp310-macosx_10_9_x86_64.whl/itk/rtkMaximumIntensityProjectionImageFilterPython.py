# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkMaximumIntensityProjectionImageFilterPython
else:
    import _rtkMaximumIntensityProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
class rtkInterpolationWeightMultiplicationDD(object):
    r"""Proxy of C++ rtkInterpolationWeightMultiplicationDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkInterpolationWeightMultiplicationDD

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkInterpolationWeightMultiplicationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkInterpolationWeightMultiplicationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationDD___eq__(self, other)

    def __call__(self, arg0, arg1, weight, p, i):
        r"""
        __call__(self, arg0, arg1, weight, p, i) -> double

        Parameters
        ----------
        arg0: unsigned int const
        arg1: double const
        weight: double const
        p: double const *
        i: int const

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationDD___call__(self, arg0, arg1, weight, p, i)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkInterpolationWeightMultiplicationDD
        __init__(self, arg0) -> rtkInterpolationWeightMultiplicationDD

        Parameters
        ----------
        arg0: rtkInterpolationWeightMultiplicationDD const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationDD_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkInterpolationWeightMultiplicationDD(*args))

# Register rtkInterpolationWeightMultiplicationDD in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationDD_swigregister(rtkInterpolationWeightMultiplicationDD)
class rtkInterpolationWeightMultiplicationFF(object):
    r"""Proxy of C++ rtkInterpolationWeightMultiplicationFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkInterpolationWeightMultiplicationFF

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkInterpolationWeightMultiplicationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationFF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkInterpolationWeightMultiplicationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationFF___eq__(self, other)

    def __call__(self, arg0, arg1, weight, p, i):
        r"""
        __call__(self, arg0, arg1, weight, p, i) -> float

        Parameters
        ----------
        arg0: unsigned int const
        arg1: double const
        weight: float const
        p: float const *
        i: int const

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationFF___call__(self, arg0, arg1, weight, p, i)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkInterpolationWeightMultiplicationFF
        __init__(self, arg0) -> rtkInterpolationWeightMultiplicationFF

        Parameters
        ----------
        arg0: rtkInterpolationWeightMultiplicationFF const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationFF_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkInterpolationWeightMultiplicationFF(*args))

# Register rtkInterpolationWeightMultiplicationFF in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkInterpolationWeightMultiplicationFF_swigregister(rtkInterpolationWeightMultiplicationFF)

def rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_New():
    return rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3.New()

class rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationDD
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationDD
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkInterpolationWeightMultiplicationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtkMaximumIntensityProjectedValueAccumulationDD
        GetProjectedValueAccumulation(self) -> rtkMaximumIntensityProjectedValueAccumulationDD
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtkMaximumIntensityProjectedValueAccumulationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtkMaximumIntensityAlongRayDD
        GetSumAlongRay(self) -> rtkMaximumIntensityAlongRayDD
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtkMaximumIntensityAlongRayDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3

        Create a new object of the class rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3 in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3_swigregister(rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3)

def rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_New():
    return rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3.New()

class rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationFF
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationFF
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkInterpolationWeightMultiplicationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtkMaximumIntensityProjectedValueAccumulationFF
        GetProjectedValueAccumulation(self) -> rtkMaximumIntensityProjectedValueAccumulationFF
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtkMaximumIntensityProjectedValueAccumulationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtkMaximumIntensityAlongRayFF
        GetSumAlongRay(self) -> rtkMaximumIntensityAlongRayFF
        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtkMaximumIntensityAlongRayFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3

        Create a new object of the class rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3 in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3_swigregister(rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3)
class rtkMaximumIntensityAlongRayDD(object):
    r"""Proxy of C++ rtkMaximumIntensityAlongRayDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityAlongRayDD

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkMaximumIntensityAlongRayDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkMaximumIntensityAlongRayDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayDD___eq__(self, other)

    def __call__(self, arg0, mipValue, volumeValue, arg3):
        r"""
        __call__(self, arg0, mipValue, volumeValue, arg3)

        Parameters
        ----------
        arg0: unsigned int const
        mipValue: double &
        volumeValue: double const
        arg3: itkVectorD3 const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayDD___call__(self, arg0, mipValue, volumeValue, arg3)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkMaximumIntensityAlongRayDD
        __init__(self, arg0) -> rtkMaximumIntensityAlongRayDD

        Parameters
        ----------
        arg0: rtkMaximumIntensityAlongRayDD const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayDD_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkMaximumIntensityAlongRayDD(*args))

# Register rtkMaximumIntensityAlongRayDD in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayDD_swigregister(rtkMaximumIntensityAlongRayDD)
class rtkMaximumIntensityAlongRayFF(object):
    r"""Proxy of C++ rtkMaximumIntensityAlongRayFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityAlongRayFF

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkMaximumIntensityAlongRayFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayFF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkMaximumIntensityAlongRayFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayFF___eq__(self, other)

    def __call__(self, arg0, mipValue, volumeValue, arg3):
        r"""
        __call__(self, arg0, mipValue, volumeValue, arg3)

        Parameters
        ----------
        arg0: unsigned int const
        mipValue: float &
        volumeValue: float const
        arg3: itkVectorD3 const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayFF___call__(self, arg0, mipValue, volumeValue, arg3)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkMaximumIntensityAlongRayFF
        __init__(self, arg0) -> rtkMaximumIntensityAlongRayFF

        Parameters
        ----------
        arg0: rtkMaximumIntensityAlongRayFF const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayFF_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkMaximumIntensityAlongRayFF(*args))

# Register rtkMaximumIntensityAlongRayFF in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityAlongRayFF_swigregister(rtkMaximumIntensityAlongRayFF)
class rtkMaximumIntensityProjectedValueAccumulationDD(object):
    r"""Proxy of C++ rtkMaximumIntensityProjectedValueAccumulationDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkMaximumIntensityProjectedValueAccumulationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationDD___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkMaximumIntensityProjectedValueAccumulationDD const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationDD___eq__(self, other)

    def __call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8):
        r"""
        __call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8)

        Parameters
        ----------
        arg0: unsigned int const
        input: double const &
        output: double &
        rayCastValue: double const &
        stepInMM: itkVectorD3 const &
        arg5: itkVectorD3 const &
        arg6: itkVectorD3 const &
        arg7: itkVectorD3 const &
        arg8: itkVectorD3 const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationDD___call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityProjectedValueAccumulationDD

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkMaximumIntensityProjectedValueAccumulationDD
        __init__(self, arg0) -> rtkMaximumIntensityProjectedValueAccumulationDD

        Parameters
        ----------
        arg0: rtkMaximumIntensityProjectedValueAccumulationDD const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationDD_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkMaximumIntensityProjectedValueAccumulationDD(*args))

# Register rtkMaximumIntensityProjectedValueAccumulationDD in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationDD_swigregister(rtkMaximumIntensityProjectedValueAccumulationDD)
class rtkMaximumIntensityProjectedValueAccumulationFF(object):
    r"""Proxy of C++ rtkMaximumIntensityProjectedValueAccumulationFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __ne__(self, arg0):
        r"""
        __ne__(self, arg0) -> bool

        Parameters
        ----------
        arg0: rtkMaximumIntensityProjectedValueAccumulationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationFF___ne__(self, arg0)

    def __eq__(self, other):
        r"""
        __eq__(self, other) -> bool

        Parameters
        ----------
        other: rtkMaximumIntensityProjectedValueAccumulationFF const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationFF___eq__(self, other)

    def __call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8):
        r"""
        __call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8)

        Parameters
        ----------
        arg0: unsigned int const
        input: float const &
        output: float &
        rayCastValue: float const &
        stepInMM: itkVectorD3 const &
        arg5: itkVectorD3 const &
        arg6: itkVectorD3 const &
        arg7: itkVectorD3 const &
        arg8: itkVectorD3 const &

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationFF___call__(self, arg0, input, output, rayCastValue, stepInMM, arg5, arg6, arg7, arg8)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityProjectedValueAccumulationFF

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkMaximumIntensityProjectedValueAccumulationFF
        __init__(self, arg0) -> rtkMaximumIntensityProjectedValueAccumulationFF

        Parameters
        ----------
        arg0: rtkMaximumIntensityProjectedValueAccumulationFF const &

        """
        _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationFF_swiginit(self, _rtkMaximumIntensityProjectionImageFilterPython.new_rtkMaximumIntensityProjectedValueAccumulationFF(*args))

# Register rtkMaximumIntensityProjectedValueAccumulationFF in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectedValueAccumulationFF_swigregister(rtkMaximumIntensityProjectedValueAccumulationFF)

def rtkMaximumIntensityProjectionImageFilterID3ID3_New():
    return rtkMaximumIntensityProjectionImageFilterID3ID3.New()

class rtkMaximumIntensityProjectionImageFilterID3ID3(rtkJosephForwardProjectionImageFilterID3ID3FWMID3ID3FVAID3ID3FIAID3ID3):
    r"""Proxy of C++ rtkMaximumIntensityProjectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkMaximumIntensityProjectionImageFilterID3ID3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkMaximumIntensityProjectionImageFilterID3ID3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityProjectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkMaximumIntensityProjectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkMaximumIntensityProjectionImageFilterID3ID3

        Create a new object of the class rtkMaximumIntensityProjectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkMaximumIntensityProjectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkMaximumIntensityProjectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkMaximumIntensityProjectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkMaximumIntensityProjectionImageFilterID3ID3 in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterID3ID3_swigregister(rtkMaximumIntensityProjectionImageFilterID3ID3)

def rtkMaximumIntensityProjectionImageFilterIF3IF3_New():
    return rtkMaximumIntensityProjectionImageFilterIF3IF3.New()

class rtkMaximumIntensityProjectionImageFilterIF3IF3(rtkJosephForwardProjectionImageFilterIF3IF3FWMIF3IF3FVAIF3IF3FIAIF3IF3):
    r"""Proxy of C++ rtkMaximumIntensityProjectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkMaximumIntensityProjectionImageFilterIF3IF3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkMaximumIntensityProjectionImageFilterIF3IF3_Pointer"""
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _rtkMaximumIntensityProjectionImageFilterPython.delete_rtkMaximumIntensityProjectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkMaximumIntensityProjectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkMaximumIntensityProjectionImageFilterIF3IF3

        Create a new object of the class rtkMaximumIntensityProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkMaximumIntensityProjectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkMaximumIntensityProjectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkMaximumIntensityProjectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkMaximumIntensityProjectionImageFilterIF3IF3 in _rtkMaximumIntensityProjectionImageFilterPython:
_rtkMaximumIntensityProjectionImageFilterPython.rtkMaximumIntensityProjectionImageFilterIF3IF3_swigregister(rtkMaximumIntensityProjectionImageFilterIF3IF3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def maximum_intensity_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., projected_value_accumulation=..., sum_along_ray=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., inferior_clip: float=..., superior_clip: float=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MaximumIntensityProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'projected_value_accumulation':projected_value_accumulation,'sum_along_ray':sum_along_ray,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MaximumIntensityProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def maximum_intensity_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.MaximumIntensityProjectionImageFilter
    maximum_intensity_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    maximum_intensity_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_forward_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., projected_value_accumulation=..., sum_along_ray=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., inferior_clip: float=..., superior_clip: float=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephForwardProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'projected_value_accumulation':projected_value_accumulation,'sum_along_ray':sum_along_ray,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephForwardProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_forward_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephForwardProjectionImageFilter
    joseph_forward_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_forward_projection_image_filter.__doc__ = filter_object.__doc__



