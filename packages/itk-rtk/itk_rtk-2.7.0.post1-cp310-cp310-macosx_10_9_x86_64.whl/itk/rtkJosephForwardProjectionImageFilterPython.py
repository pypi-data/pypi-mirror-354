# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkJosephForwardProjectionImageFilterPython
else:
    import _rtkJosephForwardProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkMaximumIntensityProjectionImageFilterPython

def rtkJosephForwardProjectionImageFilterID3ID3_New():
    return rtkJosephForwardProjectionImageFilterID3ID3.New()

class rtkJosephForwardProjectionImageFilterID3ID3(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterID3ID3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterID3ID3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationDD
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationDD
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkInterpolationWeightMultiplicationDD const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< double,double >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< double,double > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< double,double > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< double,double >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< double,double > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< double,double > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterID3ID3

        Create a new object of the class rtkJosephForwardProjectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterID3ID3 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3_swigregister(rtkJosephForwardProjectionImageFilterID3ID3)

def rtkJosephForwardProjectionImageFilterIF3IF3_New():
    return rtkJosephForwardProjectionImageFilterIF3IF3.New()

class rtkJosephForwardProjectionImageFilterIF3IF3(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIF3IF3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIF3IF3_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationFF
        GetInterpolationWeightMultiplication(self) -> rtkInterpolationWeightMultiplicationFF
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtkInterpolationWeightMultiplicationFF const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< float,float >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< float,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< float,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< float,float >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< float,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< float,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIF3IF3

        Create a new object of the class rtkJosephForwardProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIF3IF3 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3_swigregister(rtkJosephForwardProjectionImageFilterIF3IF3)

def rtkJosephForwardProjectionImageFilterIVF23IVF23_New():
    return rtkJosephForwardProjectionImageFilterIVF23IVF23.New()

class rtkJosephForwardProjectionImageFilterIVF23IVF23(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIVF23IVF23):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIVF23IVF23_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIVF23IVF23_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,2 >,float >
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,2 >,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,2 >,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,2 >,itk::Vector< float,2 > >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,2 >,itk::Vector< float,2 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,2 >,itk::Vector< float,2 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,2 >,itk::Vector< float,2 > >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,2 >,itk::Vector< float,2 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< itk::Vector< float,2 >,itk::Vector< float,2 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIVF23IVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIVF23IVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIVF23IVF23

        Create a new object of the class rtkJosephForwardProjectionImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIVF23IVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIVF23IVF23 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF23IVF23_swigregister(rtkJosephForwardProjectionImageFilterIVF23IVF23)

def rtkJosephForwardProjectionImageFilterIVF33IVF33_New():
    return rtkJosephForwardProjectionImageFilterIVF33IVF33.New()

class rtkJosephForwardProjectionImageFilterIVF33IVF33(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIVF33IVF33):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIVF33IVF33_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIVF33IVF33_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float >,float >
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float >,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float >,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float >,itk::Vector< float > >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float >,itk::Vector< float > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< itk::Vector< float >,itk::Vector< float > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float >,itk::Vector< float > >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float >,itk::Vector< float > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< itk::Vector< float >,itk::Vector< float > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIVF33IVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIVF33IVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIVF33IVF33

        Create a new object of the class rtkJosephForwardProjectionImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIVF33IVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIVF33IVF33 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF33IVF33_swigregister(rtkJosephForwardProjectionImageFilterIVF33IVF33)

def rtkJosephForwardProjectionImageFilterIVF43IVF43_New():
    return rtkJosephForwardProjectionImageFilterIVF43IVF43.New()

class rtkJosephForwardProjectionImageFilterIVF43IVF43(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIVF43IVF43):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIVF43IVF43_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIVF43IVF43_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,4 >,float >
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,4 >,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,4 >,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,4 >,itk::Vector< float,4 > >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,4 >,itk::Vector< float,4 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,4 >,itk::Vector< float,4 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,4 >,itk::Vector< float,4 > >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,4 >,itk::Vector< float,4 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< itk::Vector< float,4 >,itk::Vector< float,4 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIVF43IVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIVF43IVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIVF43IVF43

        Create a new object of the class rtkJosephForwardProjectionImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIVF43IVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIVF43IVF43 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF43IVF43_swigregister(rtkJosephForwardProjectionImageFilterIVF43IVF43)

def rtkJosephForwardProjectionImageFilterIVF53IVF53_New():
    return rtkJosephForwardProjectionImageFilterIVF53IVF53.New()

class rtkJosephForwardProjectionImageFilterIVF53IVF53(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIVF53IVF53):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIVF53IVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkJosephForwardProjectionImageFilterIVF53IVF53_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkJosephForwardProjectionImageFilterIVF53IVF53_Pointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_Clone(self)

    def GetInterpolationWeightMultiplication(self, *args):
        r"""
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,5 >,float >
        GetInterpolationWeightMultiplication(self) -> rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,5 >,float > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetInterpolationWeightMultiplication(self, *args)

    def SetInterpolationWeightMultiplication(self, _arg):
        r"""
        SetInterpolationWeightMultiplication(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::InterpolationWeightMultiplication< itk::Vector< float,5 >,float > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetInterpolationWeightMultiplication(self, _arg)

    def GetProjectedValueAccumulation(self, *args):
        r"""
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,5 >,itk::Vector< float,5 > >
        GetProjectedValueAccumulation(self) -> rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,5 >,itk::Vector< float,5 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetProjectedValueAccumulation(self, *args)

    def SetProjectedValueAccumulation(self, _arg):
        r"""
        SetProjectedValueAccumulation(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::ProjectedValueAccumulation< itk::Vector< float,5 >,itk::Vector< float,5 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetProjectedValueAccumulation(self, _arg)

    def GetSumAlongRay(self, *args):
        r"""
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,5 >,itk::Vector< float,5 > >
        GetSumAlongRay(self) -> rtk::Functor::SumAlongRay< itk::Vector< float,5 >,itk::Vector< float,5 > > const &
        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetSumAlongRay(self, *args)

    def SetSumAlongRay(self, _arg):
        r"""
        SetSumAlongRay(self, _arg)

        Parameters
        ----------
        _arg: rtk::Functor::SumAlongRay< itk::Vector< float,5 >,itk::Vector< float,5 > > const &

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetSumAlongRay(self, _arg)

    def SetInferiorClipImage(self, inferiorClipImage):
        r"""
        SetInferiorClipImage(self, inferiorClipImage)

        Parameters
        ----------
        inferiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetInferiorClipImage(self, inferiorClipImage)

    def GetInferiorClipImage(self):
        r"""GetInferiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetInferiorClipImage(self)

    def SetSuperiorClipImage(self, superiorClipImage):
        r"""
        SetSuperiorClipImage(self, superiorClipImage)

        Parameters
        ----------
        superiorClipImage: itkImageD3 const *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetSuperiorClipImage(self, superiorClipImage)

    def GetSuperiorClipImage(self):
        r"""GetSuperiorClipImage(self) -> itkImageD3_ConstPointer"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetSuperiorClipImage(self)

    def GetInferiorClip(self):
        r"""GetInferiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetInferiorClip(self)

    def SetInferiorClip(self, _arg):
        r"""
        SetInferiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetInferiorClip(self, _arg)

    def GetSuperiorClip(self):
        r"""GetSuperiorClip(self) -> double"""
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_GetSuperiorClip(self)

    def SetSuperiorClip(self, _arg):
        r"""
        SetSuperiorClip(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_SetSuperiorClip(self, _arg)
    __swig_destroy__ = _rtkJosephForwardProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIVF53IVF53

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkJosephForwardProjectionImageFilterIVF53IVF53

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIVF53IVF53

        Create a new object of the class rtkJosephForwardProjectionImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIVF53IVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIVF53IVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIVF53IVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIVF53IVF53 in _rtkJosephForwardProjectionImageFilterPython:
_rtkJosephForwardProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIVF53IVF53_swigregister(rtkJosephForwardProjectionImageFilterIVF53IVF53)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_forward_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., projected_value_accumulation=..., sum_along_ray=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., inferior_clip: float=..., superior_clip: float=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephForwardProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'projected_value_accumulation':projected_value_accumulation,'sum_along_ray':sum_along_ray,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephForwardProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_forward_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephForwardProjectionImageFilter
    joseph_forward_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_forward_projection_image_filter.__doc__ = filter_object.__doc__



