# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkConstantImageSourcePython
else:
    import _rtkConstantImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def rtkConstantImageSourceID2_New():
    return rtkConstantImageSourceID2.New()

class rtkConstantImageSourceID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ rtkConstantImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceID2_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceID2_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize2
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceID2

        Create a new object of the class rtkConstantImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceID2 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceID2_swigregister(rtkConstantImageSourceID2)

def rtkConstantImageSourceID3_New():
    return rtkConstantImageSourceID3.New()

class rtkConstantImageSourceID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ rtkConstantImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceID3_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceID3_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize3
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceID3

        Create a new object of the class rtkConstantImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceID3 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceID3_swigregister(rtkConstantImageSourceID3)

def rtkConstantImageSourceID4_New():
    return rtkConstantImageSourceID4.New()

class rtkConstantImageSourceID4(itk.itkImageSourcePython.itkImageSourceID4):
    r"""Proxy of C++ rtkConstantImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceID4_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceID4_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize4
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> double"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceID4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceID4

        Create a new object of the class rtkConstantImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceID4 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceID4_swigregister(rtkConstantImageSourceID4)

def rtkConstantImageSourceIF2_New():
    return rtkConstantImageSourceIF2.New()

class rtkConstantImageSourceIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ rtkConstantImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIF2_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIF2_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize2
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> float"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIF2

        Create a new object of the class rtkConstantImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIF2 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIF2_swigregister(rtkConstantImageSourceIF2)

def rtkConstantImageSourceIF3_New():
    return rtkConstantImageSourceIF3.New()

class rtkConstantImageSourceIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ rtkConstantImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIF3_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIF3_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize3
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> float"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIF3

        Create a new object of the class rtkConstantImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIF3 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIF3_swigregister(rtkConstantImageSourceIF3)

def rtkConstantImageSourceIF4_New():
    return rtkConstantImageSourceIF4.New()

class rtkConstantImageSourceIF4(itk.itkImageSourcePython.itkImageSourceIF4):
    r"""Proxy of C++ rtkConstantImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIF4_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIF4_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize4
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> float"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIF4

        Create a new object of the class rtkConstantImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIF4 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIF4_swigregister(rtkConstantImageSourceIF4)

def rtkConstantImageSourceIVF22_New():
    return rtkConstantImageSourceIVF22.New()

class rtkConstantImageSourceIVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""Proxy of C++ rtkConstantImageSourceIVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF22_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF22_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize2
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF22

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF22

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF22

        Create a new object of the class rtkConstantImageSourceIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF22 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF22_swigregister(rtkConstantImageSourceIVF22)

def rtkConstantImageSourceIVF23_New():
    return rtkConstantImageSourceIVF23.New()

class rtkConstantImageSourceIVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""Proxy of C++ rtkConstantImageSourceIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF23_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF23_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize3
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF23

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF23

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF23

        Create a new object of the class rtkConstantImageSourceIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF23 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF23_swigregister(rtkConstantImageSourceIVF23)

def rtkConstantImageSourceIVF24_New():
    return rtkConstantImageSourceIVF24.New()

class rtkConstantImageSourceIVF24(itk.itkImageSourcePython.itkImageSourceIVF24):
    r"""Proxy of C++ rtkConstantImageSourceIVF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF24_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF24_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize4
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF24

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF24

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF24

        Create a new object of the class rtkConstantImageSourceIVF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF24 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF24_swigregister(rtkConstantImageSourceIVF24)

def rtkConstantImageSourceIVF32_New():
    return rtkConstantImageSourceIVF32.New()

class rtkConstantImageSourceIVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""Proxy of C++ rtkConstantImageSourceIVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF32_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF32_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize2
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF32

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF32

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF32

        Create a new object of the class rtkConstantImageSourceIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF32 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF32_swigregister(rtkConstantImageSourceIVF32)

def rtkConstantImageSourceIVF33_New():
    return rtkConstantImageSourceIVF33.New()

class rtkConstantImageSourceIVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""Proxy of C++ rtkConstantImageSourceIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF33_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF33_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize3
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF33

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF33

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF33

        Create a new object of the class rtkConstantImageSourceIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF33 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF33_swigregister(rtkConstantImageSourceIVF33)

def rtkConstantImageSourceIVF34_New():
    return rtkConstantImageSourceIVF34.New()

class rtkConstantImageSourceIVF34(itk.itkImageSourcePython.itkImageSourceIVF34):
    r"""Proxy of C++ rtkConstantImageSourceIVF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF34_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF34_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize4
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF34

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF34

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF34

        Create a new object of the class rtkConstantImageSourceIVF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF34 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF34_swigregister(rtkConstantImageSourceIVF34)

def rtkConstantImageSourceIVF42_New():
    return rtkConstantImageSourceIVF42.New()

class rtkConstantImageSourceIVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""Proxy of C++ rtkConstantImageSourceIVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF42_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF42_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize2

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize2
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD22

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD22"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex2

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex2"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase2 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF42

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF42

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF42

        Create a new object of the class rtkConstantImageSourceIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF42 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF42_swigregister(rtkConstantImageSourceIVF42)

def rtkConstantImageSourceIVF43_New():
    return rtkConstantImageSourceIVF43.New()

class rtkConstantImageSourceIVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""Proxy of C++ rtkConstantImageSourceIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF43_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF43_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize3

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize3
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD33

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD33"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex3

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex3"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase3 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF43

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF43

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF43

        Create a new object of the class rtkConstantImageSourceIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF43 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF43_swigregister(rtkConstantImageSourceIVF43)

def rtkConstantImageSourceIVF44_New():
    return rtkConstantImageSourceIVF44.New()

class rtkConstantImageSourceIVF44(itk.itkImageSourcePython.itkImageSourceIVF44):
    r"""Proxy of C++ rtkConstantImageSourceIVF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> rtkConstantImageSourceIVF44_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44___New_orig__()

    def Clone(self):
        r"""Clone(self) -> rtkConstantImageSourceIVF44_Pointer"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_Clone(self)

    def SetSize(self, *args):
        r"""
        SetSize(self, _arg)

        Parameters
        ----------
        _arg: itkSize4

        SetSize(self, sizeArray)

        Parameters
        ----------
        sizeArray: unsigned long *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetSize(self, *args)

    def GetSize(self, *args):
        r"""
        GetSize(self) -> itkSize4
        GetSize(self) -> unsigned long const *
        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetSize(self, *args)

    def SetSpacing(self, _arg):
        r"""
        SetSpacing(self, _arg)

        Parameters
        ----------
        _arg: itkVectorD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetSpacing(self, _arg)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetSpacing(self)

    def SetOrigin(self, _arg):
        r"""
        SetOrigin(self, _arg)

        Parameters
        ----------
        _arg: itkPointD4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetOrigin(self, _arg)

    def GetOrigin(self):
        r"""GetOrigin(self) -> itkPointD4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetOrigin(self)

    def SetDirection(self, _arg):
        r"""
        SetDirection(self, _arg)

        Parameters
        ----------
        _arg: itkMatrixD44

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetDirection(self, _arg)

    def GetDirection(self):
        r"""GetDirection(self) -> itkMatrixD44"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetDirection(self)

    def SetIndex(self, _arg):
        r"""
        SetIndex(self, _arg)

        Parameters
        ----------
        _arg: itkIndex4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetIndex(self, _arg)

    def GetIndex(self):
        r"""GetIndex(self) -> itkIndex4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetIndex(self)

    def SetConstant(self, _arg):
        r"""
        SetConstant(self, _arg)

        Parameters
        ----------
        _arg: itkVectorF4

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetConstant(self, _arg)

    def GetConstant(self):
        r"""GetConstant(self) -> itkVectorF4"""
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_GetConstant(self)

    def SetInformationFromImage(self, image):
        r"""
        SetInformationFromImage(self, image)

        Parameters
        ----------
        image: itkImageBase4 const *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_SetInformationFromImage(self, image)
    __swig_destroy__ = _rtkConstantImageSourcePython.delete_rtkConstantImageSourceIVF44

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> rtkConstantImageSourceIVF44

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_cast(obj)

    def New(*args, **kargs):
        """New() -> rtkConstantImageSourceIVF44

        Create a new object of the class rtkConstantImageSourceIVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConstantImageSourceIVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConstantImageSourceIVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConstantImageSourceIVF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConstantImageSourceIVF44 in _rtkConstantImageSourcePython:
_rtkConstantImageSourcePython.rtkConstantImageSourceIVF44_swigregister(rtkConstantImageSourceIVF44)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def constant_image_source(*args,  size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., index: Sequence[int]=..., constant: Sequence[float]=..., information_from_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConstantImageSource"""
    import itk

    kwarg_typehints = { 'size':size,'spacing':spacing,'origin':origin,'direction':direction,'index':index,'constant':constant,'information_from_image':information_from_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConstantImageSource.New(*args, **kwargs)

    return instance.__internal_call__()

def constant_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ConstantImageSource
    constant_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    constant_image_source.__doc__ = filter_object.__doc__



