# coding: utf-8

"""
HaploHub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictInt, StrictStr


class GetVariantRequest(BaseModel):
    """
    GetVariantRequest
    """

    file_name: StrictStr = Field(...)
    accession: StrictStr = Field(...)
    start: StrictInt = Field(...)
    end: StrictInt = Field(...)
    __properties = ["file_name", "accession", "start", "end"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetVariantRequest:
        """Create an instance of GetVariantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetVariantRequest:
        """Create an instance of GetVariantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetVariantRequest.parse_obj(obj)

        _obj = GetVariantRequest.parse_obj(
            {
                "file_name": obj.get("file_name"),
                "accession": obj.get("accession"),
                "start": obj.get("start"),
                "end": obj.get("end"),
            }
        )
        return _obj
