# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ClusterAutoscalerPolicies',
    'ClusterAutoscalerPoliciesClusterLimits',
    'ClusterAutoscalerPoliciesClusterLimitsCpu',
    'ClusterAutoscalerPoliciesNodeDownscaler',
    'ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes',
    'ClusterAutoscalerPoliciesSpotInstances',
    'ClusterAutoscalerPoliciesUnschedulablePods',
    'ClusterAutoscalerPoliciesUnschedulablePodsHeadroom',
    'ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints',
    'ClusterInitializeParams',
    'ClusterInitializeParamsNode',
    'ClusterKubeconfig',
    'CredentialsAws',
    'CredentialsAzure',
    'CredentialsDo',
    'CredentialsGcp',
    'GetClusterDataSourceAutoscalerPolicyResult',
    'GetClusterDataSourceAutoscalerPolicyClusterLimitResult',
    'GetClusterDataSourceAutoscalerPolicyClusterLimitCpusResult',
    'GetClusterDataSourceAutoscalerPolicyNodeDownscalerResult',
    'GetClusterDataSourceAutoscalerPolicyNodeDownscalerEmptyNodeResult',
    'GetClusterDataSourceAutoscalerPolicySpotInstanceResult',
    'GetClusterDataSourceAutoscalerPolicyUnschedulablePodResult',
    'GetClusterDataSourceAutoscalerPolicyUnschedulablePodHeadroomResult',
    'GetClusterDataSourceAutoscalerPolicyUnschedulablePodNodeConstraintResult',
    'GetClusterDataSourceKubeconfigResult',
]

@pulumi.output_type
class ClusterAutoscalerPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterLimits":
            suggest = "cluster_limits"
        elif key == "nodeDownscaler":
            suggest = "node_downscaler"
        elif key == "spotInstances":
            suggest = "spot_instances"
        elif key == "unschedulablePods":
            suggest = "unschedulable_pods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_limits: Optional['outputs.ClusterAutoscalerPoliciesClusterLimits'] = None,
                 enabled: Optional[bool] = None,
                 node_downscaler: Optional['outputs.ClusterAutoscalerPoliciesNodeDownscaler'] = None,
                 spot_instances: Optional['outputs.ClusterAutoscalerPoliciesSpotInstances'] = None,
                 unschedulable_pods: Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePods'] = None):
        if cluster_limits is not None:
            pulumi.set(__self__, "cluster_limits", cluster_limits)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if node_downscaler is not None:
            pulumi.set(__self__, "node_downscaler", node_downscaler)
        if spot_instances is not None:
            pulumi.set(__self__, "spot_instances", spot_instances)
        if unschedulable_pods is not None:
            pulumi.set(__self__, "unschedulable_pods", unschedulable_pods)

    @property
    @pulumi.getter(name="clusterLimits")
    def cluster_limits(self) -> Optional['outputs.ClusterAutoscalerPoliciesClusterLimits']:
        return pulumi.get(self, "cluster_limits")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="nodeDownscaler")
    def node_downscaler(self) -> Optional['outputs.ClusterAutoscalerPoliciesNodeDownscaler']:
        return pulumi.get(self, "node_downscaler")

    @property
    @pulumi.getter(name="spotInstances")
    def spot_instances(self) -> Optional['outputs.ClusterAutoscalerPoliciesSpotInstances']:
        return pulumi.get(self, "spot_instances")

    @property
    @pulumi.getter(name="unschedulablePods")
    def unschedulable_pods(self) -> Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePods']:
        return pulumi.get(self, "unschedulable_pods")


@pulumi.output_type
class ClusterAutoscalerPoliciesClusterLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional['outputs.ClusterAutoscalerPoliciesClusterLimitsCpu'] = None,
                 enabled: Optional[bool] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def cpu(self) -> Optional['outputs.ClusterAutoscalerPoliciesClusterLimitsCpu']:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterAutoscalerPoliciesClusterLimitsCpu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCores":
            suggest = "max_cores"
        elif key == "minCores":
            suggest = "min_cores"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesClusterLimitsCpu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesClusterLimitsCpu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesClusterLimitsCpu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_cores: Optional[int] = None,
                 min_cores: Optional[int] = None):
        if max_cores is not None:
            pulumi.set(__self__, "max_cores", max_cores)
        if min_cores is not None:
            pulumi.set(__self__, "min_cores", min_cores)

    @property
    @pulumi.getter(name="maxCores")
    def max_cores(self) -> Optional[int]:
        return pulumi.get(self, "max_cores")

    @property
    @pulumi.getter(name="minCores")
    def min_cores(self) -> Optional[int]:
        return pulumi.get(self, "min_cores")


@pulumi.output_type
class ClusterAutoscalerPoliciesNodeDownscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emptyNodes":
            suggest = "empty_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesNodeDownscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesNodeDownscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesNodeDownscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 empty_nodes: Optional['outputs.ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes'] = None):
        if empty_nodes is not None:
            pulumi.set(__self__, "empty_nodes", empty_nodes)

    @property
    @pulumi.getter(name="emptyNodes")
    def empty_nodes(self) -> Optional['outputs.ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes']:
        return pulumi.get(self, "empty_nodes")


@pulumi.output_type
class ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delaySeconds":
            suggest = "delay_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesNodeDownscalerEmptyNodes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay_seconds: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if delay_seconds is not None:
            pulumi.set(__self__, "delay_seconds", delay_seconds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="delaySeconds")
    def delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "delay_seconds")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterAutoscalerPoliciesSpotInstances(dict):
    def __init__(__self__, *,
                 clouds: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        if clouds is not None:
            pulumi.set(__self__, "clouds", clouds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def clouds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "clouds")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterAutoscalerPoliciesUnschedulablePods(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeConstraints":
            suggest = "node_constraints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesUnschedulablePods. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePods.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePods.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 headroom: Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePodsHeadroom'] = None,
                 node_constraints: Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints'] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headroom is not None:
            pulumi.set(__self__, "headroom", headroom)
        if node_constraints is not None:
            pulumi.set(__self__, "node_constraints", node_constraints)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def headroom(self) -> Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePodsHeadroom']:
        return pulumi.get(self, "headroom")

    @property
    @pulumi.getter(name="nodeConstraints")
    def node_constraints(self) -> Optional['outputs.ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints']:
        return pulumi.get(self, "node_constraints")


@pulumi.output_type
class ClusterAutoscalerPoliciesUnschedulablePodsHeadroom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuPercentage":
            suggest = "cpu_percentage"
        elif key == "memoryPercentage":
            suggest = "memory_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesUnschedulablePodsHeadroom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePodsHeadroom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePodsHeadroom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_percentage: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 memory_percentage: Optional[int] = None):
        if cpu_percentage is not None:
            pulumi.set(__self__, "cpu_percentage", cpu_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if memory_percentage is not None:
            pulumi.set(__self__, "memory_percentage", memory_percentage)

    @property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> Optional[int]:
        return pulumi.get(self, "cpu_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="memoryPercentage")
    def memory_percentage(self) -> Optional[int]:
        return pulumi.get(self, "memory_percentage")


@pulumi.output_type
class ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNodeCpuCores":
            suggest = "max_node_cpu_cores"
        elif key == "maxNodeRamGib":
            suggest = "max_node_ram_gib"
        elif key == "minNodeCpuCores":
            suggest = "min_node_cpu_cores"
        elif key == "minNodeRamGib":
            suggest = "min_node_ram_gib"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 max_node_cpu_cores: Optional[int] = None,
                 max_node_ram_gib: Optional[int] = None,
                 min_node_cpu_cores: Optional[int] = None,
                 min_node_ram_gib: Optional[int] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_node_cpu_cores is not None:
            pulumi.set(__self__, "max_node_cpu_cores", max_node_cpu_cores)
        if max_node_ram_gib is not None:
            pulumi.set(__self__, "max_node_ram_gib", max_node_ram_gib)
        if min_node_cpu_cores is not None:
            pulumi.set(__self__, "min_node_cpu_cores", min_node_cpu_cores)
        if min_node_ram_gib is not None:
            pulumi.set(__self__, "min_node_ram_gib", min_node_ram_gib)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxNodeCpuCores")
    def max_node_cpu_cores(self) -> Optional[int]:
        return pulumi.get(self, "max_node_cpu_cores")

    @property
    @pulumi.getter(name="maxNodeRamGib")
    def max_node_ram_gib(self) -> Optional[int]:
        return pulumi.get(self, "max_node_ram_gib")

    @property
    @pulumi.getter(name="minNodeCpuCores")
    def min_node_cpu_cores(self) -> Optional[int]:
        return pulumi.get(self, "min_node_cpu_cores")

    @property
    @pulumi.getter(name="minNodeRamGib")
    def min_node_ram_gib(self) -> Optional[int]:
        return pulumi.get(self, "min_node_ram_gib")


@pulumi.output_type
class ClusterInitializeParams(dict):
    def __init__(__self__, *,
                 nodes: Sequence['outputs.ClusterInitializeParamsNode']):
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.ClusterInitializeParamsNode']:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class ClusterInitializeParamsNode(dict):
    def __init__(__self__, *,
                 cloud: str,
                 role: str,
                 shape: str):
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")


@pulumi.output_type
class ClusterKubeconfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"
        elif key == "clusterCaCertificate":
            suggest = "cluster_ca_certificate"
        elif key == "rawConfig":
            suggest = "raw_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKubeconfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKubeconfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKubeconfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None,
                 cluster_ca_certificate: Optional[str] = None,
                 host: Optional[str] = None,
                 raw_config: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if raw_config is not None:
            pulumi.set(__self__, "raw_config", raw_config)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[str]:
        return pulumi.get(self, "cluster_ca_certificate")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="rawConfig")
    def raw_config(self) -> Optional[str]:
        return pulumi.get(self, "raw_config")


@pulumi.output_type
class CredentialsAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialsAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialsAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialsAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class CredentialsAzure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "servicePrincipalJson":
            suggest = "service_principal_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialsAzure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialsAzure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialsAzure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_principal_json: str):
        pulumi.set(__self__, "service_principal_json", service_principal_json)

    @property
    @pulumi.getter(name="servicePrincipalJson")
    def service_principal_json(self) -> str:
        return pulumi.get(self, "service_principal_json")


@pulumi.output_type
class CredentialsDo(dict):
    def __init__(__self__, *,
                 token: str):
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class CredentialsGcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountJson":
            suggest = "service_account_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CredentialsGcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CredentialsGcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CredentialsGcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_account_json: str):
        pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> str:
        return pulumi.get(self, "service_account_json")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyResult(dict):
    def __init__(__self__, *,
                 cluster_limits: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyClusterLimitResult'],
                 enabled: bool,
                 node_downscalers: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyNodeDownscalerResult'],
                 spot_instances: Sequence['outputs.GetClusterDataSourceAutoscalerPolicySpotInstanceResult'],
                 unschedulable_pods: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodResult']):
        pulumi.set(__self__, "cluster_limits", cluster_limits)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "node_downscalers", node_downscalers)
        pulumi.set(__self__, "spot_instances", spot_instances)
        pulumi.set(__self__, "unschedulable_pods", unschedulable_pods)

    @property
    @pulumi.getter(name="clusterLimits")
    def cluster_limits(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyClusterLimitResult']:
        return pulumi.get(self, "cluster_limits")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="nodeDownscalers")
    def node_downscalers(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyNodeDownscalerResult']:
        return pulumi.get(self, "node_downscalers")

    @property
    @pulumi.getter(name="spotInstances")
    def spot_instances(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicySpotInstanceResult']:
        return pulumi.get(self, "spot_instances")

    @property
    @pulumi.getter(name="unschedulablePods")
    def unschedulable_pods(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodResult']:
        return pulumi.get(self, "unschedulable_pods")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyClusterLimitResult(dict):
    def __init__(__self__, *,
                 cpus: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyClusterLimitCpusResult'],
                 enabled: bool):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyClusterLimitCpusResult']:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyClusterLimitCpusResult(dict):
    def __init__(__self__, *,
                 max_cores: int,
                 min_cores: int):
        pulumi.set(__self__, "max_cores", max_cores)
        pulumi.set(__self__, "min_cores", min_cores)

    @property
    @pulumi.getter(name="maxCores")
    def max_cores(self) -> int:
        return pulumi.get(self, "max_cores")

    @property
    @pulumi.getter(name="minCores")
    def min_cores(self) -> int:
        return pulumi.get(self, "min_cores")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyNodeDownscalerResult(dict):
    def __init__(__self__, *,
                 empty_nodes: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyNodeDownscalerEmptyNodeResult']):
        pulumi.set(__self__, "empty_nodes", empty_nodes)

    @property
    @pulumi.getter(name="emptyNodes")
    def empty_nodes(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyNodeDownscalerEmptyNodeResult']:
        return pulumi.get(self, "empty_nodes")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyNodeDownscalerEmptyNodeResult(dict):
    def __init__(__self__, *,
                 delay_seconds: int,
                 enabled: bool):
        pulumi.set(__self__, "delay_seconds", delay_seconds)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="delaySeconds")
    def delay_seconds(self) -> int:
        return pulumi.get(self, "delay_seconds")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicySpotInstanceResult(dict):
    def __init__(__self__, *,
                 clouds: Sequence[str],
                 enabled: bool):
        pulumi.set(__self__, "clouds", clouds)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def clouds(self) -> Sequence[str]:
        return pulumi.get(self, "clouds")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyUnschedulablePodResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 headrooms: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodHeadroomResult'],
                 node_constraints: Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodNodeConstraintResult']):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "headrooms", headrooms)
        pulumi.set(__self__, "node_constraints", node_constraints)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def headrooms(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodHeadroomResult']:
        return pulumi.get(self, "headrooms")

    @property
    @pulumi.getter(name="nodeConstraints")
    def node_constraints(self) -> Sequence['outputs.GetClusterDataSourceAutoscalerPolicyUnschedulablePodNodeConstraintResult']:
        return pulumi.get(self, "node_constraints")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyUnschedulablePodHeadroomResult(dict):
    def __init__(__self__, *,
                 cpu_percentage: int,
                 enabled: bool,
                 memory_percentage: int):
        pulumi.set(__self__, "cpu_percentage", cpu_percentage)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "memory_percentage", memory_percentage)

    @property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> int:
        return pulumi.get(self, "cpu_percentage")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="memoryPercentage")
    def memory_percentage(self) -> int:
        return pulumi.get(self, "memory_percentage")


@pulumi.output_type
class GetClusterDataSourceAutoscalerPolicyUnschedulablePodNodeConstraintResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 max_node_cpu_cores: int,
                 max_node_ram_gib: int,
                 min_node_cpu_cores: int,
                 min_node_ram_gib: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_node_cpu_cores", max_node_cpu_cores)
        pulumi.set(__self__, "max_node_ram_gib", max_node_ram_gib)
        pulumi.set(__self__, "min_node_cpu_cores", min_node_cpu_cores)
        pulumi.set(__self__, "min_node_ram_gib", min_node_ram_gib)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxNodeCpuCores")
    def max_node_cpu_cores(self) -> int:
        return pulumi.get(self, "max_node_cpu_cores")

    @property
    @pulumi.getter(name="maxNodeRamGib")
    def max_node_ram_gib(self) -> int:
        return pulumi.get(self, "max_node_ram_gib")

    @property
    @pulumi.getter(name="minNodeCpuCores")
    def min_node_cpu_cores(self) -> int:
        return pulumi.get(self, "min_node_cpu_cores")

    @property
    @pulumi.getter(name="minNodeRamGib")
    def min_node_ram_gib(self) -> int:
        return pulumi.get(self, "min_node_ram_gib")


@pulumi.output_type
class GetClusterDataSourceKubeconfigResult(dict):
    def __init__(__self__, *,
                 client_certificate: str,
                 client_key: str,
                 cluster_ca_certificate: str,
                 host: str,
                 raw_config: str):
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "raw_config", raw_config)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> str:
        return pulumi.get(self, "cluster_ca_certificate")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="rawConfig")
    def raw_config(self) -> str:
        return pulumi.get(self, "raw_config")


