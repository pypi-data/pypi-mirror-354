# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCredentialsDataSourceResult',
    'AwaitableGetCredentialsDataSourceResult',
    'get_credentials_data_source',
    'get_credentials_data_source_output',
]

@pulumi.output_type
class GetCredentialsDataSourceResult:
    """
    A collection of values returned by GetCredentialsDataSource.
    """
    def __init__(__self__, cloud=None, id=None, name=None):
        if cloud and not isinstance(cloud, str):
            raise TypeError("Expected argument 'cloud' to be a str")
        pulumi.set(__self__, "cloud", cloud)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


class AwaitableGetCredentialsDataSourceResult(GetCredentialsDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCredentialsDataSourceResult(
            cloud=self.cloud,
            id=self.id,
            name=self.name)


def get_credentials_data_source(id: Optional[str] = None,
                                name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCredentialsDataSourceResult:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of this resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:index:GetCredentialsDataSource', __args__, opts=opts, typ=GetCredentialsDataSourceResult).value

    return AwaitableGetCredentialsDataSourceResult(
        cloud=pulumi.get(__ret__, 'cloud'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_credentials_data_source_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                       name: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCredentialsDataSourceResult]:
    """
    Use this data source to access information about an existing resource.

    :param str id: The ID of this resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:index:GetCredentialsDataSource', __args__, opts=opts, typ=GetCredentialsDataSourceResult)
    return __ret__.apply(lambda __response__: GetCredentialsDataSourceResult(
        cloud=pulumi.get(__response__, 'cloud'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
