# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ClusterAutoscalerPoliciesArgs',
    'ClusterAutoscalerPoliciesArgsDict',
    'ClusterAutoscalerPoliciesClusterLimitsArgs',
    'ClusterAutoscalerPoliciesClusterLimitsArgsDict',
    'ClusterAutoscalerPoliciesClusterLimitsCpuArgs',
    'ClusterAutoscalerPoliciesClusterLimitsCpuArgsDict',
    'ClusterAutoscalerPoliciesNodeDownscalerArgs',
    'ClusterAutoscalerPoliciesNodeDownscalerArgsDict',
    'ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgs',
    'ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgsDict',
    'ClusterAutoscalerPoliciesSpotInstancesArgs',
    'ClusterAutoscalerPoliciesSpotInstancesArgsDict',
    'ClusterAutoscalerPoliciesUnschedulablePodsArgs',
    'ClusterAutoscalerPoliciesUnschedulablePodsArgsDict',
    'ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgs',
    'ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgsDict',
    'ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgs',
    'ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgsDict',
    'ClusterInitializeParamsArgs',
    'ClusterInitializeParamsArgsDict',
    'ClusterInitializeParamsNodeArgs',
    'ClusterInitializeParamsNodeArgsDict',
    'ClusterKubeconfigArgs',
    'ClusterKubeconfigArgsDict',
    'CredentialsAwsArgs',
    'CredentialsAwsArgsDict',
    'CredentialsAzureArgs',
    'CredentialsAzureArgsDict',
    'CredentialsDoArgs',
    'CredentialsDoArgsDict',
    'CredentialsGcpArgs',
    'CredentialsGcpArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterAutoscalerPoliciesArgsDict(TypedDict):
        cluster_limits: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsArgsDict']]
        enabled: NotRequired[pulumi.Input[bool]]
        node_downscaler: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerArgsDict']]
        spot_instances: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesSpotInstancesArgsDict']]
        unschedulable_pods: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsArgsDict']]
elif False:
    ClusterAutoscalerPoliciesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesArgs:
    def __init__(__self__, *,
                 cluster_limits: Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 node_downscaler: Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerArgs']] = None,
                 spot_instances: Optional[pulumi.Input['ClusterAutoscalerPoliciesSpotInstancesArgs']] = None,
                 unschedulable_pods: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsArgs']] = None):
        if cluster_limits is not None:
            pulumi.set(__self__, "cluster_limits", cluster_limits)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if node_downscaler is not None:
            pulumi.set(__self__, "node_downscaler", node_downscaler)
        if spot_instances is not None:
            pulumi.set(__self__, "spot_instances", spot_instances)
        if unschedulable_pods is not None:
            pulumi.set(__self__, "unschedulable_pods", unschedulable_pods)

    @property
    @pulumi.getter(name="clusterLimits")
    def cluster_limits(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsArgs']]:
        return pulumi.get(self, "cluster_limits")

    @cluster_limits.setter
    def cluster_limits(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsArgs']]):
        pulumi.set(self, "cluster_limits", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="nodeDownscaler")
    def node_downscaler(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerArgs']]:
        return pulumi.get(self, "node_downscaler")

    @node_downscaler.setter
    def node_downscaler(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerArgs']]):
        pulumi.set(self, "node_downscaler", value)

    @property
    @pulumi.getter(name="spotInstances")
    def spot_instances(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesSpotInstancesArgs']]:
        return pulumi.get(self, "spot_instances")

    @spot_instances.setter
    def spot_instances(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesSpotInstancesArgs']]):
        pulumi.set(self, "spot_instances", value)

    @property
    @pulumi.getter(name="unschedulablePods")
    def unschedulable_pods(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsArgs']]:
        return pulumi.get(self, "unschedulable_pods")

    @unschedulable_pods.setter
    def unschedulable_pods(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsArgs']]):
        pulumi.set(self, "unschedulable_pods", value)


if not MYPY:
    class ClusterAutoscalerPoliciesClusterLimitsArgsDict(TypedDict):
        cpu: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsCpuArgsDict']]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    ClusterAutoscalerPoliciesClusterLimitsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesClusterLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsCpuArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsCpuArgs']]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesClusterLimitsCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ClusterAutoscalerPoliciesClusterLimitsCpuArgsDict(TypedDict):
        max_cores: NotRequired[pulumi.Input[int]]
        min_cores: NotRequired[pulumi.Input[int]]
elif False:
    ClusterAutoscalerPoliciesClusterLimitsCpuArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesClusterLimitsCpuArgs:
    def __init__(__self__, *,
                 max_cores: Optional[pulumi.Input[int]] = None,
                 min_cores: Optional[pulumi.Input[int]] = None):
        if max_cores is not None:
            pulumi.set(__self__, "max_cores", max_cores)
        if min_cores is not None:
            pulumi.set(__self__, "min_cores", min_cores)

    @property
    @pulumi.getter(name="maxCores")
    def max_cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_cores")

    @max_cores.setter
    def max_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cores", value)

    @property
    @pulumi.getter(name="minCores")
    def min_cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_cores")

    @min_cores.setter
    def min_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_cores", value)


if not MYPY:
    class ClusterAutoscalerPoliciesNodeDownscalerArgsDict(TypedDict):
        empty_nodes: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgsDict']]
elif False:
    ClusterAutoscalerPoliciesNodeDownscalerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesNodeDownscalerArgs:
    def __init__(__self__, *,
                 empty_nodes: Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgs']] = None):
        if empty_nodes is not None:
            pulumi.set(__self__, "empty_nodes", empty_nodes)

    @property
    @pulumi.getter(name="emptyNodes")
    def empty_nodes(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgs']]:
        return pulumi.get(self, "empty_nodes")

    @empty_nodes.setter
    def empty_nodes(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgs']]):
        pulumi.set(self, "empty_nodes", value)


if not MYPY:
    class ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgsDict(TypedDict):
        delay_seconds: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesNodeDownscalerEmptyNodesArgs:
    def __init__(__self__, *,
                 delay_seconds: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if delay_seconds is not None:
            pulumi.set(__self__, "delay_seconds", delay_seconds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="delaySeconds")
    def delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "delay_seconds")

    @delay_seconds.setter
    def delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_seconds", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ClusterAutoscalerPoliciesSpotInstancesArgsDict(TypedDict):
        clouds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    ClusterAutoscalerPoliciesSpotInstancesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesSpotInstancesArgs:
    def __init__(__self__, *,
                 clouds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if clouds is not None:
            pulumi.set(__self__, "clouds", clouds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def clouds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "clouds")

    @clouds.setter
    def clouds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clouds", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class ClusterAutoscalerPoliciesUnschedulablePodsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        headroom: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgsDict']]
        node_constraints: NotRequired[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgsDict']]
elif False:
    ClusterAutoscalerPoliciesUnschedulablePodsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesUnschedulablePodsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headroom: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgs']] = None,
                 node_constraints: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgs']] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headroom is not None:
            pulumi.set(__self__, "headroom", headroom)
        if node_constraints is not None:
            pulumi.set(__self__, "node_constraints", node_constraints)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headroom(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgs']]:
        return pulumi.get(self, "headroom")

    @headroom.setter
    def headroom(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgs']]):
        pulumi.set(self, "headroom", value)

    @property
    @pulumi.getter(name="nodeConstraints")
    def node_constraints(self) -> Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgs']]:
        return pulumi.get(self, "node_constraints")

    @node_constraints.setter
    def node_constraints(self, value: Optional[pulumi.Input['ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgs']]):
        pulumi.set(self, "node_constraints", value)


if not MYPY:
    class ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgsDict(TypedDict):
        cpu_percentage: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
        memory_percentage: NotRequired[pulumi.Input[int]]
elif False:
    ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesUnschedulablePodsHeadroomArgs:
    def __init__(__self__, *,
                 cpu_percentage: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 memory_percentage: Optional[pulumi.Input[int]] = None):
        if cpu_percentage is not None:
            pulumi.set(__self__, "cpu_percentage", cpu_percentage)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if memory_percentage is not None:
            pulumi.set(__self__, "memory_percentage", memory_percentage)

    @property
    @pulumi.getter(name="cpuPercentage")
    def cpu_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_percentage")

    @cpu_percentage.setter
    def cpu_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_percentage", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="memoryPercentage")
    def memory_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_percentage")

    @memory_percentage.setter
    def memory_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_percentage", value)


if not MYPY:
    class ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        max_node_cpu_cores: NotRequired[pulumi.Input[int]]
        max_node_ram_gib: NotRequired[pulumi.Input[int]]
        min_node_cpu_cores: NotRequired[pulumi.Input[int]]
        min_node_ram_gib: NotRequired[pulumi.Input[int]]
elif False:
    ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterAutoscalerPoliciesUnschedulablePodsNodeConstraintsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_node_cpu_cores: Optional[pulumi.Input[int]] = None,
                 max_node_ram_gib: Optional[pulumi.Input[int]] = None,
                 min_node_cpu_cores: Optional[pulumi.Input[int]] = None,
                 min_node_ram_gib: Optional[pulumi.Input[int]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_node_cpu_cores is not None:
            pulumi.set(__self__, "max_node_cpu_cores", max_node_cpu_cores)
        if max_node_ram_gib is not None:
            pulumi.set(__self__, "max_node_ram_gib", max_node_ram_gib)
        if min_node_cpu_cores is not None:
            pulumi.set(__self__, "min_node_cpu_cores", min_node_cpu_cores)
        if min_node_ram_gib is not None:
            pulumi.set(__self__, "min_node_ram_gib", min_node_ram_gib)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxNodeCpuCores")
    def max_node_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_node_cpu_cores")

    @max_node_cpu_cores.setter
    def max_node_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_cpu_cores", value)

    @property
    @pulumi.getter(name="maxNodeRamGib")
    def max_node_ram_gib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_node_ram_gib")

    @max_node_ram_gib.setter
    def max_node_ram_gib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_ram_gib", value)

    @property
    @pulumi.getter(name="minNodeCpuCores")
    def min_node_cpu_cores(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_node_cpu_cores")

    @min_node_cpu_cores.setter
    def min_node_cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_cpu_cores", value)

    @property
    @pulumi.getter(name="minNodeRamGib")
    def min_node_ram_gib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_node_ram_gib")

    @min_node_ram_gib.setter
    def min_node_ram_gib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_ram_gib", value)


if not MYPY:
    class ClusterInitializeParamsArgsDict(TypedDict):
        nodes: pulumi.Input[Sequence[pulumi.Input['ClusterInitializeParamsNodeArgsDict']]]
elif False:
    ClusterInitializeParamsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterInitializeParamsArgs:
    def __init__(__self__, *,
                 nodes: pulumi.Input[Sequence[pulumi.Input['ClusterInitializeParamsNodeArgs']]]):
        pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterInitializeParamsNodeArgs']]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterInitializeParamsNodeArgs']]]):
        pulumi.set(self, "nodes", value)


if not MYPY:
    class ClusterInitializeParamsNodeArgsDict(TypedDict):
        cloud: pulumi.Input[str]
        role: pulumi.Input[str]
        shape: pulumi.Input[str]
elif False:
    ClusterInitializeParamsNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterInitializeParamsNodeArgs:
    def __init__(__self__, *,
                 cloud: pulumi.Input[str],
                 role: pulumi.Input[str],
                 shape: pulumi.Input[str]):
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "shape", shape)

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input[str]):
        pulumi.set(self, "shape", value)


if not MYPY:
    class ClusterKubeconfigArgsDict(TypedDict):
        client_certificate: NotRequired[pulumi.Input[str]]
        client_key: NotRequired[pulumi.Input[str]]
        cluster_ca_certificate: NotRequired[pulumi.Input[str]]
        host: NotRequired[pulumi.Input[str]]
        raw_config: NotRequired[pulumi.Input[str]]
elif False:
    ClusterKubeconfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterKubeconfigArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 raw_config: Optional[pulumi.Input[str]] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if raw_config is not None:
            pulumi.set(__self__, "raw_config", raw_config)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_ca_certificate")

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_certificate", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="rawConfig")
    def raw_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_config")

    @raw_config.setter
    def raw_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_config", value)


if not MYPY:
    class CredentialsAwsArgsDict(TypedDict):
        access_key_id: pulumi.Input[str]
        secret_access_key: pulumi.Input[str]
elif False:
    CredentialsAwsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialsAwsArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str]):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)


if not MYPY:
    class CredentialsAzureArgsDict(TypedDict):
        service_principal_json: pulumi.Input[str]
elif False:
    CredentialsAzureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialsAzureArgs:
    def __init__(__self__, *,
                 service_principal_json: pulumi.Input[str]):
        pulumi.set(__self__, "service_principal_json", service_principal_json)

    @property
    @pulumi.getter(name="servicePrincipalJson")
    def service_principal_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_principal_json")

    @service_principal_json.setter
    def service_principal_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_principal_json", value)


if not MYPY:
    class CredentialsDoArgsDict(TypedDict):
        token: pulumi.Input[str]
elif False:
    CredentialsDoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialsDoArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


if not MYPY:
    class CredentialsGcpArgsDict(TypedDict):
        service_account_json: pulumi.Input[str]
elif False:
    CredentialsGcpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CredentialsGcpArgs:
    def __init__(__self__, *,
                 service_account_json: pulumi.Input[str]):
        pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_json")

    @service_account_json.setter
    def service_account_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_json", value)


