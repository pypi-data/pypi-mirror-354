# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['GkeClusterArgs', 'GkeCluster']

@pulumi.input_type
class GkeClusterArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GkeCluster resource.
        :param pulumi.Input[str] location: GCP cluster zone in case of zonal or region in case of regional cluster
        :param pulumi.Input[str] project_id: GCP project id
        :param pulumi.Input[str] credentials_json: GCP credentials.json from ServiceAccount with credentials for CAST AI
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect
        :param pulumi.Input[str] name: GKE cluster name
        :param pulumi.Input[str] ssh_public_key: SSHPublicKey for nodes
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_id", project_id)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        GCP cluster zone in case of zonal or region in case of regional cluster
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        GCP project id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[str]]:
        """
        GCP credentials.json from ServiceAccount with credentials for CAST AI
        """
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GKE cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        SSHPublicKey for nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)


@pulumi.input_type
class _GkeClusterState:
    def __init__(__self__, *,
                 cluster_token: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GkeCluster resources.
        :param pulumi.Input[str] cluster_token: CAST.AI agent cluster token
        :param pulumi.Input[str] credentials_id: CAST AI credentials id for cluster
        :param pulumi.Input[str] credentials_json: GCP credentials.json from ServiceAccount with credentials for CAST AI
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect
        :param pulumi.Input[str] location: GCP cluster zone in case of zonal or region in case of regional cluster
        :param pulumi.Input[str] name: GKE cluster name
        :param pulumi.Input[str] project_id: GCP project id
        :param pulumi.Input[str] ssh_public_key: SSHPublicKey for nodes
        """
        if cluster_token is not None:
            pulumi.set(__self__, "cluster_token", cluster_token)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)

    @property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> Optional[pulumi.Input[str]]:
        """
        CAST.AI agent cluster token
        """
        return pulumi.get(self, "cluster_token")

    @cluster_token.setter
    def cluster_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_token", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        """
        CAST AI credentials id for cluster
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[str]]:
        """
        GCP credentials.json from ServiceAccount with credentials for CAST AI
        """
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        GCP cluster zone in case of zonal or region in case of regional cluster
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GKE cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project id
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        SSHPublicKey for nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)


class GkeCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        GKE cluster resource allows connecting an existing GEK cluster to CAST AI.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credentials_json: GCP credentials.json from ServiceAccount with credentials for CAST AI
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect
        :param pulumi.Input[str] location: GCP cluster zone in case of zonal or region in case of regional cluster
        :param pulumi.Input[str] name: GKE cluster name
        :param pulumi.Input[str] project_id: GCP project id
        :param pulumi.Input[str] ssh_public_key: SSHPublicKey for nodes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GkeClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GKE cluster resource allows connecting an existing GEK cluster to CAST AI.

        :param str resource_name: The name of the resource.
        :param GkeClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GkeClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GkeClusterArgs.__new__(GkeClusterArgs)

            __props__.__dict__["credentials_json"] = None if credentials_json is None else pulumi.Output.secret(credentials_json)
            __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["ssh_public_key"] = ssh_public_key
            __props__.__dict__["cluster_token"] = None
            __props__.__dict__["credentials_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clusterToken", "credentialsJson"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(GkeCluster, __self__).__init__(
            'castai:gcp:GkeCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_token: Optional[pulumi.Input[str]] = None,
            credentials_id: Optional[pulumi.Input[str]] = None,
            credentials_json: Optional[pulumi.Input[str]] = None,
            delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            ssh_public_key: Optional[pulumi.Input[str]] = None) -> 'GkeCluster':
        """
        Get an existing GkeCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_token: CAST.AI agent cluster token
        :param pulumi.Input[str] credentials_id: CAST AI credentials id for cluster
        :param pulumi.Input[str] credentials_json: GCP credentials.json from ServiceAccount with credentials for CAST AI
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect
        :param pulumi.Input[str] location: GCP cluster zone in case of zonal or region in case of regional cluster
        :param pulumi.Input[str] name: GKE cluster name
        :param pulumi.Input[str] project_id: GCP project id
        :param pulumi.Input[str] ssh_public_key: SSHPublicKey for nodes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GkeClusterState.__new__(_GkeClusterState)

        __props__.__dict__["cluster_token"] = cluster_token
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["credentials_json"] = credentials_json
        __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["ssh_public_key"] = ssh_public_key
        return GkeCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> pulumi.Output[str]:
        """
        CAST.AI agent cluster token
        """
        return pulumi.get(self, "cluster_token")

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[str]:
        """
        CAST AI credentials id for cluster
        """
        return pulumi.get(self, "credentials_id")

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Output[Optional[str]]:
        """
        GCP credentials.json from ServiceAccount with credentials for CAST AI
        """
        return pulumi.get(self, "credentials_json")

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> pulumi.Output[Optional[bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        GCP cluster zone in case of zonal or region in case of regional cluster
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        GKE cluster name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        GCP project id
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Output[Optional[str]]:
        """
        SSHPublicKey for nodes
        """
        return pulumi.get(self, "ssh_public_key")

