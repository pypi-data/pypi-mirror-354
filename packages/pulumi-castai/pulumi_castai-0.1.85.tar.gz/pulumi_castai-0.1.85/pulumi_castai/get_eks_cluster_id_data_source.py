# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEksClusterIdDataSourceResult',
    'AwaitableGetEksClusterIdDataSourceResult',
    'get_eks_cluster_id_data_source',
    'get_eks_cluster_id_data_source_output',
]

@pulumi.output_type
class GetEksClusterIdDataSourceResult:
    """
    A collection of values returned by GetEksClusterIdDataSource.
    """
    def __init__(__self__, account_id=None, cluster_name=None, id=None, region=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


class AwaitableGetEksClusterIdDataSourceResult(GetEksClusterIdDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEksClusterIdDataSourceResult(
            account_id=self.account_id,
            cluster_name=self.cluster_name,
            id=self.id,
            region=self.region)


def get_eks_cluster_id_data_source(account_id: Optional[str] = None,
                                   cluster_name: Optional[str] = None,
                                   region: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEksClusterIdDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['clusterName'] = cluster_name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:aws:GetEksClusterIdDataSource', __args__, opts=opts, typ=GetEksClusterIdDataSourceResult).value

    return AwaitableGetEksClusterIdDataSourceResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'))
def get_eks_cluster_id_data_source_output(account_id: Optional[pulumi.Input[str]] = None,
                                          cluster_name: Optional[pulumi.Input[str]] = None,
                                          region: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEksClusterIdDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['clusterName'] = cluster_name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:aws:GetEksClusterIdDataSource', __args__, opts=opts, typ=GetEksClusterIdDataSourceResult)
    return __ret__.apply(lambda __response__: GetEksClusterIdDataSourceResult(
        account_id=pulumi.get(__response__, 'account_id'),
        cluster_name=pulumi.get(__response__, 'cluster_name'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region')))
