# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EksClusterArgs', 'EksCluster']

@pulumi.input_type
class EksClusterArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 dns_cluster_ip: Optional[pulumi.Input[str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a EksCluster resource.
        :param pulumi.Input[str] account_id: ID of AWS account
        :param pulumi.Input[str] region: AWS region where the cluster is placed
        :param pulumi.Input[str] access_key_id: AWS access key ID of the CAST AI IAM account
        :param pulumi.Input[str] assume_role_arn: AWS ARN for assume role that should be used instead of IAM account
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[str] dns_cluster_ip: Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        :param pulumi.Input[str] instance_profile_arn: AWS ARN of the instance profile to be used by CAST AI
        :param pulumi.Input[str] name: name of your EKS cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] override_security_groups: Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        :param pulumi.Input[str] secret_access_key: AWS secret access key of the CAST AI IAM account
        :param pulumi.Input[str] ssh_public_key: Accepted values are base64 encoded SSH public key or AWS key pair ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags which should be added to CAST AI nodes
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "region", region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if dns_cluster_ip is not None:
            pulumi.set(__self__, "dns_cluster_ip", dns_cluster_ip)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_security_groups is not None:
            pulumi.set(__self__, "override_security_groups", override_security_groups)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID of the CAST AI IAM account
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS ARN for assume role that should be used instead of IAM account
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_arn", value)

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @property
    @pulumi.getter(name="dnsClusterIp")
    def dns_cluster_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        """
        return pulumi.get(self, "dns_cluster_ip")

    @dns_cluster_ip.setter
    def dns_cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_cluster_ip", value)

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS ARN of the instance profile to be used by CAST AI
        """
        return pulumi.get(self, "instance_profile_arn")

    @instance_profile_arn.setter
    def instance_profile_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_profile_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSecurityGroups")
    def override_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "override_security_groups")

    @override_security_groups.setter
    def override_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "override_security_groups", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS secret access key of the CAST AI IAM account
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Accepted values are base64 encoded SSH public key or AWS key pair ID.
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags which should be added to CAST AI nodes
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _EksClusterState:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 agent_token: Optional[pulumi.Input[str]] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 dns_cluster_ip: Optional[pulumi.Input[str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering EksCluster resources.
        :param pulumi.Input[str] access_key_id: AWS access key ID of the CAST AI IAM account
        :param pulumi.Input[str] account_id: ID of AWS account
        :param pulumi.Input[str] assume_role_arn: AWS ARN for assume role that should be used instead of IAM account
        :param pulumi.Input[str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[str] dns_cluster_ip: Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        :param pulumi.Input[str] instance_profile_arn: AWS ARN of the instance profile to be used by CAST AI
        :param pulumi.Input[str] name: name of your EKS cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] override_security_groups: Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        :param pulumi.Input[str] region: AWS region where the cluster is placed
        :param pulumi.Input[str] secret_access_key: AWS secret access key of the CAST AI IAM account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: IDs of security groups that are used by CAST AI
        :param pulumi.Input[str] ssh_public_key: Accepted values are base64 encoded SSH public key or AWS key pair ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags which should be added to CAST AI nodes
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if agent_token is not None:
            warnings.warn("""agent_token is deprecated, use cluster_token instead""", DeprecationWarning)
            pulumi.log.warn("""agent_token is deprecated: agent_token is deprecated, use cluster_token instead""")
        if agent_token is not None:
            pulumi.set(__self__, "agent_token", agent_token)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if dns_cluster_ip is not None:
            pulumi.set(__self__, "dns_cluster_ip", dns_cluster_ip)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_security_groups is not None:
            pulumi.set(__self__, "override_security_groups", override_security_groups)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID of the CAST AI IAM account
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="agentToken")
    @_utilities.deprecated("""agent_token is deprecated, use cluster_token instead""")
    def agent_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_token")

    @agent_token.setter
    def agent_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_token", value)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS ARN for assume role that should be used instead of IAM account
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_arn", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @property
    @pulumi.getter(name="dnsClusterIp")
    def dns_cluster_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        """
        return pulumi.get(self, "dns_cluster_ip")

    @dns_cluster_ip.setter
    def dns_cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_cluster_ip", value)

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS ARN of the instance profile to be used by CAST AI
        """
        return pulumi.get(self, "instance_profile_arn")

    @instance_profile_arn.setter
    def instance_profile_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_profile_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideSecurityGroups")
    def override_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "override_security_groups")

    @override_security_groups.setter
    def override_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "override_security_groups", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS secret access key of the CAST AI IAM account
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IDs of security groups that are used by CAST AI
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Accepted values are base64 encoded SSH public key or AWS key pair ID.
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags which should be added to CAST AI nodes
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class EksCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 dns_cluster_ip: Optional[pulumi.Input[str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        EKS cluster resource allows connecting an existing EKS cluster to CAST AI.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: AWS access key ID of the CAST AI IAM account
        :param pulumi.Input[str] account_id: ID of AWS account
        :param pulumi.Input[str] assume_role_arn: AWS ARN for assume role that should be used instead of IAM account
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[str] dns_cluster_ip: Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        :param pulumi.Input[str] instance_profile_arn: AWS ARN of the instance profile to be used by CAST AI
        :param pulumi.Input[str] name: name of your EKS cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] override_security_groups: Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        :param pulumi.Input[str] region: AWS region where the cluster is placed
        :param pulumi.Input[str] secret_access_key: AWS secret access key of the CAST AI IAM account
        :param pulumi.Input[str] ssh_public_key: Accepted values are base64 encoded SSH public key or AWS key pair ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags which should be added to CAST AI nodes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EksClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        EKS cluster resource allows connecting an existing EKS cluster to CAST AI.

        :param str resource_name: The name of the resource.
        :param EksClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EksClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
                 dns_cluster_ip: Optional[pulumi.Input[str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 ssh_public_key: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EksClusterArgs.__new__(EksClusterArgs)

            __props__.__dict__["access_key_id"] = None if access_key_id is None else pulumi.Output.secret(access_key_id)
            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["assume_role_arn"] = assume_role_arn
            __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
            __props__.__dict__["dns_cluster_ip"] = dns_cluster_ip
            __props__.__dict__["instance_profile_arn"] = instance_profile_arn
            __props__.__dict__["name"] = name
            __props__.__dict__["override_security_groups"] = override_security_groups
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["secret_access_key"] = None if secret_access_key is None else pulumi.Output.secret(secret_access_key)
            __props__.__dict__["ssh_public_key"] = ssh_public_key
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["tags"] = tags
            __props__.__dict__["agent_token"] = None
            __props__.__dict__["credentials_id"] = None
            __props__.__dict__["security_groups"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessKeyId", "agentToken", "secretAccessKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EksCluster, __self__).__init__(
            'castai:aws:EksCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key_id: Optional[pulumi.Input[str]] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            agent_token: Optional[pulumi.Input[str]] = None,
            assume_role_arn: Optional[pulumi.Input[str]] = None,
            credentials_id: Optional[pulumi.Input[str]] = None,
            delete_nodes_on_disconnect: Optional[pulumi.Input[bool]] = None,
            dns_cluster_ip: Optional[pulumi.Input[str]] = None,
            instance_profile_arn: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            secret_access_key: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssh_public_key: Optional[pulumi.Input[str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'EksCluster':
        """
        Get an existing EksCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: AWS access key ID of the CAST AI IAM account
        :param pulumi.Input[str] account_id: ID of AWS account
        :param pulumi.Input[str] assume_role_arn: AWS ARN for assume role that should be used instead of IAM account
        :param pulumi.Input[str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[str] dns_cluster_ip: Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        :param pulumi.Input[str] instance_profile_arn: AWS ARN of the instance profile to be used by CAST AI
        :param pulumi.Input[str] name: name of your EKS cluster
        :param pulumi.Input[Sequence[pulumi.Input[str]]] override_security_groups: Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        :param pulumi.Input[str] region: AWS region where the cluster is placed
        :param pulumi.Input[str] secret_access_key: AWS secret access key of the CAST AI IAM account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: IDs of security groups that are used by CAST AI
        :param pulumi.Input[str] ssh_public_key: Accepted values are base64 encoded SSH public key or AWS key pair ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags which should be added to CAST AI nodes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EksClusterState.__new__(_EksClusterState)

        __props__.__dict__["access_key_id"] = access_key_id
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["agent_token"] = agent_token
        __props__.__dict__["assume_role_arn"] = assume_role_arn
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
        __props__.__dict__["dns_cluster_ip"] = dns_cluster_ip
        __props__.__dict__["instance_profile_arn"] = instance_profile_arn
        __props__.__dict__["name"] = name
        __props__.__dict__["override_security_groups"] = override_security_groups
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_access_key"] = secret_access_key
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["ssh_public_key"] = ssh_public_key
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        return EksCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        AWS access key ID of the CAST AI IAM account
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="agentToken")
    @_utilities.deprecated("""agent_token is deprecated, use cluster_token instead""")
    def agent_token(self) -> pulumi.Output[str]:
        return pulumi.get(self, "agent_token")

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> pulumi.Output[Optional[str]]:
        """
        AWS ARN for assume role that should be used instead of IAM account
        """
        return pulumi.get(self, "assume_role_arn")

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[str]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> pulumi.Output[Optional[bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @property
    @pulumi.getter(name="dnsClusterIp")
    def dns_cluster_ip(self) -> pulumi.Output[Optional[str]]:
        """
        Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        """
        return pulumi.get(self, "dns_cluster_ip")

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> pulumi.Output[Optional[str]]:
        """
        AWS ARN of the instance profile to be used by CAST AI
        """
        return pulumi.get(self, "instance_profile_arn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideSecurityGroups")
    def override_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "override_security_groups")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Output[Optional[str]]:
        """
        AWS secret access key of the CAST AI IAM account
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        IDs of security groups that are used by CAST AI
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Output[Optional[str]]:
        """
        Accepted values are base64 encoded SSH public key or AWS key pair ID.
        """
        return pulumi.get(self, "ssh_public_key")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Tags which should be added to CAST AI nodes
        """
        return pulumi.get(self, "tags")

