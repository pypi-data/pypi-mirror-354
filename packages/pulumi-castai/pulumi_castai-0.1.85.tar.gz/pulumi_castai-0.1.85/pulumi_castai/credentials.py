# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CredentialsArgs', 'Credentials']

@pulumi.input_type
class CredentialsArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['CredentialsAwsArgs']] = None,
                 azure: Optional[pulumi.Input['CredentialsAzureArgs']] = None,
                 do: Optional[pulumi.Input['CredentialsDoArgs']] = None,
                 gcp: Optional[pulumi.Input['CredentialsGcpArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Credentials resource.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if do is not None:
            pulumi.set(__self__, "do", do)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['CredentialsAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['CredentialsAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['CredentialsAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['CredentialsAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def do(self) -> Optional[pulumi.Input['CredentialsDoArgs']]:
        return pulumi.get(self, "do")

    @do.setter
    def do(self, value: Optional[pulumi.Input['CredentialsDoArgs']]):
        pulumi.set(self, "do", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['CredentialsGcpArgs']]:
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['CredentialsGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CredentialsState:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['CredentialsAwsArgs']] = None,
                 azure: Optional[pulumi.Input['CredentialsAzureArgs']] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 do: Optional[pulumi.Input['CredentialsDoArgs']] = None,
                 gcp: Optional[pulumi.Input['CredentialsGcpArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Credentials resources.
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if do is not None:
            pulumi.set(__self__, "do", do)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['CredentialsAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['CredentialsAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['CredentialsAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['CredentialsAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def do(self) -> Optional[pulumi.Input['CredentialsDoArgs']]:
        return pulumi.get(self, "do")

    @do.setter
    def do(self, value: Optional[pulumi.Input['CredentialsDoArgs']]):
        pulumi.set(self, "do", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['CredentialsGcpArgs']]:
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['CredentialsGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class Credentials(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[Union['CredentialsAwsArgs', 'CredentialsAwsArgsDict']]] = None,
                 azure: Optional[pulumi.Input[Union['CredentialsAzureArgs', 'CredentialsAzureArgsDict']]] = None,
                 do: Optional[pulumi.Input[Union['CredentialsDoArgs', 'CredentialsDoArgsDict']]] = None,
                 gcp: Optional[pulumi.Input[Union['CredentialsGcpArgs', 'CredentialsGcpArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Credentials resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CredentialsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Credentials resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CredentialsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CredentialsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws: Optional[pulumi.Input[Union['CredentialsAwsArgs', 'CredentialsAwsArgsDict']]] = None,
                 azure: Optional[pulumi.Input[Union['CredentialsAzureArgs', 'CredentialsAzureArgsDict']]] = None,
                 do: Optional[pulumi.Input[Union['CredentialsDoArgs', 'CredentialsDoArgsDict']]] = None,
                 gcp: Optional[pulumi.Input[Union['CredentialsGcpArgs', 'CredentialsGcpArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CredentialsArgs.__new__(CredentialsArgs)

            __props__.__dict__["aws"] = None if aws is None else pulumi.Output.secret(aws)
            __props__.__dict__["azure"] = None if azure is None else pulumi.Output.secret(azure)
            __props__.__dict__["do"] = None if do is None else pulumi.Output.secret(do)
            __props__.__dict__["gcp"] = None if gcp is None else pulumi.Output.secret(gcp)
            __props__.__dict__["name"] = name
            __props__.__dict__["cloud"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["aws", "azure", "do", "gcp"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Credentials, __self__).__init__(
            'castai:index:Credentials',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws: Optional[pulumi.Input[Union['CredentialsAwsArgs', 'CredentialsAwsArgsDict']]] = None,
            azure: Optional[pulumi.Input[Union['CredentialsAzureArgs', 'CredentialsAzureArgsDict']]] = None,
            cloud: Optional[pulumi.Input[str]] = None,
            do: Optional[pulumi.Input[Union['CredentialsDoArgs', 'CredentialsDoArgsDict']]] = None,
            gcp: Optional[pulumi.Input[Union['CredentialsGcpArgs', 'CredentialsGcpArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Credentials':
        """
        Get an existing Credentials resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CredentialsState.__new__(_CredentialsState)

        __props__.__dict__["aws"] = aws
        __props__.__dict__["azure"] = azure
        __props__.__dict__["cloud"] = cloud
        __props__.__dict__["do"] = do
        __props__.__dict__["gcp"] = gcp
        __props__.__dict__["name"] = name
        return Credentials(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output[Optional['outputs.CredentialsAws']]:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output[Optional['outputs.CredentialsAzure']]:
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def do(self) -> pulumi.Output[Optional['outputs.CredentialsDo']]:
        return pulumi.get(self, "do")

    @property
    @pulumi.getter
    def gcp(self) -> pulumi.Output[Optional['outputs.CredentialsGcp']]:
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

