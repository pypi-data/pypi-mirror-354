# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEksSettingsDataSourceResult',
    'AwaitableGetEksSettingsDataSourceResult',
    'get_eks_settings_data_source',
    'get_eks_settings_data_source_output',
]

@pulumi.output_type
class GetEksSettingsDataSourceResult:
    """
    A collection of values returned by GetEksSettingsDataSource.
    """
    def __init__(__self__, account_id=None, cluster=None, iam_managed_policies=None, iam_policy_json=None, iam_user_policy_json=None, id=None, instance_profile_policies=None, region=None, vpc=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if iam_managed_policies and not isinstance(iam_managed_policies, list):
            raise TypeError("Expected argument 'iam_managed_policies' to be a list")
        pulumi.set(__self__, "iam_managed_policies", iam_managed_policies)
        if iam_policy_json and not isinstance(iam_policy_json, str):
            raise TypeError("Expected argument 'iam_policy_json' to be a str")
        pulumi.set(__self__, "iam_policy_json", iam_policy_json)
        if iam_user_policy_json and not isinstance(iam_user_policy_json, str):
            raise TypeError("Expected argument 'iam_user_policy_json' to be a str")
        pulumi.set(__self__, "iam_user_policy_json", iam_user_policy_json)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_profile_policies and not isinstance(instance_profile_policies, list):
            raise TypeError("Expected argument 'instance_profile_policies' to be a list")
        pulumi.set(__self__, "instance_profile_policies", instance_profile_policies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def cluster(self) -> str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="iamManagedPolicies")
    def iam_managed_policies(self) -> Sequence[str]:
        return pulumi.get(self, "iam_managed_policies")

    @property
    @pulumi.getter(name="iamPolicyJson")
    def iam_policy_json(self) -> str:
        return pulumi.get(self, "iam_policy_json")

    @property
    @pulumi.getter(name="iamUserPolicyJson")
    def iam_user_policy_json(self) -> str:
        return pulumi.get(self, "iam_user_policy_json")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceProfilePolicies")
    def instance_profile_policies(self) -> Sequence[str]:
        return pulumi.get(self, "instance_profile_policies")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def vpc(self) -> str:
        return pulumi.get(self, "vpc")


class AwaitableGetEksSettingsDataSourceResult(GetEksSettingsDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEksSettingsDataSourceResult(
            account_id=self.account_id,
            cluster=self.cluster,
            iam_managed_policies=self.iam_managed_policies,
            iam_policy_json=self.iam_policy_json,
            iam_user_policy_json=self.iam_user_policy_json,
            id=self.id,
            instance_profile_policies=self.instance_profile_policies,
            region=self.region,
            vpc=self.vpc)


def get_eks_settings_data_source(account_id: Optional[str] = None,
                                 cluster: Optional[str] = None,
                                 region: Optional[str] = None,
                                 vpc: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEksSettingsDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['cluster'] = cluster
    __args__['region'] = region
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:aws:GetEksSettingsDataSource', __args__, opts=opts, typ=GetEksSettingsDataSourceResult).value

    return AwaitableGetEksSettingsDataSourceResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        cluster=pulumi.get(__ret__, 'cluster'),
        iam_managed_policies=pulumi.get(__ret__, 'iam_managed_policies'),
        iam_policy_json=pulumi.get(__ret__, 'iam_policy_json'),
        iam_user_policy_json=pulumi.get(__ret__, 'iam_user_policy_json'),
        id=pulumi.get(__ret__, 'id'),
        instance_profile_policies=pulumi.get(__ret__, 'instance_profile_policies'),
        region=pulumi.get(__ret__, 'region'),
        vpc=pulumi.get(__ret__, 'vpc'))
def get_eks_settings_data_source_output(account_id: Optional[pulumi.Input[str]] = None,
                                        cluster: Optional[pulumi.Input[str]] = None,
                                        region: Optional[pulumi.Input[str]] = None,
                                        vpc: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEksSettingsDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['cluster'] = cluster
    __args__['region'] = region
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:aws:GetEksSettingsDataSource', __args__, opts=opts, typ=GetEksSettingsDataSourceResult)
    return __ret__.apply(lambda __response__: GetEksSettingsDataSourceResult(
        account_id=pulumi.get(__response__, 'account_id'),
        cluster=pulumi.get(__response__, 'cluster'),
        iam_managed_policies=pulumi.get(__response__, 'iam_managed_policies'),
        iam_policy_json=pulumi.get(__response__, 'iam_policy_json'),
        iam_user_policy_json=pulumi.get(__response__, 'iam_user_policy_json'),
        id=pulumi.get(__response__, 'id'),
        instance_profile_policies=pulumi.get(__response__, 'instance_profile_policies'),
        region=pulumi.get(__response__, 'region'),
        vpc=pulumi.get(__response__, 'vpc')))
