# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetCrossMarginRiskLimitData(BaseModel):
    """
    GetCrossMarginRiskLimitData

    Attributes:
        symbol (str): Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)
        max_open_size (int): Maximum amount of open position(Unit is **lots**) 
        max_open_value (str): Maximum value of open position(Unit is **quoteCcy**) 
        total_margin (str): Margin amount used for max position calculation.
        price (str): Price used for max position calculation. Defaults to latest transaction price
        leverage (str): Leverage used for max position calculation.
        mmr (str): Maintenance Margin Rate
        imr (str): Initial Margin Rate
        currency (str): Margin Currency
    """

    symbol: Optional[str] = Field(
        default=None,
        description=
        "Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220)"
    )
    max_open_size: Optional[int] = Field(
        default=None,
        description="Maximum amount of open position(Unit is **lots**) ",
        alias="maxOpenSize")
    max_open_value: Optional[str] = Field(
        default=None,
        description="Maximum value of open position(Unit is **quoteCcy**) ",
        alias="maxOpenValue")
    total_margin: Optional[str] = Field(
        default=None,
        description="Margin amount used for max position calculation.",
        alias="totalMargin")
    price: Optional[str] = Field(
        default=None,
        description=
        "Price used for max position calculation. Defaults to latest transaction price"
    )
    leverage: Optional[str] = Field(
        default=None,
        description="Leverage used for max position calculation.")
    mmr: Optional[str] = Field(default=None,
                               description="Maintenance Margin Rate")
    imr: Optional[str] = Field(default=None, description="Initial Margin Rate")
    currency: Optional[str] = Field(default=None,
                                    description="Margin Currency")

    __properties: ClassVar[List[str]] = [
        "symbol", "maxOpenSize", "maxOpenValue", "totalMargin", "price",
        "leverage", "mmr", "imr", "currency"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[GetCrossMarginRiskLimitData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls,
        obj: Optional[Dict[str,
                           Any]]) -> Optional[GetCrossMarginRiskLimitData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "maxOpenSize": obj.get("maxOpenSize"),
            "maxOpenValue": obj.get("maxOpenValue"),
            "totalMargin": obj.get("totalMargin"),
            "price": obj.get("price"),
            "leverage": obj.get("leverage"),
            "mmr": obj.get("mmr"),
            "imr": obj.get("imr"),
            "currency": obj.get("currency")
        })
        return _obj
