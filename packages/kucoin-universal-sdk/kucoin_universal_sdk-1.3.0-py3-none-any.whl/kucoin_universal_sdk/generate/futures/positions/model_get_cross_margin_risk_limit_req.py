# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetCrossMarginRiskLimitReq(BaseModel):
    """
    GetCrossMarginRiskLimitReq

    Attributes:
        symbol (str): Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)
        total_margin (str): The position opening amount, in the contract's settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it's 10,000 USD; for others, it's 10,000 divided by the token's USDT price.
        leverage (int): Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage.
    """

    symbol: Optional[str] = Field(
        default=None,
        description=
        "Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)"
    )
    total_margin: Optional[str] = Field(
        default=None,
        description=
        "The position opening amount, in the contract's settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it's 10,000 USD; for others, it's 10,000 divided by the token's USDT price.",
        alias="totalMargin")
    leverage: Optional[int] = Field(
        default=None,
        description=
        "Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage."
    )

    __properties: ClassVar[List[str]] = ["symbol", "totalMargin", "leverage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[GetCrossMarginRiskLimitReq]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls,
            obj: Optional[Dict[str,
                               Any]]) -> Optional[GetCrossMarginRiskLimitReq]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "totalMargin": obj.get("totalMargin"),
            "leverage": obj.get("leverage")
        })
        return _obj


class GetCrossMarginRiskLimitReqBuilder:

    def __init__(self):
        self.obj = {}

    def set_symbol(self, value: str) -> GetCrossMarginRiskLimitReqBuilder:
        """
        Symbol of the contract. Please refer to [Get Symbol endpoint: symbol](https://www.kucoin.com/docs-new/api-3470220), (You may add up to 50 symbols. Use a halfwidth comma to each IP)
        """
        self.obj['symbol'] = value
        return self

    def set_total_margin(self,
                         value: str) -> GetCrossMarginRiskLimitReqBuilder:
        """
        The position opening amount, in the contract's settlement currency. Defaults to 10,000 in margin currency for max position calculation. For USDT/USDC, it's 10,000 USD; for others, it's 10,000 divided by the token's USDT price.
        """
        self.obj['totalMargin'] = value
        return self

    def set_leverage(self, value: int) -> GetCrossMarginRiskLimitReqBuilder:
        """
        Calculates the max position size at the specified leverage. Defaults to the symbol’s max cross leverage.
        """
        self.obj['leverage'] = value
        return self

    def build(self) -> GetCrossMarginRiskLimitReq:
        return GetCrossMarginRiskLimitReq(**self.obj)
