# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from .model_batch_add_orders_old_order_list import BatchAddOrdersOldOrderList


class BatchAddOrdersOldReq(BaseModel):
    """
    BatchAddOrdersOldReq

    Attributes:
        order_list (list[BatchAddOrdersOldOrderList]): 
        symbol (str): 
    """

    order_list: Optional[List[BatchAddOrdersOldOrderList]] = Field(
        default=None, alias="orderList")
    symbol: Optional[str] = None

    __properties: ClassVar[List[str]] = ["orderList", "symbol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[BatchAddOrdersOldReq]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in order_list (list)
        _items = []
        if self.order_list:
            for _item_order_list in self.order_list:
                if _item_order_list:
                    _items.append(_item_order_list.to_dict())
            _dict['orderList'] = _items
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[BatchAddOrdersOldReq]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderList": [
                BatchAddOrdersOldOrderList.from_dict(_item)
                for _item in obj["orderList"]
            ] if obj.get("orderList") is not None else None,
            "symbol":
            obj.get("symbol")
        })
        return _obj


class BatchAddOrdersOldReqBuilder:

    def __init__(self):
        self.obj = {}

    def set_order_list(
        self, value: list[BatchAddOrdersOldOrderList]
    ) -> BatchAddOrdersOldReqBuilder:
        self.obj['orderList'] = value
        return self

    def set_symbol(self, value: str) -> BatchAddOrdersOldReqBuilder:
        self.obj['symbol'] = value
        return self

    def build(self) -> BatchAddOrdersOldReq:
        return BatchAddOrdersOldReq(**self.obj)
