# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Callable, ClassVar, Dict, List, Optional


class IsolatedMarginPositionChangeAssetsValue(BaseModel):
    """
    IsolatedMarginPositionChangeAssetsValue

    Attributes:
        total (str): 
        hold (str): 
        liability_principal (str): 
        liability_interest (str): 
    """

    total: Optional[str] = None
    hold: Optional[str] = None
    liability_principal: Optional[str] = Field(default=None,
                                               alias="liabilityPrincipal")
    liability_interest: Optional[str] = Field(default=None,
                                              alias="liabilityInterest")

    __properties: ClassVar[List[str]] = [
        "total", "hold", "liabilityPrincipal", "liabilityInterest"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(
            cls, json_str: str
    ) -> Optional[IsolatedMarginPositionChangeAssetsValue]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Optional[Dict[str, Any]]
    ) -> Optional[IsolatedMarginPositionChangeAssetsValue]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total":
            obj.get("total"),
            "hold":
            obj.get("hold"),
            "liabilityPrincipal":
            obj.get("liabilityPrincipal"),
            "liabilityInterest":
            obj.get("liabilityInterest")
        })
        return _obj
