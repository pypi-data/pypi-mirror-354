# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetCrossMarginAccountAccounts(BaseModel):
    """
    GetCrossMarginAccountAccounts

    Attributes:
        currency (str): currency
        total (str): Total Assets
        available (str): Account available assets (total assets - frozen)
        hold (str): Account frozen assets
        liability (str): Liabilities
        max_borrow_size (str): The user's remaining maximum loan amount
        borrow_enabled (bool): Support borrow or not
        transfer_in_enabled (bool): Support transfer or not
        liability_principal (str): Outstanding principal – the unpaid loan amount
        liability_interest (str): Accrued interest – the unpaid interest amount
    """

    currency: Optional[str] = Field(default=None, description="currency")
    total: Optional[str] = Field(default=None, description="Total Assets")
    available: Optional[str] = Field(
        default=None,
        description="Account available assets (total assets - frozen)")
    hold: Optional[str] = Field(default=None,
                                description="Account frozen assets")
    liability: Optional[str] = Field(default=None, description="Liabilities")
    max_borrow_size: Optional[str] = Field(
        default=None,
        description="The user's remaining maximum loan amount",
        alias="maxBorrowSize")
    borrow_enabled: Optional[bool] = Field(default=None,
                                           description="Support borrow or not",
                                           alias="borrowEnabled")
    transfer_in_enabled: Optional[bool] = Field(
        default=None,
        description="Support transfer or not",
        alias="transferInEnabled")
    liability_principal: Optional[str] = Field(
        default=None,
        description="Outstanding principal – the unpaid loan amount",
        alias="liabilityPrincipal")
    liability_interest: Optional[str] = Field(
        default=None,
        description="Accrued interest – the unpaid interest amount",
        alias="liabilityInterest")

    __properties: ClassVar[List[str]] = [
        "currency", "total", "available", "hold", "liability", "maxBorrowSize",
        "borrowEnabled", "transferInEnabled", "liabilityPrincipal",
        "liabilityInterest"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls,
                  json_str: str) -> Optional[GetCrossMarginAccountAccounts]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls,
        obj: Optional[Dict[str,
                           Any]]) -> Optional[GetCrossMarginAccountAccounts]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency":
            obj.get("currency"),
            "total":
            obj.get("total"),
            "available":
            obj.get("available"),
            "hold":
            obj.get("hold"),
            "liability":
            obj.get("liability"),
            "maxBorrowSize":
            obj.get("maxBorrowSize"),
            "borrowEnabled":
            obj.get("borrowEnabled"),
            "transferInEnabled":
            obj.get("transferInEnabled"),
            "liabilityPrincipal":
            obj.get("liabilityPrincipal"),
            "liabilityInterest":
            obj.get("liabilityInterest")
        })
        return _obj
