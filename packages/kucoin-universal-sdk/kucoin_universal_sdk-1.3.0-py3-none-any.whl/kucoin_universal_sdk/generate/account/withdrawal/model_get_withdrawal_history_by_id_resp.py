# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from kucoin_universal_sdk.internal.interfaces.response import Response
from kucoin_universal_sdk.model.common import RestResponse


class GetWithdrawalHistoryByIdResp(BaseModel, Response):
    """
    GetWithdrawalHistoryByIdResp

    Attributes:
        id (str): Unique ID
        uid (int): User ID
        currency (str): A unique currency code that will never change
        chain_id (str): The chain id of currency
        chain_name (str): Chain name of currency
        currency_name (str): Currency name; will change after renaming
        status (str): Status. Available value: REVIEW, PROCESSING, WALLET_PROCESSING, SUCCESS and FAILURE
        failure_reason (str): Failure reason code
        failure_reason_msg (str): Failure reason message
        address (str): Withwrawal address
        memo (str): Address remark. If there’s no remark, it is empty. 
        is_inner (bool): Internal withdrawal or not. 
        amount (str): Withwrawal amount
        fee (str): Fees charged for withwrawal
        wallet_tx_id (str): Wallet Transaction ID
        address_remark (str): Address remark
        remark (str): Remark
        created_at (int): Creation Time (milliseconds)
        cancel_type (CancelTypeEnum): 
        taxes (list[str]): Users in some regions need query this field
        tax_description (str): Tax description
        return_status (ReturnStatusEnum): Return status
        return_amount (str): Return amount
        return_currency (str): Return currency
    """

    class CancelTypeEnum(Enum):
        """
        Attributes:
            CANCELABLE: Cancellable
            CANCELING: Cancelling
            NON_CANCELABLE: Non-Cancellable
        """
        CANCELABLE = 'CANCELABLE'
        CANCELING = 'CANCELING'
        NON_CANCELABLE = 'NON_CANCELABLE'

    class ReturnStatusEnum(Enum):
        """
        Attributes:
            NOT_RETURN: No returned
            PROCESSING: To be returned
            SUCCESS: Returned
        """
        NOT_RETURN = 'NOT_RETURN'
        PROCESSING = 'PROCESSING'
        SUCCESS = 'SUCCESS'

    common_response: Optional[RestResponse] = Field(
        default=None, description="Common response")
    id: Optional[str] = Field(default=None, description="Unique ID")
    uid: Optional[int] = Field(default=None, description="User ID")
    currency: Optional[str] = Field(
        default=None,
        description="A unique currency code that will never change")
    chain_id: Optional[str] = Field(default=None,
                                    description="The chain id of currency",
                                    alias="chainId")
    chain_name: Optional[str] = Field(default=None,
                                      description="Chain name of currency",
                                      alias="chainName")
    currency_name: Optional[str] = Field(
        default=None,
        description="Currency name; will change after renaming",
        alias="currencyName")
    status: Optional[str] = Field(
        default=None,
        description=
        "Status. Available value: REVIEW, PROCESSING, WALLET_PROCESSING, SUCCESS and FAILURE"
    )
    failure_reason: Optional[str] = Field(default=None,
                                          description="Failure reason code",
                                          alias="failureReason")
    failure_reason_msg: Optional[str] = Field(
        default=None,
        description="Failure reason message",
        alias="failureReasonMsg")
    address: Optional[str] = Field(default=None,
                                   description="Withwrawal address")
    memo: Optional[str] = Field(
        default=None,
        description="Address remark. If there’s no remark, it is empty. ")
    is_inner: Optional[bool] = Field(
        default=None,
        description="Internal withdrawal or not. ",
        alias="isInner")
    amount: Optional[str] = Field(default=None,
                                  description="Withwrawal amount")
    fee: Optional[str] = Field(default=None,
                               description="Fees charged for withwrawal")
    wallet_tx_id: Optional[str] = Field(default=None,
                                        description="Wallet Transaction ID",
                                        alias="walletTxId")
    address_remark: Optional[str] = Field(default=None,
                                          description="Address remark",
                                          alias="addressRemark")
    remark: Optional[str] = Field(default=None, description="Remark")
    created_at: Optional[int] = Field(
        default=None,
        description="Creation Time (milliseconds)",
        alias="createdAt")
    cancel_type: Optional[CancelTypeEnum] = Field(default=None,
                                                  alias="cancelType")
    taxes: Optional[List[str]] = Field(
        default=None,
        description="Users in some regions need query this field")
    tax_description: Optional[str] = Field(default=None,
                                           description="Tax description",
                                           alias="taxDescription")
    return_status: Optional[ReturnStatusEnum] = Field(
        default=None, description="Return status", alias="returnStatus")
    return_amount: Optional[str] = Field(default=None,
                                         description="Return amount",
                                         alias="returnAmount")
    return_currency: Optional[str] = Field(default=None,
                                           description="Return currency",
                                           alias="returnCurrency")

    __properties: ClassVar[List[str]] = [
        "id", "uid", "currency", "chainId", "chainName", "currencyName",
        "status", "failureReason", "failureReasonMsg", "address", "memo",
        "isInner", "amount", "fee", "walletTxId", "addressRemark", "remark",
        "createdAt", "cancelType", "taxes", "taxDescription", "returnStatus",
        "returnAmount", "returnCurrency"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls,
                  json_str: str) -> Optional[GetWithdrawalHistoryByIdResp]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls,
        obj: Optional[Dict[str,
                           Any]]) -> Optional[GetWithdrawalHistoryByIdResp]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id":
            obj.get("id"),
            "uid":
            obj.get("uid"),
            "currency":
            obj.get("currency"),
            "chainId":
            obj.get("chainId"),
            "chainName":
            obj.get("chainName"),
            "currencyName":
            obj.get("currencyName"),
            "status":
            obj.get("status"),
            "failureReason":
            obj.get("failureReason"),
            "failureReasonMsg":
            obj.get("failureReasonMsg"),
            "address":
            obj.get("address"),
            "memo":
            obj.get("memo"),
            "isInner":
            obj.get("isInner"),
            "amount":
            obj.get("amount"),
            "fee":
            obj.get("fee"),
            "walletTxId":
            obj.get("walletTxId"),
            "addressRemark":
            obj.get("addressRemark"),
            "remark":
            obj.get("remark"),
            "createdAt":
            obj.get("createdAt"),
            "cancelType":
            obj.get("cancelType"),
            "taxes":
            obj.get("taxes"),
            "taxDescription":
            obj.get("taxDescription"),
            "returnStatus":
            obj.get("returnStatus"),
            "returnAmount":
            obj.get("returnAmount"),
            "returnCurrency":
            obj.get("returnCurrency")
        })
        return _obj

    def set_common_response(self, response: RestResponse):
        self.common_response = response
