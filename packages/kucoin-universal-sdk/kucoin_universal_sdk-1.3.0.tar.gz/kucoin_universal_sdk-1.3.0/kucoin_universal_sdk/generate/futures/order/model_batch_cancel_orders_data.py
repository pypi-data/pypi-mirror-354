# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class BatchCancelOrdersData(BaseModel):
    """
    BatchCancelOrdersData

    Attributes:
        order_id (str): 
        client_oid (str): 
        code (str): 
        msg (str): 
    """

    order_id: Optional[str] = Field(default=None, alias="orderId")
    client_oid: Optional[str] = Field(default=None, alias="clientOid")
    code: Optional[str] = None
    msg: Optional[str] = None

    __properties: ClassVar[List[str]] = ["orderId", "clientOid", "code", "msg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[BatchCancelOrdersData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[BatchCancelOrdersData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderId": obj.get("orderId"),
            "clientOid": obj.get("clientOid"),
            "code": obj.get("code"),
            "msg": obj.get("msg")
        })
        return _obj
