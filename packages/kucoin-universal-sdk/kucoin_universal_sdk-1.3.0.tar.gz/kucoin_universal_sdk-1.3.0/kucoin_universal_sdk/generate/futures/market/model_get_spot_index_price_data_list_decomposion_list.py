# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetSpotIndexPriceDataListDecomposionList(BaseModel):
    """
    GetSpotIndexPriceDataListDecomposionList

    Attributes:
        exchange (str): Exchange
        price (float): Price
        weight (float): Weight
    """

    exchange: Optional[str] = Field(default=None, description="Exchange")
    price: Optional[float] = Field(default=None, description="Price")
    weight: Optional[float] = Field(default=None, description="Weight")

    __properties: ClassVar[List[str]] = ["exchange", "price", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(
            cls, json_str: str
    ) -> Optional[GetSpotIndexPriceDataListDecomposionList]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Optional[Dict[str, Any]]
    ) -> Optional[GetSpotIndexPriceDataListDecomposionList]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exchange": obj.get("exchange"),
            "price": obj.get("price"),
            "weight": obj.get("weight")
        })
        return _obj
