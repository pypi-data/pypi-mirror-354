# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class BatchAddOrdersOldData(BaseModel):
    """
    BatchAddOrdersOldData

    Attributes:
        symbol (str): 
        type (str): 
        side (str): 
        price (str): 
        size (str): 
        funds (str): 
        stp (str): 
        stop (str): 
        stop_price (str): 
        time_in_force (str): 
        cancel_after (int): 
        post_only (bool): 
        hidden (bool): 
        iceberge (bool): 
        iceberg (bool): 
        visible_size (str): 
        channel (str): 
        id (str): 
        status (str): 
        fail_msg (str): 
        client_oid (str): 
    """

    symbol: Optional[str] = None
    type: Optional[str] = None
    side: Optional[str] = None
    price: Optional[str] = None
    size: Optional[str] = None
    funds: Optional[str] = None
    stp: Optional[str] = None
    stop: Optional[str] = None
    stop_price: Optional[str] = Field(default=None, alias="stopPrice")
    time_in_force: Optional[str] = Field(default=None, alias="timeInForce")
    cancel_after: Optional[int] = Field(default=None, alias="cancelAfter")
    post_only: Optional[bool] = Field(default=None, alias="postOnly")
    hidden: Optional[bool] = None
    iceberge: Optional[bool] = None
    iceberg: Optional[bool] = None
    visible_size: Optional[str] = Field(default=None, alias="visibleSize")
    channel: Optional[str] = None
    id: Optional[str] = None
    status: Optional[str] = None
    fail_msg: Optional[str] = Field(default=None, alias="failMsg")
    client_oid: Optional[str] = Field(default=None, alias="clientOid")

    __properties: ClassVar[List[str]] = [
        "symbol", "type", "side", "price", "size", "funds", "stp", "stop",
        "stopPrice", "timeInForce", "cancelAfter", "postOnly", "hidden",
        "iceberge", "iceberg", "visibleSize", "channel", "id", "status",
        "failMsg", "clientOid"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[BatchAddOrdersOldData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[BatchAddOrdersOldData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "type": obj.get("type"),
            "side": obj.get("side"),
            "price": obj.get("price"),
            "size": obj.get("size"),
            "funds": obj.get("funds"),
            "stp": obj.get("stp"),
            "stop": obj.get("stop"),
            "stopPrice": obj.get("stopPrice"),
            "timeInForce": obj.get("timeInForce"),
            "cancelAfter": obj.get("cancelAfter"),
            "postOnly": obj.get("postOnly"),
            "hidden": obj.get("hidden"),
            "iceberge": obj.get("iceberge"),
            "iceberg": obj.get("iceberg"),
            "visibleSize": obj.get("visibleSize"),
            "channel": obj.get("channel"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "failMsg": obj.get("failMsg"),
            "clientOid": obj.get("clientOid")
        })
        return _obj
