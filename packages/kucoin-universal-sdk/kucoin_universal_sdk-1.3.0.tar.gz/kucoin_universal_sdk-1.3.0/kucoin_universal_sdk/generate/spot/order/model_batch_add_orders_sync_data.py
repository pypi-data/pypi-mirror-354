# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class BatchAddOrdersSyncData(BaseModel):
    """
    BatchAddOrdersSyncData

    Attributes:
        order_id (str): The unique order ID generated by the trading system, which can be used later for further actions such as canceling the order.
        client_oid (str): The user self-defined order ID.
        order_time (int): 
        origin_size (str): Original order size
        deal_size (str): Deal size
        remain_size (str): Remain size
        canceled_size (str): Cumulative canceled size
        status (StatusEnum): Order Status. open: order is active; done: order has been completed
        match_time (int): 
        success (bool): Add order success/failure
        fail_msg (str): Error message
    """

    class StatusEnum(Enum):
        """
        Attributes:
            OPEN: 
            DONE: 
        """
        OPEN = 'open'
        DONE = 'done'

    order_id: Optional[str] = Field(
        default=None,
        description=
        "The unique order ID generated by the trading system, which can be used later for further actions such as canceling the order.",
        alias="orderId")
    client_oid: Optional[str] = Field(
        default=None,
        description="The user self-defined order ID.",
        alias="clientOid")
    order_time: Optional[int] = Field(default=None, alias="orderTime")
    origin_size: Optional[str] = Field(default=None,
                                       description="Original order size",
                                       alias="originSize")
    deal_size: Optional[str] = Field(default=None,
                                     description="Deal size",
                                     alias="dealSize")
    remain_size: Optional[str] = Field(default=None,
                                       description="Remain size",
                                       alias="remainSize")
    canceled_size: Optional[str] = Field(
        default=None,
        description="Cumulative canceled size",
        alias="canceledSize")
    status: Optional[StatusEnum] = Field(
        default=None,
        description=
        "Order Status. open: order is active; done: order has been completed")
    match_time: Optional[int] = Field(default=None, alias="matchTime")
    success: Optional[bool] = Field(default=None,
                                    description="Add order success/failure")
    fail_msg: Optional[str] = Field(default=None,
                                    description="Error message",
                                    alias="failMsg")

    __properties: ClassVar[List[str]] = [
        "orderId", "clientOid", "orderTime", "originSize", "dealSize",
        "remainSize", "canceledSize", "status", "matchTime", "success",
        "failMsg"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[BatchAddOrdersSyncData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[BatchAddOrdersSyncData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderId": obj.get("orderId"),
            "clientOid": obj.get("clientOid"),
            "orderTime": obj.get("orderTime"),
            "originSize": obj.get("originSize"),
            "dealSize": obj.get("dealSize"),
            "remainSize": obj.get("remainSize"),
            "canceledSize": obj.get("canceledSize"),
            "status": obj.get("status"),
            "matchTime": obj.get("matchTime"),
            "success": obj.get("success"),
            "failMsg": obj.get("failMsg")
        })
        return _obj
