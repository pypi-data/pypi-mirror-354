# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, Callable, ClassVar, Dict, List, Optional


class MarketSnapshotDataMarketChange24h(BaseModel):
    """
    MarketSnapshotDataMarketChange24h

    Attributes:
        change_price (float): 
        change_rate (float): 
        high (float): 
        low (float): 
        open (float): 
        vol (float): 
        vol_value (float): 
    """

    change_price: Optional[float] = Field(default=None, alias="changePrice")
    change_rate: Optional[float] = Field(default=None, alias="changeRate")
    high: Optional[float] = None
    low: Optional[float] = None
    open: Optional[float] = None
    vol: Optional[float] = None
    vol_value: Optional[float] = Field(default=None, alias="volValue")

    __properties: ClassVar[List[str]] = [
        "changePrice", "changeRate", "high", "low", "open", "vol", "volValue"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(
            cls, json_str: str) -> Optional[MarketSnapshotDataMarketChange24h]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Optional[Dict[str, Any]]
    ) -> Optional[MarketSnapshotDataMarketChange24h]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changePrice": obj.get("changePrice"),
            "changeRate": obj.get("changeRate"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "open": obj.get("open"),
            "vol": obj.get("vol"),
            "volValue": obj.get("volValue")
        })
        return _obj
