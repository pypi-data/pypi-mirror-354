# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetTradeHistoryReq(BaseModel):
    """
    GetTradeHistoryReq

    Attributes:
        symbol (str): symbol
        trade_type (TradeTypeEnum): Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
        order_id (str): The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)
        side (SideEnum): Specify if the order is to 'buy' or 'sell'.
        type (TypeEnum): Specify if the order is a 'limit' order or 'market' order. 
        last_id (int): The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
        limit (int): Default20, Max100
        start_at (int): Start time (milliseconds)
        end_at (int): End time (milliseconds)
    """

    class TradeTypeEnum(Enum):
        """
        Attributes:
            MARGIN_TRADE: 
            MARGIN_ISOLATED_TRADE: 
        """
        MARGIN_TRADE = 'MARGIN_TRADE'
        MARGIN_ISOLATED_TRADE = 'MARGIN_ISOLATED_TRADE'

    class SideEnum(Enum):
        """
        Attributes:
            BUY: 
            SELL: 
        """
        BUY = 'buy'
        SELL = 'sell'

    class TypeEnum(Enum):
        """
        Attributes:
            LIMIT: 
            MARKET: 
        """
        LIMIT = 'limit'
        MARKET = 'market'

    symbol: Optional[str] = Field(default=None, description="symbol")
    trade_type: Optional[TradeTypeEnum] = Field(
        default=None,
        description=
        "Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade",
        alias="tradeType")
    order_id: Optional[str] = Field(
        default=None,
        description=
        "The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)",
        alias="orderId")
    side: Optional[SideEnum] = Field(
        default=None,
        description="Specify if the order is to 'buy' or 'sell'.")
    type: Optional[TypeEnum] = Field(
        default=None,
        description=
        "Specify if the order is a 'limit' order or 'market' order. ")
    last_id: Optional[int] = Field(
        default=None,
        description=
        "The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.",
        alias="lastId")
    limit: Optional[int] = Field(default=20, description="Default20, Max100")
    start_at: Optional[int] = Field(default=None,
                                    description="Start time (milliseconds)",
                                    alias="startAt")
    end_at: Optional[int] = Field(default=None,
                                  description="End time (milliseconds)",
                                  alias="endAt")

    __properties: ClassVar[List[str]] = [
        "symbol", "tradeType", "orderId", "side", "type", "lastId", "limit",
        "startAt", "endAt"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[GetTradeHistoryReq]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[GetTradeHistoryReq]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol":
            obj.get("symbol"),
            "tradeType":
            obj.get("tradeType"),
            "orderId":
            obj.get("orderId"),
            "side":
            obj.get("side"),
            "type":
            obj.get("type"),
            "lastId":
            obj.get("lastId"),
            "limit":
            obj.get("limit") if obj.get("limit") is not None else 20,
            "startAt":
            obj.get("startAt"),
            "endAt":
            obj.get("endAt")
        })
        return _obj


class GetTradeHistoryReqBuilder:

    def __init__(self):
        self.obj = {}

    def set_symbol(self, value: str) -> GetTradeHistoryReqBuilder:
        """
        symbol
        """
        self.obj['symbol'] = value
        return self

    def set_trade_type(
            self, value: GetTradeHistoryReq.TradeTypeEnum
    ) -> GetTradeHistoryReqBuilder:
        """
        Trade type: MARGIN_TRADE - cross margin trade, MARGIN_ISOLATED_TRADE - isolated margin trade
        """
        self.obj['tradeType'] = value
        return self

    def set_order_id(self, value: str) -> GetTradeHistoryReqBuilder:
        """
        The unique order id generated by the trading system (If orderId is specified, please ignore the other query parameters)
        """
        self.obj['orderId'] = value
        return self

    def set_side(
            self,
            value: GetTradeHistoryReq.SideEnum) -> GetTradeHistoryReqBuilder:
        """
        Specify if the order is to 'buy' or 'sell'.
        """
        self.obj['side'] = value
        return self

    def set_type(
            self,
            value: GetTradeHistoryReq.TypeEnum) -> GetTradeHistoryReqBuilder:
        """
        Specify if the order is a 'limit' order or 'market' order. 
        """
        self.obj['type'] = value
        return self

    def set_last_id(self, value: int) -> GetTradeHistoryReqBuilder:
        """
        The ID of the last set of data from the previous data batch. By default, the latest information is given. lastId is used to filter data and paginate. If lastId is not entered, the default is a maximum of 100 returned data items. The return results include lastId, which can be used as a query parameter to look up new data from the next page.
        """
        self.obj['lastId'] = value
        return self

    def set_limit(self, value: int) -> GetTradeHistoryReqBuilder:
        """
        Default20, Max100
        """
        self.obj['limit'] = value
        return self

    def set_start_at(self, value: int) -> GetTradeHistoryReqBuilder:
        """
        Start time (milliseconds)
        """
        self.obj['startAt'] = value
        return self

    def set_end_at(self, value: int) -> GetTradeHistoryReqBuilder:
        """
        End time (milliseconds)
        """
        self.obj['endAt'] = value
        return self

    def build(self) -> GetTradeHistoryReq:
        return GetTradeHistoryReq(**self.obj)
