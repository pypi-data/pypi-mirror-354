# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class SubmitKycReq(BaseModel):
    """
    SubmitKycReq

    Attributes:
        client_uid (str): client uid
        first_name (str): first Name
        last_name (str): last Name
        issue_country (str): ISO country code
        birth_date (str): Birth Date
        identity_type (IdentityTypeEnum): Identity type
        identity_number (str): Identity Number
        expire_date (str): expire Date. If there is no expiration date, please fill in: 2099-01-01
        front_photo (str): **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
        backend_photo (str): **Optional when identityType=passport/bvn,** Back photo of ID, same as above
        face_photo (str): Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
    """

    class IdentityTypeEnum(Enum):
        """
        Attributes:
            IDCARD: id card
            DRIVINGLICENSE: driving license
            PASSPORT: passport
            BVN: bvn
        """
        IDCARD = 'idcard'
        DRIVINGLICENSE = 'drivinglicense'
        PASSPORT = 'passport'
        BVN = 'bvn'

    client_uid: Optional[str] = Field(default=None,
                                      description="client uid",
                                      alias="clientUid")
    first_name: Optional[str] = Field(default=None,
                                      description="first Name",
                                      alias="firstName")
    last_name: Optional[str] = Field(default=None,
                                     description="last Name",
                                     alias="lastName")
    issue_country: Optional[str] = Field(default=None,
                                         description="ISO country code",
                                         alias="issueCountry")
    birth_date: Optional[str] = Field(default=None,
                                      description="Birth Date",
                                      alias="birthDate")
    identity_type: Optional[IdentityTypeEnum] = Field(
        default=None, description="Identity type", alias="identityType")
    identity_number: Optional[str] = Field(default=None,
                                           description="Identity Number",
                                           alias="identityNumber")
    expire_date: Optional[str] = Field(
        default=None,
        description=
        "expire Date. If there is no expiration date, please fill in: 2099-01-01",
        alias="expireDate")
    front_photo: Optional[str] = Field(
        default=None,
        description=
        "**Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB",
        alias="frontPhoto")
    backend_photo: Optional[str] = Field(
        default=None,
        description=
        "**Optional when identityType=passport/bvn,** Back photo of ID, same as above",
        alias="backendPhoto")
    face_photo: Optional[str] = Field(
        default=None,
        description=
        "Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB",
        alias="facePhoto")

    __properties: ClassVar[List[str]] = [
        "clientUid", "firstName", "lastName", "issueCountry", "birthDate",
        "identityType", "identityNumber", "expireDate", "frontPhoto",
        "backendPhoto", "facePhoto"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[SubmitKycReq]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str,
                                          Any]]) -> Optional[SubmitKycReq]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientUid": obj.get("clientUid"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "issueCountry": obj.get("issueCountry"),
            "birthDate": obj.get("birthDate"),
            "identityType": obj.get("identityType"),
            "identityNumber": obj.get("identityNumber"),
            "expireDate": obj.get("expireDate"),
            "frontPhoto": obj.get("frontPhoto"),
            "backendPhoto": obj.get("backendPhoto"),
            "facePhoto": obj.get("facePhoto")
        })
        return _obj


class SubmitKycReqBuilder:

    def __init__(self):
        self.obj = {}

    def set_client_uid(self, value: str) -> SubmitKycReqBuilder:
        """
        client uid
        """
        self.obj['clientUid'] = value
        return self

    def set_first_name(self, value: str) -> SubmitKycReqBuilder:
        """
        first Name
        """
        self.obj['firstName'] = value
        return self

    def set_last_name(self, value: str) -> SubmitKycReqBuilder:
        """
        last Name
        """
        self.obj['lastName'] = value
        return self

    def set_issue_country(self, value: str) -> SubmitKycReqBuilder:
        """
        ISO country code
        """
        self.obj['issueCountry'] = value
        return self

    def set_birth_date(self, value: str) -> SubmitKycReqBuilder:
        """
        Birth Date
        """
        self.obj['birthDate'] = value
        return self

    def set_identity_type(
            self, value: SubmitKycReq.IdentityTypeEnum) -> SubmitKycReqBuilder:
        """
        Identity type
        """
        self.obj['identityType'] = value
        return self

    def set_identity_number(self, value: str) -> SubmitKycReqBuilder:
        """
        Identity Number
        """
        self.obj['identityNumber'] = value
        return self

    def set_expire_date(self, value: str) -> SubmitKycReqBuilder:
        """
        expire Date. If there is no expiration date, please fill in: 2099-01-01
        """
        self.obj['expireDate'] = value
        return self

    def set_front_photo(self, value: str) -> SubmitKycReqBuilder:
        """
        **Optional when identityType=bvn,** Front photo of the ID card, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
        """
        self.obj['frontPhoto'] = value
        return self

    def set_backend_photo(self, value: str) -> SubmitKycReqBuilder:
        """
        **Optional when identityType=passport/bvn,** Back photo of ID, same as above
        """
        self.obj['backendPhoto'] = value
        return self

    def set_face_photo(self, value: str) -> SubmitKycReqBuilder:
        """
        Selfie photo, in base64 format, PNG or JPG is recommended, and the size cannot exceed 2MB. If it exceeds 2MB, it is recommended to adjust the resolution and compress it to less than 2MB
        """
        self.obj['facePhoto'] = value
        return self

    def build(self) -> SubmitKycReq:
        return SubmitKycReq(**self.obj)
