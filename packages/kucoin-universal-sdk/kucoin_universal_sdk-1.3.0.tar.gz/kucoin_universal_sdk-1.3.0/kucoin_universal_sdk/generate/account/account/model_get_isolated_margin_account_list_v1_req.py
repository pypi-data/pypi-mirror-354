# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetIsolatedMarginAccountListV1Req(BaseModel):
    """
    GetIsolatedMarginAccountListV1Req

    Attributes:
        balance_currency (BalanceCurrencyEnum): quote currency, currently only supports USDT, KCS, BTC, USDT as default
    """

    class BalanceCurrencyEnum(Enum):
        """
        Attributes:
            USDT: 
            KCS: 
            BTC: 
        """
        USDT = 'USDT'
        KCS = 'KCS'
        BTC = 'BTC'

    balance_currency: Optional[BalanceCurrencyEnum] = Field(
        default=BalanceCurrencyEnum.BTC,
        description=
        "quote currency, currently only supports USDT, KCS, BTC, USDT as default",
        alias="balanceCurrency")

    __properties: ClassVar[List[str]] = ["balanceCurrency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(
            cls, json_str: str) -> Optional[GetIsolatedMarginAccountListV1Req]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Optional[Dict[str, Any]]
    ) -> Optional[GetIsolatedMarginAccountListV1Req]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balanceCurrency":
            obj.get("balanceCurrency")
            if obj.get("balanceCurrency") is not None else
            GetIsolatedMarginAccountListV1Req.BalanceCurrencyEnum.BTC
        })
        return _obj


class GetIsolatedMarginAccountListV1ReqBuilder:

    def __init__(self):
        self.obj = {}

    def set_balance_currency(
        self, value: GetIsolatedMarginAccountListV1Req.BalanceCurrencyEnum
    ) -> GetIsolatedMarginAccountListV1ReqBuilder:
        """
        quote currency, currently only supports USDT, KCS, BTC, USDT as default
        """
        self.obj['balanceCurrency'] = value
        return self

    def build(self) -> GetIsolatedMarginAccountListV1Req:
        return GetIsolatedMarginAccountListV1Req(**self.obj)
