# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetSpotActualFeeData(BaseModel):
    """
    GetSpotActualFeeData

    Attributes:
        symbol (str): The unique identity of the trading pair; will not change even if the trading pair is renamed
        taker_fee_rate (str): Actual taker fee rate of the symbol
        maker_fee_rate (str): Actual maker fee rate of the symbol
        sell_tax_rate (str): Buy tax rate; this field is visible to users in certain countries
        buy_tax_rate (str): Sell tax rate; this field is visible to users in certain countries
    """

    symbol: Optional[str] = Field(
        default=None,
        description=
        "The unique identity of the trading pair; will not change even if the trading pair is renamed"
    )
    taker_fee_rate: Optional[str] = Field(
        default=None,
        description="Actual taker fee rate of the symbol",
        alias="takerFeeRate")
    maker_fee_rate: Optional[str] = Field(
        default=None,
        description="Actual maker fee rate of the symbol",
        alias="makerFeeRate")
    sell_tax_rate: Optional[str] = Field(
        default=None,
        description=
        "Buy tax rate; this field is visible to users in certain countries",
        alias="sellTaxRate")
    buy_tax_rate: Optional[str] = Field(
        default=None,
        description=
        "Sell tax rate; this field is visible to users in certain countries",
        alias="buyTaxRate")

    __properties: ClassVar[List[str]] = [
        "symbol", "takerFeeRate", "makerFeeRate", "sellTaxRate", "buyTaxRate"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[GetSpotActualFeeData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls, obj: Optional[Dict[str,
                                    Any]]) -> Optional[GetSpotActualFeeData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "takerFeeRate": obj.get("takerFeeRate"),
            "makerFeeRate": obj.get("makerFeeRate"),
            "sellTaxRate": obj.get("sellTaxRate"),
            "buyTaxRate": obj.get("buyTaxRate")
        })
        return _obj
