# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetFuturesSubAccountListV2Accounts(BaseModel):
    """
    GetFuturesSubAccountListV2Accounts

    Attributes:
        account_name (str): Account name, main account is main
        account_equity (float): 
        unrealised_pnl (float): 
        margin_balance (float): 
        position_margin (float): 
        order_margin (float): 
        frozen_funds (float): 
        available_balance (float): 
        currency (str): currency
    """

    account_name: Optional[str] = Field(
        default=None,
        description="Account name, main account is main",
        alias="accountName")
    account_equity: Optional[float] = Field(default=None,
                                            alias="accountEquity")
    unrealised_pnl: Optional[float] = Field(default=None,
                                            alias="unrealisedPNL")
    margin_balance: Optional[float] = Field(default=None,
                                            alias="marginBalance")
    position_margin: Optional[float] = Field(default=None,
                                             alias="positionMargin")
    order_margin: Optional[float] = Field(default=None, alias="orderMargin")
    frozen_funds: Optional[float] = Field(default=None, alias="frozenFunds")
    available_balance: Optional[float] = Field(default=None,
                                               alias="availableBalance")
    currency: Optional[str] = Field(default=None, description="currency")

    __properties: ClassVar[List[str]] = [
        "accountName", "accountEquity", "unrealisedPNL", "marginBalance",
        "positionMargin", "orderMargin", "frozenFunds", "availableBalance",
        "currency"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(
            cls,
            json_str: str) -> Optional[GetFuturesSubAccountListV2Accounts]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: Optional[Dict[str, Any]]
    ) -> Optional[GetFuturesSubAccountListV2Accounts]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountName":
            obj.get("accountName"),
            "accountEquity":
            obj.get("accountEquity"),
            "unrealisedPNL":
            obj.get("unrealisedPNL"),
            "marginBalance":
            obj.get("marginBalance"),
            "positionMargin":
            obj.get("positionMargin"),
            "orderMargin":
            obj.get("orderMargin"),
            "frozenFunds":
            obj.get("frozenFunds"),
            "availableBalance":
            obj.get("availableBalance"),
            "currency":
            obj.get("currency")
        })
        return _obj
