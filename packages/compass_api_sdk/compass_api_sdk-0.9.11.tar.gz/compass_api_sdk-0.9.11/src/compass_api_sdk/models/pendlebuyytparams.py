"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


PendleBuyYtParamsAmountTypedDict = TypeAliasType(
    "PendleBuyYtParamsAmountTypedDict", Union[float, str]
)
r"""The amount of market's Underlying Token you would like to sell for market's Yield Token (YT)."""


PendleBuyYtParamsAmount = TypeAliasType("PendleBuyYtParamsAmount", Union[float, str])
r"""The amount of market's Underlying Token you would like to sell for market's Yield Token (YT)."""


class PendleBuyYtParamsTypedDict(TypedDict):
    market_address: str
    r"""The address of the market identifying which Yield Token (YT) you would like to buy."""
    amount: PendleBuyYtParamsAmountTypedDict
    r"""The amount of market's Underlying Token you would like to sell for market's Yield Token (YT)."""
    action_type: Literal["PENDLE_BUY_YT"]


class PendleBuyYtParams(BaseModel):
    market_address: str
    r"""The address of the market identifying which Yield Token (YT) you would like to buy."""

    amount: PendleBuyYtParamsAmount
    r"""The amount of market's Underlying Token you would like to sell for market's Yield Token (YT)."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["PENDLE_BUY_YT"]],
            AfterValidator(validate_const("PENDLE_BUY_YT")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "PENDLE_BUY_YT"
