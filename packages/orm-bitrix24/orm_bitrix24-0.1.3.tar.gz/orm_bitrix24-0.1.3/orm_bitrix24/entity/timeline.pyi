from typing import ClassVar, Optional, List, Dict, Any, Type, Union
import datetime
from fast_bitrix24 import Bitrix

from .base import BaseEntity, StringField, IntegerField, DateTimeField, BooleanField, RelatedManager, EntityManager

class TimelineCommentEntityManager(EntityManager['TimelineComment']):
    async def get_by_id(self, comment_id: Union[str, int]) -> Optional['TimelineComment']: ...
    async def filter(self, **kwargs) -> List['TimelineComment']: ...

class TimelineComment(BaseEntity):
    ENTITY_NAME: ClassVar[str]
    ENTITY_METHOD: ClassVar[str]
    
    id: Optional[int]
    entity_id: Optional[int]
    entity_type: Optional[int]
    author_id: Optional[int]
    comment: Optional[str]
    created: Optional[datetime.datetime]
    files: Optional[str]
    
    objects: ClassVar[TimelineCommentEntityManager]
    
    def __init__(self, bitrix: Bitrix, data: Optional[Dict[str, Any]] = None) -> None: ...
    @classmethod
    def get_manager(cls, bitrix: Bitrix) -> TimelineCommentEntityManager: ...
    async def save(self) -> 'TimelineComment': ...
    async def delete(self) -> bool: ...

class TimelineCommentManager:
    def __init__(self, bitrix: Bitrix, timeline_manager: 'TimelineManager') -> None: ...
    async def get_all(self) -> List[TimelineComment]: ...
    async def create(self, comment: str, files: Optional[List[int]] = None) -> TimelineComment: ...

class TimelineManager:
    def __init__(self, bitrix: Bitrix, parent_entity: BaseEntity) -> None: ...
    def _get_entity_type(self) -> str: ...
    def _get_entity_type_id(self) -> int: ...
    
    @property
    def comments(self) -> TimelineCommentManager: ...
    
    async def add_log_message(self, title: str, text: str, icon_code: Optional[str] = None) -> dict: ... 