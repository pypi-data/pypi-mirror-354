name: Bump Version and Snapshot Docs

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  packages: read
  issues: read
  pull-requests: write

jobs:
  bump_version_and_snapshot_docs:
    if: >
      github.event.pull_request.merged == true &&
      !contains(join(github.event.pull_request.labels.*.name, ','), 'type: release')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174
        with:
          version: ${{ vars.UV_VERSION }}

      - name: Create environment
        run: uv sync --all-groups --frozen

      - name: Get Labels
        id: get_labels
        uses: actions-ecosystem/action-get-merged-pull-request@59afe90821bb0b555082ce8ff1e36b03f91553d9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Version Type
        id: determine_version
        run: |
          if [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: major"* ]]; then
            echo "type=major" >> $GITHUB_ENV
          elif [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: minor"* ]]; then
            echo "type=minor" >> $GITHUB_ENV
          elif [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: patch"* ]]; then
            echo "type=patch" >> $GITHUB_ENV
          elif [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: pre_l"* ]]; then
            echo "type=pre_l" >> $GITHUB_ENV
          elif [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: pre_n"* ]]; then
            echo "type=pre_n" >> $GITHUB_ENV
          elif [[ "${{ steps.get_labels.outputs.labels }}" == *"bump: skip"* ]]; then
            echo "type=skip" >> $GITHUB_ENV
          else
            echo "type=skip" >> $GITHUB_ENV
          fi

      - name: Bump Version
        if: env.type != 'skip'
        shell: bash -l {0}
        run: |
          source .venv/bin/activate
          NEW_VERSION=$(bump-my-version bump ${{ env.type }} --dry-run -vv | grep 'New version will be' | cut -d ' ' -f7 | tr -d "'")
          OLD_VERSION=$(bump-my-version bump pre_n --dry-run -vv | grep 'Parsing current version' | cut -d ' ' -f6 | tr -d "'")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          bump-my-version bump ${{ env.type }}

      - name: Create or Update Draft Pull Request
        if: env.type != 'skip'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bump-version-${{ env.NEW_VERSION }}
          base: main
          title: "release: bump v${{ env.OLD_VERSION }} to v${{ env.NEW_VERSION }}"
          commit-message: "release: bump v${{ env.OLD_VERSION }} to v${{ env.NEW_VERSION }}"
          labels: "type: release"
          body: |
            Bumps version from v${{ env.OLD_VERSION }} to v${{ env.NEW_VERSION }}.
          draft: false

      - name: Checkout api-docs branch
        uses: actions/checkout@v4
        with:
          ref: api-docs

      - name: Create Previous Version Doc Snapshot
        if: env.type != 'skip'
        run: python manage_versions.py add --version v${{ env.OLD_VERSION }} --from latest

      - name: Commit and Push
        if: env.type != 'skip'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add v${{ env.OLD_VERSION }} versions.json

          if ! git diff-index --quiet HEAD; then
            git commit -m "Create doc snapshot for v${{ env.OLD_VERSION }}"
            git push origin api-docs
          else
            echo "No changes to commit"
          fi
