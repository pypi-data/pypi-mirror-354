[project]
authors = [{ name = "Jacob Pieniazek", email = "jacob@pieniazek.me" }]
maintainers = [{ name = "Jacob Pieniazek", email="jacob@pieniazek.me" }]
dependencies = [
    "econml>=0.15.1",
    "flaml[automl]>=2.2.0",
    "typeguard>=4.3.0",
    "doubleml>=0.8.0",
    "matplotlib>=3.9.2",
    "rich>=13.9.4",
    "patsy>=1.0.1",
]
description = "Extensions & abstractions of advanced econometric techniques leveraging machine learning."
name = "caml"
requires-python = ">= 3.10"
version = "0.0.0-dev15"
license = { text = "MIT" }
readme = "README.md"
keywords = ["causal inference", "econometrics", "machine learning", "automl", "heterogeneity"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "License :: OSI Approved :: MIT License",
]

[project.urls]
Homepage = "https://caml-docs.com"
Documentation = "https://caml-docs.com/"
"Source Code" = "https://github.com/jakepenzak/caml"
"Bug Tracker" = "https://github.com/jakepenzak/caml/issues"

[dependency-groups]
test = [
    "defusedxml>=0.7.1",
    "genbadge>=1.1.1",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
]
dev = [
    "anthropic>=0.42.0",
    "bump-my-version>=0.29.0",
    "jupyter>=1.1.0",
    "marimo>=0.10.4",
    "pre-commit>=3.5.0",
    "pynvim>=0.5.2",
    "ruff>=0.6.2",
]
docs = ["quarto-cli>=1.6.40", "quartodoc>=0.9.1"]

[project.optional-dependencies]
pyspark = [
    "flaml[spark]>=2.2.0",
    "optuna>=3.6.1",
    "pyspark>=3.5.2",
    "ray>=2.35.0",
]
polars = ["polars>=1.17.1", "pyarrow>=20.0.0"]
jax = ["jax>=0.5.2"]
jax-gpu = ["jax[cuda12]>=0.5.2"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
exclude = [
    "scripts/notebooks/",
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    "notebooks/",
]

extend-include = ["*.ipynb"]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]     # Import violations
"**/{tests,docs,tools}/*" = ["E402"] # Import violations

[tool.ruff.lint]
select = ["E", "F", "W", "Q", "D", "I"]
ignore = ["D401", "D100", "D101", "D102", "D103", "E501", "E203"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
filterwarnings = "ignore::DeprecationWarning"
addopts = "--cov=caml/ --cov-report=term-missing --cov-report=html:tests/reports/htmlcov --cov-report=xml:tests/reports/coverage.xml"
markers = [
    "ols: mark tests for the FastOLS/ols module",
    "core: mark tests for the core module",
    "extensions: mark tests for the extensions module",
    "synthetic_data: mark tests for the synthetic data module`",
]

[tool.coverage.run]
omit = ["caml/logging.py", "caml/extensions/plots.py"]

[tool.bumpversion]
current_version = "0.0.0-dev15"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = []

[tool.bumpversion.parts.pre_l]
values = ["dev", "rc", "final"]
optional_value = "final"

[[tool.bumpversion.files]]
filename = "caml/_version.py"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.pyright]
venvPath = "."
venv = ".venv"
