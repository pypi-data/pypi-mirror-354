/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/banbox/banta/build/lib.macosx-10.9-x86_64-cpython-39/bbta */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "bbta.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: [2]banta.Series ---
//
extern long long Array_2_banta_Series_CTor();
extern GoInt Array_2_banta_Series_len(long long handle);
extern long long Array_2_banta_Series_elem(long long handle, GoInt _idx);
extern void Array_2_banta_Series_set(long long handle, GoInt _idx, long long _vl);

// --- wrapping slice: [3]banta.Series ---
//
extern long long Array_3_banta_Series_CTor();
extern GoInt Array_3_banta_Series_len(long long handle);
extern long long Array_3_banta_Series_elem(long long handle, GoInt _idx);
extern void Array_3_banta_Series_set(long long handle, GoInt _idx, long long _vl);

// --- wrapping slice: [4]banta.Series ---
//
extern long long Array_4_banta_Series_CTor();
extern GoInt Array_4_banta_Series_len(long long handle);
extern long long Array_4_banta_Series_elem(long long handle, GoInt _idx);
extern void Array_4_banta_Series_set(long long handle, GoInt _idx, long long _vl);

// --- wrapping slice: []*banta.Series ---
//
extern long long Slice_Ptr_banta_Series_CTor();
extern GoInt Slice_Ptr_banta_Series_len(long long handle);
extern long long Slice_Ptr_banta_Series_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_banta_Series_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_banta_Series_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_banta_Series_append(long long handle, long long _vl);

// --- wrapping slice: []*banta.XState ---
//
extern long long Slice_Ptr_banta_XState_CTor();
extern GoInt Slice_Ptr_banta_XState_len(long long handle);
extern long long Slice_Ptr_banta_XState_elem(long long handle, GoInt _idx);
extern long long Slice_Ptr_banta_XState_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Ptr_banta_XState_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Ptr_banta_XState_append(long long handle, long long _vl);

// --- wrapping map: map[int]*banta.CrossLog ---
//
extern long long Map_int_Ptr_banta_CrossLog_CTor();
extern GoInt Map_int_Ptr_banta_CrossLog_len(long long handle);
extern long long Map_int_Ptr_banta_CrossLog_elem(long long handle, long long _ky);
extern char Map_int_Ptr_banta_CrossLog_contains(long long handle, long long _ky);
extern void Map_int_Ptr_banta_CrossLog_set(long long handle, long long _ky, long long _vl);
extern void Map_int_Ptr_banta_CrossLog_delete(long long handle, long long _ky);
extern long long Map_int_Ptr_banta_CrossLog_keys(long long handle);

// --- wrapping map: map[int]*banta.Series ---
//
extern long long Map_int_Ptr_banta_Series_CTor();
extern GoInt Map_int_Ptr_banta_Series_len(long long handle);
extern long long Map_int_Ptr_banta_Series_elem(long long handle, long long _ky);
extern char Map_int_Ptr_banta_Series_contains(long long handle, long long _ky);
extern void Map_int_Ptr_banta_Series_set(long long handle, long long _ky, long long _vl);
extern void Map_int_Ptr_banta_Series_delete(long long handle, long long _ky);
extern long long Map_int_Ptr_banta_Series_keys(long long handle);

// --- wrapping map: map[string]interface{} ---
//
extern long long Map_string_interface__CTor();
extern GoInt Map_string_interface__len(long long handle);
extern char* Map_string_interface__elem(long long handle, char* _ky);
extern char Map_string_interface__contains(long long handle, char* _ky);
extern void Map_string_interface__set(long long handle, char* _ky, char* _vl);
extern void Map_string_interface__delete(long long handle, char* _ky);
extern long long Map_string_interface__keys(long long handle);

// --- wrapping map: map[string]map[int]*banta.Series ---
//
extern long long Map_string_Map_int_Ptr_banta_Series_CTor();
extern GoInt Map_string_Map_int_Ptr_banta_Series_len(long long handle);
extern long long Map_string_Map_int_Ptr_banta_Series_elem(long long handle, char* _ky);
extern char Map_string_Map_int_Ptr_banta_Series_contains(long long handle, char* _ky);
extern void Map_string_Map_int_Ptr_banta_Series_set(long long handle, char* _ky, long long _vl);
extern void Map_string_Map_int_Ptr_banta_Series_delete(long long handle, char* _ky);
extern long long Map_string_Map_int_Ptr_banta_Series_keys(long long handle);

// --- wrapping struct: banta.CrossLog ---
//
extern long long banta_CrossLog_CTor();
extern long long banta_CrossLog_Time_Get(long long handle);
extern void banta_CrossLog_Time_Set(long long handle, long long val);
extern double banta_CrossLog_PrevVal_Get(long long handle);
extern void banta_CrossLog_PrevVal_Set(long long handle, double val);
extern long long banta_CrossLog_Hist_Get(long long handle);
extern void banta_CrossLog_Hist_Set(long long handle, long long val);

// --- wrapping struct: banta.Series ---
//
extern long long banta_Series_CTor();
extern long long banta_Series_ID_Get(long long handle);
extern void banta_Series_ID_Set(long long handle, long long val);
extern long long banta_Series_Env_Get(long long handle);
extern void banta_Series_Env_Set(long long handle, long long val);
extern long long banta_Series_Data_Get(long long handle);
extern void banta_Series_Data_Set(long long handle, long long val);
extern long long banta_Series_Cols_Get(long long handle);
extern void banta_Series_Cols_Set(long long handle, long long val);
extern long long banta_Series_Time_Get(long long handle);
extern void banta_Series_Time_Set(long long handle, long long val);
extern long long banta_Series_Subs_Get(long long handle);
extern void banta_Series_Subs_Set(long long handle, long long val);
extern long long banta_Series_XLogs_Get(long long handle);
extern void banta_Series_XLogs_Set(long long handle, long long val);
extern long long banta_Series_Set(long long _handle, char* obj);
extern long long banta_Series_Append(long long _handle, char* obj);
extern char banta_Series_Cached(long long _handle);
extern double banta_Series_Get(long long _handle, long long i);
extern long long banta_Series_Range(long long _handle, long long start, long long stop);
extern long long banta_Series_Add(long long _handle, char* obj);
extern long long banta_Series_Sub(long long _handle, char* obj);
extern long long banta_Series_Mul(long long _handle, char* obj);
extern long long banta_Series_Div(long long _handle, char* obj);
extern long long banta_Series_Min(long long _handle, char* obj);
extern long long banta_Series_Max(long long _handle, char* obj);
extern long long banta_Series_Abs(long long _handle);
extern long long banta_Series_Len(long long _handle);
extern void banta_Series_Cut(long long _handle, long long keepNum, char goRun);
extern long long banta_Series_Back(long long _handle, long long num);
extern long long banta_Series_To(long long _handle, char* k, long long v);
extern long long banta_Series_Cross(long long _handle, char* obj2);

// --- wrapping struct: banta.BarEnv ---
//
extern long long banta_BarEnv_CTor();
extern long long banta_BarEnv_TimeStart_Get(long long handle);
extern void banta_BarEnv_TimeStart_Set(long long handle, long long val);
extern long long banta_BarEnv_TimeStop_Get(long long handle);
extern void banta_BarEnv_TimeStop_Set(long long handle, long long val);
extern char* banta_BarEnv_Exchange_Get(long long handle);
extern void banta_BarEnv_Exchange_Set(long long handle, char* val);
extern char* banta_BarEnv_MarketType_Get(long long handle);
extern void banta_BarEnv_MarketType_Set(long long handle, char* val);
extern char* banta_BarEnv_Symbol_Get(long long handle);
extern void banta_BarEnv_Symbol_Set(long long handle, char* val);
extern char* banta_BarEnv_TimeFrame_Get(long long handle);
extern void banta_BarEnv_TimeFrame_Set(long long handle, char* val);
extern long long banta_BarEnv_TFMSecs_Get(long long handle);
extern void banta_BarEnv_TFMSecs_Set(long long handle, long long val);
extern long long banta_BarEnv_BarNum_Get(long long handle);
extern void banta_BarEnv_BarNum_Set(long long handle, long long val);
extern long long banta_BarEnv_MaxCache_Get(long long handle);
extern void banta_BarEnv_MaxCache_Set(long long handle, long long val);
extern long long banta_BarEnv_VNum_Get(long long handle);
extern void banta_BarEnv_VNum_Set(long long handle, long long val);
extern long long banta_BarEnv_Open_Get(long long handle);
extern void banta_BarEnv_Open_Set(long long handle, long long val);
extern long long banta_BarEnv_High_Get(long long handle);
extern void banta_BarEnv_High_Set(long long handle, long long val);
extern long long banta_BarEnv_Low_Get(long long handle);
extern void banta_BarEnv_Low_Set(long long handle, long long val);
extern long long banta_BarEnv_Close_Get(long long handle);
extern void banta_BarEnv_Close_Set(long long handle, long long val);
extern long long banta_BarEnv_Volume_Get(long long handle);
extern void banta_BarEnv_Volume_Set(long long handle, long long val);
extern long long banta_BarEnv_Info_Get(long long handle);
extern void banta_BarEnv_Info_Set(long long handle, long long val);
extern long long banta_BarEnv_Data_Get(long long handle);
extern void banta_BarEnv_Data_Set(long long handle, long long val);
extern char* banta_BarEnv_OnBar(long long _handle, long long barMs, double open, double high, double low, double close, double volume, double info);
extern void banta_BarEnv_Reset(long long _handle, char goRun);
extern void banta_BarEnv_TrimOverflow(long long _handle, char goRun);
extern long long banta_BarEnv_NewSeries(long long _handle, long long data);
extern double banta_BarEnv_BarCount(long long _handle, long long start);
extern long long ta_CHOP(long long e, long long period);
extern long long ta_MFI(long long e, long long period);
extern long long ta_RSI(long long obj, long long period);
extern long long ta_VWMA(long long price, long long vol, long long period);
extern long long ta_CMO(long long obj, long long period);
extern long long ta_CMOBy(long long obj, long long period, long long maType);
extern long long ta_ER(long long obj, long long period);
extern long long ta_PercentRank(long long obj, long long period);
extern long long ta_RSI50(long long obj, long long period);
extern long long ta_TR(long long high, long long low, long long close);
extern long long ta_ADL(long long env);
extern long long ta_HMA(long long obj, long long period);
extern long long ta_KAMA(long long obj, long long period);
extern long long ta_ROC(long long obj, long long period);
extern long long ta_ADXBy(long long high, long long low, long long close, long long period, long long smoothing, long long method);
extern long long ta_ATR(long long high, long long low, long long close, long long period);
extern long long ta_ChaikinOsc(long long env, long long sml, long long big);
extern long long ta_HighestBar(long long obj, long long period);
extern long long ta_WMA(long long obj, long long period);
extern long long ta_CCI(long long obj, long long period);
extern long long ta_RMI(long long obj, long long period, long long montLen);
extern long long ta_StdDev(long long obj, long long period);
extern long long ta_Stoch(long long high, long long low, long long close, long long period);
extern long long ta_ADX(long long high, long long low, long long close, long long period);
extern long long ta_DV2(long long h, long long l, long long c, long long period, long long maLen);
extern long long ta_RMABy(long long obj, long long period, long long initType, double initVal);
extern long long ta_Stiffness(long long obj, long long maLen, long long stiffLen, long long stiffMa);
extern long long ta_CTI(long long obj, long long period);
extern long long ta_HL2(long long h, long long l);
extern long long ta_LinReg(long long obj, long long period);
extern long long ta_UpDown(long long obj, long long vtype);
extern long long ta_STC(long long obj, long long period, long long fast, long long slow, double alpha);
extern long long ta_TD(long long obj);
extern long long ta_UTBot(long long c, long long atr, double rate);
extern long long ta_ALMA(long long obj, long long period, double sigma, double distOff);
extern long long ta_HLC3(long long h, long long l, long long c);
extern long long ta_Highest(long long obj, long long period);
extern long long ta_AvgDev(long long obj, long long period);
extern long long ta_Lowest(long long obj, long long period);
extern long long ta_LowestBar(long long obj, long long period);
extern long long ta_CMF(long long env, long long period);
extern long long ta_Sum(long long obj, long long period);
extern long long ta_WillR(long long e, long long period);
extern long long ta_CRSIBy(long long obj, long long period, long long upDn, long long roc, long long vtype);
extern long long ta_EMABy(long long obj, long long period, long long initType);
extern long long ta_LinRegAdv(long long obj, long long period, char angle, char intercept, char degrees, char r, char slope, char tsf);
extern long long ta_SMA(long long obj, long long period);
extern long long ta_EMA(long long obj, long long period);
extern long long ta_KAMABy(long long obj, long long period, long long fast, long long slow);
extern long long ta_RMA(long long obj, long long period);
extern long long ta_AvgPrice(long long e);
extern long long ta_CRSI(long long obj, long long period, long long upDn, long long roc);
extern long long ta_MACDBy(long long obj, long long fast, long long slow, long long smooth, long long initType);
extern long long ta_BBANDS(long long obj, long long period, double stdUp, double stdDn);
extern long long ta_PluMinDI(long long high, long long low, long long close, long long period);
extern long long ta_HeikinAshi(long long e);
extern long long ta_StochRSI(long long obj, long long rsiLen, long long stochLen, long long maK, long long maD);
extern long long ta_StdDevBy(long long obj, long long period, long long ddof);
extern long long ta_WrapFloatArr(long long res, long long period, double inVal);
extern long long ta_Aroon(long long high, long long low, long long period);
extern long long ta_KDJ(long long high, long long low, long long close, long long period, long long sm1, long long sm2);
extern long long ta_KDJBy(long long high, long long low, long long close, long long period, long long sm1, long long sm2, char* maBy);
extern long long ta_MACD(long long obj, long long fast, long long slow, long long smooth);
extern long long ta_PluMinDM(long long high, long long low, long long close, long long period);

// --- wrapping slice: [2][]float64 ---
//
extern long long Array_2_Slice_float64_CTor();
extern GoInt Array_2_Slice_float64_len(long long handle);
extern long long Array_2_Slice_float64_elem(long long handle, GoInt _idx);
extern void Array_2_Slice_float64_set(long long handle, GoInt _idx, long long _vl);

// --- wrapping slice: [3][]float64 ---
//
extern long long Array_3_Slice_float64_CTor();
extern GoInt Array_3_Slice_float64_len(long long handle);
extern long long Array_3_Slice_float64_elem(long long handle, GoInt _idx);
extern void Array_3_Slice_float64_set(long long handle, GoInt _idx, long long _vl);

// --- wrapping slice: [4][]float64 ---
//
extern long long Array_4_Slice_float64_CTor();
extern GoInt Array_4_Slice_float64_len(long long handle);
extern long long Array_4_Slice_float64_elem(long long handle, GoInt _idx);
extern void Array_4_Slice_float64_set(long long handle, GoInt _idx, long long _vl);
extern long long tav_WMA(long long data, long long period);
extern long long tav_ADX(long long high, long long low, long long close, long long period);
extern long long tav_ALMA(long long data, long long period, double sigma, double distOff);
extern long long tav_CRSI(long long data, long long period, long long upDn, long long rocVal);
extern long long tav_KAMA(long long data, long long period);
extern long long tav_PluMinDI(long long high, long long low, long long close, long long period);
extern long long tav_ADXBy(long long high, long long low, long long close, long long period, long long smoothing, long long method);
extern long long tav_HeikinAshi(long long open, long long high, long long low, long long close);
extern long long tav_RSI(long long data, long long period);
extern long long tav_StdDevBy(long long data, long long period, long long ddof);
extern long long tav_UpDown(long long data, long long vtype);
extern long long tav_ATR(long long high, long long low, long long close, long long period);
extern long long tav_ROC(long long data, long long period);
extern long long tav_HL2(long long a, long long b);
extern long long tav_HighestBar(long long data, long long period);
extern long long tav_LowestBar(long long data, long long period);
extern long long tav_RSIBy(long long data, long long period, double subVal);
extern long long tav_AvgDev(long long data, long long period);
extern long long tav_MACDBy(long long data, long long fast, long long slow, long long smooth, long long initType);
extern long long tav_TD(long long data);
extern long long tav_UTBot(long long c, long long atr, double rate);
extern long long tav_Aroon(long long high, long long low, long long period);
extern long long tav_DV2(long long h, long long l, long long c, long long period, long long maLen);
extern long long tav_RMABy(long long data, long long period, long long initType, double initVal);
extern long long tav_Stiffness(long long data, long long maLen, long long stiffLen, long long stiffMa);
extern long long tav_VWMA(long long price, long long volume, long long period);
extern long long tav_HLC3(long long a, long long b, long long c);
extern long long tav_StochRSI(long long obj, long long rsiLen, long long stochLen, long long maK, long long maD);
extern long long tav_WillR(long long high, long long low, long long close, long long period);
extern long long tav_BBANDS(long long data, long long period, double stdUp, double stdDn);
extern long long tav_Cross(long long data1, long long data2);
extern long long tav_HMA(long long data, long long period);
extern long long tav_KDJBy(long long high, long long low, long long close, long long period, long long sm1, long long sm2, char* maBy);
extern long long tav_PercentRank(long long data, long long period);
extern long long tav_CHOP(long long high, long long low, long long close, long long period);
extern long long tav_CRSIBy(long long data, long long period, long long upDn, long long rocVal, long long vtype);
extern long long tav_EMABy(long long data, long long period, long long initType);
extern long long tav_KAMABy(long long data, long long period, long long fast, long long slow);
extern long long tav_Lowest(long long data, long long period);
extern long long tav_ER(long long data, long long period);
extern long long tav_PluMinDM(long long high, long long low, long long cls, long long period);
extern long long tav_RMI(long long data, long long period, long long montLen);
extern long long tav_Sum(long long data, long long period);
extern long long tav_CMO(long long data, long long period);
extern long long tav_LinReg(long long data, long long period);
extern long long tav_StdDev(long long data, long long period);
extern long long tav_TR(long long high, long long low, long long close);
extern long long tav_CTI(long long data, long long period);
extern long long tav_EMA(long long data, long long period);
extern long long tav_Highest(long long data, long long period);
extern long long tav_MACD(long long data, long long fast, long long slow, long long smooth);
extern long long tav_SMA(long long data, long long period);
extern long long tav_CMOBy(long long data, long long period, long long maType);
extern long long tav_CCI(long long data, long long period);
extern long long tav_LinRegAdv(long long data, long long period, char angle, char intercept, char degrees, char r, char slope, char tsf);
extern long long tav_MFI(long long high, long long low, long long close, long long volume, long long period);
extern long long tav_CMF(long long high, long long low, long long close, long long volume, long long period);
extern long long tav_KDJ(long long high, long long low, long long close, long long period, long long sm1, long long sm2);
extern long long tav_RMA(long long data, long long period);
extern long long tav_STC(long long data, long long period, long long fast, long long slow, double alpha);
extern long long tav_Stoch(long long high, long long low, long long close, long long period);

#ifdef __cplusplus
}
#endif
