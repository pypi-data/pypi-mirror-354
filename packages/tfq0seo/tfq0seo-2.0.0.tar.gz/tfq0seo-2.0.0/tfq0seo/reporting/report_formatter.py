from typing import Dict, List, Optional
import json
from pathlib import Path
from datetime import datetime

class ReportFormatter:
    """Formats SEO analysis reports with clear, visually appealing output.
    
    Supported formats:
    - HTML: Interactive, colorful web report
    - JSON: Well-structured data format
    - CSV: Clean tabular data
    """
    
    def __init__(self, report_data: Dict):
        self.data = report_data
        self.timestamp = datetime.now()
        
    def format_report(self, format: str, output_path: Optional[str] = None) -> str:
        """Format report in specified format and optionally save to file."""
        if format == 'json':
            formatted = self._format_json()
        elif format == 'html':
            formatted = self._format_html()
        elif format == 'csv':
            formatted = self._format_csv()
        else:
            raise ValueError(f"Unsupported format: {format}")
            
        if output_path:
            self._save_report(formatted, output_path)
            
        return formatted

    def _format_json(self) -> str:
        """Format report as clean, well-structured JSON."""
        if isinstance(self.data, str):
            # If data is already a JSON string, parse it
            try:
                self.data = json.loads(self.data)
            except json.JSONDecodeError:
                raise ValueError("Invalid JSON data provided")
            
        report_data = {
            'metadata': {
                'generated_at': self.timestamp.isoformat(),
                'version': '2.0.0'
            },
            'title': 'tfq0seo Analysis Report',
            'summary': self.data.get('combined_report', {}).get('summary', {}),
            'sections': {
                'strengths': self.data.get('combined_report', {}).get('strengths', []),
                'weaknesses': self.data.get('combined_report', {}).get('weaknesses', []),
                'recommendations': self.data.get('combined_report', {}).get('recommendations', []),
                'education_tips': self.data.get('combined_report', {}).get('education_tips', [])
            }
        }
        
        return json.dumps(report_data, indent=2)

    def _format_html(self) -> str:
        """Format report as visually appealing HTML."""
        return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SEO Analysis Report</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        {self._get_html_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="report-header">
            <div class="header-content">
                <h1>SEO Analysis Report</h1>
                <p class="timestamp">Generated on {self.timestamp.strftime('%B %d, %Y at %H:%M')}</p>
            </div>
            <div class="overall-score">
                <div class="score-circle">
                    <span class="score-value">{self.data.get('scores', {}).get('overall_score', 0):.0f}</span>
                    <span class="score-label">Overall Score</span>
                </div>
            </div>
        </header>

        <main>
            {self._format_html_summary()}
            {self._format_html_critical_issues()}
            {self._format_html_key_metrics()}
            {self._format_html_action_items()}
        </main>

        <footer>
            <p>Generated by tfq0seo v1.0.1</p>
        </footer>
    </div>
</body>
</html>"""

    def _format_csv(self) -> str:
        """Format report as clean, organized CSV."""
        rows = [
            ["Category", "Metric", "Value", "Status", "Priority"]
        ]
        
        # Add key metrics
        rows.extend(self._get_key_metrics())
        
        # Add critical issues
        rows.extend(self._get_critical_issues())
        
        # Add action items
        rows.extend(self._get_action_items_csv())
        
        return "\n".join([",".join(f'"{str(cell)}"' for cell in row) for row in rows])

    def _get_html_styles(self) -> str:
        """Get modern, clean CSS styles."""
        return """
            :root {
                --primary: #2563eb;
                --success: #16a34a;
                --warning: #ea580c;
                --danger: #dc2626;
                --gray-50: #f8fafc;
                --gray-100: #f1f5f9;
                --gray-200: #e2e8f0;
                --gray-700: #334155;
                --gray-800: #1e293b;
                --gray-900: #0f172a;
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Inter', -apple-system, sans-serif;
                line-height: 1.5;
                color: var(--gray-800);
                background-color: var(--gray-50);
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 2rem;
            }

            .report-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 3rem;
                padding: 2rem;
                background: white;
                border-radius: 1rem;
                box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
            }

            .header-content h1 {
                font-size: 2rem;
                font-weight: 700;
                color: var(--gray-900);
                margin-bottom: 0.5rem;
            }

            .timestamp {
                color: var(--gray-700);
                font-size: 0.875rem;
            }

            .score-circle {
                width: 120px;
                height: 120px;
                border-radius: 50%;
                background: var(--primary);
                color: white;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                box-shadow: 0 4px 6px -1px rgb(37 99 235 / 0.5);
            }

            .score-value {
                font-size: 2.5rem;
                font-weight: 700;
                line-height: 1;
            }

            .score-label {
                font-size: 0.875rem;
                margin-top: 0.25rem;
            }

            .metric-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: 1.5rem;
                margin-bottom: 2rem;
            }

            .metric-card {
                background: white;
                padding: 1.5rem;
                border-radius: 0.75rem;
                box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
            }

            .metric-card h3 {
                font-size: 0.875rem;
                font-weight: 600;
                color: var(--gray-700);
                margin-bottom: 0.5rem;
                text-transform: uppercase;
                letter-spacing: 0.05em;
            }

            .metric-value {
                font-size: 1.875rem;
                font-weight: 700;
                color: var(--gray-900);
            }

            .status-badge {
                display: inline-flex;
                align-items: center;
                padding: 0.25rem 0.75rem;
                border-radius: 9999px;
                font-size: 0.75rem;
                font-weight: 500;
                text-transform: uppercase;
                letter-spacing: 0.05em;
            }

            .status-badge.success {
                background-color: #dcfce7;
                color: var(--success);
            }

            .status-badge.warning {
                background-color: #ffedd5;
                color: var(--warning);
            }

            .status-badge.danger {
                background-color: #fee2e2;
                color: var(--danger);
            }

            .issue-card {
                background: white;
                padding: 1.5rem;
                border-radius: 0.75rem;
                margin-bottom: 1rem;
                box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
                border-left: 4px solid var(--warning);
            }

            .issue-card h4 {
                color: var(--gray-900);
                font-size: 1rem;
                font-weight: 600;
                margin-bottom: 0.5rem;
            }

            .issue-card p {
                color: var(--gray-700);
                font-size: 0.875rem;
            }

            .action-card {
                background: white;
                padding: 1.5rem;
                border-radius: 0.75rem;
                margin-bottom: 1rem;
                box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
                border-left: 4px solid var(--primary);
            }

            .action-card h4 {
                color: var(--gray-900);
                font-size: 1rem;
                font-weight: 600;
                margin-bottom: 0.5rem;
            }

            .action-card p {
                color: var(--gray-700);
                font-size: 0.875rem;
            }

            .priority-tag {
                display: inline-flex;
                align-items: center;
                padding: 0.25rem 0.75rem;
                border-radius: 9999px;
                font-size: 0.75rem;
                font-weight: 500;
                margin-left: 0.5rem;
            }

            .priority-tag.high {
                background-color: #fee2e2;
                color: var(--danger);
            }

            .priority-tag.medium {
                background-color: #ffedd5;
                color: var(--warning);
            }

            .priority-tag.low {
                background-color: #dcfce7;
                color: var(--success);
            }

            section {
                margin-bottom: 3rem;
            }

            section h2 {
                font-size: 1.5rem;
                font-weight: 700;
                color: var(--gray-900);
                margin-bottom: 1.5rem;
            }
        """

    def _format_html_summary(self) -> str:
        """Format HTML summary section."""
        summary = self.data.get('summary', {})
        
        return f"""
            <section>
                <h2>Summary</h2>
                <div class="metric-grid">
                    <div class="metric-card">
                        <h3>Critical Issues</h3>
                        <div class="metric-value">{summary.get('critical_issues', 0)}</div>
                        {self._get_status_badge(summary.get('critical_issues', 0) == 0)}
                    </div>
                    <div class="metric-card">
                        <h3>Strengths</h3>
                        <div class="metric-value">{summary.get('strengths', 0)}</div>
                    </div>
                    <div class="metric-card">
                        <h3>Priority Actions</h3>
                        <div class="metric-value">{summary.get('priority_actions', 0)}</div>
                    </div>
                </div>
            </section>
        """

    def _format_html_critical_issues(self) -> str:
        """Format HTML critical issues section."""
        issues = self.data.get('insights', {}).get('critical_issues', [])
        
        if not issues:
            return ""
            
        issues_html = "".join([
            f"""
                <div class="issue-card">
                    <h4>{issue.get('title', 'Issue')}</h4>
                    <p>{issue.get('description', '')}</p>
                </div>
            """ for issue in issues
        ])
        
        return f"""
            <section>
                <h2>Critical Issues</h2>
                {issues_html}
            </section>
        """

    def _format_html_key_metrics(self) -> str:
        """Format HTML key metrics section."""
        metrics = self._get_key_metrics()
        
        metrics_html = "".join([
            f"""
                <div class="metric-card">
                    <h3>{metric[1]}</h3>
                    <div class="metric-value">{metric[2]}</div>
                    <div class="status-badge {metric[3].lower()}">{metric[3]}</div>
                </div>
            """ for metric in metrics[1:]  # Skip header row
        ])
        
        return f"""
            <section>
                <h2>Key Metrics</h2>
                <div class="metric-grid">
                    {metrics_html}
                </div>
            </section>
        """

    def _format_html_action_items(self) -> str:
        """Format HTML action items section."""
        actions = self.data.get('action_plan', {})
        
        if not actions:
            return ""
            
        actions_html = "".join([
            f"""
                <div class="action-card">
                    <h4>{action.get('title', 'Action Item')}
                        <span class="priority-tag {action.get('priority', 'medium').lower()}">
                            {action.get('priority', 'Medium')} Priority
                        </span>
                    </h4>
                    <p>{action.get('description', '')}</p>
                </div>
            """ for action in actions.get('items', [])
        ])
        
        return f"""
            <section>
                <h2>Action Items</h2>
                {actions_html}
            </section>
        """

    def _get_key_metrics(self) -> List[List[str]]:
        """Get key metrics for CSV format."""
        scores = self.data.get('scores', {}).get('category_scores', {})
        
        return [
            ["Category", "Metric", "Value", "Status", "Priority"],
            ["Technical", "SEO Score", f"{scores.get('technical_seo', 0):.0f}", self._get_score_status(scores.get('technical_seo', 0)), "High"],
            ["Content", "Quality Score", f"{scores.get('content_quality', 0):.0f}", self._get_score_status(scores.get('content_quality', 0)), "High"],
            ["Performance", "Speed Score", f"{scores.get('performance', 0):.0f}", self._get_score_status(scores.get('performance', 0)), "Medium"]
        ]

    def _get_score_status(self, score: float) -> str:
        """Get status based on score."""
        if score >= 90:
            return "Excellent"
        elif score >= 70:
            return "Good"
        elif score >= 50:
            return "Fair"
        return "Poor"

    def _get_technical_data(self) -> Dict:
        """Get technical SEO data for JSON format."""
        tech = self.data.get('analysis_modules', {}).get('basic_seo', {})
        return {
            'score': self.data.get('scores', {}).get('category_scores', {}).get('technical_seo', 0),
            'meta_tags': tech.get('meta_tags', {}),
            'issues': tech.get('issues', []),
            'recommendations': tech.get('recommendations', [])
        }

    def _get_content_data(self) -> Dict:
        """Get content data for JSON format."""
        content = self.data.get('analysis_modules', {}).get('basic_seo', {}).get('content', {})
        return {
            'score': self.data.get('scores', {}).get('category_scores', {}).get('content_quality', 0),
            'metrics': {
                'word_count': content.get('word_count', 0),
                'readability_score': content.get('readability_score', 0),
                'keyword_density': content.get('keyword_density', 0)
            },
            'issues': content.get('issues', []),
            'recommendations': content.get('recommendations', [])
        }

    def _get_performance_data(self) -> Dict:
        """Get performance data for JSON format."""
        perf = self.data.get('analysis_modules', {}).get('performance', {})
        return {
            'score': self.data.get('scores', {}).get('category_scores', {}).get('performance', 0),
            'metrics': {
                'load_time': perf.get('load_time', {}).get('total_time', 0),
                'resource_count': perf.get('resource_optimization', {}).get('total_resources', 0)
            },
            'issues': perf.get('issues', []),
            'recommendations': perf.get('recommendations', [])
        }

    def _get_action_items(self) -> List[Dict]:
        """Get prioritized action items for JSON format."""
        plan = self.data.get('action_plan', {})
        return {
            'critical': plan.get('critical_actions', []),
            'high_priority': plan.get('high_priority', []),
            'medium_priority': plan.get('medium_priority', [])
        }

    def _save_report(self, content: str, path: str) -> None:
        """Save report to file."""
        output_path = Path(path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)

    def _get_status_badge(self, score: float) -> str:
        """Generate a status badge based on the score."""
        if score >= 80:
            return "Excellent"
        elif score >= 50:
            return "Good"
        else:
            return "Needs Improvement" 