// ---------------------------------------------------------------------------------------------------------------------
// Copyright 2025 David Briant, https://github.com/coppertop-bones. Licensed under the Apache License, Version 2.0
//
// HI - HASH INDEX
// based on https://github.com/attractivechaos/klib/blob/master/khash.h
// https://attractivechaos.wordpress.com/2019/12/28/deletion-from-hash-tables-without-tombstones/
// ---------------------------------------------------------------------------------------------------------------------

#ifndef SRC_BK_LIB_HI_IMPL_TMPLT
#define SRC_BK_LIB_HI_IMPL_TMPLT


#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "../../../include/bk/lib/hi.h"


// 1 u32 flag per 16 tokens (2 bits per entry) - 0b10 -> empty and not a tombstone
#define __hi_fsize(m) ((m) < 16? 1 : (m)>>4)
#define __hi_is_tomb(flags, idx) ( (flags[idx>>4] >> ((idx&0xfU)<<1) ) & 1 )
#define __hi_is_empty(flags, idx) ( (flags[idx>>4] >> ((idx&0xfU)<<1)) & 2 )
#define __hi_is_live(flags, idx) ( !((flags[idx>>4] >> ((idx&0xfU)<<1) ) & 3) )
#define __hi_set_not_empty(flags, idx) (flags[idx>>4] &= ~(2ul<<((idx&0xfU)<<1)))
#define __hi_set_occupied(flags, idx) (flags[idx>>4] &= ~(3ul<<((idx&0xfU)<<1)))
#define __hi_set_tomb(flags, idx) (flags[idx>>4] |= (1ul<<((idx&0xfU)<<1)))


#ifndef kroundup32
#define kroundup32(x) (--(x), (x)|=(x)>>1, (x)|=(x)>>2, (x)|=(x)>>4, (x)|=(x)>>8, (x)|=(x)>>16, ++(x))
#endif


static const double __hi_HASH_UPPER = 0.77;

#define RESIZE_FAILED -1
#define RESIZED_OK 0
#define RESIZE_NOT_NEEDED 0


// u32 __hash_fn(hashable_t h);
// bool __found_fn(hi_struct(name)* ht, token_t entry, hashable_t h)
// hashable_t __hashable_from_token_fn(hi_struct(name)* ht, token_t entry)


#define __HI_IMPL(name, SCOPE, token_t, hashable_t, __hash_fn, __found_fn, __hashable_from_token_fn)                    \
                                                                                                                        \
    SCOPE struct hi_##name *hi_create_##name(void) {                                                                    \
        return (struct hi_##name*) calloc(1, sizeof(struct hi_##name));                                                 \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_trash_##name(struct hi_##name *ht) {                                                                  \
        if (ht) { free((void *)ht->tokens); free(ht->flags); free(ht); }                                                \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_clear_##name(struct hi_##name *ht) {                                                                  \
        if (ht && ht->flags) {                                                                                          \
            memset(ht->flags, 0xaa, __hi_fsize(ht->sz) * sizeof(u32));                                                  \
            ht->n_live = ht->n_used = 0;                                                                                \
        }                                                                                                               \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE u32 hi_get_idx_##name(struct hi_##name *ht, hashable_t h) {                                                   \
        u32 hash, idx, last, mask, step = 0;                                                                            \
        if (!ht->sz) return 0;                                                                                          \
        mask = ht->sz - 1;                                                                                              \
        hash = __hash_fn(h);                                                                                            \
        idx = hash & mask;                                                                                              \
        last = idx;                                                                                                     \
        while (!__hi_is_empty(ht->flags, idx) && (__hi_is_tomb(ht->flags, idx) || !__found_fn(ht, ht->tokens[idx], h))) {\
            idx = (idx + (++step)) & mask;                                                                              \
            if (idx == last) return ht->sz;                                                                             \
        }                                                                                                               \
        return __hi_is_live(ht->flags, idx) ? idx : ht->sz;                                                             \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE int hi_resize_##name(struct hi_##name *ht, u32 new_sz) {                                                      \
        /* Uses 0.25*sz bytes of working space. */                                                                      \
        u32 *new_flags;                                                                                                 \
        kroundup32(new_sz);                                                                                             \
        if (new_sz < 4) new_sz = 4;                                                                                     \
        if (ht->n_live >= (u32)(new_sz * __hi_HASH_UPPER + 0.5)) return RESIZE_NOT_NEEDED;                              \
        new_flags = (u32*)malloc(__hi_fsize(new_sz) * sizeof(u32));                                                     \
        if (!new_flags) return RESIZE_FAILED;                                                                           \
        memset(new_flags, 0xaa, __hi_fsize(new_sz) * sizeof(u32));                                                      \
        if (ht->sz < new_sz) { /* expand */                                                                             \
            token_t *new_slots = (token_t*)realloc((void *)ht->tokens, new_sz * sizeof(token_t));                       \
            if (!new_slots) { free(new_flags); return RESIZE_FAILED; }                                                  \
            ht->tokens = new_slots;                                                                                     \
        }                                                                                                               \
        else { /* shrink */                                                                                             \
        }                                                                                                               \
        /* rehash */                                                                                                    \
        for (u32 j = 0; j != ht->sz; ++j) {                                                                             \
            if (__hi_is_live(ht->flags, j)) {                                                                           \
                token_t entry = ht->tokens[j];                                                                          \
                u32 new_mask;                                                                                           \
                new_mask = new_sz - 1;                                                                                  \
                __hi_set_tomb(ht->flags, j);                                                                            \
                while (1) { /* kick-out process; sort of like in Cuckoo hashing */                                      \
                    u32 hash, i, step = 0;                                                                              \
                    hash = __hash_fn(__hashable_from_token_fn(ht, entry));                                              \
                    i = hash & new_mask;                                                                                \
                    while (!__hi_is_empty(new_flags, i)) i = (i + (++step)) & new_mask;                                 \
                    __hi_set_not_empty(new_flags, i);                                                                   \
                    if (i < ht->sz && __hi_is_live(ht->flags, i)) {                                                     \
                        /* kick out the existing element */                                                             \
                        { token_t tmp = ht->tokens[i]; ht->tokens[i] = entry; entry = tmp; }                            \
                        __hi_set_tomb(ht->flags, i); /* mark as deleted in the old hash table */                        \
                    }                                                                                                   \
                    else { /* write the element and jump out of the loop */                                             \
                        ht->tokens[i] = entry;                                                                          \
                        break;                                                                                          \
                    }                                                                                                   \
                }                                                                                                       \
            }                                                                                                           \
        }                                                                                                               \
        if (ht->sz > new_sz) { /* shrink hash table */                                                                  \
            ht->tokens = (token_t *) realloc((void *)ht->tokens, new_sz * sizeof(token_t));                             \
        }                                                                                                               \
        free(ht->flags);                                                                                                \
        ht->flags = new_flags;                                                                                          \
        ht->sz = new_sz;                                                                                                \
        ht->n_used = ht->n_live;                                                                                        \
        ht->n_used_threshold = (u32)(ht->sz * __hi_HASH_UPPER + 0.5);                                                   \
        return RESIZED_OK;                                                                                              \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE u32 hi_put_idx_##name(struct hi_##name *ht, hashable_t h, int *outcome) {                                     \
        u32 idx;                                                                                                        \
        if (ht->n_used >= ht->n_used_threshold) { /* update the hash table */                                           \
            if (ht->sz > (ht->n_live<<1)) {                                                                             \
                if (hi_resize_##name(ht, ht->sz - 1) == RESIZE_FAILED) { /* clear "deleted" elements */                 \
                    *outcome = RESIZE_FAILED; return ht->sz;                                                            \
                }                                                                                                       \
            } else if (hi_resize_##name(ht, ht->sz + 1) == RESIZE_FAILED) { /* expand the hash table */                 \
                *outcome = RESIZE_FAILED; return ht->sz;                                                                \
            }                                                                                                           \
        } /* TODO: to implement automatically shrinking; resize() already support shrinking */                          \
        {                                                                                                               \
            u32 hash, i, site, last, mask = ht->sz - 1, step = 0;                                                       \
            idx = site = ht->sz; hash = __hash_fn(h); i = hash & mask;                                                  \
            if (__hi_is_empty(ht->flags, i)) idx = i; /* for speed up */                                                \
            else {                                                                                                      \
                last = i;                                                                                               \
                while (!__hi_is_empty(ht->flags, i) && (__hi_is_tomb(ht->flags, i) || !__found_fn(ht, ht->tokens[i], h))) {\
                    if (__hi_is_tomb(ht->flags, i)) site = i;                                                           \
                    i = (i + (++step)) & mask;                                                                          \
                    if (i == last) { idx = site; break; }                                                               \
                }                                                                                                       \
                if (idx == ht->sz) {                                                                                    \
                    if (__hi_is_empty(ht->flags, i) && site != ht->sz) idx = site;                                      \
                    else idx = i;                                                                                       \
                }                                                                                                       \
            }                                                                                                           \
        }                                                                                                               \
        if (__hi_is_empty(ht->flags, idx)) *outcome = HI_EMPTY;                                                         \
        else if (__hi_is_tomb(ht->flags, idx)) *outcome = HI_TOMBSTONE;                                                 \
        else *outcome = HI_LIVE;                                                                                        \
        return idx;                                                                                                     \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_replace_empty_##name(struct hi_##name *ht, u32 idx, token_t entry) {                                  \
        ht->tokens[idx] = entry;                                                                                        \
        __hi_set_occupied(ht->flags, idx);                                                                              \
        ++ht->n_live;                                                                                                   \
        ++ht->n_used;                                                                                                   \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_replace_tombstone_##name(struct hi_##name *ht, u32 idx, token_t entry) {                              \
        ht->tokens[idx] = entry;                                                                                        \
        __hi_set_occupied(ht->flags, idx);                                                                              \
        ++ht->n_live;                                                                                                   \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_replace_token_##name(struct hi_##name *ht, u32 idx, token_t entry) {                                  \
        ht->tokens[idx] = entry;                                                                                        \
    }                                                                                                                   \
                                                                                                                        \
    SCOPE void hi_drop_##name(struct hi_##name *ht, u32 idx) {                                                          \
        if (idx != ht->sz && __hi_is_live(ht->flags, idx)) {                                                            \
            __hi_set_tomb(ht->flags, idx);                                                                              \
            --ht->n_live;                                                                                               \
        }                                                                                                               \
    }
    
#define HI_IMPL(name, token_t, hashable_t, __hash_fn, __found_fn, __hashable_from_token_fn)                             \
    __HI_IMPL(name, static bk_inline bk_unused, token_t, hashable_t, __hash_fn, __found_fn, __hashable_from_token_fn)


// ---------------------------------------------------------------------------------------------------------------------
// HASH FUNCTIONS
// ---------------------------------------------------------------------------------------------------------------------

/*! @function
  @abstract     32-bit integer hash function
  @param  h     Hashable [u32 or i32]
  @return       Hash [u32]
 */
#define hi_int32_hash(h) (u32)(h)

/*! @function
  @abstract     64-bit integer hash function
  @param  h     Hashable [u64 or i64]
  @return       Hash [u32]
 */
#define hi_int64_hash(h) (u32)((h)>>33^(h)^(h)<<11)

/*! @function
  @abstract     char * hash function
  @param  h     Hashable [char *]
  @return       Hash [u32]
 */
static bk_inline u32 hi_chars_X31_hash(char const *h) {
    u32 answer = (u32) *h;
    if (answer) for (++h ; *h; ++h) answer = (answer << 5) - answer + (u32) *h;
    return answer;
}

/*! @function
  @abstract     32-bit integer Wang hash function
  @param  h     Hashable [u32 or i32]
  @return       Hash [u32]
 */
#define hi_int32_wang_hash(h) __hi_Wang_hash((u32) h)
static bk_inline u32 __hi_Wang_hash(u32 h) {
    h += ~(h << 15);
    h ^=  (h >> 10);
    h +=  (h << 3);
    h ^=  (h >> 6);
    h += ~(h << 11);
    h ^=  (h >> 16);
    return h;
}


#endif // SRC_BK_LIB_HI_IMPL_TMPLT