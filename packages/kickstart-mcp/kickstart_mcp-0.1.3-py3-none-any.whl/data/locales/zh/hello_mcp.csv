key,value
hello_mcp.title,"欢迎使用 HelloMcp 教程"
hello_mcp.intro1,"模型上下文协议 (MCP) 是一个开放协议，用于标准化应用程序如何向 LLM 提供上下文。"
hello_mcp.intro2,"将 MCP 想象成 AI 应用程序的 USB-C 接口 - 它提供了一种标准化的方式来连接 AI 模型到不同的数据源和工具。"
hello_mcp.intro3,"MCP 通过提供以下功能，帮助您在 LLM 之上构建代理和复杂工作流："
hello_mcp.feature1,"• 预构建的集成，您的 LLM 可以直接接入"
hello_mcp.feature2,"• 灵活切换 LLM 提供商和供应商"
hello_mcp.feature3,"• 在您的基础设施中保护数据的最佳实践"
hello_mcp.more_info,"有关 MCP 的更多详细信息，请查看教程说明："
hello_mcp.choose_host,"现在，让我们选择您的 MCP 主机。主机是使用 MCP 与各种工具和数据源交互的应用程序。"
hello_mcp.available_options,"可用选项："
hello_mcp.option1,"➤ 1. Claude Desktop - Anthropic 的 AI 助手，支持 MCP"
hello_mcp.option2,"➤ 2. Cursor - 支持 MCP 集成的 AI 代码编辑器"
hello_mcp.option3,"➤ 3. 自定义 - 为您自己的应用程序设置 MCP"
hello_mcp.enter_choice,"请输入您的选择编号："
hello_mcp.choice1,"好选择！我们将为 Claude Desktop 设置 MCP。"
hello_mcp.choice2,"太棒了！我们将为 Cursor 配置 MCP。"
hello_mcp.choice3,"很好！我们将设置自定义 MCP 配置。"
hello_mcp.invalid_choice,"无效选择。请选择 1、2 或 3。"
hello_mcp.step1.title,"步骤 1：创建 MCP 配置文件"
hello_mcp.step1.welcome,"欢迎使用 HelloMcp 教程！我们将帮助您为您选择的主机设置模型上下文协议 (MCP)。"
hello_mcp.step1.intro,"首先，让我们创建一个基本的 MCP 配置文件。此文件将用于为您选择的主机配置 MCP。"
hello_mcp.step1.location,"配置文件将根据您的操作系统在以下位置创建："
hello_mcp.step1.structure,"让我们创建一个基本的配置文件结构："
hello_mcp.step2.title,"步骤 2：配置 MCP 服务器"
hello_mcp.step2.intro,"现在我们有了基本配置文件，让我们添加文件系统服务器以启用文件操作。"
hello_mcp.step2.update,"使用以下内容更新您的配置文件："
hello_mcp.step2.reminder,"请记住将 'username' 替换为您的实际用户名"
hello_mcp.step2.explanation,"此配置启用了文件系统服务器，允许 MCP 与您的文件进行交互。"
hello_mcp.step3.title,"步骤 3：安装所需依赖项"
hello_mcp.step3.intro,"要使用文件系统服务器，我们需要安装 Node.js 和所需的 npm 包。"
hello_mcp.step3.instruction,"首先，确保您已安装 Node.js。然后运行："
hello_mcp.step3.restart,"安装后，重启您的应用程序以应用更改。"
hello_mcp.step3.completion,"您现在应该可以在输入框的右下角看到锤子图标 (🔨)。"
hello_mcp.step_complete,"您已完成步骤 {}！"
hello_mcp.press_continue,"➤ 按任意键继续"
