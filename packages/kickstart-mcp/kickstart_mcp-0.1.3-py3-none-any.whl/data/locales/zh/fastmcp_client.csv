key,value
fastmcp_client.step1.title,"第1步 - 环境设置"
fastmcp_client.step1.intro1,"本步骤将设置Python环境并安装构建MCP客户端所需的依赖。我们将采用现代、隔离的环境并遵循最佳实践。"
fastmcp_client.step1.intro2,"1. 创建新项目目录并用pyproject.toml文件初始化。\n2. 使用你喜欢的工具配置虚拟环境/项目（本教程使用hatch）。\n3. 添加所需依赖：mcp、anthropic、python-dotenv。"
fastmcp_client.step1.intro3,"请确保pyproject.toml中包含这些依赖，这样你的客户端才能与MCP服务器通信并使用Anthropic API。"
fastmcp_client.step2.title,"第2步 - 服务器连接"
fastmcp_client.step2.intro1,"本步骤将实现服务器连接功能。\n这是MCP客户端与任意MCP服务器通信的基础。"
fastmcp_client.step2.intro2,"1. 在mcp-client目录（src/mcp_client/client.py）下创建client.py文件。\n2. 添加基础结构和服务器连接代码。"
fastmcp_client.step2.intro3,"此代码设置客户端并实现服务器连接功能。它同时支持Python和JavaScript服务器，建立连接并列出可用工具。"
fastmcp_client.step3.title,"第3步 - 查询处理"
fastmcp_client.step3.intro1,"现在，让我们实现查询处理功能。该部分处理用户查询，与LLM（Claude）交互并管理工具调用。"
fastmcp_client.step3.intro2,"此代码实现了查询处理功能。它处理用户查询，管理与Claude的对话，并在需要时处理工具调用。"
fastmcp_client.step4.title,"第4步 - 交互式聊天循环"
fastmcp_client.step4.intro1,"现在添加交互式聊天循环。这样你就可以运行客户端并与任何MCP服务器交互。"
fastmcp_client.step5.title,"第5步 - 主入口函数"
fastmcp_client.step5.intro1,"最后，创建主入口函数并初始化客户端。"
fastmcp_client.step5.intro2,"现在你可以用 uv run mcp-client <path_to_server_script> 运行客户端。试试连接天气服务器或其他MCP服务器！"
fastmcp_client.step5.intro3,"如果你跟着服务器教程做了，请用 uv run mcp-client ../mcp-weather/src/mcp_weather/__init__.py 运行。"
fastmcp_client.step5.intro4,"恭喜你！你已经构建了一个完整功能的MCP客户端。现在可以探索、扩展并集成任何MCP兼容的服务器和工具。"
