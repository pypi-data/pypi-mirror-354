key,value
fastmcp_weather.step1.title,"步骤1：设置FastMCP天气服务器"
fastmcp_weather.step1.intro1,"到目前为止，我们一直在使用@server.list_tools()和@server.call_tool()等装饰器的标准方法来实现MCP服务器。"
fastmcp_weather.step1.intro2,"虽然这是创建MCP服务器的标准方法，但使用FastMCP有一种更Pythonic和高效的方法。"
fastmcp_weather.step1.intro3,"FastMCP（https://github.com/jlowin/fastmcp）是一个高级库，可以大大简化MCP服务器的构建。"
fastmcp_weather.step1.benefits.title,"FastMCP的主要优势："
fastmcp_weather.step1.benefits.1,"1. 样板代码更少 - 只需用@mcp.tool()装饰器装饰函数"
fastmcp_weather.step1.benefits.2,"2. 内置输入验证和文档化"
fastmcp_weather.step1.benefits.3,"3. 自动依赖关系管理"
fastmcp_weather.step1.benefits.4,"4. 通过Context对象进行进度报告和日志记录"
fastmcp_weather.step1.intro4,"在本教程中，我们将使用FastMCP重建天气服务器，看看它如何简化我们的代码。"
fastmcp_weather.step1.dependencies,"首先，让我们将所需的依赖项添加到pyproject.toml中："
fastmcp_weather.step1.setup,"接下来，让我们使用基本设置创建FastMCP服务器："
fastmcp_weather.step1.lifespan,"为了在FastMCP初始化中保持上下文处理，需要保留server_lifespan函数"
fastmcp_weather.step1.existing,"为了保持现有功能，需要保留以下代码"
fastmcp_weather.step2.title,"步骤2：实现天气工具"
fastmcp_weather.step2.intro1,"现在我们将使用FastMCP的装饰器实现天气工具。"
fastmcp_weather.step2.intro2,"请注意，我们不需要手动定义输入模式或处理工具调用 - FastMCP会自动处理这些。"
fastmcp_weather.step2.tools,"添加这些工具实现："
fastmcp_weather.step2.modify,"如果这些函数已经存在，只需修改它们的装饰器。现在可以删除原来用@server.list_tools和@server.call_tool标记的函数"
fastmcp_weather.step2.automatic,"FastMCP会自动管理list_tools和call_tool。您只需要用'@mcp.tool'装饰器装饰函数"
fastmcp_weather.step2.main,"接下来，让我们修改main函数以支持SSE和stdio："
