key,value
make_server.warning,"Did you made the mcp-weather project?. \nDo previous tutorial first"
make_server.step1.title,"Step 1: Create Server Instance"
make_server.step1.intro1,"In this step, you'll create a server instance with a lifespan manager."
make_server.step1.intro2,"Let's break down what each part does:"
make_server.step1.decorator.title,"1. @asynccontextmanager decorator:"
make_server.step1.decorator.1,"- This decorator helps manage the server's lifecycle"
make_server.step1.decorator.2,"- It ensures proper setup and cleanup of server resources"
make_server.step1.decorator.3,"- Similar to a context manager (with statement) but for async code"
make_server.step1.lifespan.title,"2. server_lifespan function:"
make_server.step1.lifespan.1,"- Manages the server's lifecycle events"
make_server.step1.lifespan.2,"- yield server.name: Provides context (in here, server.name) during its active lifetime"
make_server.step1.lifespan.3,"- This context can be retrieved by accessing server.request_context"
make_server.step1.lifespan.4,"- The finally block: Place for cleanup code when server shuts down"
make_server.step1.instance.title,"3. Server instance creation:"
make_server.step1.instance.1,"- Creates a new mcp.server named 'weather'"
make_server.step1.instance.2,"- Attaches the lifespan manager to handle lifecycle events"
make_server.step1.add_code,"Add the following code to the file:"
make_server.step1.dependency,"You also need to add dependency in project.toml file"
make_server.step2.title,"Step 2: Add Run Function and Main"
make_server.step2.intro1,"In this step, you'll add the run function and main entry point."
make_server.step2.intro2,"MCP servers can be implemented in two ways:"
make_server.step2.stdio.title,"1. Local server via standard input/output (stdio)"
make_server.step2.stdio.1,"- Direct communication through stdin/stdout"
make_server.step2.stdio.2,"- Many MCP Servers are distributed with package that runnable with npx, uv"
make_server.step2.stdio.3,"- So, MCP Host often directly run mcp server in local environment"
make_server.step2.sse.title,"2. HTTP server via Server-Sent Events (SSE)"
make_server.step2.sse.1,"- Web-based communication using SSE"
make_server.step2.sse.2,"- More complex but allows remote connections"
make_server.step2.sse.3,"- Some MCP Host doesn't support this type of connection."
make_server.step2.implement,"In this tutorial, we'll implement a stdio server for simplicity."
make_server.step2.setup,"The run function will set up the communication channel using stdio_server."
make_server.step2.add_code,"Add the following code to the file:"
make_server.step2.dependency,"You also need to add dependency in project.toml file"
make_server.step3.title,"Step 3: Add Tools"
make_server.step3.intro1,"Tools are one of the core features of Model Context Protocol (MCP)."
make_server.step3.intro2,"They enable AI models to interact with external systems and perform actual tasks."
make_server.step3.keypoints.title,"Key points about Tools:"
make_server.step3.model.title,"1. Model-centric control:"
make_server.step3.model.1,"- Designed for model-centric control"
make_server.step3.model.2,"- AI models can understand context and automatically find and call tools"
make_server.step3.safety.title,"2. Safety and reliability:"
make_server.step3.safety.1,"- User approval is always required for actual tool execution"
make_server.step3.safety.2,"- Ensures safe and controlled interaction with external systems"
make_server.step3.schema.title,"3. Input Schema:"
make_server.step3.schema.1,"- Defines the structure of input parameters for each tool"
make_server.step3.schema.2,"- Uses JSON Schema format to specify:"
make_server.step3.schema.3,"- Parameter types"
make_server.step3.schema.4,"- Parameter descriptions"
make_server.step3.schema.5,"- Required parameters"
make_server.step3.structure,"Tools structure"
make_server.step3.add_code,"Add the following code to the file:"
make_server.step4.title,"Step 4: Implement Tool Handler"
make_server.step4.intro1,"Now we'll implement the tool handler using ModelContextProtocol's call_tool."
make_server.step4.intro2,"The tool handler is called based on the tool information received through list_tools."
make_server.step4.request_format,"Tool Call Request Format:"
make_server.step4.response_format,"Tool Call Response Format:"
make_server.step4.add_code,"Add the following code to the file:"
