key,value
fastmcp_client.step1.title,"ステップ1 - 環境セットアップ"
fastmcp_client.step1.intro1,"このステップでは、MCPクライアントを構築するためのPython環境をセットアップし、必要な依存関係をインストールします。最新の分離環境とベストプラクティスを使用します。"
fastmcp_client.step1.intro2,"1. 新しいプロジェクトディレクトリを作成し、pyproject.tomlファイルで初期化します。\n2. お好みのツールで仮想環境/プロジェクト設定を行います（このチュートリアルではhatchを使用）。\n3. 必要な依存関係：mcp、anthropic、python-dotenvを追加します。"
fastmcp_client.step1.intro3,"pyproject.tomlにこれらの依存関係が含まれていることを確認してください。これにより、MCPサーバーと通信し、Anthropic APIを利用できます。"
fastmcp_client.step2.title,"ステップ2 - サーバー接続"
fastmcp_client.step2.intro1,"このステップではサーバー接続機能を実装します。\nこれはMCPクライアントがあらゆるMCPサーバーと通信できる基盤です。"
fastmcp_client.step2.intro2,"1. mcp-clientディレクトリ（src/mcp_client/client.py）にclient.pyファイルを作成します。\n2. 基本構造とサーバー接続コードを追加します。"
fastmcp_client.step2.intro3,"このコードはクライアントをセットアップし、サーバー接続機能を実装します。PythonとJavaScriptサーバーの両方に対応し、接続を確立し利用可能なツールを一覧表示します。"
fastmcp_client.step3.title,"ステップ3 - クエリ処理"
fastmcp_client.step3.intro1,"次に、クエリ処理機能を実装します。この部分はユーザーのクエリを処理し、LLM（Claude）とやり取りし、ツール呼び出しを管理します。"
fastmcp_client.step3.intro2,"このコードはクエリ処理機能を実装します。ユーザーのクエリを処理し、Claudeとの会話を管理し、必要に応じてツール呼び出しを行います。"
fastmcp_client.step4.title,"ステップ4 - 対話型チャットループ"
fastmcp_client.step4.intro1,"対話型チャットループを追加しましょう。これでMCPサーバーとやり取りできます。"
fastmcp_client.step5.title,"ステップ5 - メインエントリーポイント"
fastmcp_client.step5.intro1,"最後にメインエントリーポイントを作成し、クライアントを初期化します。"
fastmcp_client.step5.intro2,"uv run mcp-client <path_to_server_script>でクライアントを実行できます。天気サーバーや他のMCPサーバーに接続してみましょう！"
fastmcp_client.step5.intro3,"サーバーチュートリアルに従った場合は、uv run mcp-client ../mcp-weather/src/mcp_weather/__init__.pyで実行してください。"
fastmcp_client.step5.intro4,"おめでとうございます！完全なMCPクライアントが完成しました。さまざまなMCP対応サーバーやツールと連携してみましょう。"
