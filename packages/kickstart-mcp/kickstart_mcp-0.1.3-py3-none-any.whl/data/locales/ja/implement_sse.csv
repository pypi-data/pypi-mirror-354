key,value
implement_sse.warning,"前のImplementWeatherチュートリアルを完了しましたか？"
implement_sse.step1.title,"ステップ1：SSEトランスポートの紹介"
implement_sse.step1.intro1,"おめでとうございます！アラートと予報機能を備えた天気MCPサーバーの実装に成功しました。"
implement_sse.step1.intro2,"次に、SSEトランスポートサポートを追加してサーバーを強化しましょう。"
implement_sse.step1.transport_types.title,"MCPでは、トランスポート層は通常2つのタイプがあります："
implement_sse.step1.transport_types.1,"1. stdio（標準入出力）- ローカル統合やコマンドラインツールに使用されます"
implement_sse.step1.transport_types.2,"2. SSE（Server-Sent Events）- HTTP POSTリクエストを使用したサーバーからクライアントへのストリーミングを可能にします"
implement_sse.step1.add_function,"まず、両方のトランスポートタイプを処理するrun_server関数を追加しましょう。"
implement_sse.step1.add_code,"この関数をファイルに追加してください："
implement_sse.step2.title,"ステップ2：依存関係の追加"
implement_sse.step2.intro1,"次に、SSEトランスポートに必要な依存関係を追加する必要があります。"
implement_sse.step2.intro2,"これらをプロジェクトの依存関係に追加してください："
implement_sse.step2.intro3,"これらはpyproject.tomlまたはrequirements.txtファイルに追加できます。"
implement_sse.step3.title,"ステップ3：メインエントリーポイントの更新"
implement_sse.step3.intro1,"最後に、新しいrun_server関数を使用するようにメインエントリーポイントを更新しましょう。"
implement_sse.step3.intro2,"既存のmainブロックを以下に置き換えてください："
implement_sse.step3.intro3,"これで、どちらのトランスポートでもサーバーを実行できます："
implement_sse.step3.intro4,"stdioの場合：hatch run mcp_weather"
implement_sse.step3.intro5,"SSEの場合：hatch run mcp_weather --transport sse --port 9009"
implement_sse.step_complete,"ステップ{}が完了しました！"
implement_sse.press_continue,"➤ 任意のキーを押して続行"
