key,value
make_server.warning,"mcp-weatherプロジェクトを作成しましたか？\n前のチュートリアルを先に完了してください"
make_server.step1.title,"ステップ1：サーバーインスタンスの作成"
make_server.step1.intro1,"このステップでは、ライフスパンマネージャーを使用してサーバーインスタンスを作成します。"
make_server.step1.intro2,"各部分の役割を見ていきましょう："
make_server.step1.decorator.title,"1. @asynccontextmanagerデコレータ："
make_server.step1.decorator.1,"- このデコレータはサーバーのライフサイクルを管理します"
make_server.step1.decorator.2,"- サーバーリソースの適切なセットアップとクリーンアップを保証します"
make_server.step1.decorator.3,"- 非同期コード用のコンテキストマネージャー（with文）に似ています"
make_server.step1.lifespan.title,"2. server_lifespan関数："
make_server.step1.lifespan.1,"- サーバーのライフサイクルイベントを管理します"
make_server.step1.lifespan.2,"- yield server.name：アクティブな期間中にコンテキスト（ここではserver.name）を提供します"
make_server.step1.lifespan.3,"- このコンテキストはserver.request_contextにアクセスすることで取得できます"
make_server.step1.lifespan.4,"- finallyブロック：サーバーがシャットダウンする際のクリーンアップコードを配置する場所です"
make_server.step1.instance.title,"3. サーバーインスタンスの作成："
make_server.step1.instance.1,"- 'weather'という名前の新しいmcp.serverを作成します"
make_server.step1.instance.2,"- ライフサイクルイベントを処理するためにライフスパンマネージャーをアタッチします"
make_server.step1.add_code,"ファイルに以下のコードを追加してください："
make_server.step1.dependency,"project.tomlファイルにも依存関係を追加する必要があります"
make_server.step2.title,"ステップ2：Run関数とMainの追加"
make_server.step2.intro1,"このステップでは、run関数とmainエントリーポイントを追加します。"
make_server.step2.intro2,"MCPサーバーは2つの方法で実装できます："
make_server.step2.stdio.title,"1. 標準入出力（stdio）を使用したローカルサーバー"
make_server.step2.stdio.1,"- stdin/stdoutを通じた直接通信"
make_server.step2.stdio.2,"- 多くのMCPサーバーはnpx、uvで実行可能なパッケージとして配布されています"
make_server.step2.stdio.3,"- そのため、MCPホストはしばしばローカル環境で直接mcpサーバーを実行します"
make_server.step2.sse.title,"2. サーバーセントイベント（SSE）を使用したHTTPサーバー"
make_server.step2.sse.1,"- SSEを使用したWebベースの通信"
make_server.step2.sse.2,"- より複雑ですが、リモート接続が可能です"
make_server.step2.sse.3,"- 一部のMCPホストはこのタイプの接続をサポートしていません"
make_server.step2.implement,"このチュートリアルでは、簡単のためにstdioサーバーを実装します。"
make_server.step2.setup,"run関数はstdio_serverを使用して通信チャネルを設定します。"
make_server.step2.add_code,"ファイルに以下のコードを追加してください："
make_server.step2.dependency,"project.tomlファイルにも依存関係を追加する必要があります"
make_server.step3.title,"ステップ3：ツールの追加"
make_server.step3.intro1,"ツールはモデルコンテキストプロトコル（MCP）の主要な機能の1つです。"
make_server.step3.intro2,"これらにより、AIモデルは外部システムと対話し、実際のタスクを実行できます。"
make_server.step3.keypoints.title,"ツールに関する重要なポイント："
make_server.step3.model.title,"1. モデル中心の制御："
make_server.step3.model.1,"- モデル中心の制御のために設計されています"
make_server.step3.model.2,"- AIモデルはコンテキストを理解し、自動的にツールを見つけて呼び出すことができます"
make_server.step3.safety.title,"2. 安全性と信頼性："
make_server.step3.safety.1,"- 実際のツール実行には常にユーザーの承認が必要です"
make_server.step3.safety.2,"- 外部システムとの安全で制御された対話を保証します"
make_server.step3.schema.title,"3. 入力スキーマ："
make_server.step3.schema.1,"- 各ツールの入力パラメータの構造を定義します"
make_server.step3.schema.2,"- JSONスキーマ形式を使用して以下を指定します："
make_server.step3.schema.3,"- パラメータの型"
make_server.step3.schema.4,"- パラメータの説明"
make_server.step3.schema.5,"- 必須パラメータ"
make_server.step3.structure,"ツールの構造"
make_server.step3.add_code,"ファイルに以下のコードを追加してください："
make_server.step4.title,"ステップ4：ツールハンドラーの実装"
make_server.step4.intro1,"ModelContextProtocolのcall_toolを使用してツールハンドラーを実装します。"
make_server.step4.intro2,"ツールハンドラーはlist_toolsを通じて受け取ったツール情報に基づいて呼び出されます。"
make_server.step4.request_format,"ツール呼び出しリクエストの形式："
make_server.step4.response_format,"ツール呼び出しレスポンスの形式："
make_server.step4.add_code,"ファイルに以下のコードを追加してください："
