key,value
fastmcp_weather.step1.title,"ステップ1：FastMCP Weatherサーバーのセットアップ"
fastmcp_weather.step1.intro1,"これまで、@server.list_tools()や@server.call_tool()などのデコレータを使用した標準的なアプローチでMCPサーバーを実装してきました。"
fastmcp_weather.step1.intro2,"これはMCPサーバーを作成する標準的な方法ですが、FastMCPを使用すると、よりPythonicで効率的な方法があります。"
fastmcp_weather.step1.intro3,"FastMCP（https://github.com/jlowin/fastmcp）は、MCPサーバーの構築を大幅に簡素化する高レベルライブラリです。"
fastmcp_weather.step1.benefits.title,"FastMCPの主な利点："
fastmcp_weather.step1.benefits.1,"1. 定型コードが少ない - 関数に@mcp.tool()デコレータを付けるだけ"
fastmcp_weather.step1.benefits.2,"2. 組み込みの入力検証とドキュメント化"
fastmcp_weather.step1.benefits.3,"3. 自動的な依存関係管理"
fastmcp_weather.step1.benefits.4,"4. Contextオブジェクトを通じた進捗報告とロギング"
fastmcp_weather.step1.intro4,"このチュートリアルでは、FastMCPを使用して天気サーバーを再構築し、コードがどのように簡素化されるかを見ていきます。"
fastmcp_weather.step1.dependencies,"まず、必要な依存関係をpyproject.tomlに追加しましょう："
fastmcp_weather.step1.setup,"次に、基本的なセットアップでFastMCPサーバーを作成しましょう："
fastmcp_weather.step1.lifespan,"FastMCPの初期化でコンテキスト処理を維持するために、server_lifespan関数を保持する必要があります"
fastmcp_weather.step1.existing,"既存の機能を維持するために、以下のコードを保持する必要があります"
fastmcp_weather.step2.title,"ステップ2：天気ツールの実装"
fastmcp_weather.step2.intro1,"FastMCPのデコレータを使用して天気ツールを実装します。"
fastmcp_weather.step2.intro2,"入力スキーマを手動で定義したり、ツール呼び出しを処理したりする必要がないことに注目してください - FastMCPがこれらを自動的に処理します。"
fastmcp_weather.step2.tools,"これらのツール実装を追加してください："
fastmcp_weather.step2.modify,"これらの関数が既に存在する場合は、デコレータを修正するだけです。@server.list_toolsと@server.call_toolでマークされていた元の関数は削除できます"
fastmcp_weather.step2.automatic,"FastMCPはlist_toolsとcall_toolを自動的に管理します。必要なのは、関数に'@mcp.tool'デコレータを付けることだけです"
fastmcp_weather.step2.main,"次に、SSEとstdioの両方をサポートするようにmain関数を修正しましょう："
