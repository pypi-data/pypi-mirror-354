key,value
fastmcp_client.step1.title,"1단계 - 환경 설정"
fastmcp_client.step1.intro1,"이 단계에서는 MCP 클라이언트 개발에 필요한 파이썬 환경을 설정하고 필수 의존성을 설치합니다. 최신의 격리된 환경과 모범 사례를 따릅니다."
fastmcp_client.step1.intro2,"1. 새 프로젝트 디렉터리를 만들고 pyproject.toml 파일로 초기화하세요.\n2. 선호하는 도구로 가상 환경/프로젝트 구성을 설정하세요(이 튜토리얼에서는 hatch 사용).\n3. 필수 의존성: mcp, anthropic, python-dotenv을 추가하세요."
fastmcp_client.step1.intro3,"pyproject.toml에 이 의존성들이 포함되어 있는지 확인하세요. 이를 통해 MCP 서버와 통신하고 Anthropic API를 사용할 수 있습니다."
fastmcp_client.step2.title,"2단계 - 서버 연결"
fastmcp_client.step2.intro1,"이 단계에서는 서버 연결 기능을 구현합니다.\n이것이 MCP 클라이언트가 어떤 MCP 서버와도 통신할 수 있게 하는 기반입니다."
fastmcp_client.step2.intro2,"1. mcp-client 디렉터리(src/mcp_client/client.py)에 client.py 파일을 만드세요.\n2. 기본 구조와 서버 연결 코드를 추가하세요."
fastmcp_client.step2.intro3,"이 코드는 클라이언트를 설정하고 서버 연결 기능을 구현합니다. 파이썬과 자바스크립트 서버 모두를 처리하며, 연결을 설정하고 사용 가능한 도구 목록을 출력합니다."
fastmcp_client.step3.title,"3단계 - 쿼리 처리"
fastmcp_client.step3.intro1,"이제 쿼리 처리 기능을 구현해봅시다. 이 부분은 사용자 쿼리를 처리하고 LLM(Claude)과 상호작용하며 도구 호출을 관리합니다."
fastmcp_client.step3.intro2,"이 코드는 쿼리 처리 기능을 구현합니다. 사용자 쿼리를 처리하고 Claude와의 대화를 관리하며, 필요시 도구 호출을 처리합니다."
fastmcp_client.step4.title,"4단계 - 대화형 채팅 루프"
fastmcp_client.step4.intro1,"이제 대화형 채팅 루프를 추가합니다. 이를 통해 MCP 서버와 상호작용할 수 있습니다."
fastmcp_client.step5.title,"5단계 - 메인 엔트리 포인트"
fastmcp_client.step5.intro1,"마지막으로 메인 엔트리 포인트를 만들고 클라이언트를 초기화하세요."
fastmcp_client.step5.intro2,"이제 uv run mcp-client <path_to_server_script>로 클라이언트를 실행할 수 있습니다. 날씨 서버나 다른 MCP 서버에 연결해보세요!"
fastmcp_client.step5.intro3,"서버 튜토리얼을 따라 했다면 uv run mcp-client ../mcp-weather/src/mcp_weather/__init__.py로 실행하세요."
fastmcp_client.step5.intro4,"축하합니다! 완전한 기능의 MCP 클라이언트를 만들었습니다. 이제 다양한 MCP 호환 서버 및 도구와 연동해보세요."
