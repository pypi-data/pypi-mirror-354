key,value
make_server.warning,"mcp-weather 프로젝트를 만들었나요?. \n이전 튜토리얼을 먼저 완료하세요"
make_server.step1.title,"1단계: 서버 인스턴스 생성"
make_server.step1.intro1,"이 단계에서는 수명 주기 관리자를 사용하여 서버 인스턴스를 생성합니다."
make_server.step1.intro2,"각 부분의 역할을 살펴보겠습니다:"
make_server.step1.decorator.title,"1. @asynccontextmanager 데코레이터:"
make_server.step1.decorator.1,"- 서버의 수명 주기를 관리하는 데코레이터입니다"
make_server.step1.decorator.2,"- 서버 리소스의 적절한 설정과 정리를 보장합니다"
make_server.step1.decorator.3,"- 비동기 코드용 컨텍스트 관리자(with 문)와 유사합니다"
make_server.step1.lifespan.title,"2. server_lifespan 함수:"
make_server.step1.lifespan.1,"- 서버의 수명 주기 이벤트를 관리합니다"
make_server.step1.lifespan.2,"- yield server.name: 활성 수명 동안 컨텍스트(여기서는 server.name)를 제공합니다"
make_server.step1.lifespan.3,"- 이 컨텍스트는 server.request_context를 통해 접근할 수 있습니다"
make_server.step1.lifespan.4,"- finally 블록: 서버 종료 시 정리 코드를 위한 공간입니다"
make_server.step1.instance.title,"3. 서버 인스턴스 생성:"
make_server.step1.instance.1,"- 'weather'라는 이름의 새 mcp.server를 생성합니다"
make_server.step1.instance.2,"- 수명 주기 이벤트를 처리하기 위해 수명 주기 관리자를 연결합니다"
make_server.step1.add_code,"다음 코드를 파일에 추가하세요:"
make_server.step1.dependency,"project.toml 파일에 의존성을 추가해야 합니다"
make_server.step2.title,"2단계: 실행 함수와 메인 추가"
make_server.step2.intro1,"이 단계에서는 실행 함수와 메인 진입점을 추가합니다."
make_server.step2.intro2,"MCP 서버는 두 가지 방식으로 구현할 수 있습니다:"
make_server.step2.stdio.title,"1. 표준 입출력(stdio)을 통한 로컬 서버"
make_server.step2.stdio.1,"- stdin/stdout을 통한 직접 통신"
make_server.step2.stdio.2,"- 많은 MCP 서버가 npx, uv로 실행 가능한 패키지로 배포됩니다"
make_server.step2.stdio.3,"- 따라서 MCP 호스트는 종종 로컬 환경에서 직접 mcp 서버를 실행합니다"
make_server.step2.sse.title,"2. 서버 전송 이벤트(SSE)를 통한 HTTP 서버"
make_server.step2.sse.1,"- SSE를 사용한 웹 기반 통신"
make_server.step2.sse.2,"- 더 복잡하지만 원격 연결이 가능합니다"
make_server.step2.sse.3,"- 일부 MCP 호스트는 이 유형의 연결을 지원하지 않습니다."
make_server.step2.implement,"이 튜토리얼에서는 간단함을 위해 stdio 서버를 구현합니다."
make_server.step2.setup,"실행 함수는 stdio_server를 사용하여 통신 채널을 설정합니다."
make_server.step2.add_code,"다음 코드를 파일에 추가하세요:"
make_server.step2.dependency,"project.toml 파일에 의존성을 추가해야 합니다"
make_server.step3.title,"3단계: 도구 추가"
make_server.step3.intro1,"도구는 Model Context Protocol (MCP)의 핵심 기능 중 하나입니다."
make_server.step3.intro2,"AI 모델이 외부 시스템과 상호작용하고 실제 작업을 수행할 수 있게 합니다."
make_server.step3.keypoints.title,"도구에 대한 주요 포인트:"
make_server.step3.model.title,"1. 모델 중심 제어:"
make_server.step3.model.1,"- 모델 중심 제어를 위해 설계되었습니다"
make_server.step3.model.2,"- AI 모델이 컨텍스트를 이해하고 자동으로 도구를 찾아 호출할 수 있습니다"
make_server.step3.safety.title,"2. 안전성과 신뢰성:"
make_server.step3.safety.1,"- 실제 도구 실행에는 항상 사용자 승인이 필요합니다"
make_server.step3.safety.2,"- 외부 시스템과의 안전하고 제어된 상호작용을 보장합니다"
make_server.step3.schema.title,"3. 입력 스키마:"
make_server.step3.schema.1,"- 각 도구의 입력 매개변수 구조를 정의합니다"
make_server.step3.schema.2,"- JSON 스키마 형식을 사용하여 다음을 지정합니다:"
make_server.step3.schema.3,"- 매개변수 유형"
make_server.step3.schema.4,"- 매개변수 설명"
make_server.step3.schema.5,"- 필수 매개변수"
make_server.step3.structure,"도구 구조"
make_server.step3.add_code,"다음 코드를 파일에 추가하세요:"
make_server.step4.title,"4단계: 도구 핸들러 구현"
make_server.step4.intro1,"이제 ModelContextProtocol의 call_tool을 사용하여 도구 핸들러를 구현합니다."
make_server.step4.intro2,"도구 핸들러는 list_tools를 통해 받은 도구 정보를 기반으로 호출됩니다."
make_server.step4.request_format,"도구 호출 요청 형식:"
make_server.step4.response_format,"도구 호출 응답 형식:"
make_server.step4.add_code,"다음 코드를 파일에 추가하세요:"
