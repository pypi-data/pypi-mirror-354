key,value
fastmcp_weather.step1.title,"1단계: FastMCP 날씨 서버 설정"
fastmcp_weather.step1.intro1,"지금까지는 @server.list_tools()와 @server.call_tool()과 같은 데코레이터를 사용하여 MCP 서버를 구현했습니다."
fastmcp_weather.step1.intro2,"이것이 MCP 서버를 만드는 표준적인 방법이지만, FastMCP를 사용하면 더 파이썬스럽고 효율적인 방법이 있습니다."
fastmcp_weather.step1.intro3,"FastMCP (https://github.com/jlowin/fastmcp)는 MCP 서버 구축을 훨씬 간단하게 만드는 고수준 라이브러리입니다."
fastmcp_weather.step1.benefits.title,"FastMCP의 주요 이점:"
fastmcp_weather.step1.benefits.1,"1. 보일러플레이트 코드 감소 - 함수에 @mcp.tool() 데코레이터만 추가하면 됩니다"
fastmcp_weather.step1.benefits.2,"2. 내장된 입력 검증 및 문서화"
fastmcp_weather.step1.benefits.3,"3. 자동 의존성 관리"
fastmcp_weather.step1.benefits.4,"4. Context 객체를 통한 진행 상황 보고 및 로깅"
fastmcp_weather.step1.intro4,"이 튜토리얼에서는 FastMCP를 사용하여 날씨 서버를 다시 구축하여 코드가 어떻게 단순화되는지 살펴보겠습니다."
fastmcp_weather.step1.dependencies,"먼저 pyproject.toml에 필요한 의존성을 추가하겠습니다:"
fastmcp_weather.step1.setup,"이제 FastMCP 서버를 기본 설정으로 생성해 보겠습니다:"
fastmcp_weather.step1.lifespan,"server_lifespan 함수는 FastMCP 초기화에서 컨텍스트 처리를 유지하기 위해 필요합니다"
fastmcp_weather.step1.existing,"다음 코드는 기존 기능을 유지하기 위해 필요합니다"
fastmcp_weather.step2.title,"2단계: 날씨 도구 구현"
fastmcp_weather.step2.intro1,"이제 FastMCP의 데코레이터를 사용하여 날씨 도구를 구현해 보겠습니다."
fastmcp_weather.step2.intro2,"입력 스키마를 수동으로 정의하거나 도구 호출을 처리할 필요가 없습니다 - FastMCP가 이를 처리합니다."
fastmcp_weather.step2.tools,"다음 도구 구현을 추가하세요:"
fastmcp_weather.step2.modify,"이미 이러한 함수가 있는 경우, 데코레이터만 수정하세요. @server.list_tools와 @server.call_tool로 표시된 원래 함수는 이제 제거할 수 있습니다"
fastmcp_weather.step2.automatic,"FastMCP는 list_tools와 call_tool을 자동으로 관리합니다. 함수에 '@mcp.tool' 데코레이터만 추가하면 됩니다"
fastmcp_weather.step2.main,"이제 SSE와 stdio를 모두 지원하도록 main 함수를 수정해 보겠습니다: "
