key,value
implement_sse.warning,"Did you complete the previous ImplementWeather tutorial first?"
implement_sse.step1.title,"Step 1: Introduction to SSE Transport"
implement_sse.step1.intro1,"Congratulations! You've successfully implemented a weather MCP server with alerts and forecasts."
implement_sse.step1.intro2,"Now, let's enhance your server by adding SSE transport support."
implement_sse.step1.transport_types.title,"In MCP, transport layers typically come in two flavors:"
implement_sse.step1.transport_types.1,"1. stdio (Standard Input/Output) - Used for local integrations and command-line tools"
implement_sse.step1.transport_types.2,"2. SSE (Server-Sent Events) - Enables server-to-client streaming with HTTP POST requests"
implement_sse.step1.add_function,"Let's start by adding the run_server function that will handle both transport types."
implement_sse.step1.add_code,"Add this function to your file:"
implement_sse.step2.title,"Step 2: Add Dependencies"
implement_sse.step2.intro1,"Now we need to add the required dependencies for SSE transport."
implement_sse.step2.intro2,"Add these to your project's dependencies:"
implement_sse.step2.intro3,"You can add these to your pyproject.toml or requirements.txt file."
implement_sse.step3.title,"Step 3: Update Main Entry Point"
implement_sse.step3.intro1,"Finally, let's update the main entry point to use our new run_server function."
implement_sse.step3.intro2,"Replace your existing main block with:"
implement_sse.step3.intro3,"Now you can run your server with either transport:"
implement_sse.step3.intro4,"For stdio: hatch run mcp_weather"
implement_sse.step3.intro5,"For SSE: hatch run mcp_weather --transport sse --port 9009"
implement_sse.step_complete,"You've completed step {}!"
implement_sse.press_continue,"âž¤ Press any key to continue"
