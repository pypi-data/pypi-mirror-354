"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .addprojectop import (
        AddProjectOrganization,
        AddProjectOrganizationTypedDict,
        AddProjectProject,
        AddProjectProjectTypedDict,
        AddProjectRequest,
        AddProjectRequestTypedDict,
        AddProjectResponse,
        AddProjectResponseBody,
        AddProjectResponseBodyTypedDict,
        AddProjectResponseTypedDict,
    )
    from .createorgop import (
        CreateOrgOrganization,
        CreateOrgOrganizationTypedDict,
        CreateOrgRequest,
        CreateOrgRequestTypedDict,
        CreateOrgResponse,
        CreateOrgResponseBody,
        CreateOrgResponseBodyTypedDict,
        CreateOrgResponseTypedDict,
    )
    from .createtunnelop import (
        CreateTunnelData,
        CreateTunnelDataTypedDict,
        CreateTunnelRequest,
        CreateTunnelRequestTypedDict,
        CreateTunnelResponse,
        CreateTunnelResponseBody,
        CreateTunnelResponseBodyTypedDict,
        CreateTunnelResponseTypedDict,
    )
    from .deleteprojectop import (
        DeleteProjectRequest,
        DeleteProjectRequestTypedDict,
        DeleteProjectResponse,
        DeleteProjectResponseBody,
        DeleteProjectResponseBodyTypedDict,
        DeleteProjectResponseTypedDict,
    )
    from .deletetunnelop import (
        DeleteTunnelRequest,
        DeleteTunnelRequestTypedDict,
        DeleteTunnelResponse,
        DeleteTunnelResponseBody,
        DeleteTunnelResponseBodyTypedDict,
        DeleteTunnelResponseTypedDict,
    )
    from .getorgsop import (
        GetOrgsOrganization,
        GetOrgsOrganizationTypedDict,
        GetOrgsResponse,
        GetOrgsResponseBody,
        GetOrgsResponseBodyTypedDict,
        GetOrgsResponseTypedDict,
    )
    from .getprojectsop import (
        GetProjectsOrganization,
        GetProjectsOrganizationTypedDict,
        GetProjectsProject,
        GetProjectsProjectTypedDict,
        GetProjectsResponse,
        GetProjectsResponseBody,
        GetProjectsResponseBodyTypedDict,
        GetProjectsResponseTypedDict,
    )
    from .gettunnelop import (
        GetTunnelData,
        GetTunnelDataTypedDict,
        GetTunnelRequest,
        GetTunnelRequestTypedDict,
        GetTunnelResponse,
        GetTunnelResponseBody,
        GetTunnelResponseBodyTypedDict,
        GetTunnelResponseTypedDict,
    )
    from .security import Security, SecurityTypedDict
    from .startprojectop import (
        StartProjectRequest,
        StartProjectRequestBody,
        StartProjectRequestBodyTypedDict,
        StartProjectRequestTypedDict,
    )
    from .stopprojectop import StopProjectRequest, StopProjectRequestTypedDict

__all__ = [
    "AddProjectOrganization",
    "AddProjectOrganizationTypedDict",
    "AddProjectProject",
    "AddProjectProjectTypedDict",
    "AddProjectRequest",
    "AddProjectRequestTypedDict",
    "AddProjectResponse",
    "AddProjectResponseBody",
    "AddProjectResponseBodyTypedDict",
    "AddProjectResponseTypedDict",
    "CreateOrgOrganization",
    "CreateOrgOrganizationTypedDict",
    "CreateOrgRequest",
    "CreateOrgRequestTypedDict",
    "CreateOrgResponse",
    "CreateOrgResponseBody",
    "CreateOrgResponseBodyTypedDict",
    "CreateOrgResponseTypedDict",
    "CreateTunnelData",
    "CreateTunnelDataTypedDict",
    "CreateTunnelRequest",
    "CreateTunnelRequestTypedDict",
    "CreateTunnelResponse",
    "CreateTunnelResponseBody",
    "CreateTunnelResponseBodyTypedDict",
    "CreateTunnelResponseTypedDict",
    "DeleteProjectRequest",
    "DeleteProjectRequestTypedDict",
    "DeleteProjectResponse",
    "DeleteProjectResponseBody",
    "DeleteProjectResponseBodyTypedDict",
    "DeleteProjectResponseTypedDict",
    "DeleteTunnelRequest",
    "DeleteTunnelRequestTypedDict",
    "DeleteTunnelResponse",
    "DeleteTunnelResponseBody",
    "DeleteTunnelResponseBodyTypedDict",
    "DeleteTunnelResponseTypedDict",
    "GetOrgsOrganization",
    "GetOrgsOrganizationTypedDict",
    "GetOrgsResponse",
    "GetOrgsResponseBody",
    "GetOrgsResponseBodyTypedDict",
    "GetOrgsResponseTypedDict",
    "GetProjectsOrganization",
    "GetProjectsOrganizationTypedDict",
    "GetProjectsProject",
    "GetProjectsProjectTypedDict",
    "GetProjectsResponse",
    "GetProjectsResponseBody",
    "GetProjectsResponseBodyTypedDict",
    "GetProjectsResponseTypedDict",
    "GetTunnelData",
    "GetTunnelDataTypedDict",
    "GetTunnelRequest",
    "GetTunnelRequestTypedDict",
    "GetTunnelResponse",
    "GetTunnelResponseBody",
    "GetTunnelResponseBodyTypedDict",
    "GetTunnelResponseTypedDict",
    "Security",
    "SecurityTypedDict",
    "StartProjectRequest",
    "StartProjectRequestBody",
    "StartProjectRequestBodyTypedDict",
    "StartProjectRequestTypedDict",
    "StopProjectRequest",
    "StopProjectRequestTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "AddProjectOrganization": ".addprojectop",
    "AddProjectOrganizationTypedDict": ".addprojectop",
    "AddProjectProject": ".addprojectop",
    "AddProjectProjectTypedDict": ".addprojectop",
    "AddProjectRequest": ".addprojectop",
    "AddProjectRequestTypedDict": ".addprojectop",
    "AddProjectResponse": ".addprojectop",
    "AddProjectResponseBody": ".addprojectop",
    "AddProjectResponseBodyTypedDict": ".addprojectop",
    "AddProjectResponseTypedDict": ".addprojectop",
    "CreateOrgOrganization": ".createorgop",
    "CreateOrgOrganizationTypedDict": ".createorgop",
    "CreateOrgRequest": ".createorgop",
    "CreateOrgRequestTypedDict": ".createorgop",
    "CreateOrgResponse": ".createorgop",
    "CreateOrgResponseBody": ".createorgop",
    "CreateOrgResponseBodyTypedDict": ".createorgop",
    "CreateOrgResponseTypedDict": ".createorgop",
    "CreateTunnelData": ".createtunnelop",
    "CreateTunnelDataTypedDict": ".createtunnelop",
    "CreateTunnelRequest": ".createtunnelop",
    "CreateTunnelRequestTypedDict": ".createtunnelop",
    "CreateTunnelResponse": ".createtunnelop",
    "CreateTunnelResponseBody": ".createtunnelop",
    "CreateTunnelResponseBodyTypedDict": ".createtunnelop",
    "CreateTunnelResponseTypedDict": ".createtunnelop",
    "DeleteProjectRequest": ".deleteprojectop",
    "DeleteProjectRequestTypedDict": ".deleteprojectop",
    "DeleteProjectResponse": ".deleteprojectop",
    "DeleteProjectResponseBody": ".deleteprojectop",
    "DeleteProjectResponseBodyTypedDict": ".deleteprojectop",
    "DeleteProjectResponseTypedDict": ".deleteprojectop",
    "DeleteTunnelRequest": ".deletetunnelop",
    "DeleteTunnelRequestTypedDict": ".deletetunnelop",
    "DeleteTunnelResponse": ".deletetunnelop",
    "DeleteTunnelResponseBody": ".deletetunnelop",
    "DeleteTunnelResponseBodyTypedDict": ".deletetunnelop",
    "DeleteTunnelResponseTypedDict": ".deletetunnelop",
    "GetOrgsOrganization": ".getorgsop",
    "GetOrgsOrganizationTypedDict": ".getorgsop",
    "GetOrgsResponse": ".getorgsop",
    "GetOrgsResponseBody": ".getorgsop",
    "GetOrgsResponseBodyTypedDict": ".getorgsop",
    "GetOrgsResponseTypedDict": ".getorgsop",
    "GetProjectsOrganization": ".getprojectsop",
    "GetProjectsOrganizationTypedDict": ".getprojectsop",
    "GetProjectsProject": ".getprojectsop",
    "GetProjectsProjectTypedDict": ".getprojectsop",
    "GetProjectsResponse": ".getprojectsop",
    "GetProjectsResponseBody": ".getprojectsop",
    "GetProjectsResponseBodyTypedDict": ".getprojectsop",
    "GetProjectsResponseTypedDict": ".getprojectsop",
    "GetTunnelData": ".gettunnelop",
    "GetTunnelDataTypedDict": ".gettunnelop",
    "GetTunnelRequest": ".gettunnelop",
    "GetTunnelRequestTypedDict": ".gettunnelop",
    "GetTunnelResponse": ".gettunnelop",
    "GetTunnelResponseBody": ".gettunnelop",
    "GetTunnelResponseBodyTypedDict": ".gettunnelop",
    "GetTunnelResponseTypedDict": ".gettunnelop",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "StartProjectRequest": ".startprojectop",
    "StartProjectRequestBody": ".startprojectop",
    "StartProjectRequestBodyTypedDict": ".startprojectop",
    "StartProjectRequestTypedDict": ".startprojectop",
    "StopProjectRequest": ".stopprojectop",
    "StopProjectRequestTypedDict": ".stopprojectop",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
