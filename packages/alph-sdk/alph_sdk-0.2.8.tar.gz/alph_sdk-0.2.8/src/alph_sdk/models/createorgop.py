"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from alph_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class CreateOrgRequestTypedDict(TypedDict):
    name: NotRequired[str]
    slug: NotRequired[str]


class CreateOrgRequest(BaseModel):
    name: Optional[str] = None

    slug: Optional[str] = None


class CreateOrgOrganizationTypedDict(TypedDict):
    avatar_url: NotRequired[Nullable[Any]]
    balance: NotRequired[float]
    created_at: NotRequired[str]
    id: NotRequired[str]
    name: NotRequired[str]
    role: NotRequired[str]
    slug: NotRequired[str]
    stripe_customer_id: NotRequired[Nullable[Any]]
    subscription_level: NotRequired[str]


class CreateOrgOrganization(BaseModel):
    avatar_url: OptionalNullable[Any] = UNSET

    balance: Optional[float] = None

    created_at: Optional[str] = None

    id: Optional[str] = None

    name: Optional[str] = None

    role: Optional[str] = None

    slug: Optional[str] = None

    stripe_customer_id: OptionalNullable[Any] = UNSET

    subscription_level: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "avatar_url",
            "balance",
            "created_at",
            "id",
            "name",
            "role",
            "slug",
            "stripe_customer_id",
            "subscription_level",
        ]
        nullable_fields = ["avatar_url", "stripe_customer_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class CreateOrgResponseBodyTypedDict(TypedDict):
    r"""Create Org"""

    organization: NotRequired[CreateOrgOrganizationTypedDict]
    status: NotRequired[str]


class CreateOrgResponseBody(BaseModel):
    r"""Create Org"""

    organization: Optional[CreateOrgOrganization] = None

    status: Optional[str] = None


class CreateOrgResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: CreateOrgResponseBodyTypedDict


class CreateOrgResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: CreateOrgResponseBody
