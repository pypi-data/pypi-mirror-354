[project]
name = "nnumbers-development"
version = "0.1.3"
description = "A  CLI tool for managing OpenStack cloud resources with modern Python features"
authors = [
    {name = "Eric Miguel", email = "eric.mrib@gmail.com"},
]
maintainers = [
    {name = "Eric Miguel", email = "eric.mrib@gmail.com"},
]
dependencies = [
    "python-openstackclient>=8.1.0",
    "cyclopts>=3.18.0", 
    "loguru>=0.7.3", 
    "tabulate>=0.9.0",
    "typing-extensions>=4.8.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
keywords = ["openstack", "cloud", "cli", "infrastructure", "devops", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/your-org/nnumbers-cli"
Documentation = "https://github.com/your-org/nnumbers-cli#readme"
Repository = "https://github.com/your-org/nnumbers-cli.git"
Issues = "https://github.com/your-org/nnumbers-cli/issues"
Changelog = "https://github.com/your-org/nnumbers-cli/releases"

[project.scripts]
nnumbers = "nnumbers.__main__:main"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"


[tool.pdm]
distribution = true

[tool.ruff]


# Enable fix behavior by-default when running ruff
# (overridden by the --fix and --no-fix command-line flags).
# Only includes automatic fixes unless --unsafe-fixes is provided.
fix = true
include = ["pyproject.toml", "src/**/*.py", "scripts/**/*.py", "*.py"]
extend-include = ["*.ipynb"]

respect-gitignore = true
show-fixes = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Allows removing unused imports at __init__ files
extend-safe-fixes = ["F401"]

# Enable Pyflakes (`F`) and pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# Enable flake8-bugbear (`B`) rules, in addition to the defaults.
# Enable docs (`D`) and imperative doc mood (D401) rules.
# Enable import sorting (isort) (`I`) rules.
select = ["F", "E", "W", "C901", "B", "D", "D401", "E", "I001"]

# Avoid enforcing line-length violations (`E501`)
# Relax the convention by _not_ requiring documentation for every function parameter.
ignore = ["D417"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# 3. Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Header",
    "fastapi.Path",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "single"

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
scipy = "sp"
polars = "pl"

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom alias for the `matplotlib` module.
"dask.dataframe" = "dd"

[tool.ruff.lint.isort]
# Forces all from imports to appear on their own line.
force-single-line = true
# Don't sort straight-style imports (like import sys) before from-style imports
# (like from itertools import groupby). Instead, sort the imports by module,
# independent of import style.
force-sort-within-sections = true

# Use a single line after each import block.
lines-after-imports = 2

# Use no lines between direct and from import.
lines-between-types = 0

[tool.ruff.lint.per-file-ignores]
# Ignore all directories named `tests`.
"tests/**" = ["D"]
# Ignore all files that end in `_test.py`.
"*_test.py" = ["D"]


[tool.pdm.dev-dependencies]
ruff = []


[tool.pdm.scripts]
# ======================================================================================
# utilidades
# ======================================================================================
generate-requirements = { cmd = [
    "pdm",
    "export",
    "-o",
    "requirements.txt",
    "--without-hashes",
] }

########################################################################################
# qualidade de cÃ³digo
# NOTE: comandos > 4 letras devem ter um short alias. Por exemplo: `format` e `fmt`.
########################################################################################
pre-commit-install = { shell = "pre-commit install" }
pci = { shell = "pre-commit install" }

format = { shell = "ruff format" }
fmt = { shell = "ruff format" }

check = { shell = "ruff check" }
ck = { shell = "ruff check" }

check-dry-run = { shell = "ruff check --no-fix" }
ckdr = { shell = "ruff check --no-fix" }

check-typing = { shell = "mypy src" }
ct = { shell = "mypy src" }

check-vulture = { shell = "vulture src --min-confidence=90" }
cv = { shell = "vulture src --min-confidence=90" }

check-vulture-lax = { shell = "vulture src --min-confidence=80" }
cvl = { shell = "vulture src --min-confidence=80" }

check-vulture-sensible = { shell = "vulture src --min-confidence=60" }
cvs = { shell = "vulture src --min-confidence=60" }

test = { shell = "pytest --cov=src tests/" }

format-check = { composite = ["format", "check"] }
fc = { composite = ["format", "check"] }

format-check-typing = { composite = ["format", "check", "check-typing"] }
fct = { composite = ["format", "check", "check-typing"] }

format-check-typing-dead = { composite = [
    "format",
    "check",
    "check-typing",
    "check-vulture",
] }
fctd = { composite = ["format", "check", "check-typing", "check-vulture"] }

full = { composite = ["format", "check", "check-typing", "check-vulture", "test"] }

pre-commit-check = { shell = "pre-commit run --all-files" }
pcc = { shell = "pre-commit run --all-files" }


# ======================================================================================
# pytest configuration
# ======================================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# ======================================================================================
# mypy configuration  
# ======================================================================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "openstack.*",
    "tabulate.*",
    "loguru.*",
]
ignore_missing_imports = true


[dependency-groups]
dev = [
    "ruff>=0.11.13",
    "types-tabulate>=0.9.0.20241207",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "mypy>=1.8.0",
    "vulture>=2.11",
    "pre-commit>=3.6.0",
    "icecream>=2.1.4",
]
