"""
–ö–ª–∏–µ–Ω—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º.

–ó–∞–ø—É—Å–∫:
    python -m tests.test_connector_client 
"""

import os
import sys
import asyncio
import json
import time
import uuid
from datetime import datetime
from typing import Optional, Dict, Any, List
import httpx
import argparse

# URL API –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_API_URL = "http://localhost:8000"

class ConnectorClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Å API, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª.
    –†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ /handshake –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
    """
    
    def __init__(
        self, 
        connector_type: str,
        api_url: str = DEFAULT_API_URL,
        polling_interval: int = 15,
        config: Optional[Dict[str, Any]] = None,
        integration_key: Optional[str] = None,
        capabilities: Optional[List[str]] = None,
        initial_config_schema: Optional[Dict[str, Any]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞.
        
        Args:
            connector_type: –¢–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "telegram")
            api_url: URL API —Å–µ—Ä–≤–µ—Ä–∞
            polling_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–ª–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            config: –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å)
            integration_key: –ö–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ None, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            capabilities: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "oauth", "two-factor")
            initial_config_schema: –°—Ö–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        self.connector_type = connector_type
        self.api_url = api_url
        self.polling_interval = polling_interval
        self.collector_id = f"{connector_type}-collector"
        self.connector_id: Optional[str] = None
        self.stage = "unregistered"
        self.enabled = False
        self.http_client = httpx.AsyncClient(timeout=30.0)
        self.running = False
        self.integration_key = integration_key
        self.access_token: Optional[str] = None
        self.capabilities = capabilities or []
        self.config_schema = initial_config_schema or { 
            "properties": {
                "polling_interval": {"type": "integer", "default": polling_interval}
            }
        }
        self.steps = []
        self.current_config = config or {}
        self.config_validation = {"valid": False, "errors": []}
        self.messages = []
        self.group_id_counter = 0
    
    async def register(self) -> bool:
        print(f"üîå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø–∞ '{self.connector_type}'...")
        if not self.integration_key:
            print("‚ùå –ö–ª—é—á –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False
            
        register_data = {
            "type": self.connector_type,
            "metadata": {
                "version": "1.0.0",
                "description": f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä {self.connector_type}",
                "author": "Example Client Script"
            },
            "config_schema": self.config_schema,
            "integration_key": self.integration_key,
            "capabilities": self.capabilities
        }
        
        try:
            response = await self.http_client.post(
                f"{self.api_url}/connectors/register",
                json=register_data
            )
            if response.status_code == 200:
                data = response.json()
                self.connector_id = data["connector_id"]
                self.access_token = data["access_token"]
                print(f"‚úÖ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID={self.connector_id}, Token={self.access_token[:8]}...")
                # –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º handshake –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if await self.handshake():
                    return True
                else:
                    print("‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –ø–µ—Ä–≤—ã–π handshake –Ω–µ —É–¥–∞–ª—Å—è.")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False

    async def _update_state_from_handshake(self, data):
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.stage = data.get("stage", self.stage)
        self.enabled = data.get("enabled", self.enabled)
        self.steps = data.get("steps", self.steps)
        self.current_config = data.get("current_config", self.current_config)
        self.config_validation = data.get("config_validation", self.config_validation)
        self.messages = data.get("messages", self.messages)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª
        if data.get("auth_token"):
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if self.access_token != data["auth_token"]:
                 print(f"üîë –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {self.access_token[:8]}... -> {data['auth_token'][:8]}...")
                 self.access_token = data["auth_token"]
            else:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å debug –ª–æ–≥, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏—à–µ–ª, –Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                pass

    async def handshake(self) -> bool: # –£–±—Ä–∞–ª–∏ V2 –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
        if not self.connector_id or not self.access_token:
            print("‚ùå ID –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è handshake.")
            return False
            
        headers = {"Authorization": f"Bearer {self.access_token}"}
        try:
            print("ü§ù –ó–∞–ø—Ä–æ—Å Handshake...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /handshake
            response = await self.http_client.get(
                f"{self.api_url}/connectors/{self.connector_id}/handshake", headers=headers 
            )
            if response.status_code == 200:
                data = response.json()
                await self._update_state_from_handshake(data)
                print(f"  –û—Ç–≤–µ—Ç Handshake: Stage={self.stage}, Enabled={self.enabled}, ConfigValid={self.config_validation.get('valid')}")
                if self.steps:
                    print("  –®–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
                    for step in self.steps:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–∞–º
                        print(f"    - {step.get('id')}: {step.get('status')} - {step.get('title', step.get('message', ''))}")
                if self.messages:
                    print("  –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                    for msg in self.messages: print(f"    - [{msg.get('level')}] {msg.get('text')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Handshake: {response.status_code} - {response.text}")
                if response.status_code == 401:
                    print("  –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
                    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏, –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å previous_token –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
                    self.stage = "unregistered" # –ü—Ä–∏–º–µ—Ä: —Å—á–∏—Ç–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ Handshake: {e}")
            return False

    async def process_setup_steps(self):
        if self.stage != "setup" or not self.enabled:
            return False 

        pending_steps = [step for step in self.steps if step.get("status") == "pending"]
        if not pending_steps:
            print("‚ÑπÔ∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —à–∞–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (pending).")
            return True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —à–∞–≥–æ–≤ –Ω–µ—Ç

        step_processed = False
        for step in pending_steps:
            step_id = step.get("id")
            print(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ '{step_id}': {step.get('title', step.get('message', ''))}")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∞–≥–∞
            value_for_step = None
            # –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ initial_configuration, –ø–µ—Ä–µ–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
            if step_id == "initial_configuration":
                 # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã
                 required_fields = self.config_schema.get("required", [])
                 value_for_step = {}
                 for field in required_fields:
                     value_for_step[field] = f"auto_value_for_{field}"
                 # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å default –∑–Ω–∞—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
                 for field, props in self.config_schema.get("properties", {}).items():
                     if field not in value_for_step and "default" in props:
                          value_for_step[field] = props["default"]
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                value_for_step = f"auto_value_for_{step_id}"
            
            if value_for_step is not None:
                print(f"  –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {json.dumps(value_for_step)}")
                if await self.submit_step_input(step_id, value_for_step):
                    step_processed = True
                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–≥–∞ –¥–µ–ª–∞–µ–º handshake, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await self.handshake() 
                    return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
                else:
                    print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ '{step_id}'.")
                    return False # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —à–∞–≥ –Ω–µ —É–¥–∞–ª—Å—è
            else:
                 print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ '{step_id}'. –ü—Ä–æ–ø—É—Å–∫.")
        
        return step_processed # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    async def submit_step_input(self, step_id, value):
        if not self.connector_id or not self.access_token:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–≤–æ–¥ —à–∞–≥–∞: –Ω–µ—Ç ID –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞.")
            return False
        headers = {"Authorization": f"Bearer {self.access_token}"}
        payload = {"step_id": step_id, "value": value}
        try:
            response = await self.http_client.post(
                f"{self.api_url}/connectors/{self.connector_id}/input", json=payload, headers=headers
            )
            if response.status_code == 200:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–≥–∞ '{step_id}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–≥–∞ '{step_id}': {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–≥–∞ '{step_id}': {e}")
            return False
            
    async def ensure_configuration(self):
        if self.stage != "configuration" or not self.enabled:
            return False 

        if self.config_validation.get("valid"):
            print("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞.")
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ —ç—Ç–∞–ø –≤—Å–µ –µ—â–µ CONFIGURATION, –∑–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å handshake
            # —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–µ–ª –Ω–∞—Å –≤ READY (–µ—Å–ª–∏ –≤—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)
            await self.handshake() 
            return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞

        print(f"üõ†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –û—à–∏–±–∫–∏: {self.config_validation.get('errors')}")
        config_to_set = {}
        missing = self.config_validation.get("missing_fields", [])
        invalid = self.config_validation.get("invalid_fields", []) # –£—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
        required_from_schema = self.config_schema.get("required", [])
        properties_schema = self.config_schema.get("properties", {})

        fields_to_fix = {f['field'] for f in missing} | {f['field'] for f in invalid}
        
        for field_name in fields_to_fix:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å default –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ö–µ–º—ã
            default_value = properties_schema.get(field_name, {}).get("default")
            if default_value is not None:
                 config_to_set[field_name] = default_value
            # –ï—Å–ª–∏ default –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            elif field_name in properties_schema:
                field_type = properties_schema[field_name].get("type")
                if field_type == "string": config_to_set[field_name] = f"auto_value_for_{field_name}"
                elif field_type == "integer": config_to_set[field_name] = 0
                elif field_type == "number": config_to_set[field_name] = 0.0
                elif field_type == "boolean": config_to_set[field_name] = False
                elif field_type == "array": config_to_set[field_name] = []
                elif field_type == "object": config_to_set[field_name] = {}
                else: config_to_set[field_name] = "unknown_type_default"
            else:
                 config_to_set[field_name] = f"dummy_value_for_{field_name}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            
        if config_to_set:
            print(f"  –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {json.dumps(config_to_set)}")
            if await self.update_partial_config(config_to_set):
                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–µ–ª–∞–µ–º handshake, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self.handshake()
                return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç.–∫. –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
            else:
                print("  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
                return False
        else:
            print("  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return False

    async def update_partial_config(self, partial_config):
        if not self.connector_id or not self.access_token:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: –Ω–µ—Ç ID –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞.")
            return False
        headers = {"Authorization": f"Bearer {self.access_token}"}
        payload = {"partial_config": partial_config}
        try:
            response = await self.http_client.post(
                f"{self.api_url}/connectors/{self.connector_id}/config", json=payload, headers=headers
            )
            if response.status_code == 200:
                print(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    async def collect_data_from_source(self):
        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üîé –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
        await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
        self.group_id_counter += 1
        current_group_id = f"group_{self.collector_id}_{self.group_id_counter}"
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1-3 —Å–æ–æ–±—â–µ–Ω–∏—è
        num_messages = random.randint(1, 3)
        data_items = []
        for i in range(num_messages):
            data_items.append(
                 {"id": f"msg{i+1}", "text": f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1} –¥–ª—è {current_group_id} –≤ {datetime.now().isoformat()}"}
            )
        print(f"  –°–æ–±—Ä–∞–Ω–æ {len(data_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
        return data_items, current_group_id
        
    async def format_to_raw_entry(self, item, group_id, is_last=False):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ RawEntry
        entry = {
            "collector_id": self.collector_id,
            "group_id": group_id,
            "entry_id": f"{item['id']}_{uuid.uuid4()}", 
            "type": "text", # –ü—Ä–∏–º–µ—Ä —Ç–∏–ø–∞
            "payload": { "content": item["text"] },
            "metadata": {
                "source": self.connector_type,
                "is_last": is_last,
                "collected_at": datetime.now().isoformat()
            },
            "timestamp": datetime.now().isoformat() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ timestamp –∑–∞–ø–∏—Å–∏
        }
        return entry
        
    async def send_data_entry(self, entry):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ RawEntry
        if not self.connector_id or not self.access_token:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç ID –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞.")
            return False
        headers = {"Authorization": f"Bearer {self.access_token}"}
        try:
            response = await self.http_client.post(
                f"{self.api_url}/connectors/{self.connector_id}/data", json=entry, headers=headers
            )
            if response.status_code == 200: 
                print(f"üì§ –ó–∞–ø–∏—Å—å {entry.get('entry_id', 'N/A')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {entry.get('entry_id', 'N/A')}: {response.status_code} - {response.text}")
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 403 Forbidden), –¥–µ–ª–∞–µ–º handshake
                if response.status_code == 403:
                    await self.handshake()
                return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏ {entry.get('entry_id', 'N/A')}: {e}")
            return False
            
    async def run(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        if not self.connector_id:
            if not await self.register():
                print("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä. –í—ã—Ö–æ–¥.")
                await self.http_client.aclose()
                return
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ {self.connector_type} (ID: {self.connector_id})...")
        self.running = True
        try:
            while self.running and self.stage != "unregistered": 
                # 1. Handshake –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if not await self.handshake():
                    if self.stage == "unregistered": break # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
                    print("üî¥ –û—à–∏–±–∫–∞ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª...")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                    polling_interval = self.current_config.get("polling_interval", self.polling_interval)
                    await asyncio.sleep(polling_interval)
                    continue

                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ enabled
                if not self.enabled:
                    print(f"üí§ –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä ID: {self.connector_id} –æ—Ç–∫–ª—é—á–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è...")
                    polling_interval = self.current_config.get("polling_interval", self.polling_interval)
                    await asyncio.sleep(polling_interval)
                    continue
                
                # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤
                action_taken = False
                if self.stage == "setup":
                    print("-> –≠—Ç–∞–ø SETUP")
                    action_taken = await self.process_setup_steps()
                elif self.stage == "configuration":
                    print("-> –≠—Ç–∞–ø CONFIGURATION")
                    action_taken = await self.ensure_configuration()
                elif self.stage == "ready":
                    print("-> –≠—Ç–∞–ø READY")
                    if self.config_validation.get("valid"):
                        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞. –°–±–æ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                        collected_items, group_id = await self.collect_data_from_source()
                        if collected_items:
                            all_sent_successfully = True
                            for i, item in enumerate(collected_items):
                                is_last = (i == len(collected_items) - 1)
                                raw_entry = await self.format_to_raw_entry(item, group_id, is_last)
                                if not await self.send_data_entry(raw_entry):
                                    print("  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Å–±–æ—Ä–∞.")
                                    all_sent_successfully = False
                                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
                            if all_sent_successfully:
                                print(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {group_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
                            action_taken = True # –°—á–∏—Ç–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–±–æ—Ä–∞/–æ—Ç–ø—Ä–∞–≤–∫–∏
                        else:
                            print("  –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                            action_taken = True # –°—á–∏—Ç–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö
                    else:
                        print("  ‚ö†Ô∏è –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –≤ —ç—Ç–∞–ø–µ READY, –Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
                        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ handshake
                        action_taken = True # –°—á–∏—Ç–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥–∞
                else: 
                    print(f"-> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —ç—Ç–∞–ø: {self.stage}")
                    action_taken = True # –ß—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –∑–∞–≤–∏—Å
                
                # 4. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                polling_interval = self.current_config.get("polling_interval", self.polling_interval)
                # –ï—Å–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞, –∫–æ–Ω—Ñ–∏–≥–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö),
                # –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –∫–æ—Ä–æ—á–µ –∏–ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏.
                # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—Å–µ–≥–¥–∞ –∂–¥–µ–º polling_interval.
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {polling_interval} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(polling_interval)
                
        except KeyboardInterrupt:
            print("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self.running = False
        except Exception as e:
            print(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.running = False
        finally:
            await self.http_client.aclose()
            print(f"üëã –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä {self.connector_type} (ID: {self.connector_id}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞."""
    parser = argparse.ArgumentParser(description="–ö–ª–∏–µ–Ω—Ç –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –¥–ª—è Mindbank")
    parser.add_argument("--api-url", default=os.environ.get("API_URL", DEFAULT_API_URL), help="URL API")
    parser.add_argument("--integration-key", default=os.environ.get("INTEGRATION_KEY"), help="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ env INTEGRATION_KEY)")
    parser.add_argument("--connector-type", default="example-connector", help="–¢–∏–ø –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞")
    parser.add_argument("--interval", type=int, default=15, help="Polling interval seconds")
                      
    args = parser.parse_args()
    
    if not args.integration_key:
        print("–û—à–∏–±–∫–∞: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --integration-key –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è INTEGRATION_KEY.")
        sys.exit(1)
        
    # –ü—Ä–∏–º–µ—Ä —Å—Ö–µ–º—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
    example_schema = {
        "properties": {
            "api_token": {"type": "string", "description": "API Token –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"},
            "target_folder": {"type": "string", "description": "–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞"},
            "polling_interval": {"type": "integer", "default": args.interval, "description": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"}
        },
        "required": ["api_token"] # –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    }
    example_capabilities = ["file_watch", "status_report"]
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = ConnectorClient(
        api_url=args.api_url,
        integration_key=args.integration_key,
        connector_type=args.connector_type,
        polling_interval=args.interval,
        capabilities=example_capabilities,
        initial_config_schema=example_schema
    )
    
    await client.run() 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º random –¥–ª—è collect_data_from_source
import random 

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.") 