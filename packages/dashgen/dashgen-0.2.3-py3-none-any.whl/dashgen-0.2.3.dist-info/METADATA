Metadata-Version: 2.4
Name: dashgen
Version: 0.2.3
Summary: Gere dashboards visuais como imagens usando HTML/CSS e Playwright.
Home-page: https://github.com/77-Indicadores/dashgen
Author: Vinicius Moreira
Author-email: vinicius@77indicadores.com.br
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: playwright
Requires-Dist: jinja2
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# Dashgen

üìä Gere **dashboards visuais como imagens (PNG)** diretamente do Python com HTML, Tailwind CSS e Chart.js.

---

## ‚ú® O que √©?

`dashgen` √© um micro-framework que permite criar dashboards din√¢micos e export√°-los como imagens de alta qualidade.

Ideal para gerar relat√≥rios di√°rios, KPIs, resumos visuais e compartilhar automaticamente via e-mail, WhatsApp, sistemas internos etc.

---

## üõ† Instala√ß√£o

```bash
pip install dashgen
playwright install
````

---

## üöÄ Exemplo Completo

```python
from dashgen import Dashboard
from dashgen.core.layout import Row, Column

# Criar o dashboard com altura autom√°tica, t√≠tulo estilizado e tema
db = Dashboard(
    title="üìä Relat√≥rio de Desempenho Comercial",
    title_style="text-3xl font-bold text-emerald-700",
    logo_path="logo.png",
    size=(1080, None),
    auto_size=True,
    theme={
        "primary": "#0f766e",
        "accent": "#22d3ee",
        "bg": "#f0fdfa",
        "text": "#082f49"
    }
)

# Linha com dois cards
db.add(Row(
    Column(6).add_card("Receita Acumulada", 9000000, 10000000),
    Column(6).add_card("Unidades Vendidas", 430, 500)
))

# Linha com tabela e gr√°fico de barras
dados = [
    {"Nome": "Projeto A", "Meta": "R$ 3M", "Realizado": "R$ 2.4M", "Varia√ß√£o": "-20%"},
    {"Nome": "Projeto B", "Meta": "R$ 5M", "Realizado": "R$ 5.2M", "Varia√ß√£o": "+4%"}
]

db.add(Row(
    Column(6).add_table("Desempenho por Projeto", dados, ["Nome", "Meta", "Realizado", "Varia√ß√£o"]),
    Column(6).add_chart(
        "bar",
        "Vendas por M√™s",
        [
            {"label": "Jan", "value": 120},
            {"label": "Fev", "value": 135},
            {"label": "Mar", "value": 160},
            {"label": "Abr", "value": 110},
            {"label": "Mai", "value": 190}
        ],
        options={
            "height": 300,
            "show_data_labels": True,
            "show_legend": False,
            "show_x_axis": True,
            "show_y_axis": True,
            "autosize_x": True,
            "bar_color": "#0f766e"
        }
    )
))

# Linha com gr√°fico de linha (largura total)
db.add(Row(
    Column(12).add_chart(
        "line",
        "Receita Total (R$)",
        [
            {"label": "Jan", "value": 1200000},
            {"label": "Fev", "value": 1450000},
            {"label": "Mar", "value": 1600000},
            {"label": "Abr", "value": 1800000},
            {"label": "Mai", "value": 2100000}
        ],
        options={
            "height": 460,
            "show_legend": False,
            "show_x_axis": True,
            "show_y_axis": True,
            "autosize_x": True,
            "tension": 0.4,
            "fill": False,
            "border_color": "#22d3ee"
        }
    )
))

# Gerar imagem
db.generate("output_dashboard.png")
print("‚úÖ Dashboard gerado com sucesso!")

```

---

## üß± Componentes Dispon√≠veis

### üìê Layout

* `Row(...)`: Agrupa colunas
* `Column(width=...)`: Define largura (1 a 12)

### üì¶ Card (KPI)

```python
Column(6).add_card("T√≠tulo", valor, meta, style={ ... })
```

Suporta personaliza√ß√£o com:

* `title_color`, `title_size`, `text_size`
* `bar_color`, `card_class`

### üìä Tabela

```python
Column(6).add_table("T√≠tulo", data, headers)
```

* `data`: lista de dicion√°rios
* `headers`: nomes das colunas a exibir

### üìà Gr√°fico (Chart.js)

```python
Column(6).add_chart("bar" ou "line", "T√≠tulo", data, options={...})
```

* `data`: lista com `label` e `value`
* `options`:

  * `height`: altura do canvas
  * `fill`: preencher √°rea sob a linha
  * `tension`: suavidade das curvas
  * `autosize_x` / `autosize_y`: expandir horizontal/vertical
  * `show_legend`: mostrar legenda
  * `show_x_axis` / `show_y_axis`: mostrar eixos
  * `show_data_labels`: mostrar valores sobre as barras

---

## üé® Tema Personalizado

```python
theme = {
    "primary": "#005f73",  # Barras e t√≠tulos
    "accent": "#94d2bd",   # Detalhes
    "bg": "#fefae0",       # Fundo da imagem
    "text": "#001219"      # Cor do texto
}
```

---

## üß† Funcionalidades Especiais

* `auto_size=True`: ajusta altura da imagem com base no conte√∫do
* Responsivo com Tailwind
* Gr√°ficos com Chart.js
* R√≥tulos de valores (`chartjs-plugin-datalabels`)
* Estiliza√ß√£o por componente (`style`, `options`)

---

## üìö API Refer√™ncia

### üìò `Dashboard(...)`

| Par√¢metro   | Tipo             | Descri√ß√£o                   |
| ----------- | ---------------- | --------------------------- |
| `title`     | `str`            | T√≠tulo do dashboard         |
| `logo_path` | `str` (opcional) | Caminho da logo             |
| `size`      | `(int, int)`     | Tamanho fixo da imagem      |
| `auto_size` | `bool`           | Ajuste autom√°tico de altura |
| `theme`     | `dict`           | Cores do tema               |

---

## ‚úÖ Requisitos

* Python 3.7+
* `playwright`
* `jinja2`

```bash
pip install dashgen
playwright install
```

---

## üñº Gere imagens de dashboards com visual moderno, responsivo e export√°vel ‚Äì em uma linha de c√≥digo.

```
