class ${class_name}(str, Enum):${enum_description}
${member_definitions}

class _${class_name}Query(_EnumQuery):${enum_query_description}
    @classmethod
    def init_enums(cls, field_name, parent_obj: QueryBuilder, enum_fields: list[str]):
        o = _${class_name}Query(field_name, parent_obj)
        o._enum_values = set(enum_fields)
        return o

    def equals(self, value: ${class_name}) -> QueryBuilder:
        self._check([value.value])
        self._eq_value = value.value
        return self._parent_obj

    def not_equals(self, value: ${class_name}) -> QueryBuilder:
        self._check([value.value])
        self._ne_value = value.value
        return self._parent_obj

    def in_set(self, values: list[${class_name}]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._in_values = extracted
        return self._parent_obj

    def not_in_set(self, values: list[${class_name}]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._not_in_values = extracted
        return self._parent_obj
$custom_methods