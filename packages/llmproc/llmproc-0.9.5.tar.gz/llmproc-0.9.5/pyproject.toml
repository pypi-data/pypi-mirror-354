[project]
name = "llmproc"
version = "0.9.5"
description = "A simple framework for LLM-powered applications"
readme = "README.md"
requires-python = ">=3.11"
license = "Apache-2.0"
authors = [
    {name = "Jonathan Chang", email = "31893406+cccntu@users.noreply.github.com"},
]
urls = {repository = "https://github.com/cccntu/llmproc"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.1.8",
    "mcp>=1.6.0",
    "python-dotenv>=1.0.1",
    "tomli>=2.2.1",
    "PyYAML>=6.0",
    "anthropic>=0.52.0",
]

[project.optional-dependencies]
openai = [
    "openai>=1.70.0",
]
anthropic = [
    "anthropic>=0.49.0",
]
vertex = [
    "google-cloud-aiplatform>=1.87.0",
]
gemini = [
    "google-genai>=1.9.0",
]
all = [
    "openai>=1.70.0",
    "anthropic>=0.49.0",
    "google-cloud-aiplatform>=1.87.0",
    "google-genai>=1.9.0",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-anyio>=0.0.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.9.9",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/llmproc"]

[tool.ruff]
# This sets the hard limit for both linting and formatting
# The formatter will try to keep lines under this length when possible
line-length = 120
target-version = "py311"
exclude = ["dev/", "projects/swe-agent/", "tests/"]

[tool.ruff.format]
# The formatter will try to keep lines under line-length when possible
# but won't reformat existing lines unless they exceed this length
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle warnings
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "B", # flake8-bugbear
]
ignore = [
    "D203",
    "D212",
    "E501",  # Line too long
    "B904",  # Use 'raise from' in exception handling
    "F401",  # Unused imports
    "F821",  # Undefined names
    "N811",  # Constant imported as non-constant
    "D102",  # Missing docstring in public method
    # The following are primarily in test files and examples
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D205",  # 1 blank line required between summary line and description
    "D415",  # First line should end with punctuation
    "N806",  # Variable in function should be lowercase
    "UP007",  # Use X | Y for type annotations
    "F841",  # Unused variables (primarily in tests)
    "UP022",  # Prefer capture_output over stdout/stderr=PIPE (in tests)
    # Additional ignores
    "B007",  # Unused loop control variable
    "W291",  # Trailing whitespace
    "W293",  # Blank line contains whitespace
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["E402", "F811"]  # Allow imports not at top and fixture redefinition in tests
"projects/swe-agent/min_swe_env/*" = ["E402", "B012"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--no-header --tb=short"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "llm_api: tests that make actual API calls to LLM providers",
    "asyncio: marks tests that use asyncio functionality",
    "anthropic_api: tests that use Anthropic API",
    "openai_api: tests that use OpenAI API",
    "vertex_api: tests that use Vertex AI",
    "essential_api: minimal API tests for CI and daily development",
    "extended_api: extended API tests for regular validation",
    "release_api: comprehensive API tests for releases",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "pass",
    "class .*\\(Protocol\\):",
    "\\.\\.\\.",
]

[tool.coverage.run]
omit = [
    "*/site-packages/*",
    "tests/*",
    "setup.py",
]

[project.scripts]
llmproc = "llmproc.cli.run:main"
llmproc-demo = "llmproc.cli.demo:main"
llmproc-prompt = "llmproc.cli.print_system_prompt:main"
llmproc-install-actions = "llmproc.cli.install_actions:main"
