# .github/workflows/llmproc-code-implementation.yml
#
# This workflow implements code changes requested in GitHub issues or PRs using Claude.
#
# Required secrets:
# - ANTHROPIC_API_KEY: API key for Claude
# - LLMPROC_WRITE_TOKEN: GitHub personal access token with write permissions (contents, pull-requests)
#
# LIMITATION: This workflow cannot modify files under .github/workflows/ due to GitHub's
# security restrictions. Even if your token has 'workflow' permission, GitHub Actions
# prevents workflows from modifying workflow files as an additional security measure.
#
# How it works:
# 1. Triggered when someone comments "@llmproc /code <request>" on an issue or PR
# 2. Posts an initial status comment indicating processing has started
# 3. Creates a new feature branch from the base branch (main/master)
# 4. Uses llmproc with Claude to implement the requested changes
# 5. Commits the changes if any were made
# 6. Creates a PR with the implemented changes if there are new commits
# 7. Updates the status comment with the final result
#
# Comment behavior:
# - Creates only ONE status comment per invocation (no duplicate comments)
# - The initial "Processing..." comment is updated with the final result
# - Includes implementation details and any work logs
#
# Security:
# - Only responds to comments from repository owners, members, and collaborators
# - Uses GitHub token for authentication
#
# Request format:
# - Single line: @llmproc /code Add a new feature X
# - Multi-line:
#   @llmproc /code Implement the following:
#   - Add feature X
#   - Update documentation
# - Empty comment on an issue (not PR) uses the issue body as the request
#
# Development mode (uses llmproc from source):
# - @llmproc dev /code <request>
#
# Production mode (uses llmproc from PyPI via uvx):
# - @llmproc /code <request>

name: LLMProc /code

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  implement:
    runs-on: ubuntu-latest

    # Only run when:
    # 1. Comment contains "@llmproc /code" or "@llmproc dev /code"
    # 2. Comment is from a trusted user
    if: >
      (contains(github.event.comment.body, '@llmproc /code') ||
       contains(github.event.comment.body, '@llmproc dev /code')) &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )

    steps:
      # -- 1. Post initial status comment ----------------------------------
      - name: Post initial status comment
        id: start_comment
        env:
          GH_TOKEN: ${{ secrets.LLMPROC_WRITE_TOKEN }}
          ISSUE_NUM: ${{ github.event.issue.number }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          cid=$(gh api --method POST \
                "/repos/${{ github.repository }}/issues/$ISSUE_NUM/comments" \
                -f body="🔨 **Processing your code request...** — [View logs]($RUN_URL)" \
                --jq .id)
          echo "id=$cid" >> $GITHUB_OUTPUT

      # -- 2. Extract request from comment ---------------------------------
      - name: Extract request
        id: extract_request
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            const issue = context.payload.issue;

            // Check if this is dev mode
            const isDev = comment.includes('@llmproc dev');

            // Extract request after @llmproc /code or @llmproc dev /code
            const pattern = isDev ? /@llmproc\s+dev\s+\/code\s+([\s\S]*)/ : /@llmproc\s+\/code\s+([\s\S]*)/;
            const match = comment.match(pattern);

            let request = match && match[1] ? match[1].trim() : '';

            if (!request) {
              if (!issue.pull_request && issue.body && issue.body.trim()) {
                request = issue.body.trim();
              } else {
                core.setFailed('Could not extract request from comment');
                return;
              }
            }

            // Set outputs
            core.setOutput('is_dev', isDev);
            core.setOutput('request', request);

            // Log for debugging
            console.log('Extracted request:', request);
            console.log('Is dev mode:', isDev);

      # -- 3. Get context details ------------------------------------------
      - name: Get issue/PR context
        id: context
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LLMPROC_WRITE_TOKEN }}
          script: |
            const issue = context.payload.issue;

            // Check if this is a PR
            if (issue.pull_request) {
              core.setOutput('is_pr', 'true');

              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: issue.number
              });

              core.setOutput('base_branch', pr.base.ref);
            } else {
              core.setOutput('is_pr', 'false');

              // For issues, use the default branch
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              core.setOutput('base_branch', repo.default_branch);
            }

            // Get title and body safely
            core.setOutput('title', issue.title);
            core.setOutput('body', issue.body || '(No description provided)');

      # -- 4. Checkout and setup -------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper branching
          ref: ${{ steps.context.outputs.base_branch }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create feature branch
        id: create_branch
        run: |
          # Create unique branch name
          timestamp=$(date +%s)
          branch_name="llmproc-code-${timestamp}"

          # Create and checkout new branch
          git checkout -b "$branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

          # Record initial commit for comparison
          echo "initial_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # -- 5. Setup Node.js and Claude Code tools --------------------------
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Install Claude Code globally
        run: npm install -g @anthropic-ai/claude-code@1.0.2

      # -- 6. Setup Python and llmproc -------------------------------------
      - name: Setup Python and dependencies
        run: |
          python -m pip install uv
          uv venv
          source .venv/bin/activate
          uv sync --all-extras

      - name: Create implementation prompt
        id: create_prompt
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const request = ${{ toJSON(steps.extract_request.outputs.request) }};
            const title = ${{ toJSON(steps.context.outputs.title) }};
            const body = ${{ toJSON(steps.context.outputs.body) }};
            const isPR = ${{ steps.context.outputs.is_pr }};

            let prompt;
            if (isPR === 'true') {
              prompt = `Context: This request is from a pull request titled: ${title}\n\nPR Description:\n${body}\n\nImplementation Request:\n${request}`;
            } else {
              prompt = `Context: This request is from an issue titled: ${title}\n\nIssue Description:\n${body}\n\nImplementation Request:\n${request}`;
            }

            fs.writeFileSync('prompt.txt', prompt);
            console.log('Created prompt file successfully');

      # -- 7. Run llmproc to implement changes -----------------------------
      - name: Run llmproc to implement changes
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Check if dev mode was detected
          if [ "${{ steps.extract_request.outputs.is_dev }}" = "true" ]; then
            echo "Using llmproc from source"
            source .venv/bin/activate
            llmproc .github/config/llmproc-code-claude.yaml -f prompt.txt --cost-limit 1.0 --json > llmproc_result.json
          else
            echo "Using llmproc from PyPI"
            uvx llmproc .github/config/llmproc-code-claude.yaml -f prompt.txt --cost-limit 1.0 --json > llmproc_result.json
          fi

      - name: Process implementation output
        id: implement_step
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const output = JSON.parse(fs.readFileSync('llmproc_result.json', 'utf8'));

              // Extract last message safely
              const lastMessage = output.last_message || 'No response generated';
              core.setOutput('last_message', lastMessage);

              // Extract and format stderr log as markdown bullets
              const stderrLog = output.stderr && output.stderr.length > 0
                ? output.stderr.map(line => `- ${line}`).join('\n')
                : '';
              core.setOutput('stderr_log', stderrLog);

              // Expose cost if provided
              if (typeof output.usd_cost !== 'undefined') {
                core.setOutput('usd_cost', output.usd_cost);
              }

              core.setOutput('success', 'true');
              console.log('Successfully processed implementation output');
            } catch (error) {
              console.error('Error processing implementation output:', error);
              core.setOutput('last_message', 'Error: Failed to parse llmproc output');
              core.setOutput('stderr_log', '');
              core.setOutput('success', 'false');
            }

      # -- 8. Detect commits and create PR if needed ----------------------
      - name: Detect new commits
        id: check_commits
        run: |
          current_commit=$(git rev-parse HEAD)
          if [ "$current_commit" != "${{ steps.create_branch.outputs.initial_commit }}" ]; then
            echo "has_commits=true" >> $GITHUB_OUTPUT
          else
            echo "has_commits=false" >> $GITHUB_OUTPUT
          fi

          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Push branch and create PR
        id: create_pr
        if: steps.check_commits.outputs.has_commits == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LLMPROC_WRITE_TOKEN }}
          script: |
            const { execSync } = require('child_process');

            // Push the branch
            execSync('git push origin "${{ steps.create_branch.outputs.branch_name }}"');

            // Get the last commit message as PR title
            const prTitle = execSync('git log -1 --format=%s', { encoding: 'utf8' }).trim();

            // Get implementation output safely
            const implementationOutput = ${{ toJSON(steps.implement_step.outputs.last_message) }};
            const stderrLog = ${{ toJSON(steps.implement_step.outputs.stderr_log) }};

            // Build PR body
            let body = `## Implementation Output\n\n${implementationOutput}\n\n`;

            // Add work log if present
            if (stderrLog && stderrLog.trim()) {
              body += `## Process Log\n\n<details>\n<summary>Work log entries</summary>\n\n${stderrLog}\n</details>\n\n`;
            }

            // Add reference to original issue/PR
            body += `---\nRequested in #${{ github.event.issue.number }}\nAutomated by llmproc GitHub Action`;

            // Create the PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              body: body,
              base: '${{ steps.context.outputs.base_branch }}',
              head: '${{ steps.create_branch.outputs.branch_name }}'
            });

            // Ensure llmproc label exists, create if needed
            try {
              await github.rest.issues.getLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'llmproc'
              });
            } catch (error) {
              if (error.status === 404) {
                console.log('Creating llmproc label...');
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'llmproc',
                  description: 'PRs created by llmproc GitHub Actions workflows',
                  color: '1f77b4'
                });
                console.log('Created llmproc label');
              }
            }

            // Add llmproc label to the PR
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['llmproc']
              });
              console.log('Added llmproc label to PR');
            } catch (error) {
              console.log('Warning: Could not add llmproc label:', error.message);
            }

            core.setOutput('pr_url', pr.html_url);
            console.log(`Created PR: ${pr.html_url}`);

      # -- 9. Update status comment ----------------------------------------
      - name: Update status comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.LLMPROC_WRITE_TOKEN }}
          script: |
            const commentId = '${{ steps.start_comment.outputs.id }}';

            // Skip if we never created the start comment
            if (!commentId) {
              console.log('No comment ID found, skipping update');
              return;
            }

            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const implementSuccess = '${{ steps.implement_step.outputs.success }}';
            const hasCommits = '${{ steps.check_commits.outputs.has_commits }}';
            const prUrl = '${{ steps.create_pr.outputs.pr_url }}';
            const usdCostRaw = '${{ steps.implement_step.outputs.usd_cost }}';
            const cost = parseFloat(usdCostRaw);
            const costInfo = !isNaN(cost) ? ` (cost: ${cost.toFixed(2)} usd)` : '';

            let body;

            // Determine the status message
            if (implementSuccess !== 'true') {
              body = `❌ **Failed to process code request** — [View logs](${runUrl})${costInfo}`;
            } else if (hasCommits === 'true' && prUrl) {
              body = `✅ **Code implemented successfully!** — [View PR](${prUrl}) | [View logs](${runUrl})${costInfo}`;
            } else if (hasCommits !== 'true') {
              // Get the full response to show why no changes were made
              const response = ${{ toJSON(steps.implement_step.outputs.last_message) }};
              body = `ℹ️ **No changes needed**\n\n${response}\n\n[View logs](${runUrl})${costInfo}`;
            } else {
              body = `⚠️ **Changes made but PR creation failed** — [View logs](${runUrl})${costInfo}`;
            }

            // Update the comment
            try {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: body
              });
              console.log('Successfully updated status comment');
            } catch (error) {
              console.error('Failed to update comment:', error);
            }
