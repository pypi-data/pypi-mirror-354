{"version":3,"file":"lib_index_js.922031d107c00e0d490b.js","mappings":"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","sources":["webpack://nbtest_lab_extension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette, ToolbarButton } from '@jupyterlab/apputils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { OutputArea, OutputAreaModel } from '@jupyterlab/outputarea';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { CodeCellModel } from '@jupyterlab/cells';\nimport { PathExt } from '@jupyterlab/coreutils';\n\nclass ToggleSignal {\n  private _stateChanged = new Signal<this, string>(this);\n\n  get stateChanged() {\n    return this._stateChanged;\n  }\n\n  emitState(value: string) {\n    this._stateChanged.emit(value);\n  }\n}\n\nconst toggleSignal = new ToggleSignal();\nlet status = 0; // 🔹 Track status locally, starts at 0\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'nbtest_lab_extension',\n  autoStart: true,\n  requires: [ICommandPalette, INotebookTracker, IRenderMimeRegistry],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    tracker: INotebookTracker,\n    rendermime: IRenderMimeRegistry\n  ) => {\n    const { commands } = app;\n    const command = 'nbtest:toggle-asserts';\n\n    commands.addCommand(command, {\n      label: 'Toggle NBTEST_RUN_ASSERTS',\n      execute: async () => {\n        const currentNotebook = tracker.currentWidget;\n        if (!currentNotebook) {\n          console.error('No active notebook.');\n          return;\n        }\n\n        const session = currentNotebook.sessionContext.session;\n        if (!session || !session.kernel) {\n          console.error('No active kernel.');\n          return;\n        }\n\n        // Initialize OutputArea to display execution results\n        const outputModel = new OutputAreaModel();\n        const outputArea = new OutputArea({\n          model: outputModel,\n          rendermime: rendermime\n        });\n\n        // Python code to toggle environment variable\n        const code = `\nimport os\nos.environ[\"NBTEST_RUN_ASSERTS\"] = \"1\" if os.environ.get(\"NBTEST_RUN_ASSERTS\", \"0\") != \"1\" else \"0\"\n        `;\n\n        // Execute the code inside the kernel using OutputArea\n        OutputArea.execute(code, outputArea, currentNotebook.sessionContext)\n          .then((msg: KernelMessage.IExecuteReplyMsg | undefined) => {\n            console.log('Execution complete:', msg);\n          })\n          .catch(reason => console.error('Execution error:', reason));\n\n        // 🔹 Toggle status variable locally\n        status = status === 0 ? 1 : 0;\n        const newStatus = status === 1 ? 'ON' : 'OFF';\n\n        // 🔹 Emit updated status\n        toggleSignal.emitState(newStatus);\n      }\n    });\n\n    palette.addItem({ command, category: 'NBTest' });\n\n    tracker.widgetAdded.connect((sender, panel) => {\n      const getTestLogMap = async (\n        notebookPath: string\n      ): Promise<Map<string, number>> => {\n        const dir = PathExt.dirname(notebookPath);\n        const response = await fetch(`files/${dir}/test_log.csv`);\n        if (!response.ok) {\n          return new Map();\n        }\n\n        const text = await response.text();\n        const lines = text.trim().split('\\n');\n        const map = new Map<string, number>();\n        lines.slice(1).forEach(line => {\n          const [id, status] = line.split(',');\n          map.set(id.trim(), parseInt(status.trim(), 10));\n        });\n\n        return map;\n      };\n\n      const parseTestIds = (source: string, cellIndex: number): string[] => {\n        const lines = source.split('\\n');\n        const ids: string[] = [];\n\n        lines.forEach((line, i) => {\n          const match = line.match(\n            /nbtest\\.assert_\\w+.*?test_id\\s*=\\s*['\"]?([\\w\\d_]+)['\"]?/\n          );\n          if (match) {\n            ids.push(match[1]);\n          } else if (line.includes('nbtest.assert_')) {\n            ids.push(`${cellIndex}_${i}`);\n          }\n        });\n\n        return ids;\n      };\n\n      const displayTestResults = async () => {\n        const notebookPath = panel.context.path;\n        const testMap = await getTestLogMap(notebookPath);\n        const notebook = panel.content;\n\n        notebook.widgets.forEach((cell, index) => {\n          const model = cell.model;\n          if (!(model instanceof CodeCellModel)) {\n            return;\n          }\n\n          const source = model.sharedModel.getSource();\n          const testIds = parseTestIds(source, index);\n\n          let pass = 0,\n            fail = 0,\n            error = 0;\n\n          testIds.forEach(id => {\n            const result = testMap.get(id);\n            if (result === 1) {\n              pass++;\n            } else if (result === 0) {\n              fail++;\n            } else if (result === -1) {\n              error++;\n            }\n          });\n\n          const existing = cell.node.querySelector('.nbtest-result');\n          if (existing) {\n            existing.remove();\n          }\n\n          if (testIds.length > 0) {\n            const badge = document.createElement('div');\n            badge.className = 'nbtest-result';\n            badge.textContent = `✅ ${pass} | ❌ ${fail} | ⚠️ ${error}`;\n            badge.style.fontSize = '0.8em';\n            badge.style.margin = '4px 0 4px 4px';\n            badge.style.padding = '2px 8px';\n            badge.style.borderRadius = '4px';\n            badge.style.backgroundColor = 'rgba(101, 123, 131, 0.12)';\n            badge.style.color = '#586e75';\n            badge.style.display = 'inline-block';\n\n            cell.node.insertBefore(badge, cell.node.firstChild);\n          }\n        });\n      };\n\n      // 🔹 Call test results display after highlighting\n      displayTestResults();\n\n      // 🔹 Optionally refresh on notebook execution or kernel idle\n      panel.sessionContext.statusChanged.connect((_, kernelStatus) => {\n        if (kernelStatus === 'idle') {\n          displayTestResults();\n        }\n      });\n\n      console.log('Notebook opened: Adding Toggle Asserts button');\n\n      if (Array.from(panel.toolbar.names()).includes('toggleAsserts')) {\n        console.log('Button already exists');\n        return;\n      }\n\n      // 🔹 Create status display widget\n      const statusDisplay = new Widget();\n      statusDisplay.node.textContent = 'NBTest status: OFF'; // Initial value\n      statusDisplay.node.style.marginLeft = '8px'; // Add spacing\n\n      const button = new ToolbarButton({\n        label: 'Toggle Asserts',\n        tooltip: 'Toggle NBTEST_RUN_ASSERTS',\n        onClick: async () => {\n          console.log('Button clicked - toggling variable...');\n          await commands.execute(command);\n          await new Promise(resolve => setTimeout(resolve, 500));\n        }\n      });\n\n      panel.toolbar.addItem('toggleAsserts', button);\n      panel.toolbar.addItem('assertsStatus', statusDisplay); // 🔹 Add text display next to button\n\n      // 🔹 Subscribe to signal and update the status display\n      toggleSignal.stateChanged.connect((_, state) => {\n        statusDisplay.node.textContent = `NBTest status: ${state}`;\n      });\n\n      // 🔹 Detect kernel restarts and reset NBTest status\n      panel.sessionContext.statusChanged.connect((_, statusChanged) => {\n        if (['starting', 'restarting'].includes(statusChanged)) {\n          status = 0;\n          toggleSignal.emitState('OFF');\n        }\n      });\n\n      const highlightAssertCells = () => {\n        const notebook = panel.content;\n        notebook.widgets.forEach(cell => {\n          const model = cell.model;\n          const source =\n            model instanceof CodeCellModel ? model.sharedModel.getSource() : '';\n          const node = cell.node;\n\n          if (/nbtest\\.assert_\\w+/.test(source)) {\n            node.style.borderLeft = '4px solid #f39c12';\n            node.style.backgroundColor = 'rgba(181, 137, 0, 0.12)';\n          } else {\n            node.style.borderLeft = '';\n            node.style.backgroundColor = '';\n          }\n        });\n      };\n\n      // 🔹 Run once on notebook load\n      highlightAssertCells();\n\n      // 🔹 Re-check on cell add/remove\n      panel.content.model?.cells.changed.connect(() => {\n        highlightAssertCells();\n      });\n\n      // 🔹 Also re-check on content edits\n      panel.content.activeCellChanged.connect(() => {\n        const activeModel = panel.content.activeCell?.model;\n        if (activeModel instanceof CodeCellModel) {\n          activeModel.sharedModel.changed.connect(() => {\n            highlightAssertCells();\n          });\n        }\n      });\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}