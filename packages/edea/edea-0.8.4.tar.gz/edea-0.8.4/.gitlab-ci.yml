include:
  - '.gitlab-ci.benchmark.yml'

image: kicad/kicad:8.0.8

variables:
  UV_CACHE_DIR: .uv-cache
cache:
  key:
    files:
      - uv.lock
  paths:
    - $UV_CACHE_DIR
    - .hypothesis

before_script:
  # For debugging
  - python3 --version 
  - kicad-cli version
  - git config --global --add safe.directory "$(pwd)"
  - sudo apt update
  - sudo apt install -y curl
  - curl -LsSf https://astral.sh/uv/install.sh | sh
  - source $HOME/.local/bin/env
  - uv venv --system-site-packages
  - uv sync

test:
  tags:
    - saas-linux-xlarge-amd64
  script:
    - uv run nox --default-venv-backend uv -- --doctest-modules edea --cov=edea
    - uv run nox --default-venv-backend uv -- --cov=edea
    - uv run coverage report
    - uv run coverage xml
  coverage: "/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/"
  artifacts:
    when: always
    paths:
      - junit.xml
      - doc-test-junit.xml
    reports:
      junit: 
        - junit.xml
        - doc-test-junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test long running (project, and sch serialization):
  tags:
    - saas-linux-xlarge-amd64
  only:
    - web
  script:
    # only clone the files we need as we run out of space on the runner
    - |
      git clone --depth 1 --filter=blob:none --sparse https://gitlab.com/edea-dev/kicad-test-files tests/kicad_projects/kicad-test-files
      cd tests/kicad_projects/kicad-test-files
      git config --global --add safe.directory "$(pwd)"
      git sparse-checkout set --no-cone "**/*.kicad_sch" "**/*.kicad_pro"
      cd -
    - uv run pytest -k 'load_all_kicad_pro' -n auto --junitxml pro.xml
    # the serialize test parses and serializes so we just run that
    - uv run pytest -k 'serialize_all_sch' -n auto --junitxml sch.xml
  artifacts:
    when: always
    paths:
      - pro.xml
      - sch.xml
    reports:
      junit: 
        - pro.xml
        - sch.xml

test long running (pcb serialization):
  tags:
    - saas-linux-xlarge-amd64
  only:
    - web
  script:
    # only clone the files we need as we run out of space on the runner
    - |
      git clone --depth 1 --filter=blob:none --sparse https://gitlab.com/edea-dev/kicad-test-files tests/kicad_projects/kicad-test-files
      cd tests/kicad_projects/kicad-test-files
      git config --global --add safe.directory "$(pwd)"
      git sparse-checkout set --no-cone "**/*.kicad_pcb"
      cd -
    # the serialize test parses and serializes so we just run that
    - uv run pytest -k 'serialize_all_pcb' -n auto --junitxml pcb.xml
  artifacts:
    when: always
    paths:
      - pcb.xml
    reports:
      junit: 
        - pcb.xml

formatting:
  script:
    - uv run black --check edea tests --exclude tests/kicad_projects

lint:
  script:
    - uv run ruff check edea tests --exclude tests/kicad_projects/kicad-test-files
    - uv run pylint edea
    - uv run pydoclint edea
    - uv run sphinx-build -b linkcheck docs docs/_build
    - uv run vale docs

typecheck:
  script:
    - uv run pyright edea

bandit:
  script:
    - uv run bandit -r edea

release:
  stage: deploy
  script:
    - uv build
    - uv publish -t ${PYPI_TOKEN}
  artifacts:
    paths:
      - dist/*.whl
  rules:
    - if: $CI_COMMIT_BRANCH == "release"

pages:
  script:
    # download old docs to support multiple versions
    - |
      DOWNLOAD_URL='https://gitlab.com/api/v4/projects/35843774/jobs/artifacts/main/download?job=pages'
      curl -L --output old.zip "$DOWNLOAD_URL"
      unzip -q old.zip -d .

    # build new doccs
    - uv run sphinx-build -b html docs docs/_build
    ## add new docs to old docs
    - mkdir -p "public/$(uv version --short)"
    - cp -r docs/_build/* "public/$(uv version --short)"

    # if the current version of the docs is the latest, copy it to public/latest
    - uv run python docs/is_latest.py && rm -rf public/latest && mkdir public/latest && cp -r docs/_build/* public/latest || echo "not latest"
    - uv run python docs/generate_versions.json.py public/versions.json
    - cp docs/_redirects public/_redirects
    - cp docs/_build/sitemap.xml public/sitemap.xml
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "pages"
