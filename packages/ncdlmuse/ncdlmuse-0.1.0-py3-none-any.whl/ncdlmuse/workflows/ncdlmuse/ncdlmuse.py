# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
#
# Copyright 2024 The NiPreps Developers <nipreps@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the \"License\");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# We support and encourage derived works from this project, please read
# about our expectations at
#
#     https://www.nipreps.org/community/licensing/
#
"""Workflow definition for the core NiChart DLMUSE processing."""

from nipype.interfaces import utility as niu
from nipype.pipeline import engine as pe
from niworkflows.engine.workflows import LiterateWorkflow as Workflow

from ...interfaces.ncdlmuse import NiChartDLMUSE


def init_dlmuse_wf(
    name='dlmuse_wf',
    device='cpu',
    # Add parameters passed from parent workflow/config
    model_folder=None,
    derived_roi_mappings_file=None,
    muse_roi_mappings_file=None,
    all_in_gpu=False,
    disable_tta=False,
    clear_cache=False,
    _timestamp=None,
):
    """Initialize the core NiChart_DLMUSE sub-workflow.

    This workflow wraps the :py:class:`~ncdlmuse.interfaces.ncdlmuse.NiChartDLMUSE`
    interface to run brain segmentation and volume calculation.
    It takes a T1w image (assumed to be properly prepared and located
    in the workflow's working directory) and outputs the raw results
    generated by the interface.

    Workflow Graph
        .. workflow::
            :graph2use: orig
            :simple_form: yes

            from ncdlmuse.workflows.ncdlmuse.ncdlmuse import init_dlmuse_wf
            wf = init_dlmuse_wf(name='dlmuse_sub_wf', device='cpu')

    Parameters
    ----------
    name : str, optional
        Workflow name (default: 'dlmuse_wf').
    device : {'cpu', 'cuda', 'mps'}, optional
        Device to use for DLMUSE model inference (default: 'cpu').
    model_folder : str or None, optional
        Path to the folder containing custom nnU-Net models (DLICV and DLMUSE).
    derived_roi_mappings_file : str or None, optional
        Path to the CSV file mapping MUSE ROIs to derived ROIs.
    muse_roi_mappings_file : str or None, optional
        Path to the CSV file mapping MUSE ROIs to consecutive indices.
        If provided, the output volumes TSV header will be renamed.
    all_in_gpu : bool, optional
        Attempt to load and run the entire model on the GPU (if available) (default: False).
    disable_tta : bool, optional
        Disable Test-Time Augmentation for inference (default: False).
    clear_cache : bool, optional
        Clear the model download cache before running (default: False).
    _timestamp : str or None, optional
        Timestamp for the workflow.

    Inputs
    ------
    t1w_file
        Path to the T1w file (staged in the work directory).

    Outputs
    -------
    segmentation_file
        Path to the raw DLMUSE segmentation file (within the node's work_dir).
    mask_file
        Path to the raw DLICV brain mask file (within the node's work_dir).
    volumes_file
        Path to the raw DLMUSE volumes TSV file (with potentially renamed headers,
        within the node's work_dir).

    """

    workflow = Workflow(name=name)

    # Create input node (now needs t1w_file and timestamp)
    inputnode = pe.Node(niu.IdentityInterface(fields=['t1w_file', '_timestamp']), name='inputnode')

    # Create output node
    outputnode = pe.Node(
        niu.IdentityInterface(fields=['segmentation_file', 'mask_file', 'volumes_file']),
        name='outputnode',
    )

    # NiChart_DLMUSE node
    dlmuse_args = {
        'device': device,
        'all_in_gpu': all_in_gpu,
        'disable_tta': disable_tta,
        'clear_cache': clear_cache,
        '_timestamp': _timestamp,
    }

    # Only add optional parameters if they're not None
    if model_folder is not None:
        dlmuse_args['model_folder'] = model_folder
    if derived_roi_mappings_file is not None:
        dlmuse_args['derived_roi_mappings_file'] = derived_roi_mappings_file
    if muse_roi_mappings_file is not None:
        dlmuse_args['muse_roi_mappings_file'] = muse_roi_mappings_file

    dlmuse = pe.Node(
        NiChartDLMUSE(**dlmuse_args),
        name='nichartdlmuse',
    )

    # Connect nodes: input -> dlmuse -> output
    # Renaming is now handled by DerivativesDataSink in the parent workflow
    workflow.connect(
        [
            (inputnode, dlmuse, [('t1w_file', 'input_image')]),
            (inputnode, dlmuse, [('_timestamp', '_timestamp')]),
            (
                dlmuse,
                outputnode,
                [
                    ('dlmuse_segmentation', 'segmentation_file'),
                    ('dlicv_mask', 'mask_file'),
                    # Pass the volumes file with renamed headers (still in work_dir)
                    ('dlmuse_volumes', 'volumes_file'),
                ],
            ),
        ]
    )

    return workflow
