"""Command-line interface tests using synthetic data."""

import pytest
from nipype import config as nipype_config

from ncdlmuse import config as ncdlmuse_config
from ncdlmuse.cli.parser import parse_args
from ncdlmuse.cli.workflow import build_workflow  # Keep build_boilerplate if tested

# from ncdlmuse.reports.individual import generate_reports # Keep if testing reports
# from ncdlmuse.tests.utils import check_generated_files, get_test_data_path

# Assumes fixtures bids_skeleton_factory, work_dir, out_dir defined in conftest.py

nipype_config.enable_debug_mode()

# --- Helper Functions (Simplified for Build-Only Tests) ---


def _build_and_check(parameters):
    """Parse args, build workflow, check for success."""
    parameters.extend(['--stop-on-first-crash', '-vv'])  # Add common flags

    # Ensure paths exist for parser if needed, but fixtures handle this now
    parse_args(parameters)  # Populates config
    config_file = (
        ncdlmuse_config.execution.work_dir / f'config-{ncdlmuse_config.execution.run_uuid}.toml'
    )
    ncdlmuse_config.to_filename(config_file)

    # Use BIDSLayout generated by parser/config setup
    # The bids_skeleton_factory fixture ensures the dataset is indexable
    retval = build_workflow(str(config_file), retval={})

    assert retval['return_code'] == 0
    assert retval['workflow'] is not None

    # Basic check: ensure the expected subject workflow node exists
    # Extract participant label and session from parameters
    subj_label = '01'  # Default
    session_label = None
    for p in parameters:
        if p.startswith('--participant-label='):
            subj_label = p.split('=')[1]
        elif p.startswith('--session-id='):
            session_label = p.split('=')[1]

    # Build expected node name
    expected_node_name = f'single_subject_sub-{subj_label}'
    if session_label:
        expected_node_name += f'_ses-{session_label}'
    expected_node_name += '_wf'

    # Check if the node exists
    node = retval['workflow'].get_node(expected_node_name)
    assert node is not None, (
        f"Expected workflow node '{expected_node_name}' not found. "
        f'Available nodes: {[n.name for n in retval["workflow"]._get_all_nodes()]}'
    )

    # Return retval for potential further checks if needed
    return retval


def _build_and_fail(parameters, error_type=RuntimeError, error_match='.*'):
    """Parse args, expect build_workflow to fail."""
    parameters.extend(['--stop-on-first-crash', '-vv'])

    def _run_workflow():
        """Run the workflow and handle SystemExit appropriately."""
        try:
            parse_args(parameters)  # Let parser run first
            config_file = (
                ncdlmuse_config.execution.work_dir
                / f'config-{ncdlmuse_config.execution.run_uuid}.toml'
            )
            ncdlmuse_config.to_filename(config_file)
            # Failure might happen during build_workflow (e.g., BIDS query fails)
            build_workflow(str(config_file), retval={})
        except SystemExit as e:
            # Reraise SystemExit if parser fails as expected
            if error_type is SystemExit:
                raise e
            else:
                # Unexpected SystemExit during parsing
                pytest.fail(f'Parser exited unexpectedly: {e}')
        # If build_workflow completes without the expected error
        pytest.fail(f"Workflow build did not fail with {error_type} matching '{error_match}'")

    with pytest.raises(error_type, match=error_match):
        _run_workflow()


# --- Parametrized Tests --- #


@pytest.mark.cli_basic
@pytest.mark.parametrize(
    ('subject_id', 'session_id', 'extra_flags'),
    [
        ('01', None, []),  # Default subject
        ('02', 'ses01', []),  # Subject with session
        ('01', None, ['--disable-tta']),  # Option flag
        ('01', None, ['--clear-cache']),  # Another option
        ('02', 'ses01', ['--all-in-gpu']),  # Option with session
        ('01', None, ['--skip-bids-validation']),  # Skip validation
        ('01', None, ['--device=cuda']),  # Different device
        ('01', None, ['--nthreads=2', '--omp-nthreads=2']),  # Resource flags
    ],
)
def test_cli_build_success(
    bids_skeleton_factory, work_dir, out_dir, subject_id, session_id, extra_flags
):
    """Test successful workflow building with various parameters."""
    bids_dir, _ = bids_skeleton_factory(subject_id=subject_id, session_id=session_id)
    participant_label = subject_id  # Use the generated subject ID

    parameters = [
        str(bids_dir),
        str(out_dir),
        'participant',
        f'--participant-label={participant_label}',
        f'-w={str(work_dir)}',
    ]
    if session_id:
        parameters.append(
            f'--session-id={session_id}'
        )  # Use --session-id instead of --session-label
    parameters.extend(extra_flags)  # Add parametrized flags

    # This test only checks if the workflow builds successfully
    _build_and_check(parameters)


@pytest.mark.cli_errors
@pytest.mark.parametrize(
    ('test_desc', 'subject_id', 'session_id', 'extra_flags', 'error_type', 'error_match'),
    [
        # Invalid device
        ('bad_device', '01', None, ['--device=tpu'], SystemExit, ''),
        # BIDS dir validation by parser
        ('nonexistent_bids', '01', None, [], SystemExit, ''),
        # Valid BIDS, wrong subject
        ('no_t1w_found', '03', None, [], SystemExit, ''),
    ],
)
def test_cli_build_failures(
    bids_skeleton_factory,
    work_dir,
    out_dir,
    tmp_path,
    test_desc,
    subject_id,
    session_id,
    extra_flags,
    error_type,
    error_match,
):
    """Test CLI/workflow build failures for various reasons."""
    if test_desc == 'nonexistent_bids':
        bids_dir = tmp_path / 'nonexistent_bids'  # Don't create it
    else:
        # Create skeleton, might include the target subject or not
        # Base skeleton
        bids_dir, _ = bids_skeleton_factory(subject_id='01', session_id='ses01')
        # For no_t1w_found test, don't create the target subject
        if test_desc != 'no_t1w_found' and subject_id != '01':
            _, _ = bids_skeleton_factory(subject_id=subject_id, session_id=session_id)

    participant_label = subject_id  # Label to *try* and process

    parameters = [
        str(bids_dir),
        str(out_dir),
        'participant',
        f'-w={str(work_dir)}',
    ]
    # Always add participant label for these tests
    parameters.append(f'--participant-label={participant_label}')

    if session_id:
        parameters.append(f'--session-id={session_id}')
    parameters.extend(extra_flags)

    _build_and_fail(parameters, error_type, error_match)
