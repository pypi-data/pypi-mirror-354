"""
Guardrails system for the agentic framework.

This module provides a modular and extensible system to enforce constraints on
execution plans generated by the PlanAgent.
"""

from typing import List
from abc import ABC, abstractmethod

from .models import ExecutionPlan
from .exceptions import GuardrailViolationError

from owlsight.utils.logger import logger


class Guardrail(ABC):
    """
    Base class for guardrails that validate execution plans.
    
    Guardrails define constraints that must be met by any execution plan.
    If a constraint is violated, a GuardrailViolationError is raised.
    """
    
    @property
    def name(self) -> str:
        return __class__.__name__[:-9]
    
    @abstractmethod
    def validate(self, plan: ExecutionPlan) -> None:
        """
        Validate that the execution plan meets the guardrail's constraints.
        
        Parameters
        ----------
        plan : ExecutionPlan
            The execution plan to validate.
            
        Raises
        ------
        GuardrailViolationError
            If the plan violates the guardrail's constraints.
        """
        pass


class ToolExecutionFollowsToolCreationGuardrail(Guardrail):

    def validate(self, plan: ExecutionPlan) -> None:
        """
        Validates that every ToolCreationAgent step is immediately followed by a ToolSelectionAgent step.
        
        Parameters
        ----------
        plan : ExecutionPlan
            The execution plan to validate.
            
        Raises
        ------
        GuardrailViolationError
            If a ToolCreationAgent step is not immediately followed by a ToolSelectionAgent step.
        """
        steps = plan.steps
        for i, step in enumerate(steps):
            if step.agent_name == "ToolCreationAgent":
                # Check if there is a next step
                if i + 1 >= len(steps):
                    error_msg = (
                        f"Step {i + 1} uses ToolCreationAgent but is the last step. "
                        f"It must be followed by a ToolSelectionAgent step to execute the created tool."
                    )
                    raise GuardrailViolationError(error_msg, self.name)
                
                # Check if the next step uses ToolSelectionAgent
                next_step = steps[i + 1]
                if next_step.agent_name != "ToolSelectionAgent":
                    error_msg = (
                        f"Step {i + 1} uses ToolCreationAgent but the next step ({i + 2}) uses {next_step.agent_name}, not ToolSelectionAgent. "
                        f"ToolCreationAgent must be immediately followed by ToolSelectionAgent."
                    )
                    raise GuardrailViolationError(error_msg, self.name)


class GuardrailManager:
    """
    Manager for applying guardrails to execution plans.
    
    This class manages a collection of guardrails and provides a method
    to validate an execution plan against all registered guardrails.
    """
    
    def __init__(self):
        self.guardrails: List[Guardrail] = []
    
    def register_guardrail(self, guardrail: Guardrail) -> None:
        """
        Register a guardrail with the manager.
        
        Parameters
        ----------
        guardrail : Guardrail
            The guardrail to register.
        """
        logger.info(f"Registering guardrail: {guardrail.name}")
        self.guardrails.append(guardrail)
    
    def validate_plan(self, plan: ExecutionPlan) -> None:
        """
        Validate an execution plan against all registered guardrails.
        
        Parameters
        ----------
        plan : ExecutionPlan
            The execution plan to validate.
            
        Raises
        ------
        GuardrailViolationError
            If the plan violates any guardrail's constraints.
        """
        for guardrail in self.guardrails:
            logger.debug(f"Validating plan against guardrail: {guardrail.name}")
            guardrail.validate(plan)
        
        logger.info("Plan passed all guardrails validation.")
