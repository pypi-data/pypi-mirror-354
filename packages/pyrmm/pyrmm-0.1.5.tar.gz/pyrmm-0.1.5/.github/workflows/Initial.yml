name: initial 初始化

on:
  workflow_dispatch:
    inputs:
      id:
        description: '请输入模块id，例如Zygisk_shamiko'
        required: true
      
      name:
        description: '请输入模块名，例如shamiko'
        required: true

      author:
        description: '作者名'
        required: true

      description:
        description: '模块描述'
        required: true

jobs:
  init:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.1.0
        with:  
          ref: ${{ github.ref_name }}    

      - name: Manage large files with Git LFS
        run: |
          # 安装 Git LFS
          git lfs install
    
          # 拉取 LFS 文件
          git lfs pull || echo "LFS pull failed, continuing anyway"
    
          # 找到 MyModule 目录下超过 100MB 的文件并通过 Git LFS 进行跟踪
          find MyModule/ -type f -size +100M 2>/dev/null | while read -r file; do
            git lfs track "$file"
          done
    
          # 添加 .gitattributes 文件和所有被 LFS 跟踪的文件到暂存区
          git add .gitattributes || true
          git add $(git lfs ls-files -n) || echo "No LFS files to add"
    
          # 提交更改
          git commit -m "Track large files with Git LFS" || echo "No changes to commit"

      - name: 初始化项目结构
        run: |
          echo "创建模块基础目录..."
          mkdir -p MyModule/{META-INF/com/google/android,system/bin}
          
          # 创建一些基础文件
          touch MyModule/module.prop
          
          echo "设置文件夹结构完成"

      - name: 获取版本信息
        id: get_version
        run: |
          # 生成今天的日期
          today_date=$(date +%Y%m%d)
          echo "date=${today_date}" >> "$GITHUB_ENV"
          
          # 初始化版本使用日期+01序列号
          echo "versionCode=${today_date}01" >> "$GITHUB_ENV"
          echo "version=0.0.0" >> "$GITHUB_ENV"

      - name: 获取仓库 URL
        id: get_repo_url
        run: |
          echo "repo_url=https://github.com/${{ github.repository }}" >> "$GITHUB_ENV"

      - name: 创建模块配置文件
        run: |
          # 创建 module.prop 文件，一次性写入所有内容
          cat > MyModule/module.prop <<EOF
          id=${{ github.event.inputs.id }}
          name=${{ github.event.inputs.name }}
          version=0.0.0
          versionCode=${{ env.versionCode }}
          author=${{ github.event.inputs.author }}
          description=${{ github.event.inputs.description }}
          updateJson=http://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/update.json
          EOF

          # 将变量保存到环境中以便后续使用
          echo "id=${{ github.event.inputs.id }}" >> $GITHUB_ENV
          echo "name=${{ github.event.inputs.name }}" >> $GITHUB_ENV
          echo "author=${{ github.event.inputs.author }}" >> $GITHUB_ENV
          echo "description=${{ github.event.inputs.description }}" >> $GITHUB_ENV
          echo "updateJson=http://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/update.json" >> $GITHUB_ENV


      - name: 创建 update.json 文件
        run: |
          cat > update.json <<EOF
          {
            "version": "${{ env.version }}",
            "versionCode": "${{ env.versionCode }}",
            "zipUrl": "${{ env.repo_url }}/releases/download/${{ env.version }}/${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip",
            "changelog": "${{ env.repo_url }}/raw/${{ github.ref_name }}/CHANGELOG.md"
          }
          EOF
          echo "update.json 创建完成"
      - name: 创建 CHANGELOG.md 文件
        run: |
          cat > CHANGELOG.md <<EOF
          # Changelog 0.0.0
          1. 恭喜你成功创建了一个 KernelSU/Magisk/Apatch 模块项目
          2. 这是初始版本，包含基本的模块结构
          3. 开始自定义你的模块吧！
          ## 使用方法
          1. 修改 \`MyModule\` 目录下的文件以定制你的模块
          2. 更新 \`CHANGELOG.md\` 来记录你的更改
          3. 运行 release 工作流发布新版本
          EOF
          
          echo "CHANGELOG.md 创建完成"

      - name: 列出创建的文件结构
        run: |
          echo "===== 模块目录结构 ====="
          find MyModule -type f | sort
          echo "========================="
          
          echo "module.prop 内容:"
          cat MyModule/module.prop
          
          echo "update.json 内容:"
          cat update.json

      - name: 提交更改
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "actions@github.com"
          
          # 添加所有文件
          git add MyModule update.json CHANGELOG.md
          
          # 检查是否有变更需要提交
          if git diff --cached --quiet; then
            echo "没有需要提交的更改"
          else
            git commit -m "初始化模块: ${{ github.event.inputs.name }}"
            git push origin ${{ github.ref_name }}
          fi

      - name: 打包模块
        run: |
          cd MyModule
          echo "正在打包模块..."
          zip -r "../${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip" ./*
          cd ..
          
          echo "模块打包完成:"
          ls -lh "${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip"

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          name: "${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }} 模块初始版本"
          body_path: CHANGELOG.md
          files: |
            ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 完成
        run: |
          echo "=================================="
          echo "模块初始化完成！"
          echo "模块ID: ${{ env.id }}"
          echo "模块名: ${{ env.name }}"
          echo "版本: ${{ env.version }}"
          echo "版本号: ${{ env.versionCode }}"
          echo "作者: ${{ env.author }}"
          echo "=================================="
          echo "你现在可以开始修改 MyModule 目录中的文件来自定义你的模块"
