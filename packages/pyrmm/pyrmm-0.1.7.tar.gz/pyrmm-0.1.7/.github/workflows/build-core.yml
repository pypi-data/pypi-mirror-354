# CI工作流 for RMM Build Core
# 支持多平台构建：Windows, Linux, macOS (x86_64 和 ARM64)
# 构建 Rust PyO3 扩展模块
name: Build RMM Core

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  # 设置工作目录为 build-core
  WORKING_DIR: build-core

jobs:  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            arch: x86_64
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-musl
            arch: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      
      # 安装 musl 工具链和交叉编译工具
      - name: Install musl tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          if [ "${{ matrix.platform.arch }}" = "aarch64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            # 创建交叉编译器链接
            sudo ln -sf /usr/bin/aarch64-linux-gnu-gcc /usr/local/bin/aarch64-linux-musl-gcc
          fi
      
      # 安装 Rust 目标
      - name: Add Rust target
        run: rustup target add ${{ matrix.platform.target }}
      
      - name: Build wheels (static)
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          working-directory: ${{ env.WORKING_DIR }}
        env:
          # 静态编译环境变量
          RUSTFLAGS: "-C target-feature=+crt-static"
          CC: "musl-gcc"
          
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.arch }}
          path: ${{ env.WORKING_DIR }}/dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: ${{ env.WORKING_DIR }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: ${{ env.WORKING_DIR }}/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: ${{ env.WORKING_DIR }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: ${{ env.WORKING_DIR }}/dist

  # 构建完成后，将二进制文件复制到 lib/build-core-bin 对应的架构目录
  copy-binaries:
    runs-on: ubuntu-latest
    needs: [linux, windows, macos]
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/heads/') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Setup directories
        run: |
          mkdir -p src/pyrmm/usr/lib/build-core-bin/{windows-x64,windows-x86,linux-x64,linux-aarch64,macos-x64,macos-aarch64}
      
      - name: Copy binaries to architecture directories
        run: |
          # Windows binaries
          if [ -d "artifacts/wheels-windows-x64" ]; then
            find artifacts/wheels-windows-x64 -name "*.pyd" -exec cp {} src/pyrmm/usr/lib/build-core-bin/windows-x64/ \;
          fi
          if [ -d "artifacts/wheels-windows-x86" ]; then
            find artifacts/wheels-windows-x86 -name "*.pyd" -exec cp {} src/pyrmm/usr/lib/build-core-bin/windows-x86/ \;
          fi
          
          # Linux binaries
          if [ -d "artifacts/wheels-linux-x86_64" ]; then
            find artifacts/wheels-linux-x86_64 -name "*.so" -exec cp {} src/pyrmm/usr/lib/build-core-bin/linux-x64/ \;
          fi
          if [ -d "artifacts/wheels-linux-aarch64" ]; then
            find artifacts/wheels-linux-aarch64 -name "*.so" -exec cp {} src/pyrmm/usr/lib/build-core-bin/linux-aarch64/ \;
          fi
          
          # macOS binaries
          if [ -d "artifacts/wheels-macos-x86_64" ]; then
            find artifacts/wheels-macos-x86_64 -name "*.so" -exec cp {} src/pyrmm/usr/lib/build-core-bin/macos-x64/ \;
          fi
          if [ -d "artifacts/wheels-macos-aarch64" ]; then
            find artifacts/wheels-macos-aarch64 -name "*.so" -exec cp {} src/pyrmm/usr/lib/build-core-bin/macos-aarch64/ \;
          fi
      
      - name: Commit binary files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/pyrmm/usr/lib/build-core-bin/
          git commit -m "Update compiled binaries for all platforms" || exit 0
          git push

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: ${{ env.WORKING_DIR }}
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ${{ env.WORKING_DIR }}/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [linux, windows, macos, sdist]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
