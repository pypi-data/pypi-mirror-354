name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag (就填版本号)'
        required: true     

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        with:  
          ref: modules
          path: modules
          
      - uses: actions/checkout@v4.1.0
        with:  
          ref: ${{ github.ref_name }}    
          
      - name: Manage large files with Git LFS
        run: |
          # 安装 Git LFS
          git lfs install
    
          # 拉取 LFS 文件
          git lfs pull || echo "LFS pull failed, continuing anyway"
    
          # 找到 MyModule 目录下超过 100MB 的文件并通过 Git LFS 进行跟踪
          find MyModule/ -type f -size +100M | while read -r file; do
            git lfs track "$file"
          done
    
          # 添加 .gitattributes 文件和所有被 LFS 跟踪的文件到暂存区
          git add .gitattributes || true
          git add $(git lfs ls-files -n) || echo "No LFS files to add"
    
          # 提交更改
          git commit -m "Track large files with Git LFS" || echo "No changes to commit"

      - name: 获取仓库 URL
        id: get_repo_url
        run: |
          echo "repo_url=https://github.com/${{ github.repository }}" >> "$GITHUB_ENV"
      
      - name: 获取版本
        id: get_version
        run: |
          # 设置基本日期
          today_prefix=$(date +%Y%m%d)
          echo "date=${today_prefix}" >> "$GITHUB_ENV"
          
          # 安装 GitHub CLI
          if ! command -v gh &> /dev/null; then
            echo "安装 GitHub CLI..."
            sudo apt-get update
            sudo apt-get install -y gh
          fi
          
          # 查找并获取今天的最后一个版本序号
          latest_seq=0
          
          # 列出所有release并查找今天的日期前缀
          echo "检查已有版本..."
          releases=$(gh release list --repo ${{ github.repository }} --limit 100 | grep "${today_prefix}" || echo "")
          
          if [ -n "$releases" ]; then
            echo "找到今天的版本，提取序列号..."
            while read -r line; do
              # 提取版本号字段 (通常在第一列)
              version_part=$(echo "$line" | awk '{print $1}')
              
              # 查找与今天日期匹配的模式
              if [[ "$line" =~ ${today_prefix}([0-9][0-9]) ]]; then
                seq=${BASH_REMATCH[1]}
                echo "找到序列号: $seq"
                # 转换为数字进行比较
                seq_num=$(echo "$seq" | sed 's/^0*//')
                if [ -z "$seq_num" ]; then seq_num=0; fi
                
                if [ "$seq_num" -gt "$latest_seq" ]; then
                  latest_seq=$seq_num
                fi
              fi
            done <<< "$releases"
          else
            echo "今天没有发布过版本，序列号将从 01 开始"
          fi
          
          echo "最后的序列号: $latest_seq"
          
          # 序号加1
          next_seq=$((latest_seq + 1))
          
          # 确保不超过99
          if [ $next_seq -gt 99 ]; then
            echo "警告: 今天的版本发布已超过99个，将使用99作为序列号"
            next_seq=99
          fi
          
          # 格式化为两位数字
          seq_padded=$(printf "%02d" $next_seq)
          
          echo "新序列号: $seq_padded"
          
          # 将变量保存到环境中
          echo "versionSeq=${seq_padded}" >> "$GITHUB_ENV"
          echo "versionCode=${today_prefix}${seq_padded}" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 获取分支名
        id: get_ref_name
        run: |
          echo "ref_name=${{ github.ref_name }}" >> "$GITHUB_ENV"

      - name: Extract variables from module.prop 获取一些变量的值，以便后续调用
        id: extract_vars
        run: |
          # 检查module.prop文件是否存在
          if [ ! -f "MyModule/module.prop" ]; then
            echo "错误: MyModule/module.prop 不存在，请先执行 initial 工作流"
            exit 1
          fi
          
          # 使用grep而不是awk，更可靠地提取变量
          id=$(grep "^id=" MyModule/module.prop | cut -d= -f2-)
          name=$(grep "^name=" MyModule/module.prop | cut -d= -f2-)
          version=$(grep "^version=" MyModule/module.prop | cut -d= -f2-)
          versionCode=$(grep "^versionCode=" MyModule/module.prop | cut -d= -f2-)
          author=$(grep "^author=" MyModule/module.prop | cut -d= -f2-)
          description=$(grep "^description=" MyModule/module.prop | cut -d= -f2-)
          updateJson=$(grep "^updateJson=" MyModule/module.prop | cut -d= -f2-)
        
          # 检查提取的变量是否为空
          if [ -z "$id" ] || [ -z "$name" ] || [ -z "$version" ] || [ -z "$versionCode" ] || [ -z "$author" ] || [ -z "$description" ]; then
            echo "错误: module.prop 文件不完整，请检查必填字段"
            exit 1
          fi

          # 保存变量到环境文件
          echo "id=${id}" >> $GITHUB_ENV
          echo "name=${name}" >> $GITHUB_ENV
          echo "version_old=${version}" >> $GITHUB_ENV
          echo "versionCode_old=${versionCode}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          
          # 修正：使用已经计算好的 versionCode 变量，而不是不存在的 fullVersionCode
          echo "versionCode=${{ env.versionCode }}" >> $GITHUB_ENV
          
          echo "author=${author}" >> $GITHUB_ENV
          echo "description=${description}" >> $GITHUB_ENV
          if [ -n "$updateJson" ]; then
            echo "updateJson=${updateJson}" >> $GITHUB_ENV
          fi

      - name: 调试变量
        run: |
          echo "版本: ${{ env.version }}"
          echo "版本号: ${{ env.versionCode }}"
          echo "日期: ${{ env.date }}"
          echo "序列号: ${{ env.versionSeq }}"
          echo "旧版本: ${{ env.version_old }}"
          echo "旧版本号: ${{ env.versionCode_old }}"
          echo "作者: ${{ env.author }}"

      - name: 更新module.prop
        run: |
          if [ "${{ env.version }}" != "${{ env.version_old }}" ]; then
            echo "Version needs update."
            sed -i "s/version=${{ env.version_old }}/version=${{ env.version }}/g" "MyModule/module.prop"
          fi

          if [ "${{ env.versionCode }}" != "${{ env.versionCode_old }}" ]; then
            echo "VersionCode needs update."
            sed -i "s/versionCode=${{ env.versionCode_old }}/versionCode=${{ env.versionCode }}/g" "MyModule/module.prop"
          fi

      - name: 更新 update.json
        run: |
            cat <<EOF > update.json
            {
              "version": "${{ env.version }}",
              "versionCode": "${{ env.versionCode }}",
              "zipUrl": "${{ env.repo_url }}/releases/download/${{ env.version }}/${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip",
              "changelog": "${{ env.repo_url }}/raw/${{ github.ref_name }}/CHANGELOG.md",
              "description": "${{ env.description }}"
            }
            EOF

      - name: Check for changes
        run: |
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add update.json MyModule/module.prop
          if git diff --cached --quiet; then
            echo "没有需要提交的更改"
          else
            git commit -m "更新 update.json和module.prop"
            git push origin ${{ github.ref_name }}
          fi

      - name: 检查是否为调试模式
        run: |
          if [ "${{ github.event.inputs.tag }}" = "debug" ]; then
            echo "DEBUG_MODE=true" >> $GITHUB_ENV
            echo "正在以调试模式运行，将跳过 Release 创建步骤"
          else
            echo "DEBUG_MODE=false" >> $GITHUB_ENV
            echo "正常模式运行，将创建 Release"
          fi

      - name: Package module 打包模块
        run: |
          # 正确打包模块 - 进入MyModule目录后打包所有内容
          cd MyModule
          # 确保当前目录存在文件
          ls -la
          zip -r "../${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip" ./*
          cd .. 
          # 验证压缩包
          echo "已创建模块压缩包:"
          ls -lh "${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip"

      - name: 调试模式 - 上传模块作为工作流构建工件
        if: env.DEBUG_MODE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}
          path: ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip
          retention-days: 7

      - name: Create GitHub Release 发布模块
        if: env.DEBUG_MODE != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          name: "${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }} 模块现已发布"
          body_path: CHANGELOG.md
          files: |
            ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip
          generate_release_notes: false # 使用changeloge.md的内容
          fail_on_unmatched_files: false  # 如果文件匹配失败不会导致工作流失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 提交模块并生成PR链接
        if: env.DEBUG_MODE != 'true'
        run: |
          # 确保 modules 目录存在并进入
          if [ ! -d "modules" ]; then
            echo "创建modules目录..."
            mkdir -p modules
          fi
          
          cd modules
          
          # 配置 git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # 清理任何潜在的未提交修改
          git reset --hard HEAD || true
          
          # 确保远程仓库配置正确
          git remote remove upstream 2>/dev/null || true
          git remote add upstream https://github.com/LIghtJUNction/RootManage-Module-Model.git
          
          # 获取所有远程分支
          git fetch origin
          
          # 删除旧的PR分支（以add-开头的分支）
          echo "删除旧的PR分支..."
          for branch in $(git branch -r | grep 'origin/add-' | sed 's/origin\///'); do
            if [[ "$branch" == add-${{ env.id }}* ]]; then
              echo "发现与当前模块ID相关的旧PR分支: $branch，正在删除..."
              git push origin --delete "$branch" || echo "无法删除分支 $branch，可能不存在或权限不足"
            fi
          done
          
          # 获取上游最新代码，创建一个全新的分支，避免合并冲突
          echo "获取上游modules分支..."
          git fetch upstream modules
          
          # 创建新的PR分支名称
          pr_branch="add-${{ env.id }}-${{ env.version }}-${{ env.versionCode }}"
          
          # 基于上游modules分支创建全新的分支，避免历史冲突
          echo "创建新分支基于上游modules分支..."
          git checkout -b $pr_branch upstream/modules
          
          # 创建模块ID对应的文件夹（如果不存在）
          MODULE_DIR="${{ env.id }}"
          mkdir -p "$MODULE_DIR"
          
          # 复制模块到对应ID文件夹
          echo "复制模块文件..."
          cp "../${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip" "$MODULE_DIR/"
          
          # 创建或更新模块信息文件
          echo "创建模块信息文件..."
          cat > "$MODULE_DIR/info.json" <<EOF
          {
            "id": "${{ env.id }}",
            "name": "${{ env.name }}",
            "version": "${{ env.version }}",
            "versionCode": "${{ env.versionCode }}",
            "author": "${{ env.author }}",
            "description": "${{ env.description }}",
            "updateTime": "$(date '+%Y-%m-%d %H:%M:%S')",
            "repo": "${{ github.repository }}"
          }
          EOF

          # 添加并提交文件
          echo "添加和提交修改..."
          git add "$MODULE_DIR"
          git commit -m "添加模块: ${{ env.name }} v${{ env.version }}" || echo "没有更改需要提交"
          
          # 推送新分支到自己的仓库
          echo "推送分支到远程..."
          git push -u origin $pr_branch --force
        
          # 返回主目录
          cd ..
          
          # 生成PR链接并保存到环境变量
          echo "PR创建链接: https://github.com/${{ github.repository }}/compare/modules...$(echo ${{ github.repository_owner }}):$pr_branch?expand=1" > pr-link.txt
          PR_LINK="https://github.com/${{ github.repository }}/compare/modules...$(echo ${{ github.repository_owner }}):$pr_branch?expand=1"
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV
          echo "PR_BRANCH=$pr_branch" >> $GITHUB_ENV

          cat pr-link.txt
          echo "=================================="
          echo "模块已提交到分支: $pr_branch"
          echo "请点击以下链接创建PR:"
          echo "$PR_LINK"
          echo "=================================="

      - name: 上传PR链接作为工件
        if: env.DEBUG_MODE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: PR链接
          path: |
            pr-link.txt

      - name: 完成
        run: echo "工作流已完成"


