import ida_domain
import pytest
import os
import sys
import subprocess
import tempfile
import shutil
import ida_idaapi
from pathlib import Path

# Global setup (runs ONCE)
@pytest.fixture(scope="module", autouse=True)
def global_setup():
  print(f"\nAPI Version: {ida_domain.__version__}")

  """ Runs once per module: Creates temp directory and writes test binary. """
  global idb_path
  idb_path = os.path.join(tempfile.gettempdir(), "api_tests_work_dir")
  shutil.rmtree(idb_path, ignore_errors=True)
  os.makedirs(idb_path, exist_ok=True)
  idb_path = os.path.join(tempfile.gettempdir(), "api_tests_work_dir", "test.bin")

  # Small binary to use for testing (same as C++)
  tiny_program = bytes([
    0x7f,0x45,0x4c,0x46,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x3e,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x07,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0e,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x40,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x19,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0xb5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x06,0x00,0x00,0x00,0x00,0x00,0x00,
    0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb8,0x01,0x00,0x00,0x00,0xbf,0x01,0x00,
    0x00,0x00,0x48,0x8d,0x35,0x00,0x00,0x00,0x00,0xba,0x0d,0x00,0x00,0x00,0x0f,0x05,0xbf,0x05,0x00,0x00,0x00,0xbe,0x0a,0x00,0x00,0x00,0xe8,0x93,0x00,0x00,0x00,0x49,0x89,0xc4,0xb8,0x01,0x00,0x00,0x00,0xbf,
    0x01,0x00,0x00,0x00,0x48,0x8d,0x34,0x25,0x00,0x00,0x00,0x00,0xba,0x05,0x00,0x00,0x00,0x0f,0x05,0x4c,0x89,0xe7,0xe8,0x88,0x00,0x00,0x00,0xb8,0x01,0x00,0x00,0x00,0xbf,0x01,0x00,0x00,0x00,0x48,0x8d,0x34,
    0x25,0x00,0x00,0x00,0x00,0xba,0x01,0x00,0x00,0x00,0x0f,0x05,0xbf,0x05,0x00,0x00,0x00,0xbe,0x0a,0x00,0x00,0x00,0xe8,0x53,0x00,0x00,0x00,0x49,0x89,0xc4,0xb8,0x01,0x00,0x00,0x00,0xbf,0x01,0x00,0x00,0x00,
    0x48,0x8d,0x34,0x25,0x00,0x00,0x00,0x00,0xba,0x09,0x00,0x00,0x00,0x0f,0x05,0x4c,0x89,0xe7,0xe8,0x3c,0x00,0x00,0x00,0xb8,0x01,0x00,0x00,0x00,0xbf,0x01,0x00,0x00,0x00,0x48,0x8d,0x34,0x25,0x00,0x00,0x00,
    0x00,0xba,0x01,0x00,0x00,0x00,0x0f,0x05,0xb8,0x3c,0x00,0x00,0x00,0x48,0x31,0xff,0x0f,0x05,0x55,0x48,0x89,0xe5,0x48,0x89,0xf8,0x48,0x01,0xf0,0x5d,0xc3,0x55,0x48,0x89,0xe5,0x48,0x89,0xf8,0x48,0x0f,0xaf,
    0xc6,0x5d,0xc3,0x48,0x89,0xe3,0x48,0x83,0xec,0x14,0x48,0x89,0xe6,0xb9,0x0a,0x00,0x00,0x00,0xba,0x00,0x00,0x00,0x00,0x48,0xf7,0xf1,0x80,0xc2,0x30,0x48,0xff,0xce,0x88,0x16,0x48,0x85,0xc0,0x75,0xf0,0xb8,
    0x01,0x00,0x00,0x00,0xbf,0x01,0x00,0x00,0x00,0x48,0x89,0xda,0x48,0x29,0xf2,0x0f,0x05,0x48,0x83,0xc4,0x14,0xc3,0x00,0x00,0x48,0x65,0x6c,0x6c,0x6f,0x2c,0x20,0x49,0x44,0x41,0x21,0x0a,0x00,0x53,0x75,0x6d,
    0x3a,0x20,0x50,0x72,0x6f,0x64,0x75,0x63,0x74,0x3a,0x20,0x0a,0xc3,0xf5,0x48,0x40,0x1f,0x85,0xeb,0x51,0xb8,0x1e,0x19,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2e,0x74,0x65,0x78,0x74,0x00,0x2e,
    0x72,0x6f,0x64,0x61,0x74,0x61,0x00,0x2e,0x73,0x68,0x73,0x74,0x72,0x74,0x61,0x62,0x00,0x2e,0x73,0x79,0x6d,0x74,0x61,0x62,0x00,0x2e,0x73,0x74,0x72,0x74,0x61,0x62,0x00,0x2e,0x72,0x65,0x6c,0x61,0x2e,0x74,
    0x65,0x78,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x04,0x00,0xf1,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
    0xba,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x2e,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xd3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3b,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0xe7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5a,0x00,0x00,0x00,0x00,0x00,0xf1,0xff,
    0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x6c,0x00,0x00,0x00,0x00,0x00,0xf1,0xff,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0xf1,0xff,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
    0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x00,0x00,0xf1,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xa0,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xaa,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x74,0x69,0x6e,0x79,0x2e,0x61,0x73,0x6d,0x00,0x5f,0x73,0x74,0x61,0x72,0x74,0x00,0x61,0x64,0x64,0x5f,0x6e,0x75,0x6d,0x62,0x65,0x72,0x73,0x00,0x6d,0x75,0x6c,0x74,0x69,0x70,0x6c,0x79,0x5f,0x6e,0x75,
    0x6d,0x62,0x65,0x72,0x73,0x00,0x70,0x72,0x69,0x6e,0x74,0x5f,0x6e,0x75,0x6d,0x62,0x65,0x72,0x00,0x70,0x72,0x69,0x6e,0x74,0x5f,0x6e,0x75,0x6d,0x62,0x65,0x72,0x2e,0x70,0x72,0x69,0x6e,0x74,0x5f,0x64,0x69,
    0x67,0x69,0x74,0x00,0x68,0x65,0x6c,0x6c,0x6f,0x00,0x68,0x65,0x6c,0x6c,0x6f,0x5f,0x6c,0x65,0x6e,0x00,0x73,0x75,0x6d,0x5f,0x73,0x74,0x72,0x00,0x73,0x75,0x6d,0x5f,0x6c,0x65,0x6e,0x00,0x70,0x72,0x6f,0x64,
    0x75,0x63,0x74,0x5f,0x73,0x74,0x72,0x00,0x70,0x72,0x6f,0x64,0x75,0x63,0x74,0x5f,0x6c,0x65,0x6e,0x00,0x6e,0x65,0x77,0x6c,0x69,0x6e,0x65,0x00,0x6e,0x65,0x77,0x6c,0x69,0x6e,0x65,0x5f,0x6c,0x65,0x6e,0x00,
    0x66,0x6c,0x6f,0x61,0x74,0x5f,0x76,0x61,0x6c,0x00,0x64,0x6f,0x75,0x62,0x6c,0x65,0x5f,0x76,0x61,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x59,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x1b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  ])

  with open(idb_path, "wb") as f:
    f.write(tiny_program)


# Per-test fixture (runs for each test)
@pytest.fixture(scope="function")
def test_env():
  """ Runs for each test: Opens and closes the database. """
  db = ida_domain.Database()
  assert db.open(idb_path)
  yield db
  db.close(False)

def test_database(test_env):
  db = test_env
  db.close(False)
  assert db.is_open() is False
  assert db.open(idb_path) is True
  assert db.is_open() is True

  assert db.entry_point == 0

  db.current_ea = db.entry_point
  assert db.current_ea == db.entry_point

  assert db.minimum_ea == 0x0
  assert db.maximum_ea == 0x158

  metadata = db.metadata
  assert len(metadata) == 11

  assert "path" in metadata
  assert "test.bin" in metadata["path"]

  assert metadata["module"] == "test.bin"
  assert metadata["base"] == ".text:0000000000000000"
  assert metadata["filesize"] == "1680"
  assert metadata["md5"] == "e2b93c2561df0cdf8eeed7be640138ed"
  assert metadata["sha256"] == "5594e3be996dd38fd730323b2d5c44b5eb670d5eff39d4f402b55a76d61bf848"
  assert metadata["crc32"] == "1874452670"
  assert metadata["architecture"] == "metapc"
  assert metadata["bitness"] == "64"
  assert metadata["format"] == "ELF64 for x86-64 (Relocatable)"

  assert "load_time" in metadata
  assert isinstance(metadata["load_time"], str)
  assert len(metadata["load_time"]) == 19  # dummy check, expect "YYYY-MM-DD HH:MM:SS"


def test_segment(test_env):
  db = test_env
  all_segments = db.segments.get_all()
  seg = next(all_segments)
  assert seg is not None
  assert db.segments.get_name(seg) == ".text"
  assert seg.start_ea == 0
  assert db.segments.set_name(seg, "testing_segment_rename")
  assert db.segments.get_name(seg) == "testing_segment_rename"

  seg = next(all_segments)
  assert seg is not None
  assert db.segments.get_name(seg) == ".rodata"
  assert seg.start_ea == 0x110


def test_function(test_env):
  db = test_env

  all_functions = db.functions.get_all();
  func = next(all_functions)
  assert func is not None
  assert db.functions.get_name(func) == "add_numbers"

  func = next(all_functions)
  assert func is not None
  assert db.functions.get_name(func) == "multiply_numbers"

  func = db.functions.get_at(0xc6)
  assert func is not None
  assert func.start_ea == 0xC6

  assert db.functions.set_name(func, "testing_function_rename")
  assert db.functions.get_name(func) == "testing_function_rename"
  assert db.functions.set_name(func, "multiply_numbers")
  assert db.functions.get_name(func) == "multiply_numbers"

  blocks = db.functions.get_basic_blocks(func)
  assert blocks.get_count() == 1
  assert blocks.get_at_index(0).start_ea == 0xc6
  assert blocks.get_at_index(0).end_ea == 0xd3

  disassembly_lines = db.functions.get_disassembly(func)
  assert len(disassembly_lines) == 6

  pseudocode_lines = db.functions.get_pseudocode(func)
  assert len(pseudocode_lines) == 4

  # Validate expected instructions and their addresses
  expected_instructions = [
    (0xC6, "push    rbp"),
    (0xC7, "mov     rbp, rsp"),
    (0xCA, "mov     rax, rdi"),
    (0xCD, "imul    rax, rsi"),
    (0xD1, "pop     rbp"),
    (0xD2, "retn"),
    (ida_idaapi.BADADDR, "")
  ]

  instructions = db.functions.get_instructions(func)
  for i, instruction in enumerate(instructions):
    assert expected_instructions[i][0] == instruction.ea
    assert (True, expected_instructions[i][1]) == db.instructions.get_disassembly(instruction)


  func = db.functions.get_at(0xcb)
  assert func is not None

  # Validate function signature
  expected_signature = "__int64 __fastcall(__int64, __int64)"
  assert db.functions.get_signature(func) == expected_signature

  # Check signature match
  assert db.functions.matches_signature(func, expected_signature)
  assert not db.functions.matches_signature(func, "void __fastcall()")

  # Remove and re-create function
  assert db.functions.remove(0xc6)
  assert db.functions.get_at(0xc6) is None

  assert db.functions.create(0xc6)
  assert db.functions.get_at(0xc6) is not None


def test_instruction(test_env):
  db = test_env

  stat, instruction = db.instructions.decode(0xcb)
  assert stat
  assert db.instructions.is_valid(instruction)
  assert db.instructions.get_disassembly(instruction) == (True, "mov     rax, rdi")


def test_basic_block(test_env):
  db = test_env
  func = db.functions.get_at(0xcb)
  assert func is not None

  blocks = db.functions.get_basic_blocks(func)
  assert blocks.get_count() == 1

  # Validate expected blocks
  expected_blocks = [
    (0xc6, 0xd3)
  ]

  for i, block in enumerate(blocks):
    assert expected_blocks[i][0] == block.start_ea, f"Block start ea mismatch at index {i}, {hex(expected_blocks[i][0])} != {hex(block.start_ea)}"
    assert expected_blocks[i][1] == block.end_ea, f"Block end ea mismatch at index {i}, {hex(expected_blocks[i][1])} != {hex(block.end_ea)}"

  # Validate expected instructions and their addresses
  expected_instructions = [
    (0xC6, "push    rbp"),
    (0xC7, "mov     rbp, rsp"),
    (0xCA, "mov     rax, rdi"),
    (0xCD, "imul    rax, rsi"),
    (0xD1, "pop     rbp"),
    (0xD2, "retn"),
    (ida_idaapi.BADADDR, "")
  ]

  instructions = db.basic_blocks.get_instructions(blocks.get_at_index(0))
  for i, instruction in enumerate(instructions):
    assert expected_instructions[i][0] == instruction.ea
    assert (True, expected_instructions[i][1]) == db.instructions.get_disassembly(instruction)


def test_strings(test_env):
  db = test_env

  assert db.strings.get_count() == 2

  expected_strings = [
    (0x110, "Hello, IDA!\n"),
    (0x11d, "Sum: Product: \n")
  ]

  for i, (expected_addr, expected_string) in enumerate(expected_strings):
    stringsAndAddress = db.strings.get_at_index(i)
    assert stringsAndAddress[0] == expected_addr
    assert stringsAndAddress[1] == expected_string

  for i, (addr, string) in enumerate(db.strings.get_all()):
    assert addr == expected_strings[i][0], f"String address mismatch at index {i}, {hex(addr)} != {hex(expected_strings[i][0])}"
    assert string == expected_strings[i][1], f"String mismatch at index {i}, {string} != {expected_strings[i][1]}"

  string = db.strings.get_at(0x110)
  assert string == ("Hello, IDA!\n")

  string = db.strings.get_at(0x11d)
  assert string == "Sum: Product: \n"


def test_names(test_env):
  db = test_env

  assert db.names.get_count() == 15

  expected_names = [
    (0x0, "_start"),
    (0xba, "add_numbers"),
    (0xc6, "multiply_numbers"),
    (0xd3, "print_number"),
    (0xe7, "print_number.print_digit"),
    (0x110, "hello"),
    (0x11d, "sum_str"),
    (0x122, "product_str"),
    (0x12b, "newline"),
    (0x12c, "float_val"),
    (0x130, "double_val"),
    (0x138, "hello_len"),
    (0x140, "sum_len"),
    (0x148, "product_len"),
    (0x150, "newline_len")
  ]

  for i, (expected_addr, expected_name) in enumerate(expected_names):
    nameAndAddress = db.names.get_at_index(i)
    assert nameAndAddress[0] == expected_addr, f"Name address mismatch at index {i}, {hex(nameAndAddress[0])} != {hex(expected_addr)}"
    assert nameAndAddress[1] == expected_name, f"Name mismatch at index {i}, {nameAndAddress[1]} != {expected_name}"

  all_names = db.names.get_all()
  for i, (addr, name) in enumerate(all_names):
    assert addr == expected_names[i][0]
    assert name == expected_names[i][1]

  name = db.names.get_at(0x0)
  assert name == "_start"

  name = db.names.get_at(0x150)
  assert name == "newline_len"

  assert db.names.get_at(db.entry_point) == "_start"


def test_xrefs(test_env):
  db = test_env
  expected_xrefs = [0x6e]
  xrefs_to = db.xrefs.get_to(0xc6)
  for i, xrefblk in enumerate(xrefs_to):
    assert xrefblk.frm == expected_xrefs[i]

  expected_xrefs = [0xda]
  xrefs_from = db.xrefs.get_from(0xd6)
  for i, xrefblk in enumerate(xrefs_from):
    assert xrefblk.to == expected_xrefs[i]

def test_types(test_env):
  db = test_env
  all_types = db.types.get_names()
  count = 0
  for t in all_types:
    count = count + 1
  assert count == 0

  type_name = db.types.get_name_at(0xb3)
  assert type_name is None

  assert not db.types.apply_named_type(0xb3, "int")
  type_name = db.types.get_name_at(0xb3)
  assert type_name is None


def test_signatures(test_env):
  db = test_env

  # Get available signatures
  available_sigs = db.signature_files.get_available_sig_files()
  assert len(available_sigs) > 0, "No signature files found"


def test_comments(test_env):
  db = test_env

  # Validate expected comments and their addresses
  expected_comments = [
    (0x16, "LINUX - sys_write"),
    (0x41, "LINUX - sys_write"),
    (0x62, "LINUX - sys_write"),
    (0x8d, "LINUX - sys_write"),
    (0xae, "LINUX - sys_write"),
    (0xb8, "LINUX - sys_exit"),
    (0xed, "buf"),
    (0xfc, "fd"),
    (0x104, "count"),
    (0x107, "LINUX - sys_write"),
  ]

  for i, (addr, comment) in enumerate(db.comments.get_all(False)):
    assert expected_comments[i][0] == addr
    assert expected_comments[i][1] == comment

  # Add a new comment at address 0xae
  assert db.comments.set(0xae, "Testing adding comment")
  assert db.comments.get(0xae) == (True, "Testing adding comment")

def test_data(test_env):
  db = test_env

  stat, byte_val = db.bytes.get_byte(0x110)
  assert stat == True
  assert byte_val == 0x48

  stat, word_val = db.bytes.get_word(0x110)
  assert stat == True
  assert word_val == 0x6548

  stat, dword_val = db.bytes.get_dword(0x110)
  assert stat == True
  assert dword_val == 0x6c6c6548

  stat, qword_val = db.bytes.get_qword(0x110)
  assert stat == True
  assert qword_val == 0x49202c6f6c6c6548

  stat, float_val = db.bytes.get_float(0x12c)
  assert stat == True
  assert pytest.approx(float_val, rel=3.14) == 0.0

  stat, double_val = db.bytes.get_double(0x130)
  assert stat == True
  assert pytest.approx(double_val, rel=6.28) == 0.0

  stat, disasm = db.bytes.get_disassembly(0x110)
  assert stat == True
  assert disasm == "db 'Hello, IDA!',0Ah,0"

def test_ida_command_builder_default_state():
  """Test default state produces empty args"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.build_args() == ""

def test_ida_command_builder_auto_analysis():
  """Test auto analysis option"""
  builder = ida_domain.IdaCommandBuilder()
  # Default is true, should only add flag if false
  assert builder.auto_analysis(True).build_args() == ""

  builder = ida_domain.IdaCommandBuilder()
  assert builder.auto_analysis(False).build_args() == "-a"

def test_ida_command_builder_autonomous():
  """Test autonomous mode option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.autonomous().build_args() == "-A"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.autonomous(False).build_args() == ""

def test_ida_command_builder_loading_address():
  """Test loading address option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_loading_address(0x1000).build_args() == "-b1000"

def test_ida_command_builder_new_database():
  """Test new database option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.new_database().build_args() == "-c"

def test_ida_command_builder_compiler():
  """Test compiler option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_compiler("gcc").build_args() == "-Cgcc"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_compiler("gcc", "x64").build_args() == "-Cgcc:x64"

def test_ida_command_builder_first_pass_directive():
  """Test first pass directive option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.add_first_pass_directive("VPAGESIZE=8192").build_args() == "-dVPAGESIZE=8192"

  # Add multiple directives
  builder = ida_domain.IdaCommandBuilder()
  builder.add_first_pass_directive("DIR1")
  builder.add_first_pass_directive("DIR2")
  assert builder.build_args() == "-dDIR1 -dDIR2"

def test_ida_command_builder_second_pass_directive():
  """Test second pass directive option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.add_second_pass_directive("OPTION=VALUE").build_args() == "-DOPTION=VALUE"

def test_ida_command_builder_disable_fpp():
  """Test disable FPP instructions option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.disable_fpp_instructions().build_args() == "-f"

def test_ida_command_builder_entry_point():
  """Test entry point option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_entry_point(0x401000).build_args() == "-i401000"

def test_ida_command_builder_jit_debugger():
  """Test JIT debugger option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_jit_debugger(True).build_args() == "-I1"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_jit_debugger(False).build_args() == "-I0"

def test_ida_command_builder_log_file():
  """Test log file option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_log_file("debug.log").build_args() == "-Ldebug.log"

def test_ida_command_builder_disable_mouse():
  """Test disable mouse option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.disable_mouse().build_args() == "-M"

def test_ida_command_builder_plugin_options():
  """Test plugin options"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_plugin_options("opt1=val1").build_args() == "-Oopt1=val1"

def test_ida_command_builder_output_database():
  """Test output database option (should also set -c flag)"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_output_database("output.idb").build_args() == "-c -ooutput.idb"

def test_ida_command_builder_processor():
  """Test processor option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_processor("arm").build_args() == "-parm"

def test_ida_command_builder_database_compression():
  """Test database compression options"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.compress_database().build_args() == "-P+"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.pack_database().build_args() == "-P"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.no_pack_database().build_args() == "-P-"

def test_ida_command_builder_run_debugger():
  """Test run debugger option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.run_debugger().build_args() == "-r"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.run_debugger("debug-options").build_args() == "-rdebug-options"

def test_ida_command_builder_load_resources():
  """Test load resources option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.load_resources().build_args() == "-R"

def test_ida_command_builder_run_script():
  """Test run script option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.run_script("analyze.py").build_args() == "-Sanalyze.py"

  builder = ida_domain.IdaCommandBuilder()
  args = ["arg1", "arg with spaces", "--flag=value"]
  assert builder.run_script("script.py", args).build_args() == '-S"script.py arg1 "arg with spaces" --flag=value"'

def test_ida_command_builder_file_type():
  """Test file type option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_file_type("PE").build_args() == "-TPE"

  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_file_type("ZIP", "classes.dex").build_args() == "-TZIP:classes.dex"

def test_ida_command_builder_empty_database():
  """Test empty database option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.empty_database().build_args() == "-t"

def test_ida_command_builder_windows_directory():
  """Test Windows directory option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_windows_directory("C:\\Windows").build_args() == "-WC:\\Windows"

def test_ida_command_builder_no_segmentation():
  """Test no segmentation option"""
  builder = ida_domain.IdaCommandBuilder()
  assert builder.no_segmentation().build_args() == "-x"

def test_ida_command_builder_debug_flags():
  """Test debug flags option"""
  # Test with numeric flags
  builder = ida_domain.IdaCommandBuilder()
  assert builder.set_debug_flags(0x404).build_args() == "-z404"

  # Test with named flags
  builder = ida_domain.IdaCommandBuilder()
  flags = ["flirt", "type_system"]
  assert builder.set_debug_flags(flags).build_args() == "-z4004"

def test_ida_command_builder_text_mode():
  """Test text mode option (doesn't affect args)"""
  builder = ida_domain.IdaCommandBuilder()
  builder.use_text_mode()
  assert builder.build_args() == ""

def test_ida_command_builder_method_chaining():
  """Test method chaining"""
  builder = ida_domain.IdaCommandBuilder()
  args = builder.auto_analysis(False).set_log_file("analysis.log").set_processor("arm").build_args()
  assert args == "-a -Lanalysis.log -parm"

def test_ida_command_builder_complex_scenario1():
  """Test complex scenario 1"""
  builder = ida_domain.IdaCommandBuilder()
  args = (builder.autonomous(True)
                 .new_database(True)
                 .set_compiler("gcc", "x64")
                 .set_processor("arm")
                 .run_script("analyze.py", ["deep", "--verbose"])
                 .build_args())
  assert args == '-A -c -Cgcc:x64 -parm -S"analyze.py deep --verbose"'

def test_ida_command_builder_complex_scenario2():
  """Test complex scenario 2"""
  builder = ida_domain.IdaCommandBuilder()
  args = (builder.set_output_database("project.idb")
                 .compress_database()
                 .set_file_type("ZIP", "classes.dex")
                 .set_debug_flags(0x10004)  # debugger + flirt
                 .build_args())
  assert args == "-c -oproject.idb -P+ -TZIP:classes.dex -z10004"

def test_ida_command_builder_getters():
  """Test getter methods that are available"""
  builder = ida_domain.IdaCommandBuilder()

  assert builder._auto_analysis == True
  builder.auto_analysis(False)
  assert builder._auto_analysis == False


def test_api_examples(test_env):
  examples = ["analyze_functions.py", "analyze_strings.py", "analyze_types.py", "explore_database.py", "traverse.py"]
  for example in examples:
    script_path = Path(__file__).parent.parent / "examples" / example
    cmd = [sys.executable, str(script_path), "-f", str(idb_path)]

    result = subprocess.run(cmd, capture_output=True, text=True)

    print(f"Example {script_path} outputs")
    print("\n[STDOUT]")
    print(result.stdout)
    print("[STDERR]")
    print(result.stderr)

    assert result.returncode == 0, f"Example {script_path} failed to run"

  # analyze_xrefs.py requires additional arguments
  script_path = Path(__file__).parent.parent / "examples" / "analyze_xrefs.py"
  cmd = [sys.executable, str(script_path), "-f", str(idb_path), "-a", "0xd6"]

  result = subprocess.run(cmd, capture_output=True, text=True)

  print(f"Example {script_path} outputs")
  print("\n[STDOUT]")
  print(result.stdout)
  print("[STDERR]")
  print(result.stderr)

  assert result.returncode == 0, f"Example {script_path} failed to run"
