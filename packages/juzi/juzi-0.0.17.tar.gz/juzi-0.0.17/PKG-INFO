Metadata-Version: 2.4
Name: juzi
Version: 0.0.17
Summary: juzi
Project-URL: Homepage, https://github.com/tomouellette/juzi
Project-URL: Issues, https://github.com/tomouellette/juzi/issues
Author: Tom W. Ouellette
Requires-Python: >=3.12
Requires-Dist: joblib>=1.4.2
Requires-Dist: matplotlib>=3.10.1
Requires-Dist: numpy>=1.26.4
Requires-Dist: scipy>=1.11.4
Requires-Dist: torch>=2.5.1
Requires-Dist: tqdm>=4.66.4
Description-Content-Type: text/markdown

# :tangerine: juzi

Various methods for analyzing cell states and types in cancer single-cell sequencing data (currently experimental).

- [cell states (`cs`)](#cell-states-cs)
- [marker genes (`mg`)](#marker-genes-mg)

### Installation

```bash
pip install juzi
```

### cell states (`cs`)

Identification of recurrent cancer cell states across multiple samples.

```python
import juzi as jz

# Perform NMF across each unique sample
subset = jz.cs.nmf(
    adata,
    key="sample_id",
    layers="counts",
    genes="highly_variable",
    min_cells=100,
    k=[7, 8, 9, 10],
    max_iter=1000,
    n_jobs=8,
    seed=123
)

# Prune recurrent intra-sample factors based on overlapping top genes
jz.cs.prune(
    subset,
    top_k=50,
    min_similarity=0.7,
    min_k=1,
    n_jobs=1
)

# Compute inter-sample similarity matrix
jz.cs.similarity(
    subset,
    distance="jaccard",
    top_k=50,
    intra_sample=True,
    drop_zeros=True,
    n_jobs=8,
    prefer="threads"
)
```

### marker genes (`mg`)

Various marker genes for cell types, subtypes, and pathways.

```python
from juzi.mg import available_sets

# Check available marker gene sets
print(available_sets())

# Load breast cancer gene sets (e.g. PAM50)
from juzi.mg import CancerBreast
markers = CancerBreast()

# Load cancer pathway gene sets (e.g. HIPPO)
from juzi.mg import CancerPathways
markers = CancerPathways()

# Load cell cycle gene sets (e.g. G1S)
from juzi.mg import CellCycle
markers = CellCycle()

# List available sets in a given marker class
markers.info()

# Get all genes from all sets in a flattened list
markers.all()
```
