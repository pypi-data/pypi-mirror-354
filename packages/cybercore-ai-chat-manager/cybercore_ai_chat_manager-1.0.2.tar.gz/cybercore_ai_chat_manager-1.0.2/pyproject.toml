[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cybercore-ai-chat-manager"
dynamic = ["version"]
description = "A modular AI API/chat manager supporting multiple backends"
readme = "README.md"
authors = [
    {name = "TeamMalina", email = "contact@teammalina.dev"}
]
maintainers = [
    {name = "TeamMalina", email = "contact@teammalina.dev"}
]
keywords = ["ai", "chat", "bot", "openai", "api", "machine-learning", "nlp", "chatbot", "assistant"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.8"
dependencies = [
    # Core HTTP and async dependencies
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.2",
    "backoff>=2.2.1",
    
    # Data validation and settings
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Configuration and file formats
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    
    # Security
    "cryptography>=41.0.0",
    
    # CLI and interface
    "click>=8.1.0",
    "rich>=13.0.0",
    "prompt-toolkit>=3.0.0",
    
    # Utilities
    "python-dateutil>=2.8.0",
    "tiktoken>=0.5.0",
    "tenacity>=8.0.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
# Development and testing
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

# Backend: OpenAI
openai = [
    "openai>=1.0.0",
]

# Backend: Anthropic
anthropic = [
    "anthropic>=0.3.0",
]

# Backend: HuggingFace
huggingface = [
    "transformers>=4.25.0",
    "torch>=2.0.0",
    "accelerate>=0.20.0",
]

# Backend: Cohere
cohere = [
    "cohere>=4.0.0",
]

# Backend: ElevenLabs (audio)
elevenlabs = [
    "elevenlabs>=0.2.0",
    "pydub>=0.25.0",
    "soundfile>=0.12.0",
]

# Enterprise features
enterprise = [
    "redis>=4.5.0",
    "celery>=5.2.0",
    "prometheus_client>=0.16.0",
    "sentry-sdk>=1.20.0",
]

# Convenience group: All backends
backends = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "cohere>=4.0.0",
    "transformers>=4.25.0",
    "torch>=2.0.0",
    "elevenlabs>=0.2.0",
]

# Comprehensive package with all features
all = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "cohere>=4.0.0",
    "transformers>=4.25.0",
    "torch>=2.0.0",
    "accelerate>=0.20.0",
    "elevenlabs>=0.2.0",
    "pydub>=0.25.0",
    "soundfile>=0.12.0",
    "redis>=4.5.0",
    "prometheus_client>=0.16.0",
]

[project.urls]
Homepage = "https://github.com/TeamMalina/CyberCore"
Repository = "https://github.com/TeamMalina/CyberCore"
Documentation = "https://github.com/TeamMalina/CyberCore/wiki"
"Bug Reports" = "https://github.com/TeamMalina/CyberCore/issues"
Changelog = "https://github.com/TeamMalina/CyberCore/blob/main/CHANGELOG.md"

[project.scripts]
ai-chat-manager = "ai_chat_manager.cli.main:main"
acm = "ai_chat_manager.cli.main:main"
chat-manager = "ai_chat_manager.cli.main:main"
acm-wrapper = "ai_chat_manager.cli.wrapper:main"

[tool.setuptools.dynamic]
version = {attr = "ai_chat_manager.__version__"}

[tool.setuptools.packages.find]
where = ["."]
include = ["ai_chat_manager*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
"ai_chat_manager" = [
    "py.typed",
    "templates/*.yaml",
    "templates/*.json",
    "static/*",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ai_chat_manager"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]