---
name: Test

on: workflow_dispatch

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Ubuntu
        shell: bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt install antlr libantlr-dev libantlr-java libarchive-dev \
                           libcurl4-openssl-dev libxml2-utils libxslt1-dev \
                           ninja-build
          curl -L http://www.sdml.cs.kent.edu/build/srcML-1.0.0-Boost.tar.gz | \
              sudo tar xz -C /usr/local/include

      - name: Setup macOS
        shell: bash
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install ninja antlr2 --display-times
          curl -L http://www.sdml.cs.kent.edu/build/srcML-1.0.0-Boost.tar.gz | \
            sudo tar xz -C /usr/local/include

      - name: Setup Windows
        uses: microsoft/setup-msbuild@v1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Create build directory
        shell: bash
        run: mkdir build

      - name: CMake Setup on Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          export UseMultiToolTask=true
          cmake ..

      - name: CMake Setup on Ubuntu/macOS
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: build
        run: |
          cmake .. -G Ninja

      - name: Build
        shell: bash
        working-directory: build
        run: |
          export UseMultiToolTask=true
          cmake --build . --config Release

      - name: Install on Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          cmake --build . --config Release --target install

      - name: Install on Ubuntu/macOS
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: build
        run: |
          sudo cmake --build . --config Release --target install

      - name: Set PATH for Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          echo "/c/Program Files (x86)/srcML/bin" >> $GITHUB_PATH

      - name: Run Installed srcml
        shell: bash
        working-directory: build
        run: |
          srcml --version
          srcml --text="int a;" -l C++

      - name: Setup msys2 with additional client-test packages for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            zip
            cpio
            diffutils
            cmake
            util-linux

      - name: Windows Client Tests on Installed srcml
        if: ${{ matrix.os == 'windows-latest' }}
        shell: msys2 {0}
        working-directory: build
        timeout-minutes: 5
        continue-on-error: true
        run: |
          export SRCML_HOME="/c/Program Files (x86)/srcML/bin"
          ctest -C Release -VV
      - uses: actions/upload-artifact@v2
        with:
          name: ClientTest.${{ runner.os }}.log
          path: build/Testing/Temporary/LastTest.log

      - name: Ubuntu/macOS Client Tests on Installed srcml
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        working-directory: build
        continue-on-error: true
        run: |
          ctest -VV
      - uses: actions/upload-artifact@v2
        with:
          name: ClientTest.${{ runner.os }}.log
          path: build/Testing/Temporary/LastTest.log

      - name: Build libsrcml Tests
        shell: bash
        working-directory: build
        continue-on-error: true
        run: |
          export UseMultiToolTask=true
          cmake .. -DBUILD_LIBSRCML_TESTS=ON
          cmake --build . --config Release --target build_libsrcml_tests

      - name: Run libsrcml Tests on Installed libsrcml
        shell: bash
        working-directory: build
        continue-on-error: true
        run: |
          ctest -C Release -R ^test_
      - uses: actions/upload-artifact@v2
        with:
          name: libsrcmlTest.${{ runner.os }}.log
          path: build/Testing/Temporary/LastTest.log

      - name: Generate Parser Tests
        shell: bash
        working-directory: build
        run: |
          cmake .. -DBUILD_PARSER_TESTS=ON
          cmake --build . --config Release --target gen_parser_tests

      - name: Set PATH for Windows
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          echo "/c/Program Files (x86)/srcML/bin" >> $GITHUB_PATH

      - name: Run Parser Tests
        shell: bash
        working-directory: build
        continue-on-error: true
        run: |
          srcml --parser-test test/parser/testsuite | tee ParserTest.log

      - uses: actions/upload-artifact@v2
        with:
          name: ParserTest.${{ runner.os }}.log
          path: build/ParserTest.log
