"""
–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ offline-ai
"""

import sys
from datetime import datetime
from pathlib import Path
from typing import List, Optional

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.prompt import Prompt
from rich.markdown import Markdown
from rich.syntax import Syntax
import re

from .config import config
from .ollama_client import ollama_client

console = Console()

class OfflineAI:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.history: List[dict] = []
        self.max_history = config.get("ui.max_history", 100)
        self.show_timestamps = config.get("ui.show_timestamps", True)
        self.streaming_mode = config.get("ui.streaming_mode", True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        self.load_history()
        self.optimize_context_for_model()
    
    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            if config.history_file.exists():
                with open(config.history_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    for line in lines[-self.max_history:]:
                        if line.strip():
                            try:
                                import json
                                entry = json.loads(line.strip())
                                self.history.append(entry)
                            except:
                                continue
        except Exception as e:
            console.print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", style="yellow")
    
    def save_to_history(self, user_message: str, ai_response: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "user": user_message,
            "ai": ai_response
        }
        
        self.history.append(entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.history) > self.max_history:
            self.history = self.history[-self.max_history:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(config.history_file, 'a', encoding='utf-8') as f:
                import json
                f.write(json.dumps(entry, ensure_ascii=False) + '\n')
        except Exception as e:
            console.print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", style="yellow")

    def optimize_context_for_model(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        from .ollama_client import ollama_client

        current_model = ollama_client.model
        recommended_models = config.get("models.recommended", [])

        # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        for model_info in recommended_models:
            if isinstance(model_info, dict) and model_info.get("name") == current_model:
                optimal_context = model_info.get("optimal_context_messages", 8)

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                current_context = config.get("ui.max_context_messages", 8)
                if current_context == 8 or current_context == 10:  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    config.set("ui.max_context_messages", optimal_context)
                    console.print(f"üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ {current_model}: {optimal_context} —Å–æ–æ–±—â–µ–Ω–∏–π",
                                style="blue")
                break
    
    def setup(self, auto_install: bool = False) -> bool:
        """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
        console.print(Panel.fit(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ offline-ai!\n"
            "–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞",
            title="Offline AI",
            style="blue"
        ))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Ollama
        if not ollama_client.is_ollama_running():
            if not ollama_client.start_ollama():
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
        models = ollama_client.list_models()
        if not models:
            console.print("üì¶ –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", style="yellow")

            if auto_install:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –º–æ–¥–µ–ª—å
                demo_model = config.get("models.preferred_default", "llama3.2:3b")
                model_info = ollama_client.get_model_info(demo_model)

                console.print(Panel.fit(
                    f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏\n\n"
                    f"–ú–æ–¥–µ–ª—å: {demo_model}\n"
                    f"–†–∞–∑–º–µ—Ä: {model_info.get('size', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {model_info.get('description', '')}\n\n"
                    f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
                    title="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏",
                    style="blue"
                ))

                if ollama_client.pull_model(demo_model, show_progress=True):
                    config.set("ollama.model", demo_model)
                    ollama_client.model = demo_model
                    console.print(f"‚úÖ –ú–æ–¥–µ–ª—å {demo_model} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!", style="green")
                else:
                    console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å", style="red")
                    return False
            else:
                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if not ollama_client.setup_recommended_model():
                    return False
        else:
            console.print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏: {', '.join(models)}", style="green")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            if ollama_client.model not in models:
                console.print(f"‚ö†Ô∏è  –ú–æ–¥–µ–ª—å {ollama_client.model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é", style="yellow")
                ollama_client.model = models[0]
                config.set("ollama.model", models[0])

        console.print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {ollama_client.model}", style="green")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        config.set("setup.completed", True)

        return True

    def is_first_run(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫"""
        return not config.get("setup.completed", False)

    def display_formatted_response(self, response: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∫–æ–¥–∞"""
        if not response.strip():
            return

        # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        code_pattern = r'```(\w+)?\n(.*?)\n```'
        parts = re.split(code_pattern, response, flags=re.DOTALL)

        i = 0
        while i < len(parts):
            if i % 3 == 0:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                text = parts[i].strip()
                if text:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ markdown
                    if any(marker in text for marker in ['**', '*', '`', '#']):
                        try:
                            console.print(Markdown(text))
                        except:
                            console.print(text, style="white")
                    else:
                        console.print(text, style="white")
            elif i % 3 == 1:
                # –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
                language = parts[i] or "text"
                i += 1
                if i < len(parts):
                    # –ö–æ–¥
                    code = parts[i].strip()
                    if code:
                        try:
                            syntax = Syntax(code, language, theme="monokai", line_numbers=True)
                            console.print(Panel(syntax, title=f"üìù {language.upper()}", border_style="blue"))
                        except:
                            console.print(Panel(code, title="üìù –ö–æ–¥", border_style="blue"))
            i += 1

    def detect_inline_code(self, text: str) -> str:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–æ–¥–∞"""
        # –ò—â–µ–º –∫–æ–¥ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        inline_pattern = r'`([^`]+)`'

        def replace_inline(match):
            code = match.group(1)
            return f"[bold cyan]{code}[/bold cyan]"

        return re.sub(inline_pattern, replace_inline, text)
    
    def chat_once(self, message: str, use_context: bool = True) -> str:
        """–û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not message.strip():
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        console.print(f"\nüí≠ –í—ã: {message}", style="cyan")

        response_parts = []
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
            context = self.history if use_context else None

            if self.streaming_mode:
                # –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                console.print("ü§ñ –ò–ò: ", style="green", end="")
                for chunk in ollama_client.chat(message, context=context):
                    console.print(chunk, end="", style="white")
                    response_parts.append(chunk)
                console.print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                response = "".join(response_parts)
            else:
                # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                with console.status("ü§ñ –ò–ò –¥—É–º–∞–µ—Ç...", spinner="dots"):
                    for chunk in ollama_client.chat(message, context=context):
                        response_parts.append(chunk)
                response = "".join(response_parts)
                console.print("\nü§ñ –ò–ò:", style="green")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–∞
            if not self.streaming_mode:
                self.display_formatted_response(response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(message, response)

            return response

        except KeyboardInterrupt:
            console.print("\n\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="yellow")
            return "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω"
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {e}"
            console.print(f"\n‚ùå {error_msg}", style="red")
            return error_msg

    def chat_with_context(self, message: str) -> str:
        """–ß–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ API —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.strip():
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

        console.print(f"\nüí≠ –í—ã: {message}", style="cyan")

        response_parts = []
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π)
            max_context = config.get("ui.max_context_messages", 10)
            recent_history = self.history[-max_context:] if len(self.history) > max_context else self.history

            for entry in recent_history:
                messages.append({"user": entry["user"], "ai": entry["ai"]})

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append(message)

            if self.streaming_mode:
                # –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                console.print("ü§ñ –ò–ò: ", style="green", end="")
                for chunk in ollama_client.chat_with_messages(messages):
                    console.print(chunk, end="", style="white")
                    response_parts.append(chunk)
                console.print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                response = "".join(response_parts)
            else:
                # –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                with console.status("ü§ñ –ò–ò –¥—É–º–∞–µ—Ç...", spinner="dots"):
                    for chunk in ollama_client.chat_with_messages(messages):
                        response_parts.append(chunk)
                response = "".join(response_parts)
                console.print("\nü§ñ –ò–ò:", style="green")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–∞
            if not self.streaming_mode:
                self.display_formatted_response(response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(message, response)

            return response

        except KeyboardInterrupt:
            console.print("\n\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", style="yellow")
            return "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω"
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {e}"
            console.print(f"\n‚ùå {error_msg}", style="red")
            return error_msg
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        use_context = config.get("ui.use_context", True)
        context_indicator = "üß†" if use_context else "üí≠"
        stream_indicator = "‚ö°" if self.streaming_mode else "‚è≥"

        console.print(Panel.fit(
            f"{context_indicator}{stream_indicator} –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º\n"
            f"–ü–∞–º—è—Ç—å: {'–≤–∫–ª—é—á–µ–Ω–∞' if use_context else '–≤—ã–∫–ª—é—á–µ–Ω–∞'} | "
            f"–í—ã–≤–æ–¥: {'–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' if self.streaming_mode else '–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'}\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ 'exit' –∏–ª–∏ 'quit' - –≤—ã—Ö–æ–¥\n"
            "‚Ä¢ 'history' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω\n"
            "‚Ä¢ 'context on/off' - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–∞–º—è—Ç—å\n"
            "‚Ä¢ 'stream on/off' - —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ 'reset' - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
            style="blue"
        ))

        while True:
            try:
                stream_indicator = "‚ö°" if self.streaming_mode else "‚è≥"
                prompt_text = f"\n{context_indicator}{stream_indicator} –í—ã"
                message = Prompt.ask(prompt_text, default="")

                if not message:
                    continue

                if message.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                    console.print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
                    break

                if message.lower() in ['history', '–∏—Å—Ç–æ—Ä–∏—è']:
                    self.show_history()
                    continue

                if message.lower() in ['clear', '–æ—á–∏—Å—Ç–∏—Ç—å']:
                    console.clear()
                    continue

                if message.lower() == 'context on':
                    use_context = True
                    config.set("ui.use_context", True)
                    context_indicator = "üß†"
                    console.print("‚úÖ –ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞", style="green")
                    continue

                if message.lower() == 'context off':
                    use_context = False
                    config.set("ui.use_context", False)
                    context_indicator = "üí≠"
                    console.print("‚ö†Ô∏è –ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞", style="yellow")
                    continue

                if message.lower() == 'stream on':
                    self.streaming_mode = True
                    config.set("ui.streaming_mode", True)
                    console.print("‚ö° –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω", style="green")
                    continue

                if message.lower() == 'stream off':
                    self.streaming_mode = False
                    config.set("ui.streaming_mode", False)
                    console.print("‚è≥ –†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω", style="yellow")
                    continue

                if message.lower() in ['reset', '—Å–±—Ä–æ—Å']:
                    self.history.clear()
                    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
                    try:
                        config.history_file.write_text("", encoding='utf-8')
                    except:
                        pass
                    console.print("üîÑ –ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞", style="blue")
                    continue

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if use_context:
                    self.chat_with_context(message)
                else:
                    self.chat_once(message, use_context=False)

            except KeyboardInterrupt:
                console.print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
                break
            except EOFError:
                console.print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style="green")
                break
    
    def show_history(self, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.history:
            console.print("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", style="yellow")
            return
        
        console.print(f"\nüìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ {min(limit, len(self.history))} –∑–∞–ø–∏—Å–µ–π:", style="blue")
        
        for entry in self.history[-limit:]:
            timestamp = ""
            if self.show_timestamps and "timestamp" in entry:
                dt = datetime.fromisoformat(entry["timestamp"])
                timestamp = f" [{dt.strftime('%H:%M:%S')}]"
            
            console.print(f"\nüí≠ –í—ã{timestamp}: {entry['user']}", style="cyan")
            console.print(f"ü§ñ –ò–ò: {entry['ai']}", style="green")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = OfflineAI()
