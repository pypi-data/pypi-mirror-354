"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è offline-ai
"""

import os
import yaml
from pathlib import Path
from typing import Dict, Any, Optional

class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.config_dir = Path.home() / ".offline-ai"
        self.config_file = self.config_dir / "config.yaml"
        self.history_file = self.config_dir / "history.txt"
        self.config_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_config = {
            "ollama": {
                "base_url": "http://localhost:11434",
                "model": "llama3.2:3b",
                "timeout": 30
            },
            "ui": {
                "max_history": 100,
                "show_timestamps": True,
                "color_scheme": "auto",
                "use_context": True,
                "max_context_messages": 8,
                "syntax_highlighting": True,
                "code_theme": "monokai",
                "streaming_mode": True
            },
            "models": {
                "recommended": [
                    {
                        "name": "llama3.2:3b",
                        "size": "~2.0 GB",
                        "description": "üèÜ –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                        "context_window": 128000,
                        "optimal_context_messages": 8,
                        "performance": "–æ—Ç–ª–∏—á–Ω–∞—è"
                    },
                    {
                        "name": "phi3:mini",
                        "size": "~2.3 GB",
                        "description": "–û—Ç Microsoft, –æ—Ç–ª–∏—á–Ω–∞—è –¥–ª—è –∫–æ–¥–∞",
                        "context_window": 128000,
                        "optimal_context_messages": 6,
                        "performance": "—Ö–æ—Ä–æ—à–∞—è –¥–ª—è –∫–æ–¥–∞"
                    },
                    {
                        "name": "qwen2.5:3b",
                        "size": "~2.0 GB",
                        "description": "–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç Alibaba, –æ—á–µ–Ω—å —É–º–Ω–∞—è",
                        "context_window": 32000,
                        "optimal_context_messages": 8,
                        "performance": "–æ—Ç–ª–∏—á–Ω–∞—è"
                    },
                    {
                        "name": "gemma2:2b",
                        "size": "~1.4 GB",
                        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –æ—Ç Google",
                        "context_window": 8192,
                        "optimal_context_messages": 6,
                        "performance": "—Ö–æ—Ä–æ—à–∞—è, –±—ã—Å—Ç—Ä–∞—è"
                    },
                    {
                        "name": "llama3.2:1b",
                        "size": "~1.3 GB",
                        "description": "–î–ª—è —Å–ª–∞–±—ã—Ö –ü–ö",
                        "context_window": 128000,
                        "optimal_context_messages": 4,
                        "performance": "–±–∞–∑–æ–≤–∞—è, –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è"
                    }
                ],
                "auto_download": True,
                "preferred_default": "llama3.2:3b"
            }
        }
        
        self._config = self.load_config()
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    return self._merge_configs(self.default_config, config)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return self.default_config.copy()
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.save_config(self.default_config)
            return self.default_config.copy()
    
    def save_config(self, config: Optional[Dict[str, Any]] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        config_to_save = config or self._config
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config_to_save, f, default_flow_style=False, 
                         allow_unicode=True, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _merge_configs(self, default: Dict, user: Dict) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        result = default.copy()
        for key, value in user.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._merge_configs(result[key], value)
            else:
                result[key] = value
        return result
    
    def get(self, key: str, default=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        keys = key.split('.')
        value = self._config
        for k in keys:
            if isinstance(value, dict) and k in value:
                value = value[k]
            else:
                return default
        return value
    
    def set(self, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        keys = key.split('.')
        config = self._config
        for k in keys[:-1]:
            if k not in config:
                config[k] = {}
            config = config[k]
        config[keys[-1]] = value
        self.save_config()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
