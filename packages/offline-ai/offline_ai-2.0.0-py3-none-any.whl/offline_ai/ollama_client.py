"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama
"""

import json
import time
import subprocess
import platform
import requests
import os
import sys
from pathlib import Path
from typing import Optional, Dict, Any, Generator
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, DownloadColumn, TransferSpeedColumn
from rich.panel import Panel
from rich.prompt import Confirm

from .config import config

console = Console()

class OllamaClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama API"""
    
    def __init__(self):
        self.base_url = config.get("ollama.base_url", "http://localhost:11434")
        self.timeout = config.get("ollama.timeout", 30)
        self.model = config.get("ollama.model", "llama3.2:3b")
    
    def is_ollama_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def install_ollama_windows(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –Ω–∞ Windows"""
        console.print("üì¶ –ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...", style="blue")

        try:
            # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ winget
            console.print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ winget...", style="blue")
            result = subprocess.run(["winget", "install", "Ollama.Ollama", "--accept-package-agreements", "--accept-source-agreements"],
                                  capture_output=True, text=True, timeout=300)

            if result.returncode == 0:
                console.print("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ winget!", style="green")
                console.print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...", style="yellow")
                time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                return True
            else:
                console.print("‚ö†Ô∏è Winget –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫...", style="yellow")

        except (FileNotFoundError, subprocess.TimeoutExpired):
            console.print("‚ö†Ô∏è Winget –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É—é —Å–∫–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫...", style="yellow")

        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
        try:
            import urllib.request
            import tempfile

            console.print("üì• –°–∫–∞—á–∏–≤–∞—é —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Ollama...", style="blue")

            # URL —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Ollama –¥–ª—è Windows
            installer_url = "https://ollama.ai/download/OllamaSetup.exe"

            with tempfile.NamedTemporaryFile(suffix=".exe", delete=False) as tmp_file:
                urllib.request.urlretrieve(installer_url, tmp_file.name)
                installer_path = tmp_file.name

            console.print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫...", style="blue")
            console.print("üí° –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –æ–∫–Ω–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞", style="yellow")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            result = subprocess.run([installer_path], timeout=600)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(installer_path)
            except:
                pass

            if result.returncode == 0:
                console.print("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", style="green")
                console.print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...", style="yellow")
                time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                return True

        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {e}", style="red")

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        console.print(Panel(
            "üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é:\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: https://ollama.ai\n"
            "2. –°–∫–∞—á–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è Windows\n"
            "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫\n"
            "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ offline-ai\n\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:\n"
            "winget install Ollama.Ollama",
            title="–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama",
            style="blue"
        ))
        return False

    def install_ollama_linux_mac(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –Ω–∞ Linux/Mac"""
        console.print("üì¶ –ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...", style="blue")

        try:
            console.print("üì• –°–∫–∞—á–∏–≤–∞—é –∏ –∑–∞–ø—É—Å–∫–∞—é —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç...", style="blue")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run([
                "curl", "-fsSL", "https://ollama.ai/install.sh"
            ], capture_output=True, text=True, timeout=60)

            if result.returncode == 0:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ sh
                install_result = subprocess.run([
                    "sh", "-c", result.stdout
                ], timeout=300)

                if install_result.returncode == 0:
                    console.print("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", style="green")
                    console.print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...", style="yellow")
                    time.sleep(5)
                    return True

        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", style="red")

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        system_name = "Linux" if platform.system() == "Linux" else "macOS"
        console.print(Panel(
            f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é –Ω–∞ {system_name}:\n\n"
            f"–°–ø–æ—Å–æ–± 1 - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç:\n"
            f"curl -fsSL https://ollama.ai/install.sh | sh\n\n"
            f"–°–ø–æ—Å–æ–± 2 - –°–∫–∞—á–∞—Ç—å —Å —Å–∞–π—Ç–∞:\n"
            f"https://ollama.ai\n\n"
            f"–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve",
            title=f"–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama ({system_name})",
            style="blue"
        ))
        return False

    def start_ollama(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama"""
        if self.is_ollama_running():
            return True

        console.print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Ollama...", style="yellow")

        try:
            if platform.system() == "Windows":
                subprocess.Popen(["ollama", "serve"],
                               creationflags=subprocess.CREATE_NO_WINDOW)
            else:
                subprocess.Popen(["ollama", "serve"],
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL)

            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            for i in range(15):
                time.sleep(1)
                if self.is_ollama_running():
                    console.print("‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω!", style="green")
                    return True
                console.print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞... ({i+1}/15)", style="yellow")

            console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama", style="red")
            return False

        except FileNotFoundError:
            console.print("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω", style="red")

            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            system = platform.system()
            if Confirm.ask("ü§ñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Ollama –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?"):
                success = False

                if system == "Windows":
                    success = self.install_ollama_windows()
                elif system in ["Linux", "Darwin"]:  # Darwin = macOS
                    success = self.install_ollama_linux_mac()

                if success:
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                    console.print("üîÑ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", style="blue")
                    time.sleep(5)
                    return self.start_ollama()
                else:
                    console.print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å", style="red")

            console.print(Panel(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Ollama.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama –≤—Ä—É—á–Ω—É—é:\n"
                "‚Ä¢ Windows/Mac: https://ollama.ai\n"
                "‚Ä¢ Linux: curl -fsSL https://ollama.ai/install.sh | sh\n\n"
                "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve",
                title="–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
                style="red"
            ))
            return False
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: {e}", style="red")
            return False
    
    def list_models(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=self.timeout)
            if response.status_code == 200:
                data = response.json()
                return [model["name"] for model in data.get("models", [])]
            return []
        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}", style="red")
            return []
    
    def pull_model(self, model_name: str, show_progress: bool = True) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        if not show_progress:
            console.print(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å {model_name}...", style="blue")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –º–æ–¥–µ–ª–∏
            model_info = self.get_model_info(model_name)

            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                DownloadColumn(),
                TransferSpeedColumn(),
                console=console
            ) as progress:

                if show_progress:
                    task = progress.add_task(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ {model_name}", total=100)
                else:
                    task = progress.add_task(f"–ó–∞–≥—Ä—É–∑–∫–∞ {model_name}...", total=None)

                response = requests.post(
                    f"{self.base_url}/api/pull",
                    json={"name": model_name},
                    stream=True,
                    timeout=600  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                )

                total_size = 0
                downloaded = 0

                for line in response.iter_lines():
                    if line:
                        try:
                            data = json.loads(line)
                            status = data.get("status", "")

                            if "total" in data and "completed" in data:
                                total_size = data["total"]
                                downloaded = data["completed"]

                                if total_size > 0:
                                    percent = (downloaded / total_size) * 100
                                    progress.update(task, completed=percent,
                                                  description=f"üì• {model_name}: {status}")
                            else:
                                progress.update(task, description=f"üì• {model_name}: {status}")

                            if data.get("status") == "success":
                                progress.update(task, completed=100,
                                              description=f"‚úÖ {model_name}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ!")
                                break

                        except json.JSONDecodeError:
                            continue

            console.print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", style="green")
            return True

        except Exception as e:
            console.print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}", style="red")
            return False

    def get_model_info(self, model_name: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        recommended_models = config.get("models.recommended", [])
        for model_info in recommended_models:
            if isinstance(model_info, dict) and model_info.get("name") == model_name:
                return model_info
        return {"name": model_name, "size": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "description": ""}
    
    def ensure_model(self, model_name: Optional[str] = None) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞"""
        model_name = model_name or self.model
        models = self.list_models()
        
        if model_name in models:
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
        console.print(f"üîç –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞—é...", style="yellow")
        return self.pull_model(model_name)
    
    def chat(self, message: str, model_name: Optional[str] = None, context: Optional[list] = None) -> Generator[str, None, None]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Ç–æ–∫–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        model_name = model_name or self.model

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context and len(context) > 0:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                max_context = config.get("ui.max_context_messages", 10)
                recent_context = context[-max_context:] if len(context) > max_context else context

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                prompt_parts = []
                for entry in recent_context:
                    prompt_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entry['user']}")
                    prompt_parts.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {entry['ai']}")

                prompt_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
                prompt_parts.append("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:")

                full_prompt = "\n".join(prompt_parts)
            else:
                full_prompt = message

            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": model_name,
                    "prompt": full_prompt,
                    "stream": True,
                    "options": {
                        "temperature": 0.7,
                        "top_p": 0.9,
                        "top_k": 40
                    }
                },
                stream=True,
                timeout=self.timeout
            )

            for line in response.iter_lines():
                if line:
                    try:
                        data = json.loads(line)
                        if "response" in data:
                            yield data["response"]
                        if data.get("done", False):
                            break
                    except json.JSONDecodeError:
                        continue

        except Exception as e:
            yield f"‚ùå –û—à–∏–±–∫–∞: {e}"

    def chat_with_messages(self, messages: list, model_name: Optional[str] = None) -> Generator[str, None, None]:
        """–ß–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        model_name = model_name or self.model

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            formatted_messages = []
            for msg in messages:
                if isinstance(msg, dict):
                    if 'user' in msg:
                        formatted_messages.append({"role": "user", "content": msg['user']})
                    if 'ai' in msg:
                        formatted_messages.append({"role": "assistant", "content": msg['ai']})
                elif isinstance(msg, str):
                    formatted_messages.append({"role": "user", "content": msg})

            response = requests.post(
                f"{self.base_url}/api/chat",
                json={
                    "model": model_name,
                    "messages": formatted_messages,
                    "stream": True,
                    "options": {
                        "temperature": 0.7,
                        "top_p": 0.9,
                        "top_k": 40
                    }
                },
                stream=True,
                timeout=self.timeout
            )

            for line in response.iter_lines():
                if line:
                    try:
                        data = json.loads(line)
                        if "message" in data and "content" in data["message"]:
                            yield data["message"]["content"]
                        if data.get("done", False):
                            break
                    except json.JSONDecodeError:
                        continue

        except Exception as e:
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
            yield from self.chat(messages[-1] if messages else "", model_name)
    
    def setup_recommended_model(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏"""
        recommended_models = config.get("models.recommended", [])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        console.print("üì¶ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:", style="blue")
        for i, model_info in enumerate(recommended_models, 1):
            if isinstance(model_info, dict):
                name = model_info["name"]
                size = model_info.get("size", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                desc = model_info.get("description", "")
                console.print(f"  {i}. {name} ({size}) - {desc}", style="white")
            else:
                console.print(f"  {i}. {model_info}", style="white")

        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ (—Å–∞–º—É—é –∫–æ–º–ø–∞–∫—Ç–Ω—É—é)
        demo_model = config.get("models.preferred_for_demo")
        if demo_model:
            console.print(f"üéØ –î–ª—è –¥–µ–º–æ-—ç–∫–∑–∞–º–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {demo_model}", style="yellow")
            console.print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥–µ–ª—å {demo_model}...", style="blue")
            if self.ensure_model(demo_model):
                config.set("ollama.model", demo_model)
                self.model = demo_model
                console.print(f"‚úÖ –ú–æ–¥–µ–ª—å {demo_model} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!", style="green")
                return True

        # –ï—Å–ª–∏ –¥–µ–º–æ-–º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–æ—à–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        for model_info in recommended_models:
            model_name = model_info["name"] if isinstance(model_info, dict) else model_info
            console.print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥–µ–ª—å {model_name}...", style="blue")
            if self.ensure_model(model_name):
                config.set("ollama.model", model_name)
                self.model = model_name
                console.print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!", style="green")
                return True

        console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –º–æ–¥–µ–ª—å", style="red")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
ollama_client = OllamaClient()
