describe_image_prompt = """
你的任务是从给定的图片中提取参数和字段。图片可能呈现为列表或表单的形式，你需要按不同形式进行相应的提取操作。
当图片为列表时：
 - 你需要提取列表的筛选条件作为参数，提取列表的表头作为字段。
当图片为表单时：
 - 你需要提取所有字段作为参数。
对于参数，你需要提取以下信息：
 - 参数名称：即参数的具体名称。
 - 参数类型：可能包括输入框、下拉选择、单项、多选。
 - 是否必填：根据参数名称后是否带有星号来判断，有星号则为必填，无星号则为非必填。

只要格式化后的结果，不要输出任何其它信息，移除参数或字段名称中的单位。

请在<参数>标签内列出参数信息，格式为：
参数名称|参数类型|是否必填

请在<字段>标签内列出字段信息，格式为：
[字段1, 字段2, ...]

    """

list_api_prompt_template = """
你需要参考给定的表结构、接口请求参数和接口响应字段，生成查询列表接口（分页）的代码，接口名称根据选择的实体类命名。

首先，请仔细阅读以下表结构（字段定义）：
<table_structure>
{{entity}}
</table_structure>

接着，查看以下接口请求参数：
<request_params>
| 参数名 | 参数类型 | 是否必填 |
| ---- | ---- | ---- |
{{param_prompt}}
</request_params>

然后，了解以下接口响应字段：
<response_fields>
{{result_prompt}}
</response_fields>

在编写代码时，请遵循以下基本要求：
1. 严格遵循项目已有代码风格和规范编写代码，确保代码的一致性和可读性。
2. 对前端传入的查询参数进行全面校验，包括但不限于格式、是否可空、长度等。对于简单的校验规则，在dto层使用注解进行校验；对于复杂的校验逻辑，在service层实现。
3. 根据提供的数据库表结构生成SQL查询语句，尽量避免在SQL语句中进行复杂的数据处理，数据处理操作应在service层完成，以提高代码的可维护性。
4. 使用MyBatis Plus框架进行数据库操作，对于复杂操作，通过mapper层的xml文件编写SQL语句实现。
5. 使用Lombok简化代码，减少样板代码的编写，提高开发效率。
6. 使用Swagger注解生成详细的API文档，方便后续的接口调用和维护。
7. 对于数据表中属于枚举类型的字段，创建对应的枚举值（可参考：UserExtendEducationEnum），涉及数据转换的操作在service层完成。
8. 使用请求参数创建dto对象，使用响应参数创建vo对象，确保vo对象和dto对象的字段按照要求进行格式化。对于dto对象中的Date类型字段，添加@JsonFormat注解，防止请求格式化错误。
9. 为所有的类和方法添加详细的注释，注释内容应包含作者（${author}）和时间（{{date}}），以方便后续的代码维护和理解。

同时，请遵守以下业务规则：
1. 参考项目示例，生成或更新 controller、service、dto、mapper、vo 对象，统一加合适的前缀，具体前缀根据接口实际情况确定。
2. 部分日期字段可能对应数据库中特定的字段，如填报日期可能对应某一表的 create_time 字段，具体对应关系根据接口确定。
3. 实现分页和排序功能（排序字段见查询条件参数说明）。
4. 对于一些特殊字段的处理规则，如免租期处理等，将根据具体接口情况进行设置。例如，SQL 查询中某一类型字段等于特定值时，对应另一字段有特定取值规则等。
"""
