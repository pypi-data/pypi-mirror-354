# kilopa/admin_server.py
from flask import Flask, render_template_string, request, jsonify
from flask_cors import CORS
import json
import os
import time
import hashlib
import webbrowser
import threading

app = Flask(__name__)
CORS(app)

payments = []
payments_file = "kilopa_payments.json"

def load_payments():
    global payments
    try:
        if os.path.exists(payments_file):
            with open(payments_file, 'r', encoding='utf-8') as f:
                payments = json.load(f)
    except:
        payments = []

def save_payments():
    try:
        with open(payments_file, 'w', encoding='utf-8') as f:
            json.dump(payments, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def find_payment(user_id, product_id):
    for payment in payments:
        if payment['userId'] == user_id and payment['productId'] == product_id:
            return payment
    return None

@app.route('/')
def admin_panel():
    return render_template_string(ADMIN_TEMPLATE)

@app.route('/pay')
def payment_page():
    user_id = request.args.get('userId', '')
    product = request.args.get('product', '')
    return render_template_string(PAYMENT_TEMPLATE, user_id=user_id, product=product)

@app.route('/api/payments')
def get_payments():
    load_payments()
    return jsonify(payments)

@app.route('/api/add-payment', methods=['POST'])
def add_payment():
    try:
        data = request.json
        existing = find_payment(data['userId'], data['productId'])
        if existing:
            return jsonify({'success': True, 'paymentId': existing['id']})
        
        payment = {
            'id': f"PAY_{int(time.time())}_{data['userId'][-4:]}",
            'userId': data['userId'],
            'productId': data['productId'],
            'amount': data.get('amount', 1500),
            'email': data.get('email', ''),
            'timestamp': time.time(),
            'confirmed': False,
            'blocked': False
        }
        
        payments.append(payment)
        save_payments()
        return jsonify({'success': True, 'paymentId': payment['id']})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/check-payment', methods=['POST'])
def check_payment():
    try:
        data = request.json
        load_payments()
        payment = find_payment(data.get('userId'), data.get('productId'))
        
        if not payment:
            return jsonify({'status': 'pending', 'message': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        if payment.get('blocked'):
            return jsonify({'status': 'blocked', 'message': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
        
        if payment.get('confirmed'):
            license_key = hashlib.sha256(f"{payment['userId']}-{time.time()}".encode()).hexdigest()[:32].upper()
            return jsonify({'status': 'paid', 'licenseKey': license_key, 'message': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'})
        
        return jsonify({'status': 'pending', 'message': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/api/confirm-payment', methods=['POST'])
def confirm_payment():
    try:
        payment_id = request.json.get('paymentId')
        load_payments()
        
        for payment in payments:
            if payment['id'] == payment_id:
                payment['confirmed'] = True
                payment['confirmedAt'] = time.time()
                save_payments()
                return jsonify({'success': True})
        
        return jsonify({'success': False, 'error': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

@app.route('/api/block-user', methods=['POST'])
def block_user():
    try:
        payment_id = request.json.get('paymentId')
        load_payments()
        
        for payment in payments:
            if payment['id'] == payment_id:
                payment['blocked'] = True
                payment['blockedAt'] = time.time()
                save_payments()
                return jsonify({'success': True})
        
        return jsonify({'success': False, 'error': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})

ADMIN_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>üõ°Ô∏è Kilopa Admin</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        .header { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            padding: 30px; 
            border-radius: 10px; 
            margin-bottom: 30px; 
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        }
        .stat-card.pending { background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%); }
        .stat-card.confirmed { background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); }
        .stat-card.blocked { background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%); }
        .payment { 
            border: 1px solid #e0e0e0; 
            margin: 15px 0; 
            padding: 20px; 
            border-radius: 10px; 
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .payment.confirmed { 
            background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c8 100%);
            border-color: #4CAF50;
        }
        .payment.blocked { 
            background: linear-gradient(135deg, #ffeaea 0%, #ffcaca 100%);
            border-color: #f44336;
        }
        .payment.pending { 
            background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
            border-color: #ff9800;
        }
        button { 
            padding: 10px 20px; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            margin: 5px;
            font-weight: bold;
            transition: all 0.3s;
        }
        .confirm-btn { 
            background: linear-gradient(135deg, #4caf50 0%, #45a049 100%); 
            color: white;
        }
        .confirm-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(76,175,80,0.4); }
        .block-btn { 
            background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%); 
            color: white;
        }
        .block-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(244,67,54,0.4); }
        .refresh-btn { 
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%); 
            color: white; 
            padding: 15px 30px;
            font-size: 16px;
        }
        .refresh-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(33,150,243,0.4); }
        .payment-id { font-weight: bold; color: #1976d2; }
        .status-badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        .status-confirmed { background: #4CAF50; color: white; }
        .status-pending { background: #ff9800; color: white; }
        .status-blocked { background: #f44336; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è Kilopa Admin Panel</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏ –∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏</p>
            <p style="font-size: 14px; opacity: 0.8;">–í–µ—Ä—Å–∏—è 1.1.0 ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
        </div>
        
        <div class="stats" id="stats">
            <div class="stat-card pending">
                <h3>‚è≥ –û–∂–∏–¥–∞—é—Ç</h3>
                <div style="font-size: 24px; font-weight: bold;" id="pending-count">0</div>
            </div>
            <div class="stat-card confirmed">
                <h3>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã</h3>
                <div style="font-size: 24px; font-weight: bold;" id="confirmed-count">0</div>
            </div>
            <div class="stat-card blocked">
                <h3>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</h3>
                <div style="font-size: 24px; font-weight: bold;" id="blocked-count">0</div>
            </div>
            <div class="stat-card">
                <h3>üí∞ –û–±—â–∞—è —Å—É–º–º–∞</h3>
                <div style="font-size: 24px; font-weight: bold;" id="total-amount">0‚ÇΩ</div>
            </div>
        </div>
        
        <div style="margin-bottom: 20px; text-align: center;">
            <button class="refresh-btn" onclick="loadPayments()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
        </div>
        
        <div id="payments">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...</div>
    </div>

    <script>
        function loadPayments() {
            fetch('/api/payments')
                .then(response => response.json())
                .then(data => {
                    displayPayments(data);
                    updateStats(data);
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    document.getElementById('payments').innerHTML = '<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
                });
        }

        function updateStats(payments) {
            const pending = payments.filter(p => !p.confirmed && !p.blocked).length;
            const confirmed = payments.filter(p => p.confirmed).length;
            const blocked = payments.filter(p => p.blocked).length;
            const totalAmount = payments.reduce((sum, p) => sum + (p.amount || 0), 0);
            
            document.getElementById('pending-count').textContent = pending;
            document.getElementById('confirmed-count').textContent = confirmed;
            document.getElementById('blocked-count').textContent = blocked;
            document.getElementById('total-amount').textContent = totalAmount + '‚ÇΩ';
        }

        function displayPayments(payments) {
            const container = document.getElementById('payments');
            
            if (payments.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666; font-style: italic;">–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>';
                return;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            payments.sort((a, b) => b.timestamp - a.timestamp);

            container.innerHTML = payments.map(payment => {
                const status = payment.blocked ? 'blocked' : (payment.confirmed ? 'confirmed' : 'pending');
                const statusText = payment.blocked ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : (payment.confirmed ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–û–∂–∏–¥–∞–µ—Ç');
                const date = new Date(payment.timestamp * 1000).toLocaleString('ru-RU');
                const statusBadge = `<span class="status-badge status-${status}">${statusText}</span>`;
                
                return `
                    <div class="payment ${status}">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                            <span class="payment-id">${payment.id}</span>
                            ${statusBadge}
                        </div>
                        <div style="margin-bottom: 15px;">
                            <strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${payment.userId}<br>
                            <strong>üì¶ –ü—Ä–æ–¥—É–∫—Ç:</strong> ${payment.productId}<br>
                            <strong>üí∞ –°—É–º–º–∞:</strong> ${payment.amount}‚ÇΩ<br>
                            <strong>üìß Email:</strong> ${payment.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}<br>
                            <strong>üìÖ –î–∞—Ç–∞:</strong> ${date}
                        </div>
                        <div>
                            <button class="confirm-btn" onclick="confirmPayment('${payment.id}')" ${payment.confirmed || payment.blocked ? 'disabled' : ''}>
                                ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
                            </button>
                            <button class="block-btn" onclick="blockUser('${payment.id}')" ${payment.blocked ? 'disabled' : ''}>
                                üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function confirmPayment(paymentId) {
            if (!confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É? –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ–ª–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é.')) return;
            
            fetch('/api/confirm-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadPayments();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + data.error);
                }
            });
        }

        function blockUser(paymentId) {
            if (!confirm('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) return;
            
            fetch('/api/block-user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadPayments();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + data.error);
                }
            });
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(loadPayments, 10000);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadPayments();
    </script>
</body>
</html>
'''

PAYMENT_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>üí≥ –û–ø–ª–∞—Ç–∞ Kilopa</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
            display: flex; 
            align-items: center; 
            justify-content: center;
            margin: 0;
            padding: 20px;
        }
        .container { 
            background: white; 
            border-radius: 20px; 
            max-width: 500px; 
            width: 100%; 
            padding: 40px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.3);
            text-align: center;
        }
        .logo {
            font-size: 48px;
            margin-bottom: 20px;
        }
        .price { 
            font-size: 48px; 
            font-weight: bold; 
            color: #4CAF50; 
            text-align: center; 
            margin: 30px 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .info-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }
        input { 
            width: 100%; 
            padding: 15px; 
            margin: 10px 0; 
            border: 2px solid #ddd; 
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input:focus {
            border-color: #667eea;
            outline: none;
        }
        .pay-button { 
            width: 100%; 
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); 
            color: white; 
            padding: 18px; 
            border: none; 
            border-radius: 10px; 
            font-size: 20px; 
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 20px;
        }
        .pay-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(76,175,80,0.4);
        }
        .features {
            text-align: left;
            margin: 20px 0;
        }
        .feature {
            margin: 10px 0;
            color: #555;
        }
        .check-button {
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üõ°Ô∏è</div>
        <h1>–ü–æ–∫—É–ø–∫–∞ Kilopa Protection</h1>
        
        <div class="info-card">
            <p><strong>üì¶ –ü—Ä–æ–¥—É–∫—Ç:</strong> {{ product }}</p>
            <p><strong>üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {{ user_id }}</p>
        </div>
        
        <div class="price">1500‚ÇΩ</div>
        
        <div class="features">
            <h3>üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</h3>
            <div class="feature">‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
            <div class="feature">‚úÖ –°–Ω—è—Ç–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</div>
            <div class="feature">‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º</div>
            <div class="feature">‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
            <div class="feature">‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</div>
        </div>
        
        <form onsubmit="processPay(event)">
            <input type="email" placeholder="üìß –í–∞—à email" id="email" required>
            <input type="text" placeholder="üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (1234 5678 9012 3456)" pattern="[0-9\\s]{13,19}" required>
            <input type="text" placeholder="üìÖ MM/YY" pattern="[0-9]{2}/[0-9]{2}" required>
            <input type="text" placeholder="üîí CVV" pattern="[0-9]{3,4}" required>
            <button type="submit" class="pay-button">üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ</button>
        </form>
        
        <div style="margin-top: 30px;">
            <p style="color: #666;">–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
            <button class="check-button" onclick="checkPayment()">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</button>
        </div>
        
        <div style="margin-top: 20px; font-size: 12px; color: #888;">
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ‚Ä¢ SSL —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ‚Ä¢ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        </div>
    </div>

    <script>
        function processPay(event) {
            event.preventDefault();
            const email = document.getElementById('email').value;
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
            document.querySelector('.pay-button').innerHTML = '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...';
            document.querySelector('.pay-button').disabled = true;
            
            setTimeout(() => {
                fetch('/api/add-payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        userId: '{{ user_id }}',
                        productId: '{{ product }}',
                        amount: 1500,
                        email: email
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.querySelector('.pay-button').innerHTML = '‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                        document.querySelector('.pay-button').style.background = 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)';
                        alert('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\\n\\nüìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\nüîç –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏');
                    } else {
                        document.querySelector('.pay-button').innerHTML = '‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã';
                        document.querySelector('.pay-button').style.background = '#f44336';
                        alert('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                })
                .finally(() => {
                    setTimeout(() => {
                        document.querySelector('.pay-button').disabled = false;
                        document.querySelector('.pay-button').innerHTML = 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ';
                        document.querySelector('.pay-button').style.background = 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)';
                    }, 3000);
                });
            }, 2000);
        }
        
        function checkPayment() {
            fetch('/api/check-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: '{{ user_id }}',
                    productId: '{{ product }}'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'paid') {
                    alert('üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!\\n\\n‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\\nüîë –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\\n\\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏.');
                } else if (data.status === 'blocked') {
                    alert('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\\n\\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É');
                } else {
                    alert('‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\\n\\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É.\\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
                }
            })
            .catch(error => {
                alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
            });
        }
    </script>
</body>
</html>
'''

def start_server(port=8888):
    load_payments()
    print(f"üöÄ Kilopa Admin –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üåê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:{port}")
    threading.Timer(1, lambda: webbrowser.open(f"http://localhost:{port}")).start()
    app.run(host='localhost', port=port, debug=False)

def main():
    import sys
    port = int(sys.argv[1]) if len(sys.argv) > 1 else 8888
    start_server(port)

if __name__ == '__main__':
    start_server()