---
description: project overview
globs: 
alwaysApply: false
---
# 개발 워크플로우

이 프로젝트는 Gradio 커스텀 컴포넌트로서 Python 백엔드와 TypeScript/Svelte 프론트엔드를 모두 포함합니다.

## 프로젝트 빌드 및 배포

### Python 패키지 빌드
- [pyproject.toml](mdc:pyproject.toml)에서 패키지 설정 관리
- `hatchling` 빌드 시스템 사용
- 의존성: `gradio>=4.0,<6.0`

### 프론트엔드 개발
- [frontend/package.json](mdc:frontend/package.json)에서 의존성 관리
- Svelte 컴포넌트: [Index.svelte](mdc:frontend/Index.svelte)
- TypeScript 설정: [frontend/tsconfig.json](mdc:frontend/tsconfig.json)
- Gradio 설정: [frontend/gradio.config.js](mdc:frontend/gradio.config.js)

## 개발 시 주의사항

### 코드 스타일
- Python 코드는 PEP 8 준수
- TypeScript/Svelte는 프로젝트 ESLint 설정 따름
- 커밋 메시지는 영어로 작성 (규칙에 따라)

### 컴포넌트 개발
1. 백엔드 변경 시: [backend/gradio_pianoroll/pianoroll.py](mdc:backend/gradio_pianoroll/pianoroll.py) 수정
2. 프론트엔드 변경 시: [frontend/Index.svelte](mdc:frontend/Index.svelte) 수정
3. 타입 정의 업데이트: [backend/gradio_pianoroll/pianoroll.pyi](mdc:backend/gradio_pianoroll/pianoroll.pyi) 동기화

### 테스트 및 데모
- 데모 앱 실행: [demo/app.py](mdc:demo/app.py)
- HuggingFace Space 배포: [demo/space.py](mdc:demo/space.py)
- 의존성 확인: [demo/requirements.txt](mdc:demo/requirements.txt)

## 주요 라이브러리

### 백엔드
- `gradio`: 메인 프레임워크
- `numpy`: 수치 계산
- `librosa`: 오디오 분석 (선택적)

### 프론트엔드  
- `@gradio/*`: Gradio 컴포넌트 라이브러리
- `svelte`: UI 프레임워크
- `typescript`: 타입 시스템
