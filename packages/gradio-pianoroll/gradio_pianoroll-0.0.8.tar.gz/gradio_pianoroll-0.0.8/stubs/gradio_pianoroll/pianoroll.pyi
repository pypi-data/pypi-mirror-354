from .data_models import PianoRollData as PianoRollData, clean_piano_roll_data as clean_piano_roll_data, ensure_note_ids as ensure_note_ids, validate_and_warn as validate_and_warn
from .timing_utils import calculate_all_timing_data as calculate_all_timing_data, create_note_with_timing as create_note_with_timing, generate_note_id as generate_note_id, pixels_to_beats as pixels_to_beats, pixels_to_flicks as pixels_to_flicks, pixels_to_samples as pixels_to_samples, pixels_to_seconds as pixels_to_seconds, pixels_to_ticks as pixels_to_ticks
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Sequence
from gradio.components import Timer as Timer
from gradio.components.base import Component
from gradio.i18n import I18nData as I18nData

class PianoRoll(Component):
    EVENTS: Incomplete
    width: Incomplete
    height: Incomplete
    value: Incomplete
    audio_data: Incomplete
    curve_data: Incomplete
    segment_data: Incomplete
    use_backend_audio: Incomplete
    _attrs: Incomplete
    def __init__(self, value: dict | PianoRollData | None = None, *, audio_data: str | None = None, curve_data: dict | None = None, segment_data: list | None = None, use_backend_audio: bool = False, label: str | I18nData | None = None, every: Timer | float | None = None, inputs: Component | Sequence[Component] | set[Component] | None = None, show_label: bool | None = None, scale: int | None = None, min_width: int = 160, interactive: bool | None = None, visible: bool = True, elem_id: str | None = None, elem_classes: list[str] | str | None = None, render: bool = True, key: int | str | tuple[int | str, ...] | None = None, preserved_by_key: list[str] | str | None = 'value', width: int | None = 1000, height: int | None = 600) -> None: ...
    def preprocess(self, payload): ...
    def postprocess(self, value): ...
    def example_payload(self): ...
    def example_value(self): ...
    def api_info(self): ...
    def update_backend_data(self, audio_data: Incomplete | None = None, curve_data: Incomplete | None = None, segment_data: Incomplete | None = None, use_backend_audio: Incomplete | None = None) -> None: ...
    def set_audio_data(self, audio_data: str): ...
    def set_curve_data(self, curve_data: dict): ...
    def set_segment_data(self, segment_data: list): ...
    def enable_backend_audio(self, enable: bool = True): ...
