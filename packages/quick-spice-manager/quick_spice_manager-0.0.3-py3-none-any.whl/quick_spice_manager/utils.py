"""
Summarize the coverage of the metakernels for a given mission

.. warning::
    Due to a bug in planetary_coverage, these functions does not report the correct coverage for the last metakernels


Anyway use :py:meth:`jana.kernels_utils.coverage_info.details_coverage_from_metakernels2`
"""

import tempfile
from pathlib import Path

import pandas as pd
from planetary_coverage import ESA_MK, TourConfig


def as_human_readable(dataframe: pd.DataFrame, col_name: str) -> pd.Series:
    """Converts a column of a dataframe with times to a human-readable day of year format"""
    asdtime = dataframe[col_name].apply(pd.to_datetime)
    as_human = asdtime.array.strftime("%d %B %Y")
    return as_human


def details_coverage_from_metakernels(
    kernels_dir: str | Path = None, version: str = "latest", mission: str = "JUICE",
) -> pd.DataFrame:
    """
    Get the coverage of the metakernels for a given mission.
    Juice only actually for now.
    """

    JUICE_MK = ESA_MK[mission]
    if kernels_dir is None:
        kernels_dir = (
            Path(tempfile.tempdir)
            .joinpath("spice_kernels")
            .joinpath(mission)
            .as_posix()
        )

    if version == "latest":
        version = JUICE_MK.latest

    data = []
    for mk in JUICE_MK.mks:
        tc = TourConfig(
            mk=mk.replace(".tm", ""),
            kernels_dir=kernels_dir,
            download_kernels=True,
            version=version,
            spacecraft=mission,
        )

        data.append(
            {
                "metakernel": mk,
                "coverage_start": tc.coverage[0],
                "coverage_end": tc.coverage[1],
            },
        )

    tab = pd.DataFrame(data)

    tab["start_day"] = as_human_readable(tab, "coverage_start")
    tab["end_day"] = as_human_readable(tab, "coverage_end")
    tab["duration"] = tab["coverage_end"] - tab["coverage_start"]
    return tab


def print_coverage_details(table) -> None:
    """
    Print the coverage details of the table generated by :func:`details_coverage_from_metakernels`
    """
    for date, cremas in table.groupby("start_day"):
        print(f"{date}")
        for crema in cremas["metakernel"].to_numpy():
            print(f"   -> {crema}")
