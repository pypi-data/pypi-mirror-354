name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-build:
    name: Rust Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt
    
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check
    
    - name: Build project
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
    
    - name: Build tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run --verbose

  rust-unit-tests:
    name: Rust Unit Tests
    runs-on: ${{ matrix.os }}
    needs: rust-build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Run unit tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --lib --bins --verbose
      env:
        RUST_BACKTRACE: 1

  rust-integration-tests:
    name: Rust Integration Tests
    runs-on: ${{ matrix.os }}
    needs: rust-build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    
    - name: Build binary for integration tests
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --bin stalmarck_sat
    
    - name: Run integration tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --test integration_tests --verbose
      env:
        RUST_BACKTRACE: 1

  python-formatting:
    name: Python Formatting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Install formatting tools
      run: |
        source venv/bin/activate
        pip install black isort
    
    - name: Check Python formatting with black
      run: |
        source venv/bin/activate
        black --check --diff python/
    
    - name: Check import sorting with isort
      run: |
        source venv/bin/activate
        isort --check-only --diff python/

  python-linting:
    name: Python Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
    
    - name: Install linting tools
      run: |
        source venv/bin/activate
        pip install flake8 mypy
    
    - name: Run flake8
      run: |
        source venv/bin/activate
        flake8 python/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy
      run: |
        source venv/bin/activate
        mypy python/pystalmarck/ --ignore-missing-imports

  python-tests:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Create virtual environment
      run: |
        python -m venv venv
    
    - name: Activate virtual environment and install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install maturin pytest
    
    - name: Build and test Python package
      run: |
        source venv/bin/activate
        maturin develop
        cd python && python -m pytest tests/ -v
      env:
        RUST_BACKTRACE: 1

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [rust-unit-tests, rust-integration-tests, python-formatting, python-linting, python-tests]
    if: always()

    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.rust-unit-tests.result }}" == "success" && \
              "${{ needs.rust-integration-tests.result }}" == "success" && \
              "${{ needs.python-formatting.result }}" == "success" && \
              "${{ needs.python-linting.result }}" == "success" && \
              "${{ needs.python-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          exit 0
        else
          echo "❌ Some tests failed:"
          echo "  Rust unit tests: ${{ needs.rust-unit-tests.result }}"
          echo "  Rust integration tests: ${{ needs.rust-integration-tests.result }}"
          echo "  Python formatting: ${{ needs.python-formatting.result }}"
          echo "  Python linting: ${{ needs.python-linting.result }}"
          echo "  Python tests: ${{ needs.python-tests.result }}"
          exit 1
        fi