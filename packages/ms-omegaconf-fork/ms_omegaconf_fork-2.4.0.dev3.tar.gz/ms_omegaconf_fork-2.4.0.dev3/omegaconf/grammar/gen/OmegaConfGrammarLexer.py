# Generated from /home/runner/work/omegaconf/omegaconf/omegaconf/grammar/OmegaConfGrammarLexer.g4 by ANTLR 4.11.1
from omegaconf.vendor.antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,485,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,
        30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,
        37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,
        43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,
        50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,2,3,2,119,
        8,2,1,2,5,2,122,8,2,10,2,12,2,125,9,2,3,2,127,8,2,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,5,5,138,8,5,10,5,12,5,141,9,5,1,5,1,5,1,6,
        5,6,146,8,6,10,6,12,6,149,9,6,1,6,1,6,1,6,1,6,1,7,4,7,156,8,7,11,
        7,12,7,157,1,8,4,8,161,8,8,11,8,12,8,162,1,8,1,8,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,3,10,175,8,10,1,10,1,10,1,11,1,11,3,11,181,8,
        11,1,11,1,11,1,12,3,12,186,8,12,1,12,1,12,1,12,1,12,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,15,3,15,201,8,15,1,15,1,15,3,15,205,
        8,15,1,16,1,16,3,16,209,8,16,1,17,3,17,212,8,17,1,17,1,17,1,18,3,
        18,217,8,18,1,18,1,18,3,18,221,8,18,1,19,1,19,1,19,1,19,3,19,227,
        8,19,1,19,1,19,1,19,3,19,232,8,19,1,19,5,19,235,8,19,10,19,12,19,
        238,9,19,3,19,240,8,19,1,20,1,20,3,20,244,8,20,1,20,1,20,3,20,248,
        8,20,1,20,1,20,3,20,252,8,20,1,20,5,20,255,8,20,10,20,12,20,258,
        9,20,1,21,3,21,261,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        3,21,271,8,21,1,22,3,22,274,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,3,23,287,8,23,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,26,1,26,3,26,298,8,26,1,26,1,26,1,26,5,26,303,8,26,10,
        26,12,26,306,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,4,27,331,8,27,11,27,12,27,332,1,28,4,28,336,8,28,11,28,12,28,
        337,1,29,1,29,3,29,342,8,29,1,29,1,29,1,29,1,30,3,30,348,8,30,1,
        30,1,30,3,30,352,8,30,1,30,1,30,1,30,1,31,3,31,358,8,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,
        1,35,1,35,1,35,1,36,4,36,379,8,36,11,36,12,36,380,1,37,1,37,1,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,39,5,39,393,8,39,10,39,12,39,396,
        9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,5,41,407,8,41,
        10,41,12,41,410,9,41,1,41,1,41,1,41,1,41,1,41,1,42,4,42,418,8,42,
        11,42,12,42,419,1,43,4,43,423,8,43,11,43,12,43,424,1,43,1,43,1,44,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,47,5,47,444,8,47,10,47,12,47,447,9,47,1,47,1,47,1,47,1,47,1,48,
        1,48,1,48,1,48,1,49,5,49,458,8,49,10,49,12,49,461,9,49,1,49,1,49,
        1,49,1,49,1,49,1,50,4,50,469,8,50,11,50,12,50,470,1,50,1,50,1,51,
        4,51,476,8,51,11,51,12,51,477,1,51,1,51,1,52,1,52,1,52,1,52,0,0,
        53,5,0,7,0,9,0,11,0,13,0,15,1,17,2,19,3,21,0,23,26,25,4,27,5,29,
        6,31,7,33,8,35,9,37,10,39,11,41,12,43,0,45,0,47,13,49,14,51,15,53,
        16,55,17,57,18,59,19,61,20,63,0,65,0,67,21,69,22,71,27,73,28,75,
        0,77,23,79,0,81,24,83,0,85,0,87,0,89,25,91,0,93,0,95,0,97,0,99,0,
        101,0,103,0,105,0,107,0,109,0,5,0,1,2,3,4,24,2,0,65,90,97,122,1,
        0,48,57,1,0,49,57,1,0,36,36,2,0,36,36,92,92,2,0,69,69,101,101,2,
        0,43,43,45,45,2,0,73,73,105,105,2,0,78,78,110,110,2,0,70,70,102,
        102,2,0,65,65,97,97,2,0,84,84,116,116,2,0,82,82,114,114,2,0,85,85,
        117,117,2,0,76,76,108,108,2,0,83,83,115,115,6,0,36,37,42,43,45,47,
        63,64,92,92,124,124,2,0,45,45,95,95,2,0,9,9,32,32,9,0,9,9,32,32,
        34,34,39,41,46,46,58,58,91,93,123,123,125,125,2,0,36,36,39,39,3,
        0,36,36,39,39,92,92,2,0,34,34,36,36,3,0,34,34,36,36,92,92,534,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,1,29,1,0,0,0,1,31,1,0,0,0,1,
        33,1,0,0,0,1,35,1,0,0,0,1,37,1,0,0,0,1,39,1,0,0,0,1,41,1,0,0,0,1,
        47,1,0,0,0,1,49,1,0,0,0,1,51,1,0,0,0,1,53,1,0,0,0,1,55,1,0,0,0,1,
        57,1,0,0,0,1,59,1,0,0,0,1,61,1,0,0,0,2,63,1,0,0,0,2,65,1,0,0,0,2,
        67,1,0,0,0,2,69,1,0,0,0,2,71,1,0,0,0,2,73,1,0,0,0,2,75,1,0,0,0,2,
        77,1,0,0,0,3,79,1,0,0,0,3,81,1,0,0,0,3,83,1,0,0,0,3,85,1,0,0,0,3,
        87,1,0,0,0,3,89,1,0,0,0,3,91,1,0,0,0,3,93,1,0,0,0,4,95,1,0,0,0,4,
        97,1,0,0,0,4,99,1,0,0,0,4,101,1,0,0,0,4,103,1,0,0,0,4,105,1,0,0,
        0,4,107,1,0,0,0,4,109,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,126,
        1,0,0,0,11,128,1,0,0,0,13,131,1,0,0,0,15,139,1,0,0,0,17,147,1,0,
        0,0,19,155,1,0,0,0,21,160,1,0,0,0,23,166,1,0,0,0,25,170,1,0,0,0,
        27,178,1,0,0,0,29,185,1,0,0,0,31,191,1,0,0,0,33,195,1,0,0,0,35,200,
        1,0,0,0,37,206,1,0,0,0,39,211,1,0,0,0,41,216,1,0,0,0,43,239,1,0,
        0,0,45,243,1,0,0,0,47,260,1,0,0,0,49,273,1,0,0,0,51,286,1,0,0,0,
        53,288,1,0,0,0,55,293,1,0,0,0,57,297,1,0,0,0,59,330,1,0,0,0,61,335,
        1,0,0,0,63,339,1,0,0,0,65,347,1,0,0,0,67,357,1,0,0,0,69,363,1,0,
        0,0,71,365,1,0,0,0,73,369,1,0,0,0,75,373,1,0,0,0,77,378,1,0,0,0,
        79,382,1,0,0,0,81,387,1,0,0,0,83,394,1,0,0,0,85,401,1,0,0,0,87,408,
        1,0,0,0,89,417,1,0,0,0,91,422,1,0,0,0,93,428,1,0,0,0,95,432,1,0,
        0,0,97,437,1,0,0,0,99,445,1,0,0,0,101,452,1,0,0,0,103,459,1,0,0,
        0,105,468,1,0,0,0,107,475,1,0,0,0,109,481,1,0,0,0,111,112,7,0,0,
        0,112,6,1,0,0,0,113,114,7,1,0,0,114,8,1,0,0,0,115,127,5,48,0,0,116,
        123,7,2,0,0,117,119,5,95,0,0,118,117,1,0,0,0,118,119,1,0,0,0,119,
        120,1,0,0,0,120,122,3,7,1,0,121,118,1,0,0,0,122,125,1,0,0,0,123,
        121,1,0,0,0,123,124,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,126,
        115,1,0,0,0,126,116,1,0,0,0,127,10,1,0,0,0,128,129,5,92,0,0,129,
        130,5,92,0,0,130,12,1,0,0,0,131,132,3,25,10,0,132,133,1,0,0,0,133,
        134,6,4,0,0,134,135,6,4,1,0,135,14,1,0,0,0,136,138,8,3,0,0,137,136,
        1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,
        1,0,0,0,141,139,1,0,0,0,142,143,8,4,0,0,143,16,1,0,0,0,144,146,3,
        11,3,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,
        0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,5,92,0,0,151,152,5,
        36,0,0,152,153,5,123,0,0,153,18,1,0,0,0,154,156,3,11,3,0,155,154,
        1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,20,1,
        0,0,0,159,161,5,92,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,
        0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,8,2,0,165,22,1,0,
        0,0,166,167,5,36,0,0,167,168,1,0,0,0,168,169,6,9,2,0,169,24,1,0,
        0,0,170,171,5,36,0,0,171,172,5,123,0,0,172,174,1,0,0,0,173,175,3,
        61,28,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,
        6,10,1,0,177,26,1,0,0,0,178,180,5,123,0,0,179,181,3,61,28,0,180,
        179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,183,6,11,3,0,183,
        28,1,0,0,0,184,186,3,61,28,0,185,184,1,0,0,0,185,186,1,0,0,0,186,
        187,1,0,0,0,187,188,5,125,0,0,188,189,1,0,0,0,189,190,6,12,4,0,190,
        30,1,0,0,0,191,192,5,39,0,0,192,193,1,0,0,0,193,194,6,13,5,0,194,
        32,1,0,0,0,195,196,5,34,0,0,196,197,1,0,0,0,197,198,6,14,6,0,198,
        34,1,0,0,0,199,201,3,61,28,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
        202,1,0,0,0,202,204,5,44,0,0,203,205,3,61,28,0,204,203,1,0,0,0,204,
        205,1,0,0,0,205,36,1,0,0,0,206,208,5,91,0,0,207,209,3,61,28,0,208,
        207,1,0,0,0,208,209,1,0,0,0,209,38,1,0,0,0,210,212,3,61,28,0,211,
        210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,5,93,0,0,214,
        40,1,0,0,0,215,217,3,61,28,0,216,215,1,0,0,0,216,217,1,0,0,0,217,
        218,1,0,0,0,218,220,5,58,0,0,219,221,3,61,28,0,220,219,1,0,0,0,220,
        221,1,0,0,0,221,42,1,0,0,0,222,223,3,9,2,0,223,224,5,46,0,0,224,
        240,1,0,0,0,225,227,3,9,2,0,226,225,1,0,0,0,226,227,1,0,0,0,227,
        228,1,0,0,0,228,229,5,46,0,0,229,236,3,7,1,0,230,232,5,95,0,0,231,
        230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,235,3,7,1,0,234,
        231,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
        240,1,0,0,0,238,236,1,0,0,0,239,222,1,0,0,0,239,226,1,0,0,0,240,
        44,1,0,0,0,241,244,3,9,2,0,242,244,3,43,19,0,243,241,1,0,0,0,243,
        242,1,0,0,0,244,245,1,0,0,0,245,247,7,5,0,0,246,248,7,6,0,0,247,
        246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,256,3,7,1,0,250,
        252,5,95,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,
        255,3,7,1,0,254,251,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,
        257,1,0,0,0,257,46,1,0,0,0,258,256,1,0,0,0,259,261,7,6,0,0,260,259,
        1,0,0,0,260,261,1,0,0,0,261,270,1,0,0,0,262,271,3,43,19,0,263,271,
        3,45,20,0,264,265,7,7,0,0,265,266,7,8,0,0,266,271,7,9,0,0,267,268,
        7,8,0,0,268,269,7,10,0,0,269,271,7,8,0,0,270,262,1,0,0,0,270,263,
        1,0,0,0,270,264,1,0,0,0,270,267,1,0,0,0,271,48,1,0,0,0,272,274,7,
        6,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,3,
        9,2,0,276,50,1,0,0,0,277,278,7,11,0,0,278,279,7,12,0,0,279,280,7,
        13,0,0,280,287,7,5,0,0,281,282,7,9,0,0,282,283,7,10,0,0,283,284,
        7,14,0,0,284,285,7,15,0,0,285,287,7,5,0,0,286,277,1,0,0,0,286,281,
        1,0,0,0,287,52,1,0,0,0,288,289,7,8,0,0,289,290,7,13,0,0,290,291,
        7,14,0,0,291,292,7,14,0,0,292,54,1,0,0,0,293,294,7,16,0,0,294,56,
        1,0,0,0,295,298,3,5,0,0,296,298,5,95,0,0,297,295,1,0,0,0,297,296,
        1,0,0,0,298,304,1,0,0,0,299,303,3,5,0,0,300,303,3,7,1,0,301,303,
        7,17,0,0,302,299,1,0,0,0,302,300,1,0,0,0,302,301,1,0,0,0,303,306,
        1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,58,1,0,0,0,306,304,1,
        0,0,0,307,331,3,11,3,0,308,309,5,92,0,0,309,331,5,40,0,0,310,311,
        5,92,0,0,311,331,5,41,0,0,312,313,5,92,0,0,313,331,5,91,0,0,314,
        315,5,92,0,0,315,331,5,93,0,0,316,317,5,92,0,0,317,331,5,123,0,0,
        318,319,5,92,0,0,319,331,5,125,0,0,320,321,5,92,0,0,321,331,5,58,
        0,0,322,323,5,92,0,0,323,331,5,61,0,0,324,325,5,92,0,0,325,331,5,
        44,0,0,326,327,5,92,0,0,327,331,5,32,0,0,328,329,5,92,0,0,329,331,
        5,9,0,0,330,307,1,0,0,0,330,308,1,0,0,0,330,310,1,0,0,0,330,312,
        1,0,0,0,330,314,1,0,0,0,330,316,1,0,0,0,330,318,1,0,0,0,330,320,
        1,0,0,0,330,322,1,0,0,0,330,324,1,0,0,0,330,326,1,0,0,0,330,328,
        1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,60,1,
        0,0,0,334,336,7,18,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,
        0,0,0,337,338,1,0,0,0,338,62,1,0,0,0,339,341,3,25,10,0,340,342,3,
        61,28,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,344,
        6,29,0,0,344,345,6,29,1,0,345,64,1,0,0,0,346,348,3,61,28,0,347,346,
        1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,351,5,58,0,0,350,352,
        3,61,28,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,354,
        6,30,7,0,354,355,6,30,8,0,355,66,1,0,0,0,356,358,3,61,28,0,357,356,
        1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,125,0,0,360,361,
        1,0,0,0,361,362,6,31,4,0,362,68,1,0,0,0,363,364,5,46,0,0,364,70,
        1,0,0,0,365,366,5,91,0,0,366,367,1,0,0,0,367,368,6,33,9,0,368,72,
        1,0,0,0,369,370,5,93,0,0,370,371,1,0,0,0,371,372,6,34,10,0,372,74,
        1,0,0,0,373,374,3,57,26,0,374,375,1,0,0,0,375,376,6,35,11,0,376,
        76,1,0,0,0,377,379,8,19,0,0,378,377,1,0,0,0,379,380,1,0,0,0,380,
        378,1,0,0,0,380,381,1,0,0,0,381,78,1,0,0,0,382,383,3,25,10,0,383,
        384,1,0,0,0,384,385,6,37,0,0,385,386,6,37,1,0,386,80,1,0,0,0,387,
        388,5,39,0,0,388,389,1,0,0,0,389,390,6,38,4,0,390,82,1,0,0,0,391,
        393,8,20,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,398,8,21,0,0,398,
        399,1,0,0,0,399,400,6,39,2,0,400,84,1,0,0,0,401,402,3,17,6,0,402,
        403,1,0,0,0,403,404,6,40,12,0,404,86,1,0,0,0,405,407,3,11,3,0,406,
        405,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,
        411,1,0,0,0,410,408,1,0,0,0,411,412,5,92,0,0,412,413,5,39,0,0,413,
        414,1,0,0,0,414,415,6,41,13,0,415,88,1,0,0,0,416,418,3,11,3,0,417,
        416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,
        90,1,0,0,0,421,423,5,92,0,0,422,421,1,0,0,0,423,424,1,0,0,0,424,
        422,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,6,43,2,0,427,
        92,1,0,0,0,428,429,5,36,0,0,429,430,1,0,0,0,430,431,6,44,2,0,431,
        94,1,0,0,0,432,433,3,25,10,0,433,434,1,0,0,0,434,435,6,45,0,0,435,
        436,6,45,1,0,436,96,1,0,0,0,437,438,5,34,0,0,438,439,1,0,0,0,439,
        440,6,46,14,0,440,441,6,46,4,0,441,98,1,0,0,0,442,444,8,22,0,0,443,
        442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,
        448,1,0,0,0,447,445,1,0,0,0,448,449,8,23,0,0,449,450,1,0,0,0,450,
        451,6,47,2,0,451,100,1,0,0,0,452,453,3,17,6,0,453,454,1,0,0,0,454,
        455,6,48,12,0,455,102,1,0,0,0,456,458,3,11,3,0,457,456,1,0,0,0,458,
        461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,
        459,1,0,0,0,462,463,5,92,0,0,463,464,5,34,0,0,464,465,1,0,0,0,465,
        466,6,49,13,0,466,104,1,0,0,0,467,469,3,11,3,0,468,467,1,0,0,0,469,
        470,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,
        473,6,50,15,0,473,106,1,0,0,0,474,476,5,92,0,0,475,474,1,0,0,0,476,
        477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,
        480,6,51,2,0,480,108,1,0,0,0,481,482,5,36,0,0,482,483,1,0,0,0,483,
        484,6,52,2,0,484,110,1,0,0,0,52,0,1,2,3,4,118,123,126,139,147,157,
        162,174,180,185,200,204,208,211,216,220,226,231,236,239,243,247,
        251,256,260,270,273,286,297,302,304,330,332,337,341,347,351,357,
        380,394,408,419,424,445,459,470,477,16,7,4,0,5,2,0,7,1,0,5,1,0,4,
        0,0,5,3,0,5,4,0,7,12,0,2,1,0,7,10,0,7,11,0,7,18,0,7,2,0,7,19,0,7,
        24,0,7,25,0
    ]

class OmegaConfGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    VALUE_MODE = 1
    INTERPOLATION_MODE = 2
    QUOTED_SINGLE_MODE = 3
    QUOTED_DOUBLE_MODE = 4

    ANY_STR = 1
    ESC_INTER = 2
    TOP_ESC = 3
    INTER_OPEN = 4
    BRACE_OPEN = 5
    BRACE_CLOSE = 6
    QUOTE_OPEN_SINGLE = 7
    QUOTE_OPEN_DOUBLE = 8
    COMMA = 9
    BRACKET_OPEN = 10
    BRACKET_CLOSE = 11
    COLON = 12
    FLOAT = 13
    INT = 14
    BOOL = 15
    NULL = 16
    UNQUOTED_CHAR = 17
    ID = 18
    ESC = 19
    WS = 20
    INTER_CLOSE = 21
    DOT = 22
    INTER_KEY = 23
    MATCHING_QUOTE_CLOSE = 24
    QUOTED_ESC = 25
    DOLLAR = 26
    INTER_BRACKET_OPEN = 27
    INTER_BRACKET_CLOSE = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "VALUE_MODE", "INTERPOLATION_MODE", "QUOTED_SINGLE_MODE", 
                  "QUOTED_DOUBLE_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ANY_STR", "ESC_INTER", "TOP_ESC", "INTER_OPEN", "BRACE_OPEN", 
            "BRACE_CLOSE", "QUOTE_OPEN_SINGLE", "QUOTE_OPEN_DOUBLE", "COMMA", 
            "BRACKET_OPEN", "BRACKET_CLOSE", "COLON", "FLOAT", "INT", "BOOL", 
            "NULL", "UNQUOTED_CHAR", "ID", "ESC", "WS", "INTER_CLOSE", "DOT", 
            "INTER_KEY", "MATCHING_QUOTE_CLOSE", "QUOTED_ESC", "DOLLAR", 
            "INTER_BRACKET_OPEN", "INTER_BRACKET_CLOSE" ]

    ruleNames = [ "CHAR", "DIGIT", "INT_UNSIGNED", "ESC_BACKSLASH", "TOP_INTER_OPEN", 
                  "ANY_STR", "ESC_INTER", "TOP_ESC", "BACKSLASHES", "DOLLAR", 
                  "INTER_OPEN", "BRACE_OPEN", "BRACE_CLOSE", "QUOTE_OPEN_SINGLE", 
                  "QUOTE_OPEN_DOUBLE", "COMMA", "BRACKET_OPEN", "BRACKET_CLOSE", 
                  "COLON", "POINT_FLOAT", "EXPONENT_FLOAT", "FLOAT", "INT", 
                  "BOOL", "NULL", "UNQUOTED_CHAR", "ID", "ESC", "WS", "NESTED_INTER_OPEN", 
                  "INTER_COLON", "INTER_CLOSE", "DOT", "INTER_BRACKET_OPEN", 
                  "INTER_BRACKET_CLOSE", "INTER_ID", "INTER_KEY", "QSINGLE_INTER_OPEN", 
                  "MATCHING_QUOTE_CLOSE", "QSINGLE_STR", "QSINGLE_ESC_INTER", 
                  "QSINGLE_ESC_QUOTE", "QUOTED_ESC", "QSINGLE_BACKSLASHES", 
                  "QSINGLE_DOLLAR", "QDOUBLE_INTER_OPEN", "QDOUBLE_CLOSE", 
                  "QDOUBLE_STR", "QDOUBLE_ESC_INTER", "QDOUBLE_ESC_QUOTE", 
                  "QDOUBLE_ESC", "QDOUBLE_BACKSLASHES", "QDOUBLE_DOLLAR" ]

    grammarFileName = "OmegaConfGrammarLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


