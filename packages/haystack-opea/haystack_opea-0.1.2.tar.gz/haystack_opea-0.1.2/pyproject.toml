[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
requires-python = ">=3.9"
dependencies = ["haystack-ai>=2,<3", "h11 (>=0.16.0,<0.17.0)"]
name = "haystack-opea"
version = "0.1.2"
description = "An integration package connecting OPEA and Haystack"
authors = [
  { name = "Daniel Fleischer", email = "daniel.fleischer@intel.com" },
  { name = "OPEA-Project" },
]
readme = "README.md"
license = "Apache-2.0"

[project.urls]
Homepage = "https://github.com/deepset-ai/haystack/"
Repository = "https://github.com/opea-project/Haystack-OPEA"

[tool.mypy]
disallow_untyped_defs = "True"


[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
addopts = "--strict-config --durations=10"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
requests-mock = "^1.12.1"

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint.dependencies]
ruff = "^0.5"

[tool.poetry.group.typing.dependencies]
mypy = "^1.10"

[tool.isort]
profile = "black"
line_length = 120
extend_skip_glob = ["**/__init__.py"]


[tool.black]
line-length = 120


[tool.codespell]
skip = '*.po,*.js,*.map,*.js.map,*.css.map,*.json,*.sql'
count = ''
quiet-level = 3
ignore-words = ".github/code_spell_ignore.txt"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = [
  "E402", # Module level import not at top of file
  "E501", # Line too long (121 > 120 characters)
  "E721", # Do not compare types, use isinstance()
  "E722", # Do not use bare except
  "E731", # Do not assign a lambda expression, use a def
  "E741", # Do not use variables named ‘l’, ‘O’, or ‘I’
  "F401", # {name} imported but unused; Ignore F401 because ruff can't fix conditional imports
  "F403", # from {name} import * used; unable to detect undefined names
  "F405", # {name} may be undefined, or defined from star imports
  "F841", # Local variable is assigned to but never used{name}
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

ignore-init-module-imports = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
