import asyncio
import json
import os
from google.oauth2.service_account import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
import logging
import traceback

class GoogleDocsProcessor:
    def __init__(self, credentials_info=None, credentials_file=None, max_concurrent_tasks=10, logger=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Docs.

        :param credentials_info: JSON-—Å–ª–æ–≤–∞—Ä—å —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
        :param credentials_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google API.
        :param max_concurrent_tasks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
        :param logger: –õ–æ–≥–≥–µ—Ä. –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä.
        """
        self.credentials_info = credentials_info
        self.credentials_file = credentials_file
        self.max_concurrent_tasks = max_concurrent_tasks

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logger or logging.getLogger(__name__)
        if logger is None:
            logging.basicConfig(level=logging.INFO)
            self.logger.addHandler(logging.StreamHandler())

        self.logger.info("‚úÖ GoogleDocsProcessor —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _get_fresh_credentials(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        scopes = ["https://www.googleapis.com/auth/documents.readonly"]

        try:
            if self.credentials_info:
                self.logger.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JSON-—Å–ª–æ–≤–∞—Ä—å.")
                creds = Credentials.from_service_account_info(self.credentials_info, scopes=scopes)
            elif self.credentials_file and os.path.exists(self.credentials_file):
                self.logger.info("üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª: %s", self.credentials_file)
                creds = Credentials.from_service_account_file(self.credentials_file, scopes=scopes)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–∫–∞–∂–∏—Ç–µ credentials_info –∏–ª–∏ –ø—É—Ç—å –∫ credentials_file.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –∏—Å—Ç—ë–∫
            if creds.expired and creds.valid:
                self.logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
                creds.refresh(Request())

            return creds
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
            raise

    def fetch_document_sync(self, document_id):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Google Docs.

        :param document_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ Google Docs.
        :return: JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ.
        """
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            creds = self._get_fresh_credentials()
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", document_id, str(e))
            return {
                "document_id": document_id,
                "status": {
                    "error_code": 2,
                    "error_message": str(e),
                    "traceback": traceback.format_exc()
                }
            }

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Docs —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            service = build("docs", "v1", credentials=creds)
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ Google Docs –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", document_id, str(e))
            return {
                "document_id": document_id,
                "status": {
                    "error_code": 2,
                    "error_message": str(e),
                    "traceback": traceback.format_exc()
                }
            }

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            self.logger.debug("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s", document_id)
            document = service.documents().get(documentId=document_id, includeTabsContent=True).execute()
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", document_id, str(e))
            return {
                "document_id": document_id,
                "status": {
                    "error_code": 2,
                    "error_message": str(e),
                    "traceback": traceback.format_exc()
                }
            }

        return {
            "document_id": document_id,
            "title": document.get("title", "Unknown title"),
            "tabs": document.get("tabs", []) or []
        }

    async def extract_tab_content(self, tab):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        content = tab.get('documentTab', {}).get('body', {}).get('content', []) or []
        return ''.join(
            text_element['textRun']['content']
            for element in content if 'paragraph' in element
            for text_element in element['paragraph'].get('elements', [])
            if 'textRun' in text_element
        )

    async def process_tabs(self, tabs):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∏ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON."""
        async def process_single_tab(tab):
            tab_data = {
                "title": tab.get('tabProperties', {}).get('title', 'Untitled Tab'),
                "tab_id": tab.get('tabProperties', {}).get('tabId', 'Unknown'),
                "index": tab.get('tabProperties', {}).get('index', 'No Index'),
                "tab_text": await self.extract_tab_content(tab),
                "children": []
            }
            if 'childTabs' in tab:
                tab_data["children"] = await self.process_tabs(tab.get('childTabs', []))
            return tab_data

        return await asyncio.gather(*(process_single_tab(tab) for tab in tabs))

    async def process_document(self, document_id):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

        :param document_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ Google Docs.
        :return: JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ.
        """
        try:
            self.logger.info("üìÑ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s", document_id)
            document = await asyncio.to_thread(self.fetch_document_sync, document_id)

            # –ï—Å–ª–∏ fetch_document_sync –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª–µ–µ
            if "status" in document and document["status"]["error_code"] != 0:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", document_id, document["status"]["error_message"])
                return document

            # –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∫–ª–∞–¥–æ–∫
            if 'tabs' in document and document['tabs']:
                tabs_json = await self.process_tabs(document['tabs'])
                return {
                    "document_id": document_id,
                    "title": document.get("title", "Unknown title"),
                    "tabs": tabs_json,
                    "status": {"error_code": 0, "error_message": None, "traceback": None}
                }
            else:
                self.logger.warning("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç %s –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∫–ª–∞–¥–æ–∫", document_id)
                return {
                    "document_id": document_id,
                    #"title": document.get("title", "Unknown title"),
                    "status": {"error_code": 1, "error_message": "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∫–ª–∞–¥–æ–∫", "traceback": None}
                }
        except Exception as e:
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", document_id, str(e))
            return {
                "document_id": document_id,
                "status": {"error_code": 2, "error_message": str(e), "traceback": traceback.format_exc()}
            }

    async def process_documents(self, document_ids):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á.

        :param document_ids: –°–ø–∏—Å–æ–∫ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Google Docs.
        :return: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞–º–∏).
        """
        semaphore = asyncio.Semaphore(self.max_concurrent_tasks)

        async def process_with_semaphore(doc_id):
            async with semaphore:
                try:
                    return await self.process_document(doc_id)
                except Exception as e:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ %s: %s", doc_id, str(e))
                    return {
                        "document_id": doc_id,
                        "status": {"error_code": 3, "error_message": str(e), "traceback": traceback.format_exc()}
                    }

        self.logger.info("üìÇ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ %d –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", len(document_ids))
        results = await asyncio.gather(*[process_with_semaphore(doc_id) for doc_id in document_ids], return_exceptions=True)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤—ã–µ –≤–æ–∑–Ω–∏–∫–ª–∏
        for idx, result in enumerate(results):
            if isinstance(result, Exception):
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ %s: %s", document_ids[idx], str(result))
                results[idx] = {
                    "document_id": document_ids[idx],
                    "status": {
                        "error_code": 3,
                        "error_message": str(result),
                        "traceback": ""
                    }
                }

        self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results
