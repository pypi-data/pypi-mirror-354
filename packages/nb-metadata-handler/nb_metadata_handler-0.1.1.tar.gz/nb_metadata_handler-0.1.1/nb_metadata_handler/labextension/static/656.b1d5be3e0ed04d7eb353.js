"use strict";(self.webpackChunknb_metadata_handler=self.webpackChunknb_metadata_handler||[]).push([[656],{656:(e,t,a)=>{a.r(t),a.d(t,{IMetadataHandlerRegistry:()=>o,default:()=>c});var l=a(88),s=a(542);class n{constructor(){this._deletePastedCell=e=>this._pastedCells.delete(e),this._updateMetadata=(e,t)=>{this._newCells.delete(e);const a=t.path.split("/"),l=a.shift(),s=a.pop();if(!l)return;const n=e.getMetadata(l);if(void 0!==s){const d=void 0!==n?{...n}:{};let o=d;a.length&&(o=a.reduce(((e,t)=>(e[t]?"object"!=typeof e[t]&&(e[t]={}):e[t]={},e[t])),d)),"add"===t.action?o[s]=t.value:"delete"===t.action&&delete o[s],e.setMetadata(l,d)}else"add"===t.action?e.setMetadata(l,t.value):e.deleteMetadata(l)},this._pastedCells=new Map,this._newCells=new Map}handlePastedCell(e,t){this.skipNewCell(e),t&&this._updateMetadata(e,t),this._pastedCells.set(e,setTimeout(this._deletePastedCell,500,e))}handleNewCell(e,t){this._pastedCells.get(e)||this._newCells.set(e,setTimeout(this._updateMetadata,500,e,t))}skipNewCell(e){this._newCells.get(e)&&(clearTimeout(this._newCells.get(e)),this._newCells.delete(e))}}class d{constructor(){this._metadataHandlers=[]}add(e){-1===this._metadataHandlers.findIndex((t=>t.action===e.action&&t.path===e.path))&&this._metadataHandlers.push(e)}remove(e){const t=this._metadataHandlers.findIndex((t=>t.action===e.action&&t.path===e.path));-1!==t&&this._metadataHandlers.splice(t,1)}get(e){return this._metadataHandlers.filter((t=>null==e?void 0:e.includes(t.method)))}}const o=new(a(262).Token)("nb-metadata-handler:registry","Registry of metadata handlers"),i={id:"nb-metadata-handler:plugin",description:"A JupyterLab extension to handle notebook metadata.",autoStart:!0,requires:[o,l.INotebookTracker],optional:[s.ISettingRegistry],activate:(e,t,a,l)=>{console.log("JupyterLab extension nb-metadata-handler is activated!");const s=new Map,d=new n,o=(e,a)=>{let l=[];"copy"===a.previousInteraction||"paste"===a.previousInteraction?l=t.get(["all","copyPaste"]):"cut"===a.previousInteraction&&(l=t.get(["all","cutPaste"]));const s=[];for(let t=a.cellCount-1;t>=0;t--){const a=e.activeCellIndex-t;s.push(e.widgets[a].model)}s.forEach((e=>{d.skipNewCell(e),l.length?l.forEach((t=>d.handlePastedCell(e,t))):d.handlePastedCell(e)}))},c=(e,a)=>{if("add"!==a.type)return;const l=t.get(["all","new"]);a.newValues.forEach((e=>{l.forEach((t=>d.handleNewCell(e,t)))}))};a.widgetAdded.connect(((e,t)=>{var a;const l=t.content;s.set(l,!1),null===(a=l.model)||void 0===a||a.stateChanged.connect(((e,t)=>{var a;s.get(l)||"dirty"===t.name&&!1===t.newValue&&(s.set(l,!0),l.cellsPasted.connect(o),null===(a=l.model)||void 0===a||a.cells.changed.connect(c),l.disposed.connect((()=>{var e;l.cellsPasted.disconnect(o),null===(e=l.model)||void 0===e||e.cells.changed.disconnect(c),s.delete(l)})))}))})),l&&l.load(i.id).then((e=>{console.log("nb-metadata-handler settings loaded:",e.composite)})).catch((e=>{console.error("Failed to load settings for nb-metadata-handler.",e)}))}},c=[i,{id:"nb-metadata-handler:registry",description:"A registry of metadata handler.",autoStart:!0,provides:o,activate:e=>new d}]}}]);