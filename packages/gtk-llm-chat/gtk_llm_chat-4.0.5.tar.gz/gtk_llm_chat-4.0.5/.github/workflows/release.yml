# Release workflow for Gtk LLM Chat
name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build Linux
    uses: ./.github/workflows/build-linux.yml

  build-windows:
    name: Build Windows
    uses: ./.github/workflows/build-windows.yml

  build-macos:
    name: Build macOS
    uses: ./.github/workflows/build-macos.yml

  build-python:
    name: Build Python Package
    uses: ./.github/workflows/build-python.yml

  publish-pypi-release:
    name: Publish to PyPI (Release)
    needs: build-python
    runs-on: ubuntu-latest
    # Solo versiones sin sufijos (v1.2.3)
    if: >-
      ${{ startsWith(github.ref_name, 'v') && 
          !contains(github.ref_name, 'dev') && 
          !contains(github.ref_name, 'alpha') && 
          !contains(github.ref_name, 'beta') && 
          !contains(github.ref_name, 'test') &&
          !contains(github.ref_name, 'rc') }}
    permissions:
      id-token: write
    steps:
      - name: Download Python dist
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/

      - name: Publish package to PyPI (Release)
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-pypi-prerelease:
    name: Publish to PyPI (Prerelease)
    needs: build-python
    runs-on: ubuntu-latest
    # Solo versiones con sufijos (v1.2.3dev, v1.2.3alpha1, v1.2.3beta1, v1.2.3rc1)
    if: >-
      ${{ startsWith(github.ref_name, 'v') && 
          (contains(github.ref_name, 'dev') || 
           contains(github.ref_name, 'alpha') || 
           contains(github.ref_name, 'beta') ||
           contains(github.ref_name, 'rc')) }}
    permissions:
      id-token: write
    steps:
      - name: Download Python dist
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/

      - name: Publish package to PyPI (Prerelease)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  github-release:
    name: Create GitHub Release
    needs: [build-linux, build-windows, build-macos, build-python]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download Linux dist
        uses: actions/download-artifact@v4
        with:
          name: linux-dist
          path: dist/

      - name: Download Windows dist
        uses: actions/download-artifact@v4
        with:
          name: windows-dist
          path: dist/

      - name: Download macOS Intel dist
        uses: actions/download-artifact@v4
        with:
          name: macos-intel-dist
          path: dist/

      - name: Download macOS ARM dist
        uses: actions/download-artifact@v4
        with:
          name: macos-arm-dist
          path: dist/

      - name: Download Python dist
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/

      - name: Download Flatpak bundle
        uses: actions/download-artifact@v4
        with:
          name: flatpak-bundle
          path: dist/

      - name: Create GitHub Pre-release
        if: >-
          ${{ contains(github.ref_name, 'alpha') || 
              contains(github.ref_name, 'beta') || 
              contains(github.ref_name, 'dev') ||
              contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes --prerelease

      - name: Create GitHub Release
        if: >-
          ${{ !(contains(github.ref_name, 'alpha') || 
                contains(github.ref_name, 'beta') || 
                contains(github.ref_name, 'dev') || 
                contains(github.ref_name, 'test') ||
                contains(github.ref_name, 'rc')) }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes

      - name: Upload dists to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'