# Linux build workflow for Gtk LLM Chat
name: Build Linux

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  workflow_call:

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo add-apt-repository -y ppa:kubuntu-ppa/backports-extra
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build git \
            libxft-dev libepoxy-dev libgles2-mesa-dev libegl1-mesa-dev \
            libpolkit-agent-1-dev libpolkit-gobject-1-dev libunwind-dev \
            libx11-dev libxext-dev libdrm-dev libcups2-dev libsass-dev \
            linux-headers-$(uname -r) libcurl4-nss-dev libxcursor-dev \
            libxkbcommon-dev libxml2-utils libxrandr-dev libxi-dev \
            libwayland-dev libxinerama-dev \
            gperf libappstream-dev libxmlb-dev libxdamage-dev gettext valac \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            gir1.2-gtk-3.0 \
            gir1.2-ayatanaappindicator3-0.1 \
            libglib2.0-0 \
            libgirepository-1.0-1 \
            libdbus-1-dev \
            libdbus-glib-1-dev \
            gir1.2-dbusmenu-glib-0.4 \
            gir1.2-dbusmenu-gtk3-0.4 \
            gir1.2-glib-2.0 \
            flatpak flatpak-builder appstream-util

          sudo pip install --upgrade pip meson

      - name: Compile Gtk and friends
        run: |
          echo "Compiling gobject-introspection into /usr"
          echo "Using PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          GOBJECT_INTROSPECTION_VERSION="1.80.0"
          wget "https://download.gnome.org/sources/gobject-introspection/${GOBJECT_INTROSPECTION_VERSION%.*}/gobject-introspection-${GOBJECT_INTROSPECTION_VERSION}.tar.xz"
          tar -xf "gobject-introspection-${GOBJECT_INTROSPECTION_VERSION}.tar.xz"
          cd "gobject-introspection-${GOBJECT_INTROSPECTION_VERSION}"
          meson setup _build --prefix=/usr \
            --buildtype=release \
            -Ddoctool=disabled
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          git clone https://gitlab.gnome.org/GNOME/glib.git --branch glib-2-82 --depth 1
          cd glib
          meson setup _build --prefix=/usr \
            -Dintrospection=enabled \
            --buildtype=release -Ddocumentation=false -Dtests=false -Dman=false
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          git clone https://gitlab.gnome.org/GNOME/pango.git --branch 1.52.2 --depth 1
          cd pango
          meson setup _build --prefix=/usr \
            --buildtype=release -Dintrospection=enabled \
            -Dfontconfig=enabled -Dfreetype=enabled
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          wget "https://download.gnome.org/sources/graphene/1.8/graphene-1.8.6.tar.xz"
          tar -xf "graphene-1.8.6.tar.xz"
          cd "graphene-1.8.6"
          meson setup _build --prefix=/usr \
            --buildtype=release \
            -Dtests=false
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          git clone https://gitlab.freedesktop.org/fontconfig/fontconfig.git --branch 2.15.0 --depth 1
          cd fontconfig
          meson setup _build --prefix=/usr \
            --buildtype=release -Ddoc=disabled -Dtests=disabled -Dtools=disabled
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          git clone https://gitlab.gnome.org/GNOME/gtk.git --branch gtk-4-18 --depth 1
          cd gtk
          meson setup _build --prefix=/usr \
            --buildtype=release \
            -Dmedia-gstreamer=disabled \
            -Dbuild-tests=false \
            -Dbuild-examples=false \
            -Dbuild-demos=false \
            -Dintrospection=enabled \
            -Dvulkan=disabled
          ninja -C _build
          sudo ninja -C _build install
          cd ..
          git clone https://gitlab.gnome.org/GNOME/libadwaita.git --branch libadwaita-1-7 --depth 1
          cd libadwaita
          meson setup _build --prefix=/usr \
            -Dintrospection=enabled \
            --buildtype=release
          ninja -C _build
          sudo ninja -C _build install

      - name: Set environment for build
        run: |
          cp .env.ci .env

      - name: Build package
        run: |
          python3 build-ci.py

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/

  build-flatpak:
    name: Build Flatpak
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Flatpak dependencies
        run: |
          sudo apt install flatpak flatpak-builder python3-pip appstream-util
          pip3 install setuptools wheel build
          pip3 install .

      - name: Add Flathub remote
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

      - name: Build Flatpak and create bundle
        run: |
          flatpak-builder --user --repo=repo --force-clean --install-deps-from=flathub build-dir linux/org.fuentelibre.gtk_llm_Chat.flatpak.yml
          flatpak build-bundle repo gtk-llm-chat.flatpak org.fuentelibre.gtk_llm_Chat

      - name: Test Flatpak (versi√≥n)
        run: |
          flatpak install --user --noninteractive gtk-llm-chat.flatpak
          flatpak run org.fuentelibre.gtk_llm_Chat --help || true

      - name: Upload Flatpak bundle
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-bundle
          path: gtk-llm-chat.flatpak
