use super::packets::set_channel::TCType;
use libm::expf;
use num_traits::float::FloatCore;

pub mod packets;

impl TCType {
    pub fn v(&self, t: f32) -> f32 {
        fn fold(c: &[f32], t: f32) -> f32 {
            (0..c.len()).fold(0.0, |acc, i| acc + c[i] * t.powi(i as i32))
        }

        1e-3 * match self {
            TCType::E => match t {
                t if t < 0f32 => {
                    const C: [f32; 14] = [
                        0.000000000000E+00,
                        0.586655087080E-01,
                        0.454109771240E-04,
                        -0.779980486860E-06,
                        -0.258001608430E-07,
                        -0.594525830570E-09,
                        -0.932140586670E-11,
                        -0.102876055340E-12,
                        -0.803701236210E-15,
                        -0.439794973910E-17,
                        -0.164147763550E-19,
                        -0.396736195160E-22,
                        -0.558273287210E-25,
                        -0.346578420130E-28,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 11] = [
                        0.000000000000E+00,
                        0.586655087100E-01,
                        0.450322755820E-04,
                        0.289084072120E-07,
                        -0.330568966520E-09,
                        0.650244032700E-12,
                        -0.191974955040E-15,
                        -0.125366004970E-17,
                        0.214892175690E-20,
                        -0.143880417820E-23,
                        0.359608994810E-27,
                    ];
                    fold(&C, t)
                }
            },
            TCType::J => match t {
                t if t < 0f32 => {
                    const C: [f32; 9] = [
                        0.000000000000E+00,
                        0.503811878150E-01,
                        0.304758369300E-04,
                        -0.856810657200E-07,
                        0.132281952950E-09,
                        -0.170529583370E-12,
                        0.209480906970E-15,
                        -0.125383953360E-18,
                        0.156317256970E-22,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 6] = [
                        0.296456256810E+03,
                        -0.149761277860E+01,
                        0.317871039240E-02,
                        -0.318476867010E-05,
                        0.157208190040E-08,
                        -0.306913690560E-12,
                    ];
                    fold(&C, t)
                }
            },
            TCType::K => match t {
                t if t < 0f32 => {
                    const C: [f32; 11] = [
                        0.000000000000E+00,
                        0.394501280250E-01,
                        0.236223735980E-04,
                        -0.328589067840E-06,
                        -0.499048287770E-08,
                        -0.675090591730E-10,
                        -0.574103274280E-12,
                        -0.310888728940E-14,
                        -0.104516093650E-16,
                        -0.198892668780E-19,
                        -0.163226974860E-22,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 10] = [
                        -0.176004136860E-01,
                        0.389212049750E-01,
                        0.185587700320E-04,
                        -0.994575928740E-07,
                        0.318409457190E-09,
                        -0.560728448890E-12,
                        0.560750590590E-15,
                        -0.320207200030E-18,
                        0.971511471520E-22,
                        -0.121047212750E-25,
                    ];
                    const A0: f32 = 0.118597600000E+00;
                    const A1: f32 = -0.118343200000E-03;
                    const A2: f32 = 0.126968600000E+03;
                    fold(&C, t) + A0 * expf(A1 * (t - A2).powi(2))
                }
            },
            TCType::N => match t {
                t if t < 0f32 => {
                    const C: [f32; 9] = [
                        0.000000000000E+00,
                        0.261591059620E-01,
                        0.109574842280E-04,
                        -0.938411115540E-07,
                        -0.464120397590E-10,
                        -0.263033577160E-11,
                        -0.226534380030E-13,
                        -0.760893007910E-16,
                        -0.934196678350E-19,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 11] = [
                        0.000000000000E+00,
                        0.259293946010E-01,
                        0.157101418800E-04,
                        0.438256272370E-07,
                        -0.252611697940E-09,
                        0.643118193390E-12,
                        -0.100634715190E-14,
                        0.997453389920E-18,
                        -0.608632456070E-21,
                        0.208492293390E-24,
                        -0.306821961510E-28,
                    ];
                    fold(&C, t)
                }
            },
            TCType::R => match t {
                t if t < 1064.180 => {
                    const C: [f32; 10] = [
                        0.000000000000E+00,
                        0.528961729765E-02,
                        0.139166589782E-04,
                        -0.238855693017E-07,
                        0.356916001063E-10,
                        -0.462347666298E-13,
                        0.500777441034E-16,
                        -0.373105886191E-19,
                        0.157716482367E-22,
                        -0.281038625251E-26,
                    ];
                    fold(&C, t)
                }
                t if t < 1664.500 => {
                    const C: [f32; 6] = [
                        0.295157925316E+01,
                        -0.252061251332E-02,
                        0.159564501865E-04,
                        -0.764085947576E-08,
                        0.205305291024E-11,
                        -0.293359668173E-15,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 5] = [
                        0.152232118209E+03,
                        -0.268819888545E+00,
                        0.171280280471E-03,
                        -0.345895706453E-07,
                        -0.934633971046E-14,
                    ];
                    fold(&C, t)
                }
            },
            TCType::S => match t {
                t if t < 1064.180 => {
                    const C: [f32; 9] = [
                        0.000000000000E+00,
                        0.540313308631E-02,
                        0.125934289740E-04,
                        -0.232477968689E-07,
                        0.322028823036E-10,
                        -0.331465196389E-13,
                        0.255744251786E-16,
                        -0.125068871393E-19,
                        0.271443176145E-23,
                    ];
                    fold(&C, t)
                }
                t if t < 1664.500 => {
                    const C: [f32; 5] = [
                        0.132900444085E+01,
                        0.334509311344E-02,
                        0.654805192818E-05,
                        -0.164856259209E-08,
                        0.129989605174E-13,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 5] = [
                        0.146628232636E+03,
                        -0.258430516752E+00,
                        0.163693574641E-03,
                        -0.330439046987E-07,
                        -0.943223690612E-14,
                    ];
                    fold(&C, t)
                }
            },
            TCType::T => match t {
                t if t < 0f32 => {
                    const C: [f32; 15] = [
                        0.000000000000E+00,
                        0.387481063640E-01,
                        0.441944343470E-04,
                        0.118443231050E-06,
                        0.200329735540E-07,
                        0.901380195590E-09,
                        0.226511565930E-10,
                        0.360711542050E-12,
                        0.384939398830E-14,
                        0.282135219250E-16,
                        0.142515947790E-18,
                        0.487686622860E-21,
                        0.107955392700E-23,
                        0.139450270620E-26,
                        0.797951539270E-30,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 9] = [
                        0.000000000000E+00,
                        0.387481063640E-01,
                        0.332922278800E-04,
                        0.206182434040E-06,
                        -0.218822568460E-08,
                        0.109968809280E-10,
                        -0.308157587720E-13,
                        0.454791352900E-16,
                        -0.275129016730E-19,
                    ];
                    fold(&C, t)
                }
            },
            TCType::B => match t {
                t if t < 630.615 => {
                    const C: [f32; 7] = [
                        0.000000000000E+00,
                        -0.246508183460E-03,
                        0.590404211710E-05,
                        -0.132579316360E-08,
                        0.156682919010E-11,
                        -0.169445292400E-14,
                        0.629903470940E-18,
                    ];
                    fold(&C, t)
                }
                _ => {
                    const C: [f32; 9] = [
                        -0.389381686210E+01,
                        0.285717474700E-01,
                        -0.848851047850E-04,
                        0.157852801640E-06,
                        -0.168353448640E-09,
                        0.111097940130E-12,
                        -0.445154310330E-16,
                        0.989756408210E-20,
                        -0.937913302890E-24,
                    ];
                    fold(&C, t)
                }
            },
        }
    }

    pub fn vmax(&self) -> f32 {
        return self.v(self.tmax() as f32);
    }

    pub fn vmin(&self) -> f32 {
        return self.v(self.tmin() as f32);
    }

    pub const fn tmax(&self) -> i16 {
        match self {
            TCType::E => 1000,
            TCType::J => 1200,
            TCType::K => 1372,
            TCType::N => 1300,
            TCType::R => 1768,
            TCType::S => 1768,
            TCType::T => 400,
            TCType::B => 1820,
        }
    }

    pub const fn tmin(&self) -> i16 {
        match self {
            TCType::E => -270,
            TCType::J => -210,
            TCType::K => -270,
            TCType::N => -270,
            TCType::R => -50,
            TCType::S => -50,
            TCType::T => -270,
            TCType::B => 0,
        }
    }
}
