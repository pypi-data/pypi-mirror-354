[project]
name = "lumaCLI"
description = "A CLI tool for managing the data catalog platform."
version = "0.2.0"
authors = [{ name = "Facundo Goiriz", email = "fgoiriz@dyvenia.com" }]
dependencies = [
    "typer[all] >=0.9,<1.0",
    "psycopg2-binary >=2.9,<3.0",
    "requests >=2.20,<3.0",
    "pydantic[email] >=2.0,<3.0",
    "dbt-artifacts-parser >=0.8.3,<1.0",
    "pyyaml >=6.0.1",
    "rich >=13.7, <13.8",
]
requires-python = ">=3.9"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["cli", "dbt", "luma", "data", "catalog"]

[tool.rye]
managed = true
dev-dependencies = [
    "pytest",
    "pytest-cov",
    "coverage",
    "multiprocess >= 0.70.16,<0.71",
    "uvicorn >=0.27.0.post1,<0.28",
    "fastapi >=0.109.0, <0.110",
    "pytest-postgresql >=4.1.1,<5.0",
    "psycopg2-binary >=2.9,<3.0",
    # Docs.
    "mkdocs-material[imaging]>=9.4.3",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-include-dir-to-nav>=1.2.0",
    "neoteroi-mkdocs>=1.0.4",
    "mkdocs-jupyter>=0.24.4",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs>=1.5.3",
    "mike>=1.1.2",
    "mkdocs-table-reader-plugin>=2.0.3",
    "mkdocs-include-markdown-plugin>=7.1.5",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-glightbox>=0.4.0",
]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["lumaCLI", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[project.scripts]
luma = "lumaCLI.main:app"
lumaCLI = "lumaCLI.main:print_did_you_mean_luma"

[tool.ruff]
preview = true

[tool.ruff.lint]
# Last rule review: ruff 0.1.5
extend-select = [
    "I",    # isort
    "D",    # pydocstyle
    "W",    # pycodestyle (warnings)
    "B",    # flake8-bugbear
    "S",    # flake8-bandit
    "ANN",  # flake8-annotations
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "EM",   # flake8-errmsg
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C901", # mccabe
    "FURB", # refurb
    "TRY",  # tryceratops
    # "PD", # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]

[tool.ruff.lint.extend-per-file-ignores]
# Ignore "use of assert" error in test files.
"tests/**" = ["S101"]

# Ignore rules known to be conflicting between the ruff linter and formatter.
# See https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = ["W191", "D206", "D300"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

# For checking whether the docstrings match function signature.
# https://peps.python.org/pep-0727/ should basically solve this in Python 3.13.
[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
allow-init-docstring = true
