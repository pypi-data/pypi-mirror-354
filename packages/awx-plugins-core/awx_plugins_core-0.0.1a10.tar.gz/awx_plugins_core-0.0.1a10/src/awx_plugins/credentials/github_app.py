"""GitHub App Installation Access Token Credential Plugin.

This module defines a credential plugin for making use of the
GitHub Apps mechanism, allowing authentication via GitHub App
installation-scoped access tokens.

Functions:

- :func:`extract_github_app_install_token`: Generates a GitHub App
  Installation token.
- ``github_app_lookup``: Defines the credential plugin interface.
"""

from typing import NotRequired, TypedDict, Unpack

from awx_plugins.interfaces._temporary_private_django_api import (  # noqa: WPS436
    gettext_noop as _,
)

from github import (
    Auth as Auth,
    Github,
)
from github.Consts import DEFAULT_BASE_URL as PUBLIC_GH_API_URL
from github.GithubException import (
    BadAttributeException,
    GithubException,
    UnknownObjectException,
)

from .plugin import CredentialPlugin


__all__ = ('github_app_lookup',)  # noqa: WPS410


class FieldDict(TypedDict):
    """A single UI field schema."""

    id: str
    label: str
    type: str
    format: NotRequired[str]
    secret: NotRequired[bool]
    multiline: NotRequired[bool]
    help_text: str
    default: NotRequired[str]


class MetadataDict(TypedDict):
    """Schema for input metadata."""

    id: str
    label: NotRequired[str]
    type: str
    help_text: str


class GitHubAppInputs(TypedDict):
    """Schema for a collection of plugin input fields."""

    fields: list[FieldDict]
    metadata: list[MetadataDict]
    required: list[str]


github_app_inputs: GitHubAppInputs = {
    'fields': [
        {
            'id': 'github_api_url',
            'label': _('GitHub API endpoint URL'),
            'type': 'string',
            'help_text': _(
                'Specify the GitHub API URL here. In the case of an Enterprise: '
                'https://gh.your.org/api/v3 (self-hosted) '
                'or https://api.SUBDOMAIN.ghe.com (cloud)',
            ),
            'default': 'https://api.github.com',
        },
        {
            'id': 'app_or_client_id',
            'label': _('GitHub App ID'),
            'type': 'string',
            'help_text': _(
                'The GitHub App ID created by the GitHub Admin. '
                'Example App ID: 1121547 '
                'found on https://github.com/settings/apps/ '
                'required for creating a JWT token for authentication.',
            ),
        },
        {
            'id': 'install_id',
            'label': _('GitHub App Installation ID'),
            'type': 'string',
            'help_text': _(
                'The Installation ID from the GitHub App installation '
                'generated by the GitHub Admin. '
                'Example: 59980338 extracted from the installation link '
                'https://github.com/settings/installations/59980338 '
                'required for creating a limited GitHub app token.',
            ),
        },
        {
            'id': 'private_rsa_key',
            'label': _('RSA Private Key'),
            'type': 'string',
            # `ssh_private_key` validator checks for PKCS#1 PEM-like formats
            'format': 'ssh_private_key',
            'secret': True,
            'multiline': True,
            'help_text': _(
                'Paste the contents of the PEM file that the GitHub Admin '
                'provided to you with the app and installation IDs.',
            ),
        },
    ],
    'metadata': [
        {
            'id': 'description',
            'label': _('Description (Optional)'),
            'type': 'string',
            'help_text': _('To be removed after UI is updated'),
        },
    ],
    'required': ['app_or_client_id', 'install_id', 'private_rsa_key'],
}


class EmptyKwargs(TypedDict):
    """Schema for zero keyword arguments."""


GH_CLIENT_ID_TRAILER_LENGTH = 16
HEXADECIMAL_BASE = 16


def _is_intish(app_id_candidate: str | int) -> bool:
    return isinstance(app_id_candidate, int) or app_id_candidate.isdigit()


def _is_client_id(client_id_candidate: str) -> bool:
    client_id_prefix = 'Iv1.'
    if not client_id_candidate.startswith(client_id_prefix):
        return False

    client_id_trailer = client_id_candidate.removeprefix(client_id_prefix)

    if len(client_id_trailer) != GH_CLIENT_ID_TRAILER_LENGTH:
        return False

    try:
        int(client_id_trailer, base=HEXADECIMAL_BASE)
    except ValueError:
        return False

    return True


def _is_app_or_client_id(app_or_client_id_candidate: str | int) -> bool:
    if _is_intish(app_or_client_id_candidate):
        return True

    assert not isinstance(app_or_client_id_candidate, int)  # type narrowing
    return _is_client_id(app_or_client_id_candidate)


def _assert_ids_look_acceptable(
    app_or_client_id: int | str,
    install_id: int | str,
) -> None:
    if not _is_app_or_client_id(app_or_client_id):
        raise ValueError(
            'Expected GitHub App or Client ID to be an integer or a string '
            f'starting with `Iv1.` followed by 16 hexadecimal digits, '
            f'but got {app_or_client_id!r}',
        )

    if isinstance(app_or_client_id, str) and _is_client_id(app_or_client_id):
        raise ValueError(
            'Expected GitHub App ID must be an integer or a string '
            f'with an all-digit value, but got {app_or_client_id!r}. '
            'Client IDs are currently unsupported.',
        )

    if not _is_intish(install_id):
        raise ValueError(
            'Expected GitHub App Installation ID to be an integer'
            f' but got {install_id!r}',
        )


def extract_github_app_install_token(  # noqa: WPS210
    *,
    github_api_url: str,
    app_or_client_id: int | str,
    private_rsa_key: str,
    install_id: int | str,
    **_discarded_kwargs: Unpack[EmptyKwargs],
) -> str:
    """Generate a GH App Installation access token.

    :param github_api_url: The GitHub instance API endpoint URL.
    :param app_or_client_id: The GitHub App ID.
    :param private_rsa_key: The private key associated with the GitHub
        App.
    :param install_id: The GitHub App Installation ID.
    :param _discarded_kwargs: Aren't expected to be passed.
    :returns: A GitHub access token for a GitHub App Installation.
    :raises ValueError: If any required parameters are invalid.
    :raises RuntimeError: If any required parameters are invalid.
    """
    _assert_ids_look_acceptable(app_or_client_id, install_id)

    auth = Auth.AppAuth(
        app_id=str(app_or_client_id),
        private_key=private_rsa_key,
    ).get_installation_auth(installation_id=int(install_id))

    Github(  # Generate a GitHub App authentication token
        auth=auth,
        base_url=github_api_url or PUBLIC_GH_API_URL,
    )

    doc_url = (
        'See https://docs.github.com/rest/reference/apps'
        '#create-an-installation-access-token-for-an-app'
    )
    app_install_context = (
        f'app_or_client_id: {app_or_client_id}, install_id: {install_id}'
    )

    try:
        return auth.token
    # NOTE: Exceptions coming from PyGitHub have `Any` in the base exception
    # NOTE: initializer. This trips MyPy's `disallow_any_expr` check even
    # NOTE: though it's not in our code. This is why we ignore `misc` in the
    # NOTE: except blocks below.
    #
    # Ref:
    # * https://github.com/PyGithub/PyGithub/issues/3218
    # * https://github.com/PyGithub/PyGithub/blob/038624c/github\
    #   /GithubException.py#L56
    except (
        UnknownObjectException  # type: ignore[misc]
    ) as github_install_not_found_exc:
        raise ValueError(
            'Failed to retrieve a GitHub installation token from '
            f'{github_api_url!s} using {app_install_context!s}. '
            f'Is the app installed? {doc_url!s}.'
            f'\n\n{github_install_not_found_exc!s}',
        ) from github_install_not_found_exc
    except GithubException as pygithub_catchall_exc:  # type: ignore[misc]
        raise RuntimeError(
            'An unexpected error happened while talking to GitHub API @ '
            f'{github_api_url!s} ({app_install_context!s}). '
            'Is the app or client ID correct? And the private RSA key? '
            f'{doc_url!s}.\n\n{pygithub_catchall_exc!s}',
        ) from pygithub_catchall_exc
    except BadAttributeException as github_broken_exc:  # type: ignore[misc]
        raise RuntimeError(
            f'Broken GitHub @ {github_api_url!s} with '
            f'{app_install_context!s}. It is a bug, please report it to the '
            f'developers.\n\n{github_broken_exc!s}',
        ) from github_broken_exc


github_app_lookup = CredentialPlugin(
    'GitHub App Installation Access Token Lookup',
    inputs=github_app_inputs,
    backend=extract_github_app_install_token,
)
