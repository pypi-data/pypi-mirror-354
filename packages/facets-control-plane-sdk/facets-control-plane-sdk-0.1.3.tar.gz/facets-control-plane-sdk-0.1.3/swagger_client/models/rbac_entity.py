# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RBACEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'Category',
        'child_permissions': 'list[str]',
        'description': 'str',
        'key': 'str',
        'permission': 'str'
    }

    attribute_map = {
        'category': 'category',
        'child_permissions': 'childPermissions',
        'description': 'description',
        'key': 'key',
        'permission': 'permission'
    }

    def __init__(self, category=None, child_permissions=None, description=None, key=None, permission=None):  # noqa: E501
        """RBACEntity - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._child_permissions = None
        self._description = None
        self._key = None
        self._permission = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if child_permissions is not None:
            self.child_permissions = child_permissions
        if description is not None:
            self.description = description
        if key is not None:
            self.key = key
        if permission is not None:
            self.permission = permission

    @property
    def category(self):
        """Gets the category of this RBACEntity.  # noqa: E501


        :return: The category of this RBACEntity.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RBACEntity.


        :param category: The category of this RBACEntity.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def child_permissions(self):
        """Gets the child_permissions of this RBACEntity.  # noqa: E501


        :return: The child_permissions of this RBACEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._child_permissions

    @child_permissions.setter
    def child_permissions(self, child_permissions):
        """Sets the child_permissions of this RBACEntity.


        :param child_permissions: The child_permissions of this RBACEntity.  # noqa: E501
        :type: list[str]
        """

        self._child_permissions = child_permissions

    @property
    def description(self):
        """Gets the description of this RBACEntity.  # noqa: E501


        :return: The description of this RBACEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RBACEntity.


        :param description: The description of this RBACEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this RBACEntity.  # noqa: E501


        :return: The key of this RBACEntity.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RBACEntity.


        :param key: The key of this RBACEntity.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def permission(self):
        """Gets the permission of this RBACEntity.  # noqa: E501


        :return: The permission of this RBACEntity.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this RBACEntity.


        :param permission: The permission of this RBACEntity.  # noqa: E501
        :type: str
        """

        self._permission = permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RBACEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RBACEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
