# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TFRunConfigurations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_env_vars': 'dict(str, str)',
        'branch_override': 'str',
        'cluster_id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'id': 'str',
        'last_modified_by': 'str',
        'last_modified_date': 'datetime'
    }

    attribute_map = {
        'additional_env_vars': 'additionalEnvVars',
        'branch_override': 'branchOverride',
        'cluster_id': 'clusterId',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'id': 'id',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate'
    }

    def __init__(self, additional_env_vars=None, branch_override=None, cluster_id=None, created_by=None, creation_date=None, id=None, last_modified_by=None, last_modified_date=None):  # noqa: E501
        """TFRunConfigurations - a model defined in Swagger"""  # noqa: E501
        self._additional_env_vars = None
        self._branch_override = None
        self._cluster_id = None
        self._created_by = None
        self._creation_date = None
        self._id = None
        self._last_modified_by = None
        self._last_modified_date = None
        self.discriminator = None
        if additional_env_vars is not None:
            self.additional_env_vars = additional_env_vars
        if branch_override is not None:
            self.branch_override = branch_override
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if id is not None:
            self.id = id
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date

    @property
    def additional_env_vars(self):
        """Gets the additional_env_vars of this TFRunConfigurations.  # noqa: E501


        :return: The additional_env_vars of this TFRunConfigurations.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_env_vars

    @additional_env_vars.setter
    def additional_env_vars(self, additional_env_vars):
        """Sets the additional_env_vars of this TFRunConfigurations.


        :param additional_env_vars: The additional_env_vars of this TFRunConfigurations.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_env_vars = additional_env_vars

    @property
    def branch_override(self):
        """Gets the branch_override of this TFRunConfigurations.  # noqa: E501


        :return: The branch_override of this TFRunConfigurations.  # noqa: E501
        :rtype: str
        """
        return self._branch_override

    @branch_override.setter
    def branch_override(self, branch_override):
        """Sets the branch_override of this TFRunConfigurations.


        :param branch_override: The branch_override of this TFRunConfigurations.  # noqa: E501
        :type: str
        """

        self._branch_override = branch_override

    @property
    def cluster_id(self):
        """Gets the cluster_id of this TFRunConfigurations.  # noqa: E501


        :return: The cluster_id of this TFRunConfigurations.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this TFRunConfigurations.


        :param cluster_id: The cluster_id of this TFRunConfigurations.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def created_by(self):
        """Gets the created_by of this TFRunConfigurations.  # noqa: E501


        :return: The created_by of this TFRunConfigurations.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TFRunConfigurations.


        :param created_by: The created_by of this TFRunConfigurations.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this TFRunConfigurations.  # noqa: E501


        :return: The creation_date of this TFRunConfigurations.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TFRunConfigurations.


        :param creation_date: The creation_date of this TFRunConfigurations.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this TFRunConfigurations.  # noqa: E501


        :return: The id of this TFRunConfigurations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TFRunConfigurations.


        :param id: The id of this TFRunConfigurations.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this TFRunConfigurations.  # noqa: E501


        :return: The last_modified_by of this TFRunConfigurations.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this TFRunConfigurations.


        :param last_modified_by: The last_modified_by of this TFRunConfigurations.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TFRunConfigurations.  # noqa: E501


        :return: The last_modified_date of this TFRunConfigurations.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TFRunConfigurations.


        :param last_modified_date: The last_modified_date of this TFRunConfigurations.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFRunConfigurations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFRunConfigurations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
