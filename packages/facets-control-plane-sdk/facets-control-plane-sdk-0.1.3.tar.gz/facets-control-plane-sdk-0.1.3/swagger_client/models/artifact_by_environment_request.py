# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactByEnvironmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'artifact_uri': 'str',
        'artifactory': 'str',
        'cluster_name': 'str',
        'description': 'str',
        'external_id': 'str',
        'stack_name': 'str'
    }

    attribute_map = {
        'application_name': 'applicationName',
        'artifact_uri': 'artifactUri',
        'artifactory': 'artifactory',
        'cluster_name': 'clusterName',
        'description': 'description',
        'external_id': 'externalId',
        'stack_name': 'stackName'
    }

    def __init__(self, application_name=None, artifact_uri=None, artifactory=None, cluster_name=None, description=None, external_id=None, stack_name=None):  # noqa: E501
        """ArtifactByEnvironmentRequest - a model defined in Swagger"""  # noqa: E501
        self._application_name = None
        self._artifact_uri = None
        self._artifactory = None
        self._cluster_name = None
        self._description = None
        self._external_id = None
        self._stack_name = None
        self.discriminator = None
        if application_name is not None:
            self.application_name = application_name
        if artifact_uri is not None:
            self.artifact_uri = artifact_uri
        if artifactory is not None:
            self.artifactory = artifactory
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if description is not None:
            self.description = description
        if external_id is not None:
            self.external_id = external_id
        if stack_name is not None:
            self.stack_name = stack_name

    @property
    def application_name(self):
        """Gets the application_name of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The application_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ArtifactByEnvironmentRequest.


        :param application_name: The application_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def artifact_uri(self):
        """Gets the artifact_uri of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The artifact_uri of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uri

    @artifact_uri.setter
    def artifact_uri(self, artifact_uri):
        """Sets the artifact_uri of this ArtifactByEnvironmentRequest.


        :param artifact_uri: The artifact_uri of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._artifact_uri = artifact_uri

    @property
    def artifactory(self):
        """Gets the artifactory of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The artifactory of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this ArtifactByEnvironmentRequest.


        :param artifactory: The artifactory of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._artifactory = artifactory

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The cluster_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ArtifactByEnvironmentRequest.


        :param cluster_name: The cluster_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def description(self):
        """Gets the description of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The description of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArtifactByEnvironmentRequest.


        :param description: The description of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The external_id of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ArtifactByEnvironmentRequest.


        :param external_id: The external_id of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def stack_name(self):
        """Gets the stack_name of this ArtifactByEnvironmentRequest.  # noqa: E501


        :return: The stack_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this ArtifactByEnvironmentRequest.


        :param stack_name: The stack_name of this ArtifactByEnvironmentRequest.  # noqa: E501
        :type: str
        """

        self._stack_name = stack_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactByEnvironmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactByEnvironmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
