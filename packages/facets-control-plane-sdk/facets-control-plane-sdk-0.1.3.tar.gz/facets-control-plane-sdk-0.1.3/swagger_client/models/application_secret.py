# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationSecret(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret_name': 'str',
        'secret_status': 'str',
        'secret_value': 'str'
    }

    attribute_map = {
        'secret_name': 'secretName',
        'secret_status': 'secretStatus',
        'secret_value': 'secretValue'
    }

    def __init__(self, secret_name=None, secret_status=None, secret_value=None):  # noqa: E501
        """ApplicationSecret - a model defined in Swagger"""  # noqa: E501
        self._secret_name = None
        self._secret_status = None
        self._secret_value = None
        self.discriminator = None
        if secret_name is not None:
            self.secret_name = secret_name
        if secret_status is not None:
            self.secret_status = secret_status
        if secret_value is not None:
            self.secret_value = secret_value

    @property
    def secret_name(self):
        """Gets the secret_name of this ApplicationSecret.  # noqa: E501


        :return: The secret_name of this ApplicationSecret.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this ApplicationSecret.


        :param secret_name: The secret_name of this ApplicationSecret.  # noqa: E501
        :type: str
        """

        self._secret_name = secret_name

    @property
    def secret_status(self):
        """Gets the secret_status of this ApplicationSecret.  # noqa: E501


        :return: The secret_status of this ApplicationSecret.  # noqa: E501
        :rtype: str
        """
        return self._secret_status

    @secret_status.setter
    def secret_status(self, secret_status):
        """Sets the secret_status of this ApplicationSecret.


        :param secret_status: The secret_status of this ApplicationSecret.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULFILLED", "UNFULFILLED", "PENDING"]  # noqa: E501
        if secret_status not in allowed_values:
            raise ValueError(
                "Invalid value for `secret_status` ({0}), must be one of {1}"  # noqa: E501
                .format(secret_status, allowed_values)
            )

        self._secret_status = secret_status

    @property
    def secret_value(self):
        """Gets the secret_value of this ApplicationSecret.  # noqa: E501


        :return: The secret_value of this ApplicationSecret.  # noqa: E501
        :rtype: str
        """
        return self._secret_value

    @secret_value.setter
    def secret_value(self, secret_value):
        """Sets the secret_value of this ApplicationSecret.


        :param secret_value: The secret_value of this ApplicationSecret.  # noqa: E501
        :type: str
        """

        self._secret_value = secret_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationSecret, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationSecret):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
