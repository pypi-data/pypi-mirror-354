# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBlueprintRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_clouds': 'list[str]',
        'branch': 'str',
        'coder_account_id': 'str',
        'description': 'str',
        'git_ops_enabled': 'bool',
        'github_account_id': 'str',
        'github_organisation_name': 'str',
        'is_imported_project': 'bool',
        'mono_repo': 'bool',
        'name': 'str',
        'primary_cloud': 'str',
        'project_type_id': 'str',
        'relative_path': 'str',
        'repo_name': 'str',
        'template': 'bool',
        'template_id': 'str',
        'template_name': 'str',
        'vcs_url': 'str'
    }

    attribute_map = {
        'allowed_clouds': 'allowedClouds',
        'branch': 'branch',
        'coder_account_id': 'coderAccountId',
        'description': 'description',
        'git_ops_enabled': 'gitOpsEnabled',
        'github_account_id': 'githubAccountId',
        'github_organisation_name': 'githubOrganisationName',
        'is_imported_project': 'isImportedProject',
        'mono_repo': 'monoRepo',
        'name': 'name',
        'primary_cloud': 'primaryCloud',
        'project_type_id': 'projectTypeId',
        'relative_path': 'relativePath',
        'repo_name': 'repoName',
        'template': 'template',
        'template_id': 'templateId',
        'template_name': 'templateName',
        'vcs_url': 'vcsUrl'
    }

    def __init__(self, allowed_clouds=None, branch=None, coder_account_id=None, description=None, git_ops_enabled=None, github_account_id=None, github_organisation_name=None, is_imported_project=None, mono_repo=None, name=None, primary_cloud=None, project_type_id=None, relative_path=None, repo_name=None, template=None, template_id=None, template_name=None, vcs_url=None):  # noqa: E501
        """CreateBlueprintRequest - a model defined in Swagger"""  # noqa: E501
        self._allowed_clouds = None
        self._branch = None
        self._coder_account_id = None
        self._description = None
        self._git_ops_enabled = None
        self._github_account_id = None
        self._github_organisation_name = None
        self._is_imported_project = None
        self._mono_repo = None
        self._name = None
        self._primary_cloud = None
        self._project_type_id = None
        self._relative_path = None
        self._repo_name = None
        self._template = None
        self._template_id = None
        self._template_name = None
        self._vcs_url = None
        self.discriminator = None
        if allowed_clouds is not None:
            self.allowed_clouds = allowed_clouds
        if branch is not None:
            self.branch = branch
        if coder_account_id is not None:
            self.coder_account_id = coder_account_id
        if description is not None:
            self.description = description
        if git_ops_enabled is not None:
            self.git_ops_enabled = git_ops_enabled
        if github_account_id is not None:
            self.github_account_id = github_account_id
        if github_organisation_name is not None:
            self.github_organisation_name = github_organisation_name
        if is_imported_project is not None:
            self.is_imported_project = is_imported_project
        if mono_repo is not None:
            self.mono_repo = mono_repo
        if name is not None:
            self.name = name
        if primary_cloud is not None:
            self.primary_cloud = primary_cloud
        if project_type_id is not None:
            self.project_type_id = project_type_id
        if relative_path is not None:
            self.relative_path = relative_path
        if repo_name is not None:
            self.repo_name = repo_name
        if template is not None:
            self.template = template
        if template_id is not None:
            self.template_id = template_id
        if template_name is not None:
            self.template_name = template_name
        if vcs_url is not None:
            self.vcs_url = vcs_url

    @property
    def allowed_clouds(self):
        """Gets the allowed_clouds of this CreateBlueprintRequest.  # noqa: E501


        :return: The allowed_clouds of this CreateBlueprintRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_clouds

    @allowed_clouds.setter
    def allowed_clouds(self, allowed_clouds):
        """Sets the allowed_clouds of this CreateBlueprintRequest.


        :param allowed_clouds: The allowed_clouds of this CreateBlueprintRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES"]  # noqa: E501
        if not set(allowed_clouds).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_clouds` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_clouds) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_clouds = allowed_clouds

    @property
    def branch(self):
        """Gets the branch of this CreateBlueprintRequest.  # noqa: E501


        :return: The branch of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CreateBlueprintRequest.


        :param branch: The branch of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def coder_account_id(self):
        """Gets the coder_account_id of this CreateBlueprintRequest.  # noqa: E501


        :return: The coder_account_id of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._coder_account_id

    @coder_account_id.setter
    def coder_account_id(self, coder_account_id):
        """Sets the coder_account_id of this CreateBlueprintRequest.


        :param coder_account_id: The coder_account_id of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._coder_account_id = coder_account_id

    @property
    def description(self):
        """Gets the description of this CreateBlueprintRequest.  # noqa: E501


        :return: The description of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBlueprintRequest.


        :param description: The description of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def git_ops_enabled(self):
        """Gets the git_ops_enabled of this CreateBlueprintRequest.  # noqa: E501


        :return: The git_ops_enabled of this CreateBlueprintRequest.  # noqa: E501
        :rtype: bool
        """
        return self._git_ops_enabled

    @git_ops_enabled.setter
    def git_ops_enabled(self, git_ops_enabled):
        """Sets the git_ops_enabled of this CreateBlueprintRequest.


        :param git_ops_enabled: The git_ops_enabled of this CreateBlueprintRequest.  # noqa: E501
        :type: bool
        """

        self._git_ops_enabled = git_ops_enabled

    @property
    def github_account_id(self):
        """Gets the github_account_id of this CreateBlueprintRequest.  # noqa: E501


        :return: The github_account_id of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._github_account_id

    @github_account_id.setter
    def github_account_id(self, github_account_id):
        """Sets the github_account_id of this CreateBlueprintRequest.


        :param github_account_id: The github_account_id of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._github_account_id = github_account_id

    @property
    def github_organisation_name(self):
        """Gets the github_organisation_name of this CreateBlueprintRequest.  # noqa: E501


        :return: The github_organisation_name of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._github_organisation_name

    @github_organisation_name.setter
    def github_organisation_name(self, github_organisation_name):
        """Sets the github_organisation_name of this CreateBlueprintRequest.


        :param github_organisation_name: The github_organisation_name of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._github_organisation_name = github_organisation_name

    @property
    def is_imported_project(self):
        """Gets the is_imported_project of this CreateBlueprintRequest.  # noqa: E501


        :return: The is_imported_project of this CreateBlueprintRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_imported_project

    @is_imported_project.setter
    def is_imported_project(self, is_imported_project):
        """Sets the is_imported_project of this CreateBlueprintRequest.


        :param is_imported_project: The is_imported_project of this CreateBlueprintRequest.  # noqa: E501
        :type: bool
        """

        self._is_imported_project = is_imported_project

    @property
    def mono_repo(self):
        """Gets the mono_repo of this CreateBlueprintRequest.  # noqa: E501


        :return: The mono_repo of this CreateBlueprintRequest.  # noqa: E501
        :rtype: bool
        """
        return self._mono_repo

    @mono_repo.setter
    def mono_repo(self, mono_repo):
        """Sets the mono_repo of this CreateBlueprintRequest.


        :param mono_repo: The mono_repo of this CreateBlueprintRequest.  # noqa: E501
        :type: bool
        """

        self._mono_repo = mono_repo

    @property
    def name(self):
        """Gets the name of this CreateBlueprintRequest.  # noqa: E501


        :return: The name of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBlueprintRequest.


        :param name: The name of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_cloud(self):
        """Gets the primary_cloud of this CreateBlueprintRequest.  # noqa: E501


        :return: The primary_cloud of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._primary_cloud

    @primary_cloud.setter
    def primary_cloud(self, primary_cloud):
        """Sets the primary_cloud of this CreateBlueprintRequest.


        :param primary_cloud: The primary_cloud of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWS", "AZURE", "LOCAL", "GCP", "KUBERNETES"]  # noqa: E501
        if primary_cloud not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_cloud` ({0}), must be one of {1}"  # noqa: E501
                .format(primary_cloud, allowed_values)
            )

        self._primary_cloud = primary_cloud

    @property
    def project_type_id(self):
        """Gets the project_type_id of this CreateBlueprintRequest.  # noqa: E501


        :return: The project_type_id of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_type_id

    @project_type_id.setter
    def project_type_id(self, project_type_id):
        """Sets the project_type_id of this CreateBlueprintRequest.


        :param project_type_id: The project_type_id of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._project_type_id = project_type_id

    @property
    def relative_path(self):
        """Gets the relative_path of this CreateBlueprintRequest.  # noqa: E501


        :return: The relative_path of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this CreateBlueprintRequest.


        :param relative_path: The relative_path of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def repo_name(self):
        """Gets the repo_name of this CreateBlueprintRequest.  # noqa: E501


        :return: The repo_name of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this CreateBlueprintRequest.


        :param repo_name: The repo_name of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._repo_name = repo_name

    @property
    def template(self):
        """Gets the template of this CreateBlueprintRequest.  # noqa: E501


        :return: The template of this CreateBlueprintRequest.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CreateBlueprintRequest.


        :param template: The template of this CreateBlueprintRequest.  # noqa: E501
        :type: bool
        """

        self._template = template

    @property
    def template_id(self):
        """Gets the template_id of this CreateBlueprintRequest.  # noqa: E501


        :return: The template_id of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateBlueprintRequest.


        :param template_id: The template_id of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def template_name(self):
        """Gets the template_name of this CreateBlueprintRequest.  # noqa: E501


        :return: The template_name of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this CreateBlueprintRequest.


        :param template_name: The template_name of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def vcs_url(self):
        """Gets the vcs_url of this CreateBlueprintRequest.  # noqa: E501


        :return: The vcs_url of this CreateBlueprintRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_url

    @vcs_url.setter
    def vcs_url(self, vcs_url):
        """Sets the vcs_url of this CreateBlueprintRequest.


        :param vcs_url: The vcs_url of this CreateBlueprintRequest.  # noqa: E501
        :type: str
        """

        self._vcs_url = vcs_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBlueprintRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBlueprintRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
