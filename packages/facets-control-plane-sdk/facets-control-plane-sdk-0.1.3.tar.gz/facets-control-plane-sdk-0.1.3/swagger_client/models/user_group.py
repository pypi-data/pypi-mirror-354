# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'list[str]',
        'additional_roles': 'list[str]',
        'associated_resource_groups': 'list[str]',
        'base_role': 'str',
        'change_log': 'str',
        'cluster_ids': 'list[str]',
        'cluster_role_bindings': 'dict(str, str)',
        'entity_type': 'str',
        'group_name': 'str',
        'id': 'str',
        'number_of_versions': 'int',
        'stack_names': 'list[str]',
        'versioning_key': 'str'
    }

    attribute_map = {
        'accounts': 'accounts',
        'additional_roles': 'additionalRoles',
        'associated_resource_groups': 'associatedResourceGroups',
        'base_role': 'baseRole',
        'change_log': 'changeLog',
        'cluster_ids': 'clusterIds',
        'cluster_role_bindings': 'clusterRoleBindings',
        'entity_type': 'entityType',
        'group_name': 'groupName',
        'id': 'id',
        'number_of_versions': 'numberOfVersions',
        'stack_names': 'stackNames',
        'versioning_key': 'versioningKey'
    }

    def __init__(self, accounts=None, additional_roles=None, associated_resource_groups=None, base_role=None, change_log=None, cluster_ids=None, cluster_role_bindings=None, entity_type=None, group_name=None, id=None, number_of_versions=None, stack_names=None, versioning_key=None):  # noqa: E501
        """UserGroup - a model defined in Swagger"""  # noqa: E501
        self._accounts = None
        self._additional_roles = None
        self._associated_resource_groups = None
        self._base_role = None
        self._change_log = None
        self._cluster_ids = None
        self._cluster_role_bindings = None
        self._entity_type = None
        self._group_name = None
        self._id = None
        self._number_of_versions = None
        self._stack_names = None
        self._versioning_key = None
        self.discriminator = None
        if accounts is not None:
            self.accounts = accounts
        if additional_roles is not None:
            self.additional_roles = additional_roles
        if associated_resource_groups is not None:
            self.associated_resource_groups = associated_resource_groups
        if base_role is not None:
            self.base_role = base_role
        if change_log is not None:
            self.change_log = change_log
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if cluster_role_bindings is not None:
            self.cluster_role_bindings = cluster_role_bindings
        if entity_type is not None:
            self.entity_type = entity_type
        if group_name is not None:
            self.group_name = group_name
        if id is not None:
            self.id = id
        if number_of_versions is not None:
            self.number_of_versions = number_of_versions
        if stack_names is not None:
            self.stack_names = stack_names
        if versioning_key is not None:
            self.versioning_key = versioning_key

    @property
    def accounts(self):
        """Gets the accounts of this UserGroup.  # noqa: E501


        :return: The accounts of this UserGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this UserGroup.


        :param accounts: The accounts of this UserGroup.  # noqa: E501
        :type: list[str]
        """

        self._accounts = accounts

    @property
    def additional_roles(self):
        """Gets the additional_roles of this UserGroup.  # noqa: E501


        :return: The additional_roles of this UserGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_roles

    @additional_roles.setter
    def additional_roles(self, additional_roles):
        """Sets the additional_roles of this UserGroup.


        :param additional_roles: The additional_roles of this UserGroup.  # noqa: E501
        :type: list[str]
        """

        self._additional_roles = additional_roles

    @property
    def associated_resource_groups(self):
        """Gets the associated_resource_groups of this UserGroup.  # noqa: E501


        :return: The associated_resource_groups of this UserGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_resource_groups

    @associated_resource_groups.setter
    def associated_resource_groups(self, associated_resource_groups):
        """Sets the associated_resource_groups of this UserGroup.


        :param associated_resource_groups: The associated_resource_groups of this UserGroup.  # noqa: E501
        :type: list[str]
        """

        self._associated_resource_groups = associated_resource_groups

    @property
    def base_role(self):
        """Gets the base_role of this UserGroup.  # noqa: E501


        :return: The base_role of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._base_role

    @base_role.setter
    def base_role(self, base_role):
        """Sets the base_role of this UserGroup.


        :param base_role: The base_role of this UserGroup.  # noqa: E501
        :type: str
        """

        self._base_role = base_role

    @property
    def change_log(self):
        """Gets the change_log of this UserGroup.  # noqa: E501


        :return: The change_log of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this UserGroup.


        :param change_log: The change_log of this UserGroup.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this UserGroup.  # noqa: E501


        :return: The cluster_ids of this UserGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this UserGroup.


        :param cluster_ids: The cluster_ids of this UserGroup.  # noqa: E501
        :type: list[str]
        """

        self._cluster_ids = cluster_ids

    @property
    def cluster_role_bindings(self):
        """Gets the cluster_role_bindings of this UserGroup.  # noqa: E501


        :return: The cluster_role_bindings of this UserGroup.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._cluster_role_bindings

    @cluster_role_bindings.setter
    def cluster_role_bindings(self, cluster_role_bindings):
        """Sets the cluster_role_bindings of this UserGroup.


        :param cluster_role_bindings: The cluster_role_bindings of this UserGroup.  # noqa: E501
        :type: dict(str, str)
        """

        self._cluster_role_bindings = cluster_role_bindings

    @property
    def entity_type(self):
        """Gets the entity_type of this UserGroup.  # noqa: E501


        :return: The entity_type of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this UserGroup.


        :param entity_type: The entity_type of this UserGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUSTER", "BLUE_PRINT", "TEMPLATE_INPUT", "CONTROL_PLANE", "IAC", "ARTIFACT_CI", "USER_GROUP", "ACCOUNT", "ARTIFACTORY"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def group_name(self):
        """Gets the group_name of this UserGroup.  # noqa: E501


        :return: The group_name of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UserGroup.


        :param group_name: The group_name of this UserGroup.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this UserGroup.  # noqa: E501


        :return: The id of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserGroup.


        :param id: The id of this UserGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number_of_versions(self):
        """Gets the number_of_versions of this UserGroup.  # noqa: E501


        :return: The number_of_versions of this UserGroup.  # noqa: E501
        :rtype: int
        """
        return self._number_of_versions

    @number_of_versions.setter
    def number_of_versions(self, number_of_versions):
        """Sets the number_of_versions of this UserGroup.


        :param number_of_versions: The number_of_versions of this UserGroup.  # noqa: E501
        :type: int
        """

        self._number_of_versions = number_of_versions

    @property
    def stack_names(self):
        """Gets the stack_names of this UserGroup.  # noqa: E501


        :return: The stack_names of this UserGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._stack_names

    @stack_names.setter
    def stack_names(self, stack_names):
        """Sets the stack_names of this UserGroup.


        :param stack_names: The stack_names of this UserGroup.  # noqa: E501
        :type: list[str]
        """

        self._stack_names = stack_names

    @property
    def versioning_key(self):
        """Gets the versioning_key of this UserGroup.  # noqa: E501


        :return: The versioning_key of this UserGroup.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this UserGroup.


        :param versioning_key: The versioning_key of this UserGroup.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
