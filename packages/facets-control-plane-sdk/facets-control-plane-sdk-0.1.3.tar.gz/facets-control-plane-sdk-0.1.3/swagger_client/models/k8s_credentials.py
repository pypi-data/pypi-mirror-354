# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class K8sCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kubernetes_api_endpoint': 'str',
        'kubernetes_token': 'str',
        'proxy_http_client_factory': 'Sock5OkHttpClientFactory',
        'proxy_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'kubernetes_api_endpoint': 'kubernetesApiEndpoint',
        'kubernetes_token': 'kubernetesToken',
        'proxy_http_client_factory': 'proxyHttpClientFactory',
        'proxy_url': 'proxyUrl'
    }

    def __init__(self, id=None, kubernetes_api_endpoint=None, kubernetes_token=None, proxy_http_client_factory=None, proxy_url=None):  # noqa: E501
        """K8sCredentials - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._kubernetes_api_endpoint = None
        self._kubernetes_token = None
        self._proxy_http_client_factory = None
        self._proxy_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if kubernetes_api_endpoint is not None:
            self.kubernetes_api_endpoint = kubernetes_api_endpoint
        if kubernetes_token is not None:
            self.kubernetes_token = kubernetes_token
        if proxy_http_client_factory is not None:
            self.proxy_http_client_factory = proxy_http_client_factory
        if proxy_url is not None:
            self.proxy_url = proxy_url

    @property
    def id(self):
        """Gets the id of this K8sCredentials.  # noqa: E501


        :return: The id of this K8sCredentials.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this K8sCredentials.


        :param id: The id of this K8sCredentials.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kubernetes_api_endpoint(self):
        """Gets the kubernetes_api_endpoint of this K8sCredentials.  # noqa: E501


        :return: The kubernetes_api_endpoint of this K8sCredentials.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_api_endpoint

    @kubernetes_api_endpoint.setter
    def kubernetes_api_endpoint(self, kubernetes_api_endpoint):
        """Sets the kubernetes_api_endpoint of this K8sCredentials.


        :param kubernetes_api_endpoint: The kubernetes_api_endpoint of this K8sCredentials.  # noqa: E501
        :type: str
        """

        self._kubernetes_api_endpoint = kubernetes_api_endpoint

    @property
    def kubernetes_token(self):
        """Gets the kubernetes_token of this K8sCredentials.  # noqa: E501


        :return: The kubernetes_token of this K8sCredentials.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes_token

    @kubernetes_token.setter
    def kubernetes_token(self, kubernetes_token):
        """Sets the kubernetes_token of this K8sCredentials.


        :param kubernetes_token: The kubernetes_token of this K8sCredentials.  # noqa: E501
        :type: str
        """

        self._kubernetes_token = kubernetes_token

    @property
    def proxy_http_client_factory(self):
        """Gets the proxy_http_client_factory of this K8sCredentials.  # noqa: E501


        :return: The proxy_http_client_factory of this K8sCredentials.  # noqa: E501
        :rtype: Sock5OkHttpClientFactory
        """
        return self._proxy_http_client_factory

    @proxy_http_client_factory.setter
    def proxy_http_client_factory(self, proxy_http_client_factory):
        """Sets the proxy_http_client_factory of this K8sCredentials.


        :param proxy_http_client_factory: The proxy_http_client_factory of this K8sCredentials.  # noqa: E501
        :type: Sock5OkHttpClientFactory
        """

        self._proxy_http_client_factory = proxy_http_client_factory

    @property
    def proxy_url(self):
        """Gets the proxy_url of this K8sCredentials.  # noqa: E501


        :return: The proxy_url of this K8sCredentials.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this K8sCredentials.


        :param proxy_url: The proxy_url of this K8sCredentials.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(K8sCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, K8sCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
