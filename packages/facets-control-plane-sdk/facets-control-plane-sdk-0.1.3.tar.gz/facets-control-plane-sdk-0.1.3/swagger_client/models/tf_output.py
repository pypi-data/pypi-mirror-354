# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TFOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'facets_yaml': 'str',
        'git_ref': 'str',
        'git_url': 'str',
        'id': 'str',
        'inferred_from_module': 'bool',
        'last_modified_by': 'str',
        'last_modified_date': 'datetime',
        'lookup_tree': 'str',
        'name': 'str',
        'relative_path': 'str',
        'source': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'facets_yaml': 'facetsYaml',
        'git_ref': 'gitRef',
        'git_url': 'gitUrl',
        'id': 'id',
        'inferred_from_module': 'inferredFromModule',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'lookup_tree': 'lookupTree',
        'name': 'name',
        'relative_path': 'relativePath',
        'source': 'source'
    }

    def __init__(self, account_id=None, created_by=None, creation_date=None, facets_yaml=None, git_ref=None, git_url=None, id=None, inferred_from_module=None, last_modified_by=None, last_modified_date=None, lookup_tree=None, name=None, relative_path=None, source=None, _configuration=None):  # noqa: E501
        """TFOutput - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._created_by = None
        self._creation_date = None
        self._facets_yaml = None
        self._git_ref = None
        self._git_url = None
        self._id = None
        self._inferred_from_module = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._lookup_tree = None
        self._name = None
        self._relative_path = None
        self._source = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if facets_yaml is not None:
            self.facets_yaml = facets_yaml
        if git_ref is not None:
            self.git_ref = git_ref
        if git_url is not None:
            self.git_url = git_url
        if id is not None:
            self.id = id
        if inferred_from_module is not None:
            self.inferred_from_module = inferred_from_module
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if lookup_tree is not None:
            self.lookup_tree = lookup_tree
        if name is not None:
            self.name = name
        if relative_path is not None:
            self.relative_path = relative_path
        if source is not None:
            self.source = source

    @property
    def account_id(self):
        """Gets the account_id of this TFOutput.  # noqa: E501


        :return: The account_id of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TFOutput.


        :param account_id: The account_id of this TFOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_by(self):
        """Gets the created_by of this TFOutput.  # noqa: E501


        :return: The created_by of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TFOutput.


        :param created_by: The created_by of this TFOutput.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this TFOutput.  # noqa: E501


        :return: The creation_date of this TFOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TFOutput.


        :param creation_date: The creation_date of this TFOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def facets_yaml(self):
        """Gets the facets_yaml of this TFOutput.  # noqa: E501


        :return: The facets_yaml of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._facets_yaml

    @facets_yaml.setter
    def facets_yaml(self, facets_yaml):
        """Sets the facets_yaml of this TFOutput.


        :param facets_yaml: The facets_yaml of this TFOutput.  # noqa: E501
        :type: str
        """

        self._facets_yaml = facets_yaml

    @property
    def git_ref(self):
        """Gets the git_ref of this TFOutput.  # noqa: E501


        :return: The git_ref of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._git_ref

    @git_ref.setter
    def git_ref(self, git_ref):
        """Sets the git_ref of this TFOutput.


        :param git_ref: The git_ref of this TFOutput.  # noqa: E501
        :type: str
        """

        self._git_ref = git_ref

    @property
    def git_url(self):
        """Gets the git_url of this TFOutput.  # noqa: E501


        :return: The git_url of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._git_url

    @git_url.setter
    def git_url(self, git_url):
        """Sets the git_url of this TFOutput.


        :param git_url: The git_url of this TFOutput.  # noqa: E501
        :type: str
        """

        self._git_url = git_url

    @property
    def id(self):
        """Gets the id of this TFOutput.  # noqa: E501


        :return: The id of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TFOutput.


        :param id: The id of this TFOutput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inferred_from_module(self):
        """Gets the inferred_from_module of this TFOutput.  # noqa: E501


        :return: The inferred_from_module of this TFOutput.  # noqa: E501
        :rtype: bool
        """
        return self._inferred_from_module

    @inferred_from_module.setter
    def inferred_from_module(self, inferred_from_module):
        """Sets the inferred_from_module of this TFOutput.


        :param inferred_from_module: The inferred_from_module of this TFOutput.  # noqa: E501
        :type: bool
        """

        self._inferred_from_module = inferred_from_module

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this TFOutput.  # noqa: E501


        :return: The last_modified_by of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this TFOutput.


        :param last_modified_by: The last_modified_by of this TFOutput.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TFOutput.  # noqa: E501


        :return: The last_modified_date of this TFOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TFOutput.


        :param last_modified_date: The last_modified_date of this TFOutput.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def lookup_tree(self):
        """Gets the lookup_tree of this TFOutput.  # noqa: E501


        :return: The lookup_tree of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._lookup_tree

    @lookup_tree.setter
    def lookup_tree(self, lookup_tree):
        """Sets the lookup_tree of this TFOutput.


        :param lookup_tree: The lookup_tree of this TFOutput.  # noqa: E501
        :type: str
        """

        self._lookup_tree = lookup_tree

    @property
    def name(self):
        """Gets the name of this TFOutput.  # noqa: E501


        :return: The name of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TFOutput.


        :param name: The name of this TFOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def relative_path(self):
        """Gets the relative_path of this TFOutput.  # noqa: E501


        :return: The relative_path of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this TFOutput.


        :param relative_path: The relative_path of this TFOutput.  # noqa: E501
        :type: str
        """

        self._relative_path = relative_path

    @property
    def source(self):
        """Gets the source of this TFOutput.  # noqa: E501


        :return: The source of this TFOutput.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TFOutput.


        :param source: The source of this TFOutput.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUILT_IN", "CUSTOM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TFOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TFOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TFOutput):
            return True

        return self.to_dict() != other.to_dict()
