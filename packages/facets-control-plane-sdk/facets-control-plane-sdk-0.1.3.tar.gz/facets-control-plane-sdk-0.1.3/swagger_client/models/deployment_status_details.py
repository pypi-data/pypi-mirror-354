# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeploymentStatusDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment': 'ApplicationDeploymentDetails',
        'pods': 'list[ApplicationPodDetails]',
        'service': 'ApplicationServiceDetails'
    }

    attribute_map = {
        'deployment': 'deployment',
        'pods': 'pods',
        'service': 'service'
    }

    def __init__(self, deployment=None, pods=None, service=None):  # noqa: E501
        """DeploymentStatusDetails - a model defined in Swagger"""  # noqa: E501
        self._deployment = None
        self._pods = None
        self._service = None
        self.discriminator = None
        if deployment is not None:
            self.deployment = deployment
        if pods is not None:
            self.pods = pods
        if service is not None:
            self.service = service

    @property
    def deployment(self):
        """Gets the deployment of this DeploymentStatusDetails.  # noqa: E501


        :return: The deployment of this DeploymentStatusDetails.  # noqa: E501
        :rtype: ApplicationDeploymentDetails
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this DeploymentStatusDetails.


        :param deployment: The deployment of this DeploymentStatusDetails.  # noqa: E501
        :type: ApplicationDeploymentDetails
        """

        self._deployment = deployment

    @property
    def pods(self):
        """Gets the pods of this DeploymentStatusDetails.  # noqa: E501


        :return: The pods of this DeploymentStatusDetails.  # noqa: E501
        :rtype: list[ApplicationPodDetails]
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this DeploymentStatusDetails.


        :param pods: The pods of this DeploymentStatusDetails.  # noqa: E501
        :type: list[ApplicationPodDetails]
        """

        self._pods = pods

    @property
    def service(self):
        """Gets the service of this DeploymentStatusDetails.  # noqa: E501


        :return: The service of this DeploymentStatusDetails.  # noqa: E501
        :rtype: ApplicationServiceDetails
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DeploymentStatusDetails.


        :param service: The service of this DeploymentStatusDetails.  # noqa: E501
        :type: ApplicationServiceDetails
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentStatusDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentStatusDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
