# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceFileRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'directory': 'str',
        'filename': 'str',
        'flavor': 'str',
        'merge_content': 'object',
        'resource_name': 'str',
        'resource_type': 'str'
    }

    attribute_map = {
        'content': 'content',
        'directory': 'directory',
        'filename': 'filename',
        'flavor': 'flavor',
        'merge_content': 'mergeContent',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType'
    }

    def __init__(self, content=None, directory=None, filename=None, flavor=None, merge_content=None, resource_name=None, resource_type=None):  # noqa: E501
        """ResourceFileRequest - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._directory = None
        self._filename = None
        self._flavor = None
        self._merge_content = None
        self._resource_name = None
        self._resource_type = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if directory is not None:
            self.directory = directory
        if filename is not None:
            self.filename = filename
        if flavor is not None:
            self.flavor = flavor
        if merge_content is not None:
            self.merge_content = merge_content
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def content(self):
        """Gets the content of this ResourceFileRequest.  # noqa: E501


        :return: The content of this ResourceFileRequest.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ResourceFileRequest.


        :param content: The content of this ResourceFileRequest.  # noqa: E501
        :type: object
        """

        self._content = content

    @property
    def directory(self):
        """Gets the directory of this ResourceFileRequest.  # noqa: E501


        :return: The directory of this ResourceFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this ResourceFileRequest.


        :param directory: The directory of this ResourceFileRequest.  # noqa: E501
        :type: str
        """

        self._directory = directory

    @property
    def filename(self):
        """Gets the filename of this ResourceFileRequest.  # noqa: E501


        :return: The filename of this ResourceFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ResourceFileRequest.


        :param filename: The filename of this ResourceFileRequest.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def flavor(self):
        """Gets the flavor of this ResourceFileRequest.  # noqa: E501


        :return: The flavor of this ResourceFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this ResourceFileRequest.


        :param flavor: The flavor of this ResourceFileRequest.  # noqa: E501
        :type: str
        """

        self._flavor = flavor

    @property
    def merge_content(self):
        """Gets the merge_content of this ResourceFileRequest.  # noqa: E501


        :return: The merge_content of this ResourceFileRequest.  # noqa: E501
        :rtype: object
        """
        return self._merge_content

    @merge_content.setter
    def merge_content(self, merge_content):
        """Sets the merge_content of this ResourceFileRequest.


        :param merge_content: The merge_content of this ResourceFileRequest.  # noqa: E501
        :type: object
        """

        self._merge_content = merge_content

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceFileRequest.  # noqa: E501


        :return: The resource_name of this ResourceFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceFileRequest.


        :param resource_name: The resource_name of this ResourceFileRequest.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceFileRequest.  # noqa: E501


        :return: The resource_type of this ResourceFileRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceFileRequest.


        :param resource_type: The resource_type of this ResourceFileRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceFileRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceFileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
