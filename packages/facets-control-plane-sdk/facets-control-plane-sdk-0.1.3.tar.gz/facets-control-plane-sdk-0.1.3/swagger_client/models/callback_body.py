# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallbackBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'str',
        'application_family': 'str',
        'branch': 'Branch',
        'deployer_build_id': 'str',
        'pr_number': 'str',
        'properties': 'dict(str, str)',
        'quality_gate': 'QualityGate',
        'status': 'str'
    }

    attribute_map = {
        'app_id': 'appId',
        'application_family': 'applicationFamily',
        'branch': 'branch',
        'deployer_build_id': 'deployerBuildId',
        'pr_number': 'prNumber',
        'properties': 'properties',
        'quality_gate': 'qualityGate',
        'status': 'status'
    }

    def __init__(self, app_id=None, application_family=None, branch=None, deployer_build_id=None, pr_number=None, properties=None, quality_gate=None, status=None):  # noqa: E501
        """CallbackBody - a model defined in Swagger"""  # noqa: E501
        self._app_id = None
        self._application_family = None
        self._branch = None
        self._deployer_build_id = None
        self._pr_number = None
        self._properties = None
        self._quality_gate = None
        self._status = None
        self.discriminator = None
        if app_id is not None:
            self.app_id = app_id
        if application_family is not None:
            self.application_family = application_family
        if branch is not None:
            self.branch = branch
        if deployer_build_id is not None:
            self.deployer_build_id = deployer_build_id
        if pr_number is not None:
            self.pr_number = pr_number
        if properties is not None:
            self.properties = properties
        if quality_gate is not None:
            self.quality_gate = quality_gate
        if status is not None:
            self.status = status

    @property
    def app_id(self):
        """Gets the app_id of this CallbackBody.  # noqa: E501


        :return: The app_id of this CallbackBody.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this CallbackBody.


        :param app_id: The app_id of this CallbackBody.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def application_family(self):
        """Gets the application_family of this CallbackBody.  # noqa: E501


        :return: The application_family of this CallbackBody.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this CallbackBody.


        :param application_family: The application_family of this CallbackBody.  # noqa: E501
        :type: str
        """

        self._application_family = application_family

    @property
    def branch(self):
        """Gets the branch of this CallbackBody.  # noqa: E501


        :return: The branch of this CallbackBody.  # noqa: E501
        :rtype: Branch
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this CallbackBody.


        :param branch: The branch of this CallbackBody.  # noqa: E501
        :type: Branch
        """

        self._branch = branch

    @property
    def deployer_build_id(self):
        """Gets the deployer_build_id of this CallbackBody.  # noqa: E501


        :return: The deployer_build_id of this CallbackBody.  # noqa: E501
        :rtype: str
        """
        return self._deployer_build_id

    @deployer_build_id.setter
    def deployer_build_id(self, deployer_build_id):
        """Sets the deployer_build_id of this CallbackBody.


        :param deployer_build_id: The deployer_build_id of this CallbackBody.  # noqa: E501
        :type: str
        """

        self._deployer_build_id = deployer_build_id

    @property
    def pr_number(self):
        """Gets the pr_number of this CallbackBody.  # noqa: E501


        :return: The pr_number of this CallbackBody.  # noqa: E501
        :rtype: str
        """
        return self._pr_number

    @pr_number.setter
    def pr_number(self, pr_number):
        """Sets the pr_number of this CallbackBody.


        :param pr_number: The pr_number of this CallbackBody.  # noqa: E501
        :type: str
        """

        self._pr_number = pr_number

    @property
    def properties(self):
        """Gets the properties of this CallbackBody.  # noqa: E501


        :return: The properties of this CallbackBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CallbackBody.


        :param properties: The properties of this CallbackBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def quality_gate(self):
        """Gets the quality_gate of this CallbackBody.  # noqa: E501


        :return: The quality_gate of this CallbackBody.  # noqa: E501
        :rtype: QualityGate
        """
        return self._quality_gate

    @quality_gate.setter
    def quality_gate(self, quality_gate):
        """Sets the quality_gate of this CallbackBody.


        :param quality_gate: The quality_gate of this CallbackBody.  # noqa: E501
        :type: QualityGate
        """

        self._quality_gate = quality_gate

    @property
    def status(self):
        """Gets the status of this CallbackBody.  # noqa: E501


        :return: The status of this CallbackBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CallbackBody.


        :param status: The status of this CallbackBody.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallbackBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallbackBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
