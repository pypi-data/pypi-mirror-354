# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Deployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_family': 'str',
        'application_id': 'str',
        'build_id': 'str',
        'configurations': 'list[EnvironmentVariable]',
        'configurations_map': 'dict(str, str)',
        'deployed_by': 'str',
        'environment': 'str',
        'horizontal_pod_autoscaler': 'HPA',
        'id': 'str',
        'pod_size': 'str',
        'replicas': 'int',
        'rollback_enabled': 'bool',
        'schedule': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'application_family': 'applicationFamily',
        'application_id': 'applicationId',
        'build_id': 'buildId',
        'configurations': 'configurations',
        'configurations_map': 'configurationsMap',
        'deployed_by': 'deployedBy',
        'environment': 'environment',
        'horizontal_pod_autoscaler': 'horizontalPodAutoscaler',
        'id': 'id',
        'pod_size': 'podSize',
        'replicas': 'replicas',
        'rollback_enabled': 'rollbackEnabled',
        'schedule': 'schedule',
        'timestamp': 'timestamp'
    }

    def __init__(self, application_family=None, application_id=None, build_id=None, configurations=None, configurations_map=None, deployed_by=None, environment=None, horizontal_pod_autoscaler=None, id=None, pod_size=None, replicas=None, rollback_enabled=None, schedule=None, timestamp=None):  # noqa: E501
        """Deployment - a model defined in Swagger"""  # noqa: E501
        self._application_family = None
        self._application_id = None
        self._build_id = None
        self._configurations = None
        self._configurations_map = None
        self._deployed_by = None
        self._environment = None
        self._horizontal_pod_autoscaler = None
        self._id = None
        self._pod_size = None
        self._replicas = None
        self._rollback_enabled = None
        self._schedule = None
        self._timestamp = None
        self.discriminator = None
        if application_family is not None:
            self.application_family = application_family
        if application_id is not None:
            self.application_id = application_id
        if build_id is not None:
            self.build_id = build_id
        if configurations is not None:
            self.configurations = configurations
        if configurations_map is not None:
            self.configurations_map = configurations_map
        if deployed_by is not None:
            self.deployed_by = deployed_by
        if environment is not None:
            self.environment = environment
        if horizontal_pod_autoscaler is not None:
            self.horizontal_pod_autoscaler = horizontal_pod_autoscaler
        if id is not None:
            self.id = id
        if pod_size is not None:
            self.pod_size = pod_size
        if replicas is not None:
            self.replicas = replicas
        if rollback_enabled is not None:
            self.rollback_enabled = rollback_enabled
        if schedule is not None:
            self.schedule = schedule
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def application_family(self):
        """Gets the application_family of this Deployment.  # noqa: E501


        :return: The application_family of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this Deployment.


        :param application_family: The application_family of this Deployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRM", "ECOMMERCE", "INTEGRATIONS", "OPS"]  # noqa: E501
        if application_family not in allowed_values:
            raise ValueError(
                "Invalid value for `application_family` ({0}), must be one of {1}"  # noqa: E501
                .format(application_family, allowed_values)
            )

        self._application_family = application_family

    @property
    def application_id(self):
        """Gets the application_id of this Deployment.  # noqa: E501


        :return: The application_id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Deployment.


        :param application_id: The application_id of this Deployment.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def build_id(self):
        """Gets the build_id of this Deployment.  # noqa: E501


        :return: The build_id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this Deployment.


        :param build_id: The build_id of this Deployment.  # noqa: E501
        :type: str
        """

        self._build_id = build_id

    @property
    def configurations(self):
        """Gets the configurations of this Deployment.  # noqa: E501


        :return: The configurations of this Deployment.  # noqa: E501
        :rtype: list[EnvironmentVariable]
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this Deployment.


        :param configurations: The configurations of this Deployment.  # noqa: E501
        :type: list[EnvironmentVariable]
        """

        self._configurations = configurations

    @property
    def configurations_map(self):
        """Gets the configurations_map of this Deployment.  # noqa: E501


        :return: The configurations_map of this Deployment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._configurations_map

    @configurations_map.setter
    def configurations_map(self, configurations_map):
        """Sets the configurations_map of this Deployment.


        :param configurations_map: The configurations_map of this Deployment.  # noqa: E501
        :type: dict(str, str)
        """

        self._configurations_map = configurations_map

    @property
    def deployed_by(self):
        """Gets the deployed_by of this Deployment.  # noqa: E501


        :return: The deployed_by of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._deployed_by

    @deployed_by.setter
    def deployed_by(self, deployed_by):
        """Sets the deployed_by of this Deployment.


        :param deployed_by: The deployed_by of this Deployment.  # noqa: E501
        :type: str
        """

        self._deployed_by = deployed_by

    @property
    def environment(self):
        """Gets the environment of this Deployment.  # noqa: E501


        :return: The environment of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Deployment.


        :param environment: The environment of this Deployment.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def horizontal_pod_autoscaler(self):
        """Gets the horizontal_pod_autoscaler of this Deployment.  # noqa: E501


        :return: The horizontal_pod_autoscaler of this Deployment.  # noqa: E501
        :rtype: HPA
        """
        return self._horizontal_pod_autoscaler

    @horizontal_pod_autoscaler.setter
    def horizontal_pod_autoscaler(self, horizontal_pod_autoscaler):
        """Sets the horizontal_pod_autoscaler of this Deployment.


        :param horizontal_pod_autoscaler: The horizontal_pod_autoscaler of this Deployment.  # noqa: E501
        :type: HPA
        """

        self._horizontal_pod_autoscaler = horizontal_pod_autoscaler

    @property
    def id(self):
        """Gets the id of this Deployment.  # noqa: E501


        :return: The id of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Deployment.


        :param id: The id of this Deployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pod_size(self):
        """Gets the pod_size of this Deployment.  # noqa: E501


        :return: The pod_size of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._pod_size

    @pod_size.setter
    def pod_size(self, pod_size):
        """Sets the pod_size of this Deployment.


        :param pod_size: The pod_size of this Deployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "LARGE", "XLARGE", "XXLARGE", "TINY", "MICRO"]  # noqa: E501
        if pod_size not in allowed_values:
            raise ValueError(
                "Invalid value for `pod_size` ({0}), must be one of {1}"  # noqa: E501
                .format(pod_size, allowed_values)
            )

        self._pod_size = pod_size

    @property
    def replicas(self):
        """Gets the replicas of this Deployment.  # noqa: E501


        :return: The replicas of this Deployment.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this Deployment.


        :param replicas: The replicas of this Deployment.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def rollback_enabled(self):
        """Gets the rollback_enabled of this Deployment.  # noqa: E501


        :return: The rollback_enabled of this Deployment.  # noqa: E501
        :rtype: bool
        """
        return self._rollback_enabled

    @rollback_enabled.setter
    def rollback_enabled(self, rollback_enabled):
        """Sets the rollback_enabled of this Deployment.


        :param rollback_enabled: The rollback_enabled of this Deployment.  # noqa: E501
        :type: bool
        """

        self._rollback_enabled = rollback_enabled

    @property
    def schedule(self):
        """Gets the schedule of this Deployment.  # noqa: E501


        :return: The schedule of this Deployment.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Deployment.


        :param schedule: The schedule of this Deployment.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def timestamp(self):
        """Gets the timestamp of this Deployment.  # noqa: E501


        :return: The timestamp of this Deployment.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Deployment.


        :param timestamp: The timestamp of this Deployment.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Deployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
