# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QASuiteResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_id': 'str',
        'id': 'str',
        'module_status_map': 'dict(str, str)',
        'redeployment': 'bool',
        'status': 'str'
    }

    attribute_map = {
        'deployment_id': 'deploymentId',
        'id': 'id',
        'module_status_map': 'moduleStatusMap',
        'redeployment': 'redeployment',
        'status': 'status'
    }

    def __init__(self, deployment_id=None, id=None, module_status_map=None, redeployment=None, status=None):  # noqa: E501
        """QASuiteResult - a model defined in Swagger"""  # noqa: E501
        self._deployment_id = None
        self._id = None
        self._module_status_map = None
        self._redeployment = None
        self._status = None
        self.discriminator = None
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if id is not None:
            self.id = id
        if module_status_map is not None:
            self.module_status_map = module_status_map
        if redeployment is not None:
            self.redeployment = redeployment
        if status is not None:
            self.status = status

    @property
    def deployment_id(self):
        """Gets the deployment_id of this QASuiteResult.  # noqa: E501


        :return: The deployment_id of this QASuiteResult.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this QASuiteResult.


        :param deployment_id: The deployment_id of this QASuiteResult.  # noqa: E501
        :type: str
        """

        self._deployment_id = deployment_id

    @property
    def id(self):
        """Gets the id of this QASuiteResult.  # noqa: E501


        :return: The id of this QASuiteResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QASuiteResult.


        :param id: The id of this QASuiteResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def module_status_map(self):
        """Gets the module_status_map of this QASuiteResult.  # noqa: E501


        :return: The module_status_map of this QASuiteResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._module_status_map

    @module_status_map.setter
    def module_status_map(self, module_status_map):
        """Sets the module_status_map of this QASuiteResult.


        :param module_status_map: The module_status_map of this QASuiteResult.  # noqa: E501
        :type: dict(str, str)
        """

        self._module_status_map = module_status_map

    @property
    def redeployment(self):
        """Gets the redeployment of this QASuiteResult.  # noqa: E501


        :return: The redeployment of this QASuiteResult.  # noqa: E501
        :rtype: bool
        """
        return self._redeployment

    @redeployment.setter
    def redeployment(self, redeployment):
        """Sets the redeployment of this QASuiteResult.


        :param redeployment: The redeployment of this QASuiteResult.  # noqa: E501
        :type: bool
        """

        self._redeployment = redeployment

    @property
    def status(self):
        """Gets the status of this QASuiteResult.  # noqa: E501


        :return: The status of this QASuiteResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QASuiteResult.


        :param status: The status of this QASuiteResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["NA", "SUCCESS", "ERROR", "FAILURE", "TIMEOUT", "CANCELLED", "RUNNING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QASuiteResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QASuiteResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
