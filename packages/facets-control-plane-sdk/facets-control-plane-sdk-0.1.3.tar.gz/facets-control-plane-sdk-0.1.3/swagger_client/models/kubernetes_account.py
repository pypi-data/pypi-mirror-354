# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KubernetesAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_type': 'str',
        'associated_to': 'list[AccountAssociationInfo]',
        'certificate_authority': 'str',
        'change_log': 'str',
        'created_by': 'str',
        'creation_date': 'datetime',
        'entity_type': 'str',
        'host': 'str',
        'id': 'str',
        'in_use': 'bool',
        'last_modified_by': 'str',
        'last_modified_date': 'datetime',
        'name': 'str',
        'number_of_versions': 'int',
        'provider': 'str',
        'secrets_uid': 'str',
        'system_defined': 'bool',
        'token': 'str',
        'versioning_key': 'str'
    }

    attribute_map = {
        'account_type': 'accountType',
        'associated_to': 'associatedTo',
        'certificate_authority': 'certificateAuthority',
        'change_log': 'changeLog',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'entity_type': 'entityType',
        'host': 'host',
        'id': 'id',
        'in_use': 'inUse',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'name': 'name',
        'number_of_versions': 'numberOfVersions',
        'provider': 'provider',
        'secrets_uid': 'secretsUid',
        'system_defined': 'systemDefined',
        'token': 'token',
        'versioning_key': 'versioningKey'
    }

    def __init__(self, account_type=None, associated_to=None, certificate_authority=None, change_log=None, created_by=None, creation_date=None, entity_type=None, host=None, id=None, in_use=None, last_modified_by=None, last_modified_date=None, name=None, number_of_versions=None, provider=None, secrets_uid=None, system_defined=None, token=None, versioning_key=None):  # noqa: E501
        """KubernetesAccount - a model defined in Swagger"""  # noqa: E501
        self._account_type = None
        self._associated_to = None
        self._certificate_authority = None
        self._change_log = None
        self._created_by = None
        self._creation_date = None
        self._entity_type = None
        self._host = None
        self._id = None
        self._in_use = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._name = None
        self._number_of_versions = None
        self._provider = None
        self._secrets_uid = None
        self._system_defined = None
        self._token = None
        self._versioning_key = None
        self.discriminator = None
        if account_type is not None:
            self.account_type = account_type
        if associated_to is not None:
            self.associated_to = associated_to
        if certificate_authority is not None:
            self.certificate_authority = certificate_authority
        if change_log is not None:
            self.change_log = change_log
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if entity_type is not None:
            self.entity_type = entity_type
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if in_use is not None:
            self.in_use = in_use
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if name is not None:
            self.name = name
        if number_of_versions is not None:
            self.number_of_versions = number_of_versions
        if provider is not None:
            self.provider = provider
        if secrets_uid is not None:
            self.secrets_uid = secrets_uid
        if system_defined is not None:
            self.system_defined = system_defined
        if token is not None:
            self.token = token
        if versioning_key is not None:
            self.versioning_key = versioning_key

    @property
    def account_type(self):
        """Gets the account_type of this KubernetesAccount.  # noqa: E501


        :return: The account_type of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this KubernetesAccount.


        :param account_type: The account_type of this KubernetesAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERSION_CONTROL", "CLOUD", "CODER"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def associated_to(self):
        """Gets the associated_to of this KubernetesAccount.  # noqa: E501


        :return: The associated_to of this KubernetesAccount.  # noqa: E501
        :rtype: list[AccountAssociationInfo]
        """
        return self._associated_to

    @associated_to.setter
    def associated_to(self, associated_to):
        """Sets the associated_to of this KubernetesAccount.


        :param associated_to: The associated_to of this KubernetesAccount.  # noqa: E501
        :type: list[AccountAssociationInfo]
        """

        self._associated_to = associated_to

    @property
    def certificate_authority(self):
        """Gets the certificate_authority of this KubernetesAccount.  # noqa: E501


        :return: The certificate_authority of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._certificate_authority

    @certificate_authority.setter
    def certificate_authority(self, certificate_authority):
        """Sets the certificate_authority of this KubernetesAccount.


        :param certificate_authority: The certificate_authority of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._certificate_authority = certificate_authority

    @property
    def change_log(self):
        """Gets the change_log of this KubernetesAccount.  # noqa: E501


        :return: The change_log of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this KubernetesAccount.


        :param change_log: The change_log of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._change_log = change_log

    @property
    def created_by(self):
        """Gets the created_by of this KubernetesAccount.  # noqa: E501


        :return: The created_by of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this KubernetesAccount.


        :param created_by: The created_by of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this KubernetesAccount.  # noqa: E501


        :return: The creation_date of this KubernetesAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this KubernetesAccount.


        :param creation_date: The creation_date of this KubernetesAccount.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def entity_type(self):
        """Gets the entity_type of this KubernetesAccount.  # noqa: E501


        :return: The entity_type of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this KubernetesAccount.


        :param entity_type: The entity_type of this KubernetesAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUSTER", "BLUE_PRINT", "TEMPLATE_INPUT", "CONTROL_PLANE", "IAC", "ARTIFACT_CI", "USER_GROUP", "ACCOUNT", "ARTIFACTORY"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def host(self):
        """Gets the host of this KubernetesAccount.  # noqa: E501


        :return: The host of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this KubernetesAccount.


        :param host: The host of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this KubernetesAccount.  # noqa: E501


        :return: The id of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KubernetesAccount.


        :param id: The id of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_use(self):
        """Gets the in_use of this KubernetesAccount.  # noqa: E501


        :return: The in_use of this KubernetesAccount.  # noqa: E501
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this KubernetesAccount.


        :param in_use: The in_use of this KubernetesAccount.  # noqa: E501
        :type: bool
        """

        self._in_use = in_use

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this KubernetesAccount.  # noqa: E501


        :return: The last_modified_by of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this KubernetesAccount.


        :param last_modified_by: The last_modified_by of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this KubernetesAccount.  # noqa: E501


        :return: The last_modified_date of this KubernetesAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this KubernetesAccount.


        :param last_modified_date: The last_modified_date of this KubernetesAccount.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def name(self):
        """Gets the name of this KubernetesAccount.  # noqa: E501


        :return: The name of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubernetesAccount.


        :param name: The name of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_versions(self):
        """Gets the number_of_versions of this KubernetesAccount.  # noqa: E501


        :return: The number_of_versions of this KubernetesAccount.  # noqa: E501
        :rtype: int
        """
        return self._number_of_versions

    @number_of_versions.setter
    def number_of_versions(self, number_of_versions):
        """Sets the number_of_versions of this KubernetesAccount.


        :param number_of_versions: The number_of_versions of this KubernetesAccount.  # noqa: E501
        :type: int
        """

        self._number_of_versions = number_of_versions

    @property
    def provider(self):
        """Gets the provider of this KubernetesAccount.  # noqa: E501


        :return: The provider of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this KubernetesAccount.


        :param provider: The provider of this KubernetesAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["GITHUB", "BITBUCKET", "GITLAB", "AWS", "AZURE", "GCP", "KUBERNETES", "CODER"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def secrets_uid(self):
        """Gets the secrets_uid of this KubernetesAccount.  # noqa: E501


        :return: The secrets_uid of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._secrets_uid

    @secrets_uid.setter
    def secrets_uid(self, secrets_uid):
        """Sets the secrets_uid of this KubernetesAccount.


        :param secrets_uid: The secrets_uid of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._secrets_uid = secrets_uid

    @property
    def system_defined(self):
        """Gets the system_defined of this KubernetesAccount.  # noqa: E501


        :return: The system_defined of this KubernetesAccount.  # noqa: E501
        :rtype: bool
        """
        return self._system_defined

    @system_defined.setter
    def system_defined(self, system_defined):
        """Sets the system_defined of this KubernetesAccount.


        :param system_defined: The system_defined of this KubernetesAccount.  # noqa: E501
        :type: bool
        """

        self._system_defined = system_defined

    @property
    def token(self):
        """Gets the token of this KubernetesAccount.  # noqa: E501


        :return: The token of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this KubernetesAccount.


        :param token: The token of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def versioning_key(self):
        """Gets the versioning_key of this KubernetesAccount.  # noqa: E501


        :return: The versioning_key of this KubernetesAccount.  # noqa: E501
        :rtype: str
        """
        return self._versioning_key

    @versioning_key.setter
    def versioning_key(self, versioning_key):
        """Sets the versioning_key of this KubernetesAccount.


        :param versioning_key: The versioning_key of this KubernetesAccount.  # noqa: E501
        :type: str
        """

        self._versioning_key = versioning_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubernetesAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
