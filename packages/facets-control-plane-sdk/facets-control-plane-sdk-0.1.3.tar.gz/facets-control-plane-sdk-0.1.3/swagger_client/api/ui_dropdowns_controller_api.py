# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiDropdownsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_affected_resources_by_cluster_using_post(self, body, cluster_id, **kwargs):  # noqa: E501
        """getAffectedResourcesByCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_resources_by_cluster_using_post(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AffectedResourcesRequest body: request (required)
        :param str cluster_id: clusterId (required)
        :return: ResourceAffectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_affected_resources_by_cluster_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_affected_resources_by_cluster_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
            return data

    def get_affected_resources_by_cluster_using_post_with_http_info(self, body, cluster_id, **kwargs):  # noqa: E501
        """getAffectedResourcesByCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_resources_by_cluster_using_post_with_http_info(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AffectedResourcesRequest body: request (required)
        :param str cluster_id: clusterId (required)
        :return: ResourceAffectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_affected_resources_by_cluster_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_affected_resources_by_cluster_using_post`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_affected_resources_by_cluster_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/cluster/{clusterId}/affected-resources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceAffectedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_affected_resources_by_stack_using_post(self, body, stack_name, **kwargs):  # noqa: E501
        """getAffectedResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_resources_by_stack_using_post(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AffectedResourcesRequest body: request (required)
        :param str stack_name: stackName (required)
        :return: ResourceAffectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_affected_resources_by_stack_using_post_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_affected_resources_by_stack_using_post_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def get_affected_resources_by_stack_using_post_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """getAffectedResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_affected_resources_by_stack_using_post_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AffectedResourcesRequest body: request (required)
        :param str stack_name: stackName (required)
        :return: ResourceAffectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_affected_resources_by_stack_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_affected_resources_by_stack_using_post`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_affected_resources_by_stack_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/affected-resources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceAffectedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_cluster_resources_by_stack_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getAllClusterResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cluster_resources_by_stack_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_cluster_resources_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_cluster_resources_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_all_cluster_resources_by_stack_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getAllClusterResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_cluster_resources_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_cluster_resources_by_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_all_cluster_resources_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_all_cluster_resources_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all_cluster_resources_by_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/cluster-resources-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_permissions_using_get(self, **kwargs):  # noqa: E501
        """getAllPermissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_permissions_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RBACEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_permissions_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_permissions_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_permissions_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllPermissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_permissions_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RBACEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_permissions_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/getAllPermissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RBACEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_resources_by_cluster_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getAllResourcesByCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_by_cluster_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool exclude_add_ons: excludeAddOns
        :param bool include_content: includeContent
        :param bool include_substack: includeSubstack
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_resources_by_cluster_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_resources_by_cluster_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_all_resources_by_cluster_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getAllResourcesByCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_by_cluster_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool exclude_add_ons: excludeAddOns
        :param bool include_content: includeContent
        :param bool include_substack: includeSubstack
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'exclude_add_ons', 'include_content', 'include_substack']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_resources_by_cluster_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_all_resources_by_cluster_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'exclude_add_ons' in params:
            query_params.append(('excludeAddOns', params['exclude_add_ons']))  # noqa: E501
        if 'include_content' in params:
            query_params.append(('includeContent', params['include_content']))  # noqa: E501
        if 'include_substack' in params:
            query_params.append(('includeSubstack', params['include_substack']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/cluster/{clusterId}/resources-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_resources_by_stack_using_get(self, stack_name, **kwargs):  # noqa: E501
        """getAllResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_by_stack_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str branch: branch
        :param bool exclude_add_ons: excludeAddOns
        :param bool include_content: includeContent
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_resources_by_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_resources_by_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_all_resources_by_stack_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getAllResourcesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_by_stack_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str branch: branch
        :param bool exclude_add_ons: excludeAddOns
        :param bool include_content: includeContent
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'branch', 'exclude_add_ons', 'include_content']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_resources_by_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all_resources_by_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'exclude_add_ons' in params:
            query_params.append(('excludeAddOns', params['exclude_add_ons']))  # noqa: E501
        if 'include_content' in params:
            query_params.append(('includeContent', params['include_content']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/resources-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_resources_for_all_cluster_of_stack_using_get(self, stack_name, **kwargs):  # noqa: E501
        """getAllResourcesForAllClusterOfStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_for_all_cluster_of_stack_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param bool exclude_add_ons: excludeAddOns
        :return: list[ClusterResourcesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_resources_for_all_cluster_of_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_resources_for_all_cluster_of_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_all_resources_for_all_cluster_of_stack_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getAllResourcesForAllClusterOfStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_for_all_cluster_of_stack_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param bool exclude_add_ons: excludeAddOns
        :return: list[ClusterResourcesResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'exclude_add_ons']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_resources_for_all_cluster_of_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_all_resources_for_all_cluster_of_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'exclude_add_ons' in params:
            query_params.append(('excludeAddOns', params['exclude_add_ons']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/all-cluster-resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClusterResourcesResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_resources_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getAllResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool exclude_substack_resources: excludeSubstackResources
        :return: dict(str, list[str])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_resources_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_resources_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_all_resources_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getAllResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_resources_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool exclude_substack_resources: excludeSubstackResources
        :return: dict(str, list[str])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'exclude_substack_resources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_resources_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_all_resources_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'exclude_substack_resources' in params:
            query_params.append(('excludeSubstackResources', params['exclude_substack_resources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/cluster/{clusterId}/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[str])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_vcs_using_get(self, **kwargs):  # noqa: E501
        """getAllVCS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_vcs_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_vcs_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_vcs_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllVCS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_vcs_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_vcs_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/vcs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_list_by_cluster_id_and_resource_name_using_get(self, cluster_id, resource_type, **kwargs):  # noqa: E501
        """getApplicationListByClusterIdAndResourceName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_list_by_cluster_id_and_resource_name_using_get(cluster_id, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_type: resourceType (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_list_by_cluster_id_and_resource_name_using_get_with_http_info(cluster_id, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_list_by_cluster_id_and_resource_name_using_get_with_http_info(cluster_id, resource_type, **kwargs)  # noqa: E501
            return data

    def get_application_list_by_cluster_id_and_resource_name_using_get_with_http_info(self, cluster_id, resource_type, **kwargs):  # noqa: E501
        """getApplicationListByClusterIdAndResourceName  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_list_by_cluster_id_and_resource_name_using_get_with_http_info(cluster_id, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_type: resourceType (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_list_by_cluster_id_and_resource_name_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_application_list_by_cluster_id_and_resource_name_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_application_list_by_cluster_id_and_resource_name_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{clusterId}/{resourceType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_az_for_region_by_cloud_using_get(self, cloud, region, **kwargs):  # noqa: E501
        """getAzForRegionByCloud  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_az_for_region_by_cloud_using_get(cloud, region, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :param str region: region (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_az_for_region_by_cloud_using_get_with_http_info(cloud, region, **kwargs)  # noqa: E501
        else:
            (data) = self.get_az_for_region_by_cloud_using_get_with_http_info(cloud, region, **kwargs)  # noqa: E501
            return data

    def get_az_for_region_by_cloud_using_get_with_http_info(self, cloud, region, **kwargs):  # noqa: E501
        """getAzForRegionByCloud  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_az_for_region_by_cloud_using_get_with_http_info(cloud, region, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :param str region: region (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud', 'region']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_az_for_region_by_cloud_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud' is set
        if ('cloud' not in params or
                params['cloud'] is None):
            raise ValueError("Missing the required parameter `cloud` when calling `get_az_for_region_by_cloud_using_get`")  # noqa: E501
        # verify the required parameter 'region' is set
        if ('region' not in params or
                params['region'] is None):
            raise ValueError("Missing the required parameter `region` when calling `get_az_for_region_by_cloud_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud' in params:
            path_params['cloud'] = params['cloud']  # noqa: E501
        if 'region' in params:
            path_params['region'] = params['region']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{cloud}/region/{region}/availability-zones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_from_facets_modules_using_get(self, file_name, path, **kwargs):  # noqa: E501
        """getFileFromFacetsModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_from_facets_modules_using_get(file_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: fileName (required)
        :param str path: path (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_file_from_facets_modules_using_get_with_http_info(file_name, path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_from_facets_modules_using_get_with_http_info(file_name, path, **kwargs)  # noqa: E501
            return data

    def get_file_from_facets_modules_using_get_with_http_info(self, file_name, path, **kwargs):  # noqa: E501
        """getFileFromFacetsModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_from_facets_modules_using_get_with_http_info(file_name, path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: fileName (required)
        :param str path: path (required)
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_from_facets_modules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `get_file_from_facets_modules_using_get`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `get_file_from_facets_modules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_git_history_for_resource_using_get(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getGitHistoryForResource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_git_history_for_resource_using_get(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: StackGitLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_git_history_for_resource_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_git_history_for_resource_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
            return data

    def get_git_history_for_resource_using_get_with_http_info(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getGitHistoryForResource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_git_history_for_resource_using_get_with_http_info(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: StackGitLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_git_history_for_resource_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_git_history_for_resource_using_get`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_git_history_for_resource_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_git_history_for_resource_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/logs/cluster/{clusterId}/resourceName/{resourceName}/resourceType/{resourceType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StackGitLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_launch_dag_using_get(self, cloud, cluster_id, **kwargs):  # noqa: E501
        """getLaunchDAG  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_launch_dag_using_get(cloud, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :param str cluster_id: clusterId (required)
        :param bool is_dependent: isDependent
        :param bool is_provided_k8s: isProvidedK8s
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_launch_dag_using_get_with_http_info(cloud, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_launch_dag_using_get_with_http_info(cloud, cluster_id, **kwargs)  # noqa: E501
            return data

    def get_launch_dag_using_get_with_http_info(self, cloud, cluster_id, **kwargs):  # noqa: E501
        """getLaunchDAG  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_launch_dag_using_get_with_http_info(cloud, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :param str cluster_id: clusterId (required)
        :param bool is_dependent: isDependent
        :param bool is_provided_k8s: isProvidedK8s
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud', 'cluster_id', 'is_dependent', 'is_provided_k8s']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_launch_dag_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud' is set
        if ('cloud' not in params or
                params['cloud'] is None):
            raise ValueError("Missing the required parameter `cloud` when calling `get_launch_dag_using_get`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_launch_dag_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud' in params:
            path_params['cloud'] = params['cloud']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'is_dependent' in params:
            query_params.append(('isDependent', params['is_dependent']))  # noqa: E501
        if 'is_provided_k8s' in params:
            query_params.append(('isProvidedK8s', params['is_provided_k8s']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{clusterId}/cloud/{cloud}/launch-dag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_output_references_using_get(self, output_type, stack_name, **kwargs):  # noqa: E501
        """getOutputReferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_output_references_using_get(output_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_type: outputType (required)
        :param str stack_name: stackName (required)
        :param str resource_name: resourceName
        :param str resource_type: resourceType
        :return: list[OutputReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_output_references_using_get_with_http_info(output_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_output_references_using_get_with_http_info(output_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_output_references_using_get_with_http_info(self, output_type, stack_name, **kwargs):  # noqa: E501
        """getOutputReferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_output_references_using_get_with_http_info(output_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str output_type: outputType (required)
        :param str stack_name: stackName (required)
        :param str resource_name: resourceName
        :param str resource_type: resourceType
        :return: list[OutputReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['output_type', 'stack_name', 'resource_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_output_references_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'output_type' is set
        if ('output_type' not in params or
                params['output_type'] is None):
            raise ValueError("Missing the required parameter `output_type` when calling `get_output_references_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_output_references_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'output_type' in params:
            path_params['outputType'] = params['output_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'resource_name' in params:
            query_params.append(('resourceName', params['resource_name']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resourceType', params['resource_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{stackName}/output/{outputType}/references', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutputReference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_regions_using_get(self, cloud, **kwargs):  # noqa: E501
        """getRegions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_using_get(cloud, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :return: list[AllRegionsAndAZ]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_regions_using_get_with_http_info(cloud, **kwargs)  # noqa: E501
        else:
            (data) = self.get_regions_using_get_with_http_info(cloud, **kwargs)  # noqa: E501
            return data

    def get_regions_using_get_with_http_info(self, cloud, **kwargs):  # noqa: E501
        """getRegions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_using_get_with_http_info(cloud, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :return: list[AllRegionsAndAZ]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_regions_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud' is set
        if ('cloud' not in params or
                params['cloud'] is None):
            raise ValueError("Missing the required parameter `cloud` when calling `get_regions_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud' in params:
            path_params['cloud'] = params['cloud']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{cloud}/regions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllRegionsAndAZ]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_regions_v2_using_get(self, cloud, **kwargs):  # noqa: E501
        """getRegionsV2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_v2_using_get(cloud, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :return: AllRegionsAndAZ
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_regions_v2_using_get_with_http_info(cloud, **kwargs)  # noqa: E501
        else:
            (data) = self.get_regions_v2_using_get_with_http_info(cloud, **kwargs)  # noqa: E501
            return data

    def get_regions_v2_using_get_with_http_info(self, cloud, **kwargs):  # noqa: E501
        """getRegionsV2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_regions_v2_using_get_with_http_info(cloud, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud: cloud (required)
        :return: AllRegionsAndAZ
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_regions_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud' is set
        if ('cloud' not in params or
                params['cloud'] is None):
            raise ValueError("Missing the required parameter `cloud` when calling `get_regions_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud' in params:
            path_params['cloud'] = params['cloud']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{cloud}/regions-v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllRegionsAndAZ',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_streams_using_get(self, **kwargs):  # noqa: E501
        """getReleaseStreams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_streams_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_release_streams_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_release_streams_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_release_streams_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getReleaseStreams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_streams_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_streams_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/releaseStreams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_by_cluster_id_using_get(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getResourceByClusterId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_by_cluster_id_using_get(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param bool include_content: includeContent
        :return: BlueprintFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_by_cluster_id_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_by_cluster_id_using_get_with_http_info(cluster_id, resource_name, resource_type, **kwargs)  # noqa: E501
            return data

    def get_resource_by_cluster_id_using_get_with_http_info(self, cluster_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """getResourceByClusterId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_by_cluster_id_using_get_with_http_info(cluster_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param bool include_content: includeContent
        :return: BlueprintFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'resource_name', 'resource_type', 'include_content']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_by_cluster_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_resource_by_cluster_id_using_get`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_resource_by_cluster_id_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_resource_by_cluster_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []
        if 'include_content' in params:
            query_params.append(('includeContent', params['include_content']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/cluster/{clusterId}/{resourceType}/{resourceName}/resource-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_by_stack_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_by_stack_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str branch: branch
        :return: BlueprintFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_resource_by_stack_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str branch: branch
        :return: BlueprintFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name', 'branch']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_by_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_resource_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_resource_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_resource_by_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/{resourceType}/{resourceName}/resource-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_histories_by_stack_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceHistoriesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_histories_by_stack_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[ResourceHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_histories_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_histories_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_resource_histories_by_stack_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceHistoriesByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_histories_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[ResourceHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_histories_by_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_resource_histories_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_resource_histories_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_resource_histories_by_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_history_overview_by_stack_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceHistoryOverviewByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_history_overview_by_stack_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[ResourceHistoryOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_resource_history_overview_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_history_overview_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_resource_history_overview_by_stack_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getResourceHistoryOverviewByStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_resource_history_overview_by_stack_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[ResourceHistoryOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_history_overview_by_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_resource_history_overview_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_resource_history_overview_by_stack_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_resource_history_overview_by_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/resource-history-overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResourceHistoryOverview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_permissions_using_get(self, role, **kwargs):  # noqa: E501
        """getRolePermissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_permissions_using_get(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: role (required)
        :return: list[RBACEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_permissions_using_get_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_permissions_using_get_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def get_role_permissions_using_get_with_http_info(self, role, **kwargs):  # noqa: E501
        """getRolePermissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_permissions_using_get_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: role (required)
        :return: list[RBACEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_permissions_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `get_role_permissions_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/rolePermissions/{role}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RBACEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_overview_using_get(self, service_name, stack_name, **kwargs):  # noqa: E501
        """getServiceOverview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_overview_using_get(service_name, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: serviceName (required)
        :param str stack_name: stackName (required)
        :return: ServiceOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_overview_using_get_with_http_info(service_name, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_overview_using_get_with_http_info(service_name, stack_name, **kwargs)  # noqa: E501
            return data

    def get_service_overview_using_get_with_http_info(self, service_name, stack_name, **kwargs):  # noqa: E501
        """getServiceOverview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_overview_using_get_with_http_info(service_name, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_name: serviceName (required)
        :param str stack_name: stackName (required)
        :return: ServiceOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_name', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_overview_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_name' is set
        if ('service_name' not in params or
                params['service_name'] is None):
            raise ValueError("Missing the required parameter `service_name` when calling `get_service_overview_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_service_overview_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_name' in params:
            path_params['serviceName'] = params['service_name']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/stack/{stackName}/service/{serviceName}/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceOverview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_cluster_history_using_post(self, cluster_id, **kwargs):  # noqa: E501
        """syncClusterHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_cluster_history_using_post(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool force: force
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_cluster_history_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_cluster_history_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def sync_cluster_history_using_post_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """syncClusterHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_cluster_history_using_post_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool force: force
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_cluster_history_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `sync_cluster_history_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/logs/cluster/{clusterId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_substack_git_history_using_post(self, force_sync, substack_name, **kwargs):  # noqa: E501
        """syncSubstackGitHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_substack_git_history_using_post(force_sync, substack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool force_sync: forceSync (required)
        :param str substack_name: substackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_substack_git_history_using_post_with_http_info(force_sync, substack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_substack_git_history_using_post_with_http_info(force_sync, substack_name, **kwargs)  # noqa: E501
            return data

    def sync_substack_git_history_using_post_with_http_info(self, force_sync, substack_name, **kwargs):  # noqa: E501
        """syncSubstackGitHistory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_substack_git_history_using_post_with_http_info(force_sync, substack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool force_sync: forceSync (required)
        :param str substack_name: substackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['force_sync', 'substack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_substack_git_history_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'force_sync' is set
        if ('force_sync' not in params or
                params['force_sync'] is None):
            raise ValueError("Missing the required parameter `force_sync` when calling `sync_substack_git_history_using_post`")  # noqa: E501
        # verify the required parameter 'substack_name' is set
        if ('substack_name' not in params or
                params['substack_name'] is None):
            raise ValueError("Missing the required parameter `substack_name` when calling `sync_substack_git_history_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force_sync' in params:
            query_params.append(('forceSync', params['force_sync']))  # noqa: E501
        if 'substack_name' in params:
            query_params.append(('substackName', params['substack_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/dropdown/logs/substack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
