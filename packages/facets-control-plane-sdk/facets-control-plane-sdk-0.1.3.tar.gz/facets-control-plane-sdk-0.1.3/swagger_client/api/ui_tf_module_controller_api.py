# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiTfModuleControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bootstrap_modules_using_post(self, **kwargs):  # noqa: E501
        """Bootstrap Modules  # noqa: E501

        - **Description:** Bootstraps modules for initialization. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bootstrap_modules_using_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, list[str])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bootstrap_modules_using_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bootstrap_modules_using_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bootstrap_modules_using_post_with_http_info(self, **kwargs):  # noqa: E501
        """Bootstrap Modules  # noqa: E501

        - **Description:** Bootstraps modules for initialization. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bootstrap_modules_using_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, list[str])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bootstrap_modules_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/bootstrap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, list[str])',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tf_module_using_delete(self, id, **kwargs):  # noqa: E501
        """Delete a Module  # noqa: E501

        - **Description:** Deletes a module by ID. - **Permissions:** Requires MODULE_DELETE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tf_module_using_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param bool force: force
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tf_module_using_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tf_module_using_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_tf_module_using_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Module  # noqa: E501

        - **Description:** Deletes a module by ID. - **Permissions:** Requires MODULE_DELETE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tf_module_using_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param bool force: force
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tf_module_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_tf_module_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_module_by_id_using_get(self, id, **kwargs):  # noqa: E501
        """downloadModuleById  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_module_by_id_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_module_by_id_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_module_by_id_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def download_module_by_id_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """downloadModuleById  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_module_by_id_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_module_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `download_module_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/{id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_module_by_version_id_using_get(self, version_id, **kwargs):  # noqa: E501
        """downloadModuleByVersionId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_module_by_version_id_using_get(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: versionId (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_module_by_version_id_using_get_with_http_info(version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_module_by_version_id_using_get_with_http_info(version_id, **kwargs)  # noqa: E501
            return data

    def download_module_by_version_id_using_get_with_http_info(self, version_id, **kwargs):  # noqa: E501
        """downloadModuleByVersionId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_module_by_version_id_using_get_with_http_info(version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str version_id: versionId (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_module_by_version_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `download_module_by_version_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/version/{versionId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_modules_lite_using_get(self, **kwargs):  # noqa: E501
        """getAllModulesLite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_modules_lite_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool allow_preview_modules: allowPreviewModules
        :param list[str] clouds: clouds
        :return: list[TFModuleLiteDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_modules_lite_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_modules_lite_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_modules_lite_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllModulesLite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_modules_lite_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool allow_preview_modules: allowPreviewModules
        :param list[str] clouds: clouds
        :return: list[TFModuleLiteDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allow_preview_modules', 'clouds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_modules_lite_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'allow_preview_modules' in params:
            query_params.append(('allowPreviewModules', params['allow_preview_modules']))  # noqa: E501
        if 'clouds' in params:
            query_params.append(('clouds', params['clouds']))  # noqa: E501
            collection_formats['clouds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/modules-lite', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TFModuleLiteDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_modules_using_get(self, **kwargs):  # noqa: E501
        """getAllModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_modules_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TFModuleListResponseDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_modules_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_modules_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_modules_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getAllModules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_modules_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TFModuleListResponseDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_modules_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TFModuleListResponseDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_using_get4(self, **kwargs):  # noqa: E501
        """Get All Modules  # noqa: E501

        - **Description:** Retrieves all modules with optional filtering. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get4(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool allow_preview_modules: allowPreviewModules
        :param bool include_facets_yaml: includeFacetsYaml
        :param bool with_path_only: withPathOnly
        :return: list[TFModule]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_using_get4_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_using_get4_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_using_get4_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Modules  # noqa: E501

        - **Description:** Retrieves all modules with optional filtering. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_using_get4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool allow_preview_modules: allowPreviewModules
        :param bool include_facets_yaml: includeFacetsYaml
        :param bool with_path_only: withPathOnly
        :return: list[TFModule]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allow_preview_modules', 'include_facets_yaml', 'with_path_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_using_get4" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'allow_preview_modules' in params:
            query_params.append(('allowPreviewModules', params['allow_preview_modules']))  # noqa: E501
        if 'include_facets_yaml' in params:
            query_params.append(('includeFacetsYaml', params['include_facets_yaml']))  # noqa: E501
        if 'with_path_only' in params:
            query_params.append(('withPathOnly', params['with_path_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TFModule]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_by_id_using_get(self, id, **kwargs):  # noqa: E501
        """Get Module by ID  # noqa: E501

        - **Description:** Retrieves a module by its ID. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_id_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: TFModuleResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_by_id_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_by_id_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_by_id_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Module by ID  # noqa: E501

        - **Description:** Retrieves a module by its ID. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_by_id_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: TFModuleResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_by_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModuleResponseDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_grouped_modules_for_stack_using_get(self, stack_name, **kwargs):  # noqa: E501
        """Get Grouped Modules for Stack  # noqa: E501

        - **Description:** Retrieves grouped modules specifically for a stack name. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grouped_modules_for_stack_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: ListResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_grouped_modules_for_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_grouped_modules_for_stack_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_grouped_modules_for_stack_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """Get Grouped Modules for Stack  # noqa: E501

        - **Description:** Retrieves grouped modules specifically for a stack name. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_grouped_modules_for_stack_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: ListResourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grouped_modules_for_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_grouped_modules_for_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/stack/{stackName}/grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListResourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_intent_add_on_modules_using_get(self, flavor, intent, **kwargs):  # noqa: E501
        """Get Add-On Modules  # noqa: E501

        - **Description:** Retrieves all add-on modules based on intent and flavor, optionally by cloud. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_intent_add_on_modules_using_get(flavor, intent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str cloud: cloud
        :return: list[TFModuleLiteDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_intent_add_on_modules_using_get_with_http_info(flavor, intent, **kwargs)  # noqa: E501
        else:
            (data) = self.get_intent_add_on_modules_using_get_with_http_info(flavor, intent, **kwargs)  # noqa: E501
            return data

    def get_intent_add_on_modules_using_get_with_http_info(self, flavor, intent, **kwargs):  # noqa: E501
        """Get Add-On Modules  # noqa: E501

        - **Description:** Retrieves all add-on modules based on intent and flavor, optionally by cloud. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_intent_add_on_modules_using_get_with_http_info(flavor, intent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str cloud: cloud
        :return: list[TFModuleLiteDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor', 'intent', 'cloud']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_intent_add_on_modules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `get_intent_add_on_modules_using_get`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `get_intent_add_on_modules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501

        query_params = []
        if 'cloud' in params:
            query_params.append(('cloud', params['cloud']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/add-ons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TFModuleLiteDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_for_ifv_and_stack_using_get(self, flavor, intent, stack_name, version, **kwargs):  # noqa: E501
        """getModuleForIFVAndStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_for_ifv_and_stack_using_get(flavor, intent, stack_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str stack_name: stackName (required)
        :param str version: version (required)
        :return: TFModuleResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_for_ifv_and_stack_using_get_with_http_info(flavor, intent, stack_name, version, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_for_ifv_and_stack_using_get_with_http_info(flavor, intent, stack_name, version, **kwargs)  # noqa: E501
            return data

    def get_module_for_ifv_and_stack_using_get_with_http_info(self, flavor, intent, stack_name, version, **kwargs):  # noqa: E501
        """getModuleForIFVAndStack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_for_ifv_and_stack_using_get_with_http_info(flavor, intent, stack_name, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str stack_name: stackName (required)
        :param str version: version (required)
        :return: TFModuleResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor', 'intent', 'stack_name', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_for_ifv_and_stack_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `get_module_for_ifv_and_stack_using_get`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `get_module_for_ifv_and_stack_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_module_for_ifv_and_stack_using_get`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_module_for_ifv_and_stack_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/stack/{stackName}/{intent}/{flavor}/{version}/module', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModuleResponseDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_usages_using_get(self, id, **kwargs):  # noqa: E501
        """Get Module Usages  # noqa: E501

        - **Description:** Retrieves all usages of a module across stacks and clusters. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_usages_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: list[ModuleUsageDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_usages_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_usages_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_module_usages_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Module Usages  # noqa: E501

        - **Description:** Retrieves all usages of a module across stacks and clusters. - **Audit Logging:** No specific audit logging at the moment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_usages_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: list[ModuleUsageDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_usages_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_module_usages_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/{id}/usages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModuleUsageDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_as_published_by_id_using_post(self, id, **kwargs):  # noqa: E501
        """Mark Module as Published  # noqa: E501

        - **Description:** Marks a specific module version as published. - **Permissions:** Requires MODULE_WRITE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_published_by_id_using_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_as_published_by_id_using_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_as_published_by_id_using_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def mark_as_published_by_id_using_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Mark Module as Published  # noqa: E501

        - **Description:** Marks a specific module version as published. - **Permissions:** Requires MODULE_WRITE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_published_by_id_using_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_published_by_id_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `mark_as_published_by_id_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/{id}/mark-published', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_as_published_using_post(self, flavor, intent, version, **kwargs):  # noqa: E501
        """Mark Module as Published  # noqa: E501

        - **Description:** Marks a specific module version as published. - **Permissions:** Requires MODULE_WRITE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_published_using_post(flavor, intent, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str version: version (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_as_published_using_post_with_http_info(flavor, intent, version, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_as_published_using_post_with_http_info(flavor, intent, version, **kwargs)  # noqa: E501
            return data

    def mark_as_published_using_post_with_http_info(self, flavor, intent, version, **kwargs):  # noqa: E501
        """Mark Module as Published  # noqa: E501

        - **Description:** Marks a specific module version as published. - **Permissions:** Requires MODULE_WRITE permission.  - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_as_published_using_post_with_http_info(flavor, intent, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str version: version (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor', 'intent', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_as_published_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `mark_as_published_using_post`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `mark_as_published_using_post`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `mark_as_published_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/intent/{intent}/flavor/{flavor}/version/{version}/mark-published', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_module_using_post(self, file, metadata, **kwargs):  # noqa: E501
        """Upload a module  # noqa: E501

        - **Description:** Uploads a module using a file. - **Permissions:** Requires MODULE_WRITE permission. - **Parameters:**   - `file`: The module file to upload   - `metadata` (optional): Additional module metadata including:     - `gitUrl`: Web URL of the git repository (Expected to embed the commit id)     - `gitRef`: Git reference (branch, tag, or commit)     - `isFeatureBranch`: If this is true, this preview module cannot be directly marked as published until we register the module again with this as false. - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_module_using_post(file, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object metadata: (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_module_using_post_with_http_info(file, metadata, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_module_using_post_with_http_info(file, metadata, **kwargs)  # noqa: E501
            return data

    def upload_module_using_post_with_http_info(self, file, metadata, **kwargs):  # noqa: E501
        """Upload a module  # noqa: E501

        - **Description:** Uploads a module using a file. - **Permissions:** Requires MODULE_WRITE permission. - **Parameters:**   - `file`: The module file to upload   - `metadata` (optional): Additional module metadata including:     - `gitUrl`: Web URL of the git repository (Expected to embed the commit id)     - `gitRef`: Git reference (branch, tag, or commit)     - `isFeatureBranch`: If this is true, this preview module cannot be directly marked as published until we register the module again with this as false. - **Audit Logging:** Yes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_module_using_post_with_http_info(file, metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param object metadata: (required)
        :return: TFModule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'metadata']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_module_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_module_using_post`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `upload_module_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/modules/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TFModule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
