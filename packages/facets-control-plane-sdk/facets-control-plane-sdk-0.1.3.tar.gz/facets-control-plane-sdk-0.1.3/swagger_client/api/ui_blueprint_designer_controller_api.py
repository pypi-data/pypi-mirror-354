# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiBlueprintDesignerControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_variables_using_post(self, body, stack_name, **kwargs):  # noqa: E501
        """addVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_variables_using_post(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_variables_using_post_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_variables_using_post_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def add_variables_using_post_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """addVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_variables_using_post_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_variables_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_variables_using_post`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `add_variables_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apply_template_using_post(self, stack_name, template_name, **kwargs):  # noqa: E501
        """applyTemplate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_template_using_post(stack_name, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str template_name: templateName (required)
        :param str prefix: prefix
        :param str suffix: suffix
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_template_using_post_with_http_info(stack_name, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_template_using_post_with_http_info(stack_name, template_name, **kwargs)  # noqa: E501
            return data

    def apply_template_using_post_with_http_info(self, stack_name, template_name, **kwargs):  # noqa: E501
        """applyTemplate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_template_using_post_with_http_info(stack_name, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str template_name: templateName (required)
        :param str prefix: prefix
        :param str suffix: suffix
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'template_name', 'prefix', 'suffix']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_template_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `apply_template_using_post`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `apply_template_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'suffix' in params:
            query_params.append(('suffix', params['suffix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{templateName}/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_edit_disabled_for_resources_using_put(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """bulkEditDisabledForResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources_using_put(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: resourceEnableDisableRequestList (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_edit_disabled_for_resources_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_edit_disabled_for_resources_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
            return data

    def bulk_edit_disabled_for_resources_using_put_with_http_info(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """bulkEditDisabledForResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources_using_put_with_http_info(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: resourceEnableDisableRequestList (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_edit_disabled_for_resources_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_edit_disabled_for_resources_using_put`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `bulk_edit_disabled_for_resources_using_put`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `bulk_edit_disabled_for_resources_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}/resource-enable-disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_edit_disabled_for_resources_using_put1(self, body, stack_name, **kwargs):  # noqa: E501
        """bulkEditDisabledForResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources_using_put1(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: resourceEnableDisableRequestList (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_edit_disabled_for_resources_using_put1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_edit_disabled_for_resources_using_put1_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def bulk_edit_disabled_for_resources_using_put1_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """bulkEditDisabledForResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_edit_disabled_for_resources_using_put1_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceEnableDisableRequest] body: resourceEnableDisableRequestList (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_edit_disabled_for_resources_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_edit_disabled_for_resources_using_put1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `bulk_edit_disabled_for_resources_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resource-enable-disable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_branch_using_post(self, branch, stack_name, **kwargs):  # noqa: E501
        """createBranch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch_using_post(branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_branch_using_post_with_http_info(branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_branch_using_post_with_http_info(branch, stack_name, **kwargs)  # noqa: E501
            return data

    def create_branch_using_post_with_http_info(self, branch, stack_name, **kwargs):  # noqa: E501
        """createBranch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch_using_post_with_http_info(branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_branch_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `create_branch_using_post`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_branch_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{branch}/create-branch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_resources_using_post(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """createResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_resources_using_post(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_resources_using_post_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_resources_using_post_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
            return data

    def create_resources_using_post_with_http_info(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """createResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_resources_using_post_with_http_info(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_resources_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_resources_using_post`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `create_resources_using_post`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `create_resources_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_resources_using_delete(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """deleteResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resources_using_delete(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_resources_using_delete_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_resources_using_delete_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
            return data

    def delete_resources_using_delete_with_http_info(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """deleteResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_resources_using_delete_with_http_info(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resources_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_resources_using_delete`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `delete_resources_using_delete`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `delete_resources_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_variables_using_delete(self, body, stack_name, **kwargs):  # noqa: E501
        """deleteVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_using_delete(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_variables_using_delete_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_variables_using_delete_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def delete_variables_using_delete_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """deleteVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_variables_using_delete_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_variables_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_variables_using_delete`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `delete_variables_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_add_on_modules_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """Get add ons for this resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_on_modules_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str cloud: cloud
        :return: list[AddOnDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_add_on_modules_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_add_on_modules_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_add_on_modules_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """Get add ons for this resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_add_on_modules_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str cloud: cloud
        :return: list[AddOnDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name', 'cloud']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_add_on_modules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_add_on_modules_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_add_on_modules_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_add_on_modules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'cloud' in params:
            query_params.append(('cloud', params['cloud']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/add-ons', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AddOnDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_autocomplete_data_using_get(self, stack_name, **kwargs):  # noqa: E501
        """getAutocompleteData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: AutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_autocomplete_data_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_autocomplete_data_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_autocomplete_data_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getAutocompleteData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: AutocompleteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete_data_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_autocomplete_data_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/ref-autocomplete-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutocompleteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_autocomplete_data_v2_using_get(self, stack_name, **kwargs):  # noqa: E501
        """Get autocomplete data with module-specific output trees  # noqa: E501

        Returns module-specific output trees for each resource with automatic fallback to intent-level outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_v2_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: AutocompleteResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_autocomplete_data_v2_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_autocomplete_data_v2_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_autocomplete_data_v2_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """Get autocomplete data with module-specific output trees  # noqa: E501

        Returns module-specific output trees for each resource with automatic fallback to intent-level outputs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_autocomplete_data_v2_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: AutocompleteResponseV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_autocomplete_data_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_autocomplete_data_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/ref-autocomplete-data-v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutocompleteResponseV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_designer_resources_using_get(self, branch_name, stack_name, **kwargs):  # noqa: E501
        """getDesignerResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_designer_resources_using_get(branch_name, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch_name: branchName (required)
        :param str stack_name: stackName (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_designer_resources_using_get_with_http_info(branch_name, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_designer_resources_using_get_with_http_info(branch_name, stack_name, **kwargs)  # noqa: E501
            return data

    def get_designer_resources_using_get_with_http_info(self, branch_name, stack_name, **kwargs):  # noqa: E501
        """getDesignerResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_designer_resources_using_get_with_http_info(branch_name, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str branch_name: branchName (required)
        :param str stack_name: stackName (required)
        :return: list[BlueprintFile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['branch_name', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_designer_resources_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'branch_name' is set
        if ('branch_name' not in params or
                params['branch_name'] is None):
            raise ValueError("Missing the required parameter `branch_name` when calling `get_designer_resources_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_designer_resources_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch_name' in params:
            path_params['branchName'] = params['branch_name']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/{branchName}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintFile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_module_inputs_using_get(self, flavor, intent, stack_name, **kwargs):  # noqa: E501
        """getModuleInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_inputs_using_get(flavor, intent, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str stack_name: stackName (required)
        :return: dict(str, ModuleInputDTO)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_module_inputs_using_get_with_http_info(flavor, intent, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_module_inputs_using_get_with_http_info(flavor, intent, stack_name, **kwargs)  # noqa: E501
            return data

    def get_module_inputs_using_get_with_http_info(self, flavor, intent, stack_name, **kwargs):  # noqa: E501
        """getModuleInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_module_inputs_using_get_with_http_info(flavor, intent, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str flavor: flavor (required)
        :param str intent: intent (required)
        :param str stack_name: stackName (required)
        :return: dict(str, ModuleInputDTO)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flavor', 'intent', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module_inputs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flavor' is set
        if ('flavor' not in params or
                params['flavor'] is None):
            raise ValueError("Missing the required parameter `flavor` when calling `get_module_inputs_using_get`")  # noqa: E501
        # verify the required parameter 'intent' is set
        if ('intent' not in params or
                params['intent'] is None):
            raise ValueError("Missing the required parameter `intent` when calling `get_module_inputs_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_module_inputs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'flavor' in params:
            path_params['flavor'] = params['flavor']  # noqa: E501
        if 'intent' in params:
            path_params['intent'] = params['intent']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/intent/{intent}/flavor/{flavor}/input', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, ModuleInputDTO)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pull_requests_using_get(self, stack_name, **kwargs):  # noqa: E501
        """getPullRequests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str created_date: createdDate
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str query: query
        :param str state: state
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pull_requests_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pull_requests_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_pull_requests_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getPullRequests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str created_date: createdDate
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str query: query
        :param str state: state
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'created_date', 'page_number', 'page_size', 'query', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pull_requests_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_pull_requests_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/pulls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPullRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pull_requests_using_get1(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getPullRequests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests_using_get1(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str created_date: createdDate
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str query: query
        :param str state: state
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pull_requests_using_get1_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pull_requests_using_get1_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_pull_requests_using_get1_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getPullRequests  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pull_requests_using_get1_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str created_date: createdDate
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str query: query
        :param str state: state
        :return: ListPullRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name', 'created_date', 'page_number', 'page_size', 'query', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pull_requests_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_pull_requests_using_get1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_pull_requests_using_get1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_pull_requests_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/pulls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListPullRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schema_metadata_using_get(self, **kwargs):  # noqa: E501
        """getSchemaMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schema_metadata_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_schema_metadata_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_schema_metadata_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """getSchemaMetadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schema_metadata_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JsonNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_metadata_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/facets-components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JsonNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_runs_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getWorkflowRuns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str actor: actor
        :param str branch: branch
        :param str event: event
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str status: status
        :param str workflow_id: workflowId
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_runs_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_runs_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflow_runs_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getWorkflowRuns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :param str actor: actor
        :param str branch: branch
        :param str event: event
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str status: status
        :param str workflow_id: workflowId
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name', 'actor', 'branch', 'event', 'page_number', 'page_size', 'status', 'workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_runs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_workflow_runs_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_workflow_runs_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflow_runs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'actor' in params:
            query_params.append(('actor', params['actor']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflow-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWorkflowRunsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_runs_using_get1(self, stack_name, **kwargs):  # noqa: E501
        """getWorkflowRuns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs_using_get1(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str actor: actor
        :param str branch: branch
        :param str event: event
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str status: status
        :param str workflow_id: workflowId
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_runs_using_get1_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_runs_using_get1_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflow_runs_using_get1_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getWorkflowRuns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_runs_using_get1_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :param str actor: actor
        :param str branch: branch
        :param str event: event
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str status: status
        :param str workflow_id: workflowId
        :return: ListWorkflowRunsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name', 'actor', 'branch', 'event', 'page_number', 'page_size', 'status', 'workflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_runs_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflow_runs_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []
        if 'actor' in params:
            query_params.append(('actor', params['actor']))  # noqa: E501
        if 'branch' in params:
            query_params.append(('branch', params['branch']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'workflow_id' in params:
            query_params.append(('workflowId', params['workflow_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/workflow-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWorkflowRunsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_using_get(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getWorkflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows_using_get(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_using_get_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflows_using_get_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """getWorkflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows_using_get_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `get_workflows_using_get`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_workflows_using_get`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflows_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_using_get1(self, stack_name, **kwargs):  # noqa: E501
        """getWorkflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows_using_get1(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_using_get1_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_using_get1_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def get_workflows_using_get1_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """getWorkflows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflows_using_get1_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `get_workflows_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workflow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_branches_using_get(self, stack_name, **kwargs):  # noqa: E501
        """listBranches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches_using_get(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: BranchDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_branches_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_branches_using_get_with_http_info(stack_name, **kwargs)  # noqa: E501
            return data

    def list_branches_using_get_with_http_info(self, stack_name, **kwargs):  # noqa: E501
        """listBranches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches_using_get_with_http_info(stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stack_name: stackName (required)
        :return: BranchDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_branches_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `list_branches_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_branches_using_get1(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """listBranches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches_using_get1(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_branches_using_get1_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_branches_using_get1_with_http_info(resource_name, resource_type, stack_name, **kwargs)  # noqa: E501
            return data

    def list_branches_using_get1_with_http_info(self, resource_name, resource_type, stack_name, **kwargs):  # noqa: E501
        """listBranches  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_branches_using_get1_with_http_info(resource_name, resource_type, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :param str stack_name: stackName (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_name', 'resource_type', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_branches_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `list_branches_using_get1`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `list_branches_using_get1`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `list_branches_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/resourceType/{resourceType}/resourceName/{resourceName}/branch-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_resource_using_put(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """renameResource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_resource_using_put(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceRenameRequest body: resourceRenameRequest (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_resource_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_resource_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
            return data

    def rename_resource_using_put_with_http_info(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """renameResource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_resource_using_put_with_http_info(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceRenameRequest body: resourceRenameRequest (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_resource_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `rename_resource_using_put`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `rename_resource_using_put`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `rename_resource_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}/rename', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sync_specified_blueprints_with_templates_using_post(self, body, template_name, **kwargs):  # noqa: E501
        """syncSpecifiedBlueprintsWithTemplates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_specified_blueprints_with_templates_using_post(body, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: blueprintNames (required)
        :param str template_name: templateName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sync_specified_blueprints_with_templates_using_post_with_http_info(body, template_name, **kwargs)  # noqa: E501
        else:
            (data) = self.sync_specified_blueprints_with_templates_using_post_with_http_info(body, template_name, **kwargs)  # noqa: E501
            return data

    def sync_specified_blueprints_with_templates_using_post_with_http_info(self, body, template_name, **kwargs):  # noqa: E501
        """syncSpecifiedBlueprintsWithTemplates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sync_specified_blueprints_with_templates_using_post_with_http_info(body, template_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: blueprintNames (required)
        :param str template_name: templateName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'template_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_specified_blueprints_with_templates_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sync_specified_blueprints_with_templates_using_post`")  # noqa: E501
        # verify the required parameter 'template_name' is set
        if ('template_name' not in params or
                params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `sync_specified_blueprints_with_templates_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_name' in params:
            path_params['templateName'] = params['template_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{templateName}/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_resources_using_put(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """updateResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resources_using_put(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_resources_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_resources_using_put_with_http_info(body, branch, stack_name, **kwargs)  # noqa: E501
            return data

    def update_resources_using_put_with_http_info(self, body, branch, stack_name, **kwargs):  # noqa: E501
        """updateResources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_resources_using_put_with_http_info(body, branch, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ResourceFileRequest] body: resourceFileRequests (required)
        :param str branch: branch (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'branch', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resources_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resources_using_put`")  # noqa: E501
        # verify the required parameter 'branch' is set
        if ('branch' not in params or
                params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `update_resources_using_put`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `update_resources_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'branch' in params:
            path_params['branch'] = params['branch']  # noqa: E501
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/branch/{branch}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_variables_using_put(self, body, stack_name, **kwargs):  # noqa: E501
        """updateVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_variables_using_put(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_variables_using_put_with_http_info(body, stack_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_variables_using_put_with_http_info(body, stack_name, **kwargs)  # noqa: E501
            return data

    def update_variables_using_put_with_http_info(self, body, stack_name, **kwargs):  # noqa: E501
        """updateVariables  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_variables_using_put_with_http_info(body, stack_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, VariableDetails) body: variables (required)
        :param str stack_name: stackName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'stack_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_variables_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_variables_using_put`")  # noqa: E501
        # verify the required parameter 'stack_name' is set
        if ('stack_name' not in params or
                params['stack_name'] is None):
            raise ValueError("Missing the required parameter `stack_name` when calling `update_variables_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stack_name' in params:
            path_params['stackName'] = params['stack_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/designer/{stackName}/variables', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
