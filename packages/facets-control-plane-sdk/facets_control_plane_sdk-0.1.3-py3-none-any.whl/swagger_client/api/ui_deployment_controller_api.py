# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UiDeploymentControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def abort_automation_suite_using_delete1(self, cluster_id, execution_id, **kwargs):  # noqa: E501
        """abortAutomationSuite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_automation_suite_using_delete1(cluster_id, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str execution_id: executionId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.abort_automation_suite_using_delete1_with_http_info(cluster_id, execution_id, **kwargs)  # noqa: E501
        else:
            (data) = self.abort_automation_suite_using_delete1_with_http_info(cluster_id, execution_id, **kwargs)  # noqa: E501
            return data

    def abort_automation_suite_using_delete1_with_http_info(self, cluster_id, execution_id, **kwargs):  # noqa: E501
        """abortAutomationSuite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_automation_suite_using_delete1_with_http_info(cluster_id, execution_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str execution_id: executionId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'execution_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method abort_automation_suite_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `abort_automation_suite_using_delete1`")  # noqa: E501
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `abort_automation_suite_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'execution_id' in params:
            path_params['executionId'] = params['execution_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/qa/{executionId}/abortSuite', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_release_using_post(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """approveRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_release_using_post(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_release_using_post_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_release_using_post_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def approve_release_using_post_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """approveRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_release_using_post_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_release_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `approve_release_using_post`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `approve_release_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/approveRelease', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clean_s3_sources_using_delete(self, cluster_id, **kwargs):  # noqa: E501
        """cleanS3Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clean_s3_sources_using_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clean_s3_sources_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clean_s3_sources_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def clean_s3_sources_using_delete_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """cleanS3Sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clean_s3_sources_using_delete_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clean_s3_sources_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `clean_s3_sources_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/clean-s3-sources', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_deployment_using_post(self, body, cluster_id, **kwargs):  # noqa: E501
        """createDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_deployment_using_post(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentRequest body: deploymentRequest (required)
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_deployment_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_deployment_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
            return data

    def create_deployment_using_post_with_http_info(self, body, cluster_id, **kwargs):  # noqa: E501
        """createDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_deployment_using_post_with_http_info(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeploymentRequest body: deploymentRequest (required)
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_deployment_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_deployment_using_post`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `create_deployment_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_cluster_using_delete(self, cluster_id, **kwargs):  # noqa: E501
        """destroyCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_cluster_using_delete(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_cluster_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_cluster_using_delete_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def destroy_cluster_using_delete_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """destroyCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_cluster_using_delete_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_cluster_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `destroy_cluster_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/destroy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_terraform_export_using_get(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """downloadTerraformExport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_terraform_export_using_get(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_terraform_export_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_terraform_export_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def download_terraform_export_using_get_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """downloadTerraformExport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_terraform_export_using_get_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_terraform_export_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `download_terraform_export_using_get`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `download_terraform_export_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/download-terraform-export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_state_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterState  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_state_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_state_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_state_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_state_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getClusterState  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_state_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_state_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_cluster_state_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_logs_using_get(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getDeploymentLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_logs_using_get(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :param str next_token: nextToken
        :return: TokenPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def get_deployment_logs_using_get_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getDeploymentLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :param str next_token: nextToken
        :return: TokenPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id', 'next_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_logs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_deployment_logs_using_get`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_deployment_logs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []
        if 'next_token' in params:
            query_params.append(('nextToken', params['next_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenPaginatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_stats_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getDeploymentStats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_stats_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param int days: days
        :return: DeploymentStatsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_stats_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_stats_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_deployment_stats_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getDeploymentStats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_stats_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param int days: days
        :return: DeploymentStatsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'days']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_stats_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_deployment_stats_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'days' in params:
            query_params.append(('days', params['days']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentStatsDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_using_get(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_using_get(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def get_deployment_using_get_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_using_get_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_deployment_using_get`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_deployment_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployments_overview_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getDeploymentsOverview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployments_overview_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployments_overview_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployments_overview_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_deployments_overview_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getDeploymentsOverview  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployments_overview_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_overview_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_deployments_overview_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentOverview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployments_using_get1(self, cluster_id, **kwargs):  # noqa: E501
        """getDeployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployments_using_get1(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ListDeploymentsWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployments_using_get1_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployments_using_get1_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_deployments_using_get1_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getDeployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployments_using_get1_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: ListDeploymentsWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_deployments_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDeploymentsWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_release_by_application_using_get(self, application, cluster_id, **kwargs):  # noqa: E501
        """getLatestReleaseByApplication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_release_by_application_using_get(application, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_latest_release_by_application_using_get_with_http_info(application, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_release_by_application_using_get_with_http_info(application, cluster_id, **kwargs)  # noqa: E501
            return data

    def get_latest_release_by_application_using_get_with_http_info(self, application, cluster_id, **kwargs):  # noqa: E501
        """getLatestReleaseByApplication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_release_by_application_using_get_with_http_info(application, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_release_by_application_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `get_latest_release_by_application_using_get`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_latest_release_by_application_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release/{application}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_release_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """getLatestRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_release_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_latest_release_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_release_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def get_latest_release_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """getLatestRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latest_release_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_release_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_latest_release_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/latest-successful-release', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_changes_using_get(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getReleaseChanges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_changes_using_get(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: ReleaseChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_release_changes_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_release_changes_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def get_release_changes_using_get_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """getReleaseChanges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_changes_using_get_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: ReleaseChanges
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_changes_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_release_changes_using_get`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_release_changes_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/release-changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReleaseChanges',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def launch_cluster_using_put(self, cluster_id, **kwargs):  # noqa: E501
        """launchCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.launch_cluster_using_put(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.launch_cluster_using_put_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.launch_cluster_using_put_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def launch_cluster_using_put_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """launchCluster  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.launch_cluster_using_put_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method launch_cluster_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `launch_cluster_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/launch', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reject_release_using_post(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """rejectRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_release_using_post(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reject_release_using_post_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reject_release_using_post_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def reject_release_using_post_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """rejectRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_release_using_post_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_release_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `reject_release_using_post`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `reject_release_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/rejectRelease', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_using_put(self, cluster_id, **kwargs):  # noqa: E501
        """release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_using_put(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_using_put_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.release_using_put_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def release_using_put_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """release  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_using_put_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'allow_destroy', 'can_queue', 'comment', 'force_release', 'with_refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `release_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'allow_destroy' in params:
            query_params.append(('allowDestroy', params['allow_destroy']))  # noqa: E501
        if 'can_queue' in params:
            query_params.append(('canQueue', params['can_queue']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'force_release' in params:
            query_params.append(('forceRelease', params['force_release']))  # noqa: E501
        if 'with_refresh' in params:
            query_params.append(('withRefresh', params['with_refresh']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/release', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_v2_using_put(self, cluster_id, release_type, **kwargs):  # noqa: E501
        """releaseV2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_v2_using_put(cluster_id, release_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str release_type: releaseType (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.release_v2_using_put_with_http_info(cluster_id, release_type, **kwargs)  # noqa: E501
        else:
            (data) = self.release_v2_using_put_with_http_info(cluster_id, release_type, **kwargs)  # noqa: E501
            return data

    def release_v2_using_put_with_http_info(self, cluster_id, release_type, **kwargs):  # noqa: E501
        """releaseV2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.release_v2_using_put_with_http_info(cluster_id, release_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str release_type: releaseType (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'release_type', 'allow_destroy', 'can_queue', 'comment', 'force_release', 'with_refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_v2_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `release_v2_using_put`")  # noqa: E501
        # verify the required parameter 'release_type' is set
        if ('release_type' not in params or
                params['release_type'] is None):
            raise ValueError("Missing the required parameter `release_type` when calling `release_v2_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'release_type' in params:
            path_params['releaseType'] = params['release_type']  # noqa: E501

        query_params = []
        if 'allow_destroy' in params:
            query_params.append(('allowDestroy', params['allow_destroy']))  # noqa: E501
        if 'can_queue' in params:
            query_params.append(('canQueue', params['can_queue']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'force_release' in params:
            query_params.append(('forceRelease', params['force_release']))  # noqa: E501
        if 'with_refresh' in params:
            query_params.append(('withRefresh', params['with_refresh']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/releaseV2/{releaseType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_hotfix_deployment_recipe_using_post(self, body, cluster_id, **kwargs):  # noqa: E501
        """runHotfixDeploymentRecipe  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_hotfix_deployment_recipe_using_post(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotfixDeploymentRecipe body: deploymentRecipe (required)
        :param str cluster_id: clusterId (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool is_plan: isPlan
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.run_hotfix_deployment_recipe_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.run_hotfix_deployment_recipe_using_post_with_http_info(body, cluster_id, **kwargs)  # noqa: E501
            return data

    def run_hotfix_deployment_recipe_using_post_with_http_info(self, body, cluster_id, **kwargs):  # noqa: E501
        """runHotfixDeploymentRecipe  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_hotfix_deployment_recipe_using_post_with_http_info(body, cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HotfixDeploymentRecipe body: deploymentRecipe (required)
        :param str cluster_id: clusterId (required)
        :param bool allow_destroy: allowDestroy
        :param bool can_queue: canQueue
        :param str comment: comment
        :param bool force_release: forceRelease
        :param bool is_plan: isPlan
        :param bool with_refresh: withRefresh
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id', 'allow_destroy', 'can_queue', 'comment', 'force_release', 'is_plan', 'with_refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_hotfix_deployment_recipe_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `run_hotfix_deployment_recipe_using_post`")  # noqa: E501
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `run_hotfix_deployment_recipe_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'allow_destroy' in params:
            query_params.append(('allowDestroy', params['allow_destroy']))  # noqa: E501
        if 'can_queue' in params:
            query_params.append(('canQueue', params['can_queue']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'force_release' in params:
            query_params.append(('forceRelease', params['force_release']))  # noqa: E501
        if 'is_plan' in params:
            query_params.append(('isPlan', params['is_plan']))  # noqa: E501
        if 'with_refresh' in params:
            query_params.append(('withRefresh', params['with_refresh']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/recipes/deployment/hotfix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_deployments_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """searchDeployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_deployments_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param datetime end: end
        :param list[str] exclude_status: excludeStatus
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str release_type: releaseType
        :param bool signed_off: signedOff
        :param datetime start: start
        :param str status: status
        :param str tf_version: tfVersion
        :param str triggered_by: triggeredBy
        :return: PageDeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_deployments_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_deployments_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def search_deployments_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """searchDeployments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_deployments_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param datetime end: end
        :param list[str] exclude_status: excludeStatus
        :param int page_number: pageNumber
        :param int page_size: pageSize
        :param str release_type: releaseType
        :param bool signed_off: signedOff
        :param datetime start: start
        :param str status: status
        :param str tf_version: tfVersion
        :param str triggered_by: triggeredBy
        :return: PageDeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'end', 'exclude_status', 'page_number', 'page_size', 'release_type', 'signed_off', 'start', 'status', 'tf_version', 'triggered_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_deployments_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `search_deployments_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'exclude_status' in params:
            query_params.append(('excludeStatus', params['exclude_status']))  # noqa: E501
            collection_formats['excludeStatus'] = 'multi'  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'release_type' in params:
            query_params.append(('releaseType', params['release_type']))  # noqa: E501
        if 'signed_off' in params:
            query_params.append(('signedOff', params['signed_off']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'tf_version' in params:
            query_params.append(('tfVersion', params['tf_version']))  # noqa: E501
        if 'triggered_by' in params:
            query_params.append(('triggeredBy', params['triggered_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageDeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_off_deployment_using_put(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """signOffDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_off_deployment_using_put(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sign_off_deployment_using_put_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sign_off_deployment_using_put_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def sign_off_deployment_using_put_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """signOffDeployment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_off_deployment_using_put_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_off_deployment_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `sign_off_deployment_using_put`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `sign_off_deployment_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/signoff', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulate_using_get(self, cluster_id, **kwargs):  # noqa: E501
        """simulate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_using_get(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ChangeRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.simulate_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.simulate_using_get_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def simulate_using_get_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """simulate  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulate_using_get_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: list[ChangeRepresentation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulate_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `simulate_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/simulate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChangeRepresentation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def state_unlock_using_put(self, cluster_id, lock_id, **kwargs):  # noqa: E501
        """stateUnlock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_unlock_using_put(cluster_id, lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str lock_id: lockId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.state_unlock_using_put_with_http_info(cluster_id, lock_id, **kwargs)  # noqa: E501
        else:
            (data) = self.state_unlock_using_put_with_http_info(cluster_id, lock_id, **kwargs)  # noqa: E501
            return data

    def state_unlock_using_put_with_http_info(self, cluster_id, lock_id, **kwargs):  # noqa: E501
        """stateUnlock  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.state_unlock_using_put_with_http_info(cluster_id, lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str lock_id: lockId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'lock_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method state_unlock_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `state_unlock_using_put`")  # noqa: E501
        # verify the required parameter 'lock_id' is set
        if ('lock_id' not in params or
                params['lock_id'] is None):
            raise ValueError("Missing the required parameter `lock_id` when calling `state_unlock_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []
        if 'lock_id' in params:
            query_params.append(('lockId', params['lock_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/unlock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stream_deployment_logs_using_get(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """streamDeploymentLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_deployment_logs_using_get(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: StreamingResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stream_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stream_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, **kwargs)  # noqa: E501
            return data

    def stream_deployment_logs_using_get_with_http_info(self, cluster_id, deployment_id, **kwargs):  # noqa: E501
        """streamDeploymentLogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_deployment_logs_using_get_with_http_info(cluster_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :return: StreamingResponseBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_deployment_logs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `stream_deployment_logs_using_get`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `stream_deployment_logs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/logs/stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StreamingResponseBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_maintenance_release_using_post(self, cluster_id, **kwargs):  # noqa: E501
        """triggerMaintenanceRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_maintenance_release_using_post(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_maintenance_release_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_maintenance_release_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def trigger_maintenance_release_using_post_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """triggerMaintenanceRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_maintenance_release_using_post_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_maintenance_release_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `trigger_maintenance_release_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/maintenance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_rollback_plan_release_using_post(self, cluster_id, deployment_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """triggerRollbackPlanRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_rollback_plan_release_using_post(cluster_id, deployment_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_rollback_plan_release_using_post_with_http_info(cluster_id, deployment_id, resource_name, resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_rollback_plan_release_using_post_with_http_info(cluster_id, deployment_id, resource_name, resource_type, **kwargs)  # noqa: E501
            return data

    def trigger_rollback_plan_release_using_post_with_http_info(self, cluster_id, deployment_id, resource_name, resource_type, **kwargs):  # noqa: E501
        """triggerRollbackPlanRelease  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_rollback_plan_release_using_post_with_http_info(cluster_id, deployment_id, resource_name, resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :param str deployment_id: deploymentId (required)
        :param str resource_name: resourceName (required)
        :param str resource_type: resourceType (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'deployment_id', 'resource_name', 'resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_rollback_plan_release_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `trigger_rollback_plan_release_using_post`")  # noqa: E501
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `trigger_rollback_plan_release_using_post`")  # noqa: E501
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params or
                params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `trigger_rollback_plan_release_using_post`")  # noqa: E501
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params or
                params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `trigger_rollback_plan_release_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']  # noqa: E501
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/{deploymentId}/{resourceType}/{resourceName}/rollback-plan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_terraform_export_using_post(self, cluster_id, **kwargs):  # noqa: E501
        """triggerTerraformExport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_terraform_export_using_post(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_terraform_export_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_terraform_export_using_post_with_http_info(cluster_id, **kwargs)  # noqa: E501
            return data

    def trigger_terraform_export_using_post_with_http_info(self, cluster_id, **kwargs):  # noqa: E501
        """triggerTerraformExport  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_terraform_export_using_post_with_http_info(cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_id: clusterId (required)
        :return: DeploymentLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_terraform_export_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params or
                params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `trigger_terraform_export_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in params:
            path_params['clusterId'] = params['cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['main']  # noqa: E501

        return self.api_client.call_api(
            '/cc-ui/v1/clusters/{clusterId}/deployments/terraform-export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeploymentLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
