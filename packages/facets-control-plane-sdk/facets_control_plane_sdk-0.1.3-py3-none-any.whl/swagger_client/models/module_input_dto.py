# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModuleInputDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compatible_resources': 'list[InputOutputResource]',
        'description': 'str',
        'display_name': 'str',
        'optional': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'compatible_resources': 'compatibleResources',
        'description': 'description',
        'display_name': 'displayName',
        'optional': 'optional',
        'type': 'type'
    }

    def __init__(self, compatible_resources=None, description=None, display_name=None, optional=None, type=None):  # noqa: E501
        """ModuleInputDTO - a model defined in Swagger"""  # noqa: E501
        self._compatible_resources = None
        self._description = None
        self._display_name = None
        self._optional = None
        self._type = None
        self.discriminator = None
        if compatible_resources is not None:
            self.compatible_resources = compatible_resources
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if optional is not None:
            self.optional = optional
        if type is not None:
            self.type = type

    @property
    def compatible_resources(self):
        """Gets the compatible_resources of this ModuleInputDTO.  # noqa: E501


        :return: The compatible_resources of this ModuleInputDTO.  # noqa: E501
        :rtype: list[InputOutputResource]
        """
        return self._compatible_resources

    @compatible_resources.setter
    def compatible_resources(self, compatible_resources):
        """Sets the compatible_resources of this ModuleInputDTO.


        :param compatible_resources: The compatible_resources of this ModuleInputDTO.  # noqa: E501
        :type: list[InputOutputResource]
        """

        self._compatible_resources = compatible_resources

    @property
    def description(self):
        """Gets the description of this ModuleInputDTO.  # noqa: E501


        :return: The description of this ModuleInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleInputDTO.


        :param description: The description of this ModuleInputDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ModuleInputDTO.  # noqa: E501


        :return: The display_name of this ModuleInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModuleInputDTO.


        :param display_name: The display_name of this ModuleInputDTO.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def optional(self):
        """Gets the optional of this ModuleInputDTO.  # noqa: E501


        :return: The optional of this ModuleInputDTO.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this ModuleInputDTO.


        :param optional: The optional of this ModuleInputDTO.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def type(self):
        """Gets the type of this ModuleInputDTO.  # noqa: E501


        :return: The type of this ModuleInputDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModuleInputDTO.


        :param type: The type of this ModuleInputDTO.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleInputDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleInputDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
