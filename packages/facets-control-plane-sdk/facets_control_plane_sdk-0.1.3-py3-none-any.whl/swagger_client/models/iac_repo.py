# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IacRepo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'creation_date': 'datetime',
        'git_account_id': 'str',
        'id': 'str',
        'last_modified_by': 'str',
        'last_modified_date': 'datetime',
        'name': 'str',
        'repo_url': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'git_account_id': 'gitAccountId',
        'id': 'id',
        'last_modified_by': 'lastModifiedBy',
        'last_modified_date': 'lastModifiedDate',
        'name': 'name',
        'repo_url': 'repoUrl'
    }

    def __init__(self, created_by=None, creation_date=None, git_account_id=None, id=None, last_modified_by=None, last_modified_date=None, name=None, repo_url=None):  # noqa: E501
        """IacRepo - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._creation_date = None
        self._git_account_id = None
        self._id = None
        self._last_modified_by = None
        self._last_modified_date = None
        self._name = None
        self._repo_url = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if git_account_id is not None:
            self.git_account_id = git_account_id
        if id is not None:
            self.id = id
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if name is not None:
            self.name = name
        if repo_url is not None:
            self.repo_url = repo_url

    @property
    def created_by(self):
        """Gets the created_by of this IacRepo.  # noqa: E501


        :return: The created_by of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this IacRepo.


        :param created_by: The created_by of this IacRepo.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this IacRepo.  # noqa: E501


        :return: The creation_date of this IacRepo.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this IacRepo.


        :param creation_date: The creation_date of this IacRepo.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def git_account_id(self):
        """Gets the git_account_id of this IacRepo.  # noqa: E501


        :return: The git_account_id of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._git_account_id

    @git_account_id.setter
    def git_account_id(self, git_account_id):
        """Sets the git_account_id of this IacRepo.


        :param git_account_id: The git_account_id of this IacRepo.  # noqa: E501
        :type: str
        """

        self._git_account_id = git_account_id

    @property
    def id(self):
        """Gets the id of this IacRepo.  # noqa: E501


        :return: The id of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IacRepo.


        :param id: The id of this IacRepo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this IacRepo.  # noqa: E501


        :return: The last_modified_by of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this IacRepo.


        :param last_modified_by: The last_modified_by of this IacRepo.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this IacRepo.  # noqa: E501


        :return: The last_modified_date of this IacRepo.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this IacRepo.


        :param last_modified_date: The last_modified_date of this IacRepo.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def name(self):
        """Gets the name of this IacRepo.  # noqa: E501


        :return: The name of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IacRepo.


        :param name: The name of this IacRepo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repo_url(self):
        """Gets the repo_url of this IacRepo.  # noqa: E501


        :return: The repo_url of this IacRepo.  # noqa: E501
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this IacRepo.


        :param repo_url: The repo_url of this IacRepo.  # noqa: E501
        :type: str
        """

        self._repo_url = repo_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IacRepo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IacRepo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
