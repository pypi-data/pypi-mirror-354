# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationFamilyMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_family': 'str',
        'id': 'str',
        'stacks': 'list[str]'
    }

    attribute_map = {
        'application_family': 'applicationFamily',
        'id': 'id',
        'stacks': 'stacks'
    }

    def __init__(self, application_family=None, id=None, stacks=None):  # noqa: E501
        """ApplicationFamilyMetadata - a model defined in Swagger"""  # noqa: E501
        self._application_family = None
        self._id = None
        self._stacks = None
        self.discriminator = None
        if application_family is not None:
            self.application_family = application_family
        if id is not None:
            self.id = id
        if stacks is not None:
            self.stacks = stacks

    @property
    def application_family(self):
        """Gets the application_family of this ApplicationFamilyMetadata.  # noqa: E501


        :return: The application_family of this ApplicationFamilyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this ApplicationFamilyMetadata.


        :param application_family: The application_family of this ApplicationFamilyMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRM", "ECOMMERCE", "INTEGRATIONS", "OPS"]  # noqa: E501
        if application_family not in allowed_values:
            raise ValueError(
                "Invalid value for `application_family` ({0}), must be one of {1}"  # noqa: E501
                .format(application_family, allowed_values)
            )

        self._application_family = application_family

    @property
    def id(self):
        """Gets the id of this ApplicationFamilyMetadata.  # noqa: E501


        :return: The id of this ApplicationFamilyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationFamilyMetadata.


        :param id: The id of this ApplicationFamilyMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def stacks(self):
        """Gets the stacks of this ApplicationFamilyMetadata.  # noqa: E501


        :return: The stacks of this ApplicationFamilyMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._stacks

    @stacks.setter
    def stacks(self, stacks):
        """Sets the stacks of this ApplicationFamilyMetadata.


        :param stacks: The stacks of this ApplicationFamilyMetadata.  # noqa: E501
        :type: list[str]
        """

        self._stacks = stacks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationFamilyMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationFamilyMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
