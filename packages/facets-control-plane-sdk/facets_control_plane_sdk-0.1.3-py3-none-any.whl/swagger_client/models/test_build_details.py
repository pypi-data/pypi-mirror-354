# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestBuildDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_family': 'str',
        'application_id': 'str',
        'branch': 'str',
        'branch_type': 'str',
        'build_id': 'str',
        'id': 'str',
        'pr_id': 'str',
        'sonar_url': 'str',
        'test_status': 'str',
        'test_status_rules': 'list[Condition]',
        'timestamp': 'int'
    }

    attribute_map = {
        'application_family': 'applicationFamily',
        'application_id': 'applicationId',
        'branch': 'branch',
        'branch_type': 'branchType',
        'build_id': 'buildId',
        'id': 'id',
        'pr_id': 'prId',
        'sonar_url': 'sonarUrl',
        'test_status': 'testStatus',
        'test_status_rules': 'testStatusRules',
        'timestamp': 'timestamp'
    }

    def __init__(self, application_family=None, application_id=None, branch=None, branch_type=None, build_id=None, id=None, pr_id=None, sonar_url=None, test_status=None, test_status_rules=None, timestamp=None):  # noqa: E501
        """TestBuildDetails - a model defined in Swagger"""  # noqa: E501
        self._application_family = None
        self._application_id = None
        self._branch = None
        self._branch_type = None
        self._build_id = None
        self._id = None
        self._pr_id = None
        self._sonar_url = None
        self._test_status = None
        self._test_status_rules = None
        self._timestamp = None
        self.discriminator = None
        if application_family is not None:
            self.application_family = application_family
        if application_id is not None:
            self.application_id = application_id
        if branch is not None:
            self.branch = branch
        if branch_type is not None:
            self.branch_type = branch_type
        if build_id is not None:
            self.build_id = build_id
        if id is not None:
            self.id = id
        if pr_id is not None:
            self.pr_id = pr_id
        if sonar_url is not None:
            self.sonar_url = sonar_url
        if test_status is not None:
            self.test_status = test_status
        if test_status_rules is not None:
            self.test_status_rules = test_status_rules
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def application_family(self):
        """Gets the application_family of this TestBuildDetails.  # noqa: E501


        :return: The application_family of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this TestBuildDetails.


        :param application_family: The application_family of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._application_family = application_family

    @property
    def application_id(self):
        """Gets the application_id of this TestBuildDetails.  # noqa: E501


        :return: The application_id of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this TestBuildDetails.


        :param application_id: The application_id of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def branch(self):
        """Gets the branch of this TestBuildDetails.  # noqa: E501


        :return: The branch of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TestBuildDetails.


        :param branch: The branch of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def branch_type(self):
        """Gets the branch_type of this TestBuildDetails.  # noqa: E501


        :return: The branch_type of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._branch_type

    @branch_type.setter
    def branch_type(self, branch_type):
        """Sets the branch_type of this TestBuildDetails.


        :param branch_type: The branch_type of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._branch_type = branch_type

    @property
    def build_id(self):
        """Gets the build_id of this TestBuildDetails.  # noqa: E501


        :return: The build_id of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this TestBuildDetails.


        :param build_id: The build_id of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._build_id = build_id

    @property
    def id(self):
        """Gets the id of this TestBuildDetails.  # noqa: E501


        :return: The id of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestBuildDetails.


        :param id: The id of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pr_id(self):
        """Gets the pr_id of this TestBuildDetails.  # noqa: E501


        :return: The pr_id of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._pr_id

    @pr_id.setter
    def pr_id(self, pr_id):
        """Sets the pr_id of this TestBuildDetails.


        :param pr_id: The pr_id of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._pr_id = pr_id

    @property
    def sonar_url(self):
        """Gets the sonar_url of this TestBuildDetails.  # noqa: E501


        :return: The sonar_url of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._sonar_url

    @sonar_url.setter
    def sonar_url(self, sonar_url):
        """Sets the sonar_url of this TestBuildDetails.


        :param sonar_url: The sonar_url of this TestBuildDetails.  # noqa: E501
        :type: str
        """

        self._sonar_url = sonar_url

    @property
    def test_status(self):
        """Gets the test_status of this TestBuildDetails.  # noqa: E501


        :return: The test_status of this TestBuildDetails.  # noqa: E501
        :rtype: str
        """
        return self._test_status

    @test_status.setter
    def test_status(self, test_status):
        """Sets the test_status of this TestBuildDetails.


        :param test_status: The test_status of this TestBuildDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASS", "FAIL", "TEST_FAILED", "INPROGRESS"]  # noqa: E501
        if test_status not in allowed_values:
            raise ValueError(
                "Invalid value for `test_status` ({0}), must be one of {1}"  # noqa: E501
                .format(test_status, allowed_values)
            )

        self._test_status = test_status

    @property
    def test_status_rules(self):
        """Gets the test_status_rules of this TestBuildDetails.  # noqa: E501


        :return: The test_status_rules of this TestBuildDetails.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._test_status_rules

    @test_status_rules.setter
    def test_status_rules(self, test_status_rules):
        """Sets the test_status_rules of this TestBuildDetails.


        :param test_status_rules: The test_status_rules of this TestBuildDetails.  # noqa: E501
        :type: list[Condition]
        """

        self._test_status_rules = test_status_rules

    @property
    def timestamp(self):
        """Gets the timestamp of this TestBuildDetails.  # noqa: E501


        :return: The timestamp of this TestBuildDetails.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TestBuildDetails.


        :param timestamp: The timestamp of this TestBuildDetails.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestBuildDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestBuildDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
