# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasicDockerDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifactory_name': 'str',
        'artifactory_type': 'str',
        'password': 'str',
        'stacks_associated': 'list[str]',
        'uri': 'str',
        'username': 'str'
    }

    attribute_map = {
        'artifactory_name': 'artifactoryName',
        'artifactory_type': 'artifactoryType',
        'password': 'password',
        'stacks_associated': 'stacksAssociated',
        'uri': 'uri',
        'username': 'username'
    }

    def __init__(self, artifactory_name=None, artifactory_type=None, password=None, stacks_associated=None, uri=None, username=None):  # noqa: E501
        """BasicDockerDTO - a model defined in Swagger"""  # noqa: E501
        self._artifactory_name = None
        self._artifactory_type = None
        self._password = None
        self._stacks_associated = None
        self._uri = None
        self._username = None
        self.discriminator = None
        if artifactory_name is not None:
            self.artifactory_name = artifactory_name
        if artifactory_type is not None:
            self.artifactory_type = artifactory_type
        if password is not None:
            self.password = password
        if stacks_associated is not None:
            self.stacks_associated = stacks_associated
        if uri is not None:
            self.uri = uri
        if username is not None:
            self.username = username

    @property
    def artifactory_name(self):
        """Gets the artifactory_name of this BasicDockerDTO.  # noqa: E501


        :return: The artifactory_name of this BasicDockerDTO.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_name

    @artifactory_name.setter
    def artifactory_name(self, artifactory_name):
        """Sets the artifactory_name of this BasicDockerDTO.


        :param artifactory_name: The artifactory_name of this BasicDockerDTO.  # noqa: E501
        :type: str
        """

        self._artifactory_name = artifactory_name

    @property
    def artifactory_type(self):
        """Gets the artifactory_type of this BasicDockerDTO.  # noqa: E501


        :return: The artifactory_type of this BasicDockerDTO.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_type

    @artifactory_type.setter
    def artifactory_type(self, artifactory_type):
        """Sets the artifactory_type of this BasicDockerDTO.


        :param artifactory_type: The artifactory_type of this BasicDockerDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["ECR", "AZURE_CONTAINER_REGISTRY", "GOOGLE_ARTIFACT_REGISTRY", "GOOGLE_CONTAINER_REGISTRY", "NEXUS", "DOCKER_HUB", "JFROG", "OTHERS"]  # noqa: E501
        if artifactory_type not in allowed_values:
            raise ValueError(
                "Invalid value for `artifactory_type` ({0}), must be one of {1}"  # noqa: E501
                .format(artifactory_type, allowed_values)
            )

        self._artifactory_type = artifactory_type

    @property
    def password(self):
        """Gets the password of this BasicDockerDTO.  # noqa: E501


        :return: The password of this BasicDockerDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BasicDockerDTO.


        :param password: The password of this BasicDockerDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def stacks_associated(self):
        """Gets the stacks_associated of this BasicDockerDTO.  # noqa: E501


        :return: The stacks_associated of this BasicDockerDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._stacks_associated

    @stacks_associated.setter
    def stacks_associated(self, stacks_associated):
        """Sets the stacks_associated of this BasicDockerDTO.


        :param stacks_associated: The stacks_associated of this BasicDockerDTO.  # noqa: E501
        :type: list[str]
        """

        self._stacks_associated = stacks_associated

    @property
    def uri(self):
        """Gets the uri of this BasicDockerDTO.  # noqa: E501


        :return: The uri of this BasicDockerDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this BasicDockerDTO.


        :param uri: The uri of this BasicDockerDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def username(self):
        """Gets the username of this BasicDockerDTO.  # noqa: E501


        :return: The username of this BasicDockerDTO.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BasicDockerDTO.


        :param username: The username of this BasicDockerDTO.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasicDockerDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicDockerDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
