# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HPADetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_cpu_avg': 'int',
        'current_replicas': 'int',
        'desired_replicas': 'int',
        'max_replicas': 'int',
        'min_replicas': 'int',
        'target_cpu_avg': 'int'
    }

    attribute_map = {
        'current_cpu_avg': 'currentCPUAvg',
        'current_replicas': 'currentReplicas',
        'desired_replicas': 'desiredReplicas',
        'max_replicas': 'maxReplicas',
        'min_replicas': 'minReplicas',
        'target_cpu_avg': 'targetCPUAvg'
    }

    def __init__(self, current_cpu_avg=None, current_replicas=None, desired_replicas=None, max_replicas=None, min_replicas=None, target_cpu_avg=None):  # noqa: E501
        """HPADetails - a model defined in Swagger"""  # noqa: E501
        self._current_cpu_avg = None
        self._current_replicas = None
        self._desired_replicas = None
        self._max_replicas = None
        self._min_replicas = None
        self._target_cpu_avg = None
        self.discriminator = None
        if current_cpu_avg is not None:
            self.current_cpu_avg = current_cpu_avg
        if current_replicas is not None:
            self.current_replicas = current_replicas
        if desired_replicas is not None:
            self.desired_replicas = desired_replicas
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if target_cpu_avg is not None:
            self.target_cpu_avg = target_cpu_avg

    @property
    def current_cpu_avg(self):
        """Gets the current_cpu_avg of this HPADetails.  # noqa: E501


        :return: The current_cpu_avg of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._current_cpu_avg

    @current_cpu_avg.setter
    def current_cpu_avg(self, current_cpu_avg):
        """Sets the current_cpu_avg of this HPADetails.


        :param current_cpu_avg: The current_cpu_avg of this HPADetails.  # noqa: E501
        :type: int
        """

        self._current_cpu_avg = current_cpu_avg

    @property
    def current_replicas(self):
        """Gets the current_replicas of this HPADetails.  # noqa: E501


        :return: The current_replicas of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._current_replicas

    @current_replicas.setter
    def current_replicas(self, current_replicas):
        """Sets the current_replicas of this HPADetails.


        :param current_replicas: The current_replicas of this HPADetails.  # noqa: E501
        :type: int
        """

        self._current_replicas = current_replicas

    @property
    def desired_replicas(self):
        """Gets the desired_replicas of this HPADetails.  # noqa: E501


        :return: The desired_replicas of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._desired_replicas

    @desired_replicas.setter
    def desired_replicas(self, desired_replicas):
        """Sets the desired_replicas of this HPADetails.


        :param desired_replicas: The desired_replicas of this HPADetails.  # noqa: E501
        :type: int
        """

        self._desired_replicas = desired_replicas

    @property
    def max_replicas(self):
        """Gets the max_replicas of this HPADetails.  # noqa: E501


        :return: The max_replicas of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this HPADetails.


        :param max_replicas: The max_replicas of this HPADetails.  # noqa: E501
        :type: int
        """

        self._max_replicas = max_replicas

    @property
    def min_replicas(self):
        """Gets the min_replicas of this HPADetails.  # noqa: E501


        :return: The min_replicas of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this HPADetails.


        :param min_replicas: The min_replicas of this HPADetails.  # noqa: E501
        :type: int
        """

        self._min_replicas = min_replicas

    @property
    def target_cpu_avg(self):
        """Gets the target_cpu_avg of this HPADetails.  # noqa: E501


        :return: The target_cpu_avg of this HPADetails.  # noqa: E501
        :rtype: int
        """
        return self._target_cpu_avg

    @target_cpu_avg.setter
    def target_cpu_avg(self, target_cpu_avg):
        """Sets the target_cpu_avg of this HPADetails.


        :param target_cpu_avg: The target_cpu_avg of this HPADetails.  # noqa: E501
        :type: int
        """

        self._target_cpu_avg = target_cpu_avg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HPADetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HPADetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
