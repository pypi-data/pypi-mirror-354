# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Build(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_repository_images': 'list[str]',
        'application_family': 'str',
        'application_id': 'str',
        'artifact_url': 'str',
        'code_build_id': 'str',
        'description': 'str',
        'environment_variables': 'dict(str, str)',
        'id': 'str',
        'image': 'str',
        'promotable': 'bool',
        'promoted': 'bool',
        'promotion_intent': 'str',
        'status': 'str',
        'tag': 'str',
        'test_build': 'bool',
        'timestamp': 'int',
        'triggered_by': 'str',
        'unpromoted': 'bool'
    }

    attribute_map = {
        'additional_repository_images': 'additionalRepositoryImages',
        'application_family': 'applicationFamily',
        'application_id': 'applicationId',
        'artifact_url': 'artifactUrl',
        'code_build_id': 'codeBuildId',
        'description': 'description',
        'environment_variables': 'environmentVariables',
        'id': 'id',
        'image': 'image',
        'promotable': 'promotable',
        'promoted': 'promoted',
        'promotion_intent': 'promotionIntent',
        'status': 'status',
        'tag': 'tag',
        'test_build': 'testBuild',
        'timestamp': 'timestamp',
        'triggered_by': 'triggeredBy',
        'unpromoted': 'unpromoted'
    }

    def __init__(self, additional_repository_images=None, application_family=None, application_id=None, artifact_url=None, code_build_id=None, description=None, environment_variables=None, id=None, image=None, promotable=None, promoted=None, promotion_intent=None, status=None, tag=None, test_build=None, timestamp=None, triggered_by=None, unpromoted=None):  # noqa: E501
        """Build - a model defined in Swagger"""  # noqa: E501
        self._additional_repository_images = None
        self._application_family = None
        self._application_id = None
        self._artifact_url = None
        self._code_build_id = None
        self._description = None
        self._environment_variables = None
        self._id = None
        self._image = None
        self._promotable = None
        self._promoted = None
        self._promotion_intent = None
        self._status = None
        self._tag = None
        self._test_build = None
        self._timestamp = None
        self._triggered_by = None
        self._unpromoted = None
        self.discriminator = None
        if additional_repository_images is not None:
            self.additional_repository_images = additional_repository_images
        if application_family is not None:
            self.application_family = application_family
        if application_id is not None:
            self.application_id = application_id
        if artifact_url is not None:
            self.artifact_url = artifact_url
        if code_build_id is not None:
            self.code_build_id = code_build_id
        if description is not None:
            self.description = description
        if environment_variables is not None:
            self.environment_variables = environment_variables
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if promotable is not None:
            self.promotable = promotable
        if promoted is not None:
            self.promoted = promoted
        if promotion_intent is not None:
            self.promotion_intent = promotion_intent
        if status is not None:
            self.status = status
        if tag is not None:
            self.tag = tag
        if test_build is not None:
            self.test_build = test_build
        if timestamp is not None:
            self.timestamp = timestamp
        if triggered_by is not None:
            self.triggered_by = triggered_by
        if unpromoted is not None:
            self.unpromoted = unpromoted

    @property
    def additional_repository_images(self):
        """Gets the additional_repository_images of this Build.  # noqa: E501


        :return: The additional_repository_images of this Build.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_repository_images

    @additional_repository_images.setter
    def additional_repository_images(self, additional_repository_images):
        """Sets the additional_repository_images of this Build.


        :param additional_repository_images: The additional_repository_images of this Build.  # noqa: E501
        :type: list[str]
        """

        self._additional_repository_images = additional_repository_images

    @property
    def application_family(self):
        """Gets the application_family of this Build.  # noqa: E501


        :return: The application_family of this Build.  # noqa: E501
        :rtype: str
        """
        return self._application_family

    @application_family.setter
    def application_family(self, application_family):
        """Sets the application_family of this Build.


        :param application_family: The application_family of this Build.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRM", "ECOMMERCE", "INTEGRATIONS", "OPS"]  # noqa: E501
        if application_family not in allowed_values:
            raise ValueError(
                "Invalid value for `application_family` ({0}), must be one of {1}"  # noqa: E501
                .format(application_family, allowed_values)
            )

        self._application_family = application_family

    @property
    def application_id(self):
        """Gets the application_id of this Build.  # noqa: E501


        :return: The application_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this Build.


        :param application_id: The application_id of this Build.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def artifact_url(self):
        """Gets the artifact_url of this Build.  # noqa: E501


        :return: The artifact_url of this Build.  # noqa: E501
        :rtype: str
        """
        return self._artifact_url

    @artifact_url.setter
    def artifact_url(self, artifact_url):
        """Sets the artifact_url of this Build.


        :param artifact_url: The artifact_url of this Build.  # noqa: E501
        :type: str
        """

        self._artifact_url = artifact_url

    @property
    def code_build_id(self):
        """Gets the code_build_id of this Build.  # noqa: E501


        :return: The code_build_id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._code_build_id

    @code_build_id.setter
    def code_build_id(self, code_build_id):
        """Sets the code_build_id of this Build.


        :param code_build_id: The code_build_id of this Build.  # noqa: E501
        :type: str
        """

        self._code_build_id = code_build_id

    @property
    def description(self):
        """Gets the description of this Build.  # noqa: E501


        :return: The description of this Build.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Build.


        :param description: The description of this Build.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def environment_variables(self):
        """Gets the environment_variables of this Build.  # noqa: E501


        :return: The environment_variables of this Build.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this Build.


        :param environment_variables: The environment_variables of this Build.  # noqa: E501
        :type: dict(str, str)
        """

        self._environment_variables = environment_variables

    @property
    def id(self):
        """Gets the id of this Build.  # noqa: E501


        :return: The id of this Build.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Build.


        :param id: The id of this Build.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Build.  # noqa: E501


        :return: The image of this Build.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Build.


        :param image: The image of this Build.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def promotable(self):
        """Gets the promotable of this Build.  # noqa: E501


        :return: The promotable of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._promotable

    @promotable.setter
    def promotable(self, promotable):
        """Sets the promotable of this Build.


        :param promotable: The promotable of this Build.  # noqa: E501
        :type: bool
        """

        self._promotable = promotable

    @property
    def promoted(self):
        """Gets the promoted of this Build.  # noqa: E501


        :return: The promoted of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._promoted

    @promoted.setter
    def promoted(self, promoted):
        """Sets the promoted of this Build.


        :param promoted: The promoted of this Build.  # noqa: E501
        :type: bool
        """

        self._promoted = promoted

    @property
    def promotion_intent(self):
        """Gets the promotion_intent of this Build.  # noqa: E501


        :return: The promotion_intent of this Build.  # noqa: E501
        :rtype: str
        """
        return self._promotion_intent

    @promotion_intent.setter
    def promotion_intent(self, promotion_intent):
        """Sets the promotion_intent of this Build.


        :param promotion_intent: The promotion_intent of this Build.  # noqa: E501
        :type: str
        """
        allowed_values = ["NA", "NOT_CC_ENABLED", "HOTFIX", "RELEASE"]  # noqa: E501
        if promotion_intent not in allowed_values:
            raise ValueError(
                "Invalid value for `promotion_intent` ({0}), must be one of {1}"  # noqa: E501
                .format(promotion_intent, allowed_values)
            )

        self._promotion_intent = promotion_intent

    @property
    def status(self):
        """Gets the status of this Build.  # noqa: E501


        :return: The status of this Build.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Build.


        :param status: The status of this Build.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCEEDED", "FAILED", "FAULT", "TIMED_OUT", "IN_PROGRESS", "STOPPED", "null"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this Build.  # noqa: E501


        :return: The tag of this Build.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Build.


        :param tag: The tag of this Build.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def test_build(self):
        """Gets the test_build of this Build.  # noqa: E501


        :return: The test_build of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._test_build

    @test_build.setter
    def test_build(self, test_build):
        """Sets the test_build of this Build.


        :param test_build: The test_build of this Build.  # noqa: E501
        :type: bool
        """

        self._test_build = test_build

    @property
    def timestamp(self):
        """Gets the timestamp of this Build.  # noqa: E501


        :return: The timestamp of this Build.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Build.


        :param timestamp: The timestamp of this Build.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def triggered_by(self):
        """Gets the triggered_by of this Build.  # noqa: E501


        :return: The triggered_by of this Build.  # noqa: E501
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this Build.


        :param triggered_by: The triggered_by of this Build.  # noqa: E501
        :type: str
        """

        self._triggered_by = triggered_by

    @property
    def unpromoted(self):
        """Gets the unpromoted of this Build.  # noqa: E501


        :return: The unpromoted of this Build.  # noqa: E501
        :rtype: bool
        """
        return self._unpromoted

    @unpromoted.setter
    def unpromoted(self, unpromoted):
        """Sets the unpromoted of this Build.


        :param unpromoted: The unpromoted of this Build.  # noqa: E501
        :type: bool
        """

        self._unpromoted = unpromoted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Build, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Build):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
