# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationPodDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_timestamp': 'str',
        'image': 'str',
        'image_id': 'str',
        'labels': 'dict(str, str)',
        'name': 'str',
        'pod_status': 'str',
        'ready': 'bool',
        'resource_usage': 'PodResource',
        'restart_reason': 'str',
        'restarts': 'int'
    }

    attribute_map = {
        'creation_timestamp': 'creationTimestamp',
        'image': 'image',
        'image_id': 'imageID',
        'labels': 'labels',
        'name': 'name',
        'pod_status': 'podStatus',
        'ready': 'ready',
        'resource_usage': 'resourceUsage',
        'restart_reason': 'restartReason',
        'restarts': 'restarts'
    }

    def __init__(self, creation_timestamp=None, image=None, image_id=None, labels=None, name=None, pod_status=None, ready=None, resource_usage=None, restart_reason=None, restarts=None):  # noqa: E501
        """ApplicationPodDetails - a model defined in Swagger"""  # noqa: E501
        self._creation_timestamp = None
        self._image = None
        self._image_id = None
        self._labels = None
        self._name = None
        self._pod_status = None
        self._ready = None
        self._resource_usage = None
        self._restart_reason = None
        self._restarts = None
        self.discriminator = None
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if image is not None:
            self.image = image
        if image_id is not None:
            self.image_id = image_id
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if pod_status is not None:
            self.pod_status = pod_status
        if ready is not None:
            self.ready = ready
        if resource_usage is not None:
            self.resource_usage = resource_usage
        if restart_reason is not None:
            self.restart_reason = restart_reason
        if restarts is not None:
            self.restarts = restarts

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ApplicationPodDetails.  # noqa: E501


        :return: The creation_timestamp of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ApplicationPodDetails.


        :param creation_timestamp: The creation_timestamp of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._creation_timestamp = creation_timestamp

    @property
    def image(self):
        """Gets the image of this ApplicationPodDetails.  # noqa: E501


        :return: The image of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ApplicationPodDetails.


        :param image: The image of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_id(self):
        """Gets the image_id of this ApplicationPodDetails.  # noqa: E501


        :return: The image_id of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ApplicationPodDetails.


        :param image_id: The image_id of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def labels(self):
        """Gets the labels of this ApplicationPodDetails.  # noqa: E501


        :return: The labels of this ApplicationPodDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApplicationPodDetails.


        :param labels: The labels of this ApplicationPodDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ApplicationPodDetails.  # noqa: E501


        :return: The name of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationPodDetails.


        :param name: The name of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pod_status(self):
        """Gets the pod_status of this ApplicationPodDetails.  # noqa: E501


        :return: The pod_status of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._pod_status

    @pod_status.setter
    def pod_status(self, pod_status):
        """Sets the pod_status of this ApplicationPodDetails.


        :param pod_status: The pod_status of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._pod_status = pod_status

    @property
    def ready(self):
        """Gets the ready of this ApplicationPodDetails.  # noqa: E501


        :return: The ready of this ApplicationPodDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this ApplicationPodDetails.


        :param ready: The ready of this ApplicationPodDetails.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def resource_usage(self):
        """Gets the resource_usage of this ApplicationPodDetails.  # noqa: E501


        :return: The resource_usage of this ApplicationPodDetails.  # noqa: E501
        :rtype: PodResource
        """
        return self._resource_usage

    @resource_usage.setter
    def resource_usage(self, resource_usage):
        """Sets the resource_usage of this ApplicationPodDetails.


        :param resource_usage: The resource_usage of this ApplicationPodDetails.  # noqa: E501
        :type: PodResource
        """

        self._resource_usage = resource_usage

    @property
    def restart_reason(self):
        """Gets the restart_reason of this ApplicationPodDetails.  # noqa: E501


        :return: The restart_reason of this ApplicationPodDetails.  # noqa: E501
        :rtype: str
        """
        return self._restart_reason

    @restart_reason.setter
    def restart_reason(self, restart_reason):
        """Sets the restart_reason of this ApplicationPodDetails.


        :param restart_reason: The restart_reason of this ApplicationPodDetails.  # noqa: E501
        :type: str
        """

        self._restart_reason = restart_reason

    @property
    def restarts(self):
        """Gets the restarts of this ApplicationPodDetails.  # noqa: E501


        :return: The restarts of this ApplicationPodDetails.  # noqa: E501
        :rtype: int
        """
        return self._restarts

    @restarts.setter
    def restarts(self, restarts):
        """Sets the restarts of this ApplicationPodDetails.


        :param restarts: The restarts of this ApplicationPodDetails.  # noqa: E501
        :type: int
        """

        self._restarts = restarts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationPodDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationPodDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
