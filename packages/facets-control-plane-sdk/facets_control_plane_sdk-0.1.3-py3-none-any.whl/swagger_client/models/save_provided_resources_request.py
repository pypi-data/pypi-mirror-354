# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveProvidedResourcesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provided': 'bool',
        'resource_name': 'str',
        'resource_type': 'str',
        'secrets': 'JsonNode',
        'variables': 'JsonNode'
    }

    attribute_map = {
        'provided': 'provided',
        'resource_name': 'resourceName',
        'resource_type': 'resourceType',
        'secrets': 'secrets',
        'variables': 'variables'
    }

    def __init__(self, provided=None, resource_name=None, resource_type=None, secrets=None, variables=None):  # noqa: E501
        """SaveProvidedResourcesRequest - a model defined in Swagger"""  # noqa: E501
        self._provided = None
        self._resource_name = None
        self._resource_type = None
        self._secrets = None
        self._variables = None
        self.discriminator = None
        if provided is not None:
            self.provided = provided
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if secrets is not None:
            self.secrets = secrets
        if variables is not None:
            self.variables = variables

    @property
    def provided(self):
        """Gets the provided of this SaveProvidedResourcesRequest.  # noqa: E501


        :return: The provided of this SaveProvidedResourcesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._provided

    @provided.setter
    def provided(self, provided):
        """Sets the provided of this SaveProvidedResourcesRequest.


        :param provided: The provided of this SaveProvidedResourcesRequest.  # noqa: E501
        :type: bool
        """

        self._provided = provided

    @property
    def resource_name(self):
        """Gets the resource_name of this SaveProvidedResourcesRequest.  # noqa: E501


        :return: The resource_name of this SaveProvidedResourcesRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this SaveProvidedResourcesRequest.


        :param resource_name: The resource_name of this SaveProvidedResourcesRequest.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this SaveProvidedResourcesRequest.  # noqa: E501


        :return: The resource_type of this SaveProvidedResourcesRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SaveProvidedResourcesRequest.


        :param resource_type: The resource_type of this SaveProvidedResourcesRequest.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def secrets(self):
        """Gets the secrets of this SaveProvidedResourcesRequest.  # noqa: E501


        :return: The secrets of this SaveProvidedResourcesRequest.  # noqa: E501
        :rtype: JsonNode
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this SaveProvidedResourcesRequest.


        :param secrets: The secrets of this SaveProvidedResourcesRequest.  # noqa: E501
        :type: JsonNode
        """

        self._secrets = secrets

    @property
    def variables(self):
        """Gets the variables of this SaveProvidedResourcesRequest.  # noqa: E501


        :return: The variables of this SaveProvidedResourcesRequest.  # noqa: E501
        :rtype: JsonNode
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this SaveProvidedResourcesRequest.


        :param variables: The variables of this SaveProvidedResourcesRequest.  # noqa: E501
        :type: JsonNode
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveProvidedResourcesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveProvidedResourcesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
