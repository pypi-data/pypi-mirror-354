# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GithubPRField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base': 'GithubPRBranchRef',
        'comments_url': 'str',
        'diff_url': 'str',
        'draft': 'bool',
        'head': 'GithubPRBranchRef',
        'merged': 'bool',
        'state': 'str',
        'updated_at': 'str',
        'url': 'str'
    }

    attribute_map = {
        'base': 'base',
        'comments_url': 'comments_url',
        'diff_url': 'diff_url',
        'draft': 'draft',
        'head': 'head',
        'merged': 'merged',
        'state': 'state',
        'updated_at': 'updated_at',
        'url': 'url'
    }

    def __init__(self, base=None, comments_url=None, diff_url=None, draft=None, head=None, merged=None, state=None, updated_at=None, url=None):  # noqa: E501
        """GithubPRField - a model defined in Swagger"""  # noqa: E501
        self._base = None
        self._comments_url = None
        self._diff_url = None
        self._draft = None
        self._head = None
        self._merged = None
        self._state = None
        self._updated_at = None
        self._url = None
        self.discriminator = None
        if base is not None:
            self.base = base
        if comments_url is not None:
            self.comments_url = comments_url
        if diff_url is not None:
            self.diff_url = diff_url
        if draft is not None:
            self.draft = draft
        if head is not None:
            self.head = head
        if merged is not None:
            self.merged = merged
        if state is not None:
            self.state = state
        if updated_at is not None:
            self.updated_at = updated_at
        if url is not None:
            self.url = url

    @property
    def base(self):
        """Gets the base of this GithubPRField.  # noqa: E501


        :return: The base of this GithubPRField.  # noqa: E501
        :rtype: GithubPRBranchRef
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this GithubPRField.


        :param base: The base of this GithubPRField.  # noqa: E501
        :type: GithubPRBranchRef
        """

        self._base = base

    @property
    def comments_url(self):
        """Gets the comments_url of this GithubPRField.  # noqa: E501


        :return: The comments_url of this GithubPRField.  # noqa: E501
        :rtype: str
        """
        return self._comments_url

    @comments_url.setter
    def comments_url(self, comments_url):
        """Sets the comments_url of this GithubPRField.


        :param comments_url: The comments_url of this GithubPRField.  # noqa: E501
        :type: str
        """

        self._comments_url = comments_url

    @property
    def diff_url(self):
        """Gets the diff_url of this GithubPRField.  # noqa: E501


        :return: The diff_url of this GithubPRField.  # noqa: E501
        :rtype: str
        """
        return self._diff_url

    @diff_url.setter
    def diff_url(self, diff_url):
        """Sets the diff_url of this GithubPRField.


        :param diff_url: The diff_url of this GithubPRField.  # noqa: E501
        :type: str
        """

        self._diff_url = diff_url

    @property
    def draft(self):
        """Gets the draft of this GithubPRField.  # noqa: E501


        :return: The draft of this GithubPRField.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this GithubPRField.


        :param draft: The draft of this GithubPRField.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def head(self):
        """Gets the head of this GithubPRField.  # noqa: E501


        :return: The head of this GithubPRField.  # noqa: E501
        :rtype: GithubPRBranchRef
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this GithubPRField.


        :param head: The head of this GithubPRField.  # noqa: E501
        :type: GithubPRBranchRef
        """

        self._head = head

    @property
    def merged(self):
        """Gets the merged of this GithubPRField.  # noqa: E501


        :return: The merged of this GithubPRField.  # noqa: E501
        :rtype: bool
        """
        return self._merged

    @merged.setter
    def merged(self, merged):
        """Sets the merged of this GithubPRField.


        :param merged: The merged of this GithubPRField.  # noqa: E501
        :type: bool
        """

        self._merged = merged

    @property
    def state(self):
        """Gets the state of this GithubPRField.  # noqa: E501


        :return: The state of this GithubPRField.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GithubPRField.


        :param state: The state of this GithubPRField.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this GithubPRField.  # noqa: E501


        :return: The updated_at of this GithubPRField.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GithubPRField.


        :param updated_at: The updated_at of this GithubPRField.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this GithubPRField.  # noqa: E501


        :return: The url of this GithubPRField.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GithubPRField.


        :param url: The url of this GithubPRField.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GithubPRField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubPRField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
