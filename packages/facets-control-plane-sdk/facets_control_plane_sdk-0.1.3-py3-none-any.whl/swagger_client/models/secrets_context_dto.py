# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecretsContextDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_account_secrets_id': 'str',
        'cp_cloud': 'str',
        'gcp_secret_manager_enabled': 'bool',
        'gcp_secret_manager_mode': 'str',
        'gcp_secret_manager_project_id': 'str',
        'provided_secrets_id': 'str',
        'secret_manager_region': 'str'
    }

    attribute_map = {
        'cloud_account_secrets_id': 'cloudAccountSecretsId',
        'cp_cloud': 'cpCloud',
        'gcp_secret_manager_enabled': 'gcpSecretManagerEnabled',
        'gcp_secret_manager_mode': 'gcpSecretManagerMode',
        'gcp_secret_manager_project_id': 'gcpSecretManagerProjectId',
        'provided_secrets_id': 'providedSecretsId',
        'secret_manager_region': 'secretManagerRegion'
    }

    def __init__(self, cloud_account_secrets_id=None, cp_cloud=None, gcp_secret_manager_enabled=None, gcp_secret_manager_mode=None, gcp_secret_manager_project_id=None, provided_secrets_id=None, secret_manager_region=None):  # noqa: E501
        """SecretsContextDTO - a model defined in Swagger"""  # noqa: E501
        self._cloud_account_secrets_id = None
        self._cp_cloud = None
        self._gcp_secret_manager_enabled = None
        self._gcp_secret_manager_mode = None
        self._gcp_secret_manager_project_id = None
        self._provided_secrets_id = None
        self._secret_manager_region = None
        self.discriminator = None
        if cloud_account_secrets_id is not None:
            self.cloud_account_secrets_id = cloud_account_secrets_id
        if cp_cloud is not None:
            self.cp_cloud = cp_cloud
        if gcp_secret_manager_enabled is not None:
            self.gcp_secret_manager_enabled = gcp_secret_manager_enabled
        if gcp_secret_manager_mode is not None:
            self.gcp_secret_manager_mode = gcp_secret_manager_mode
        if gcp_secret_manager_project_id is not None:
            self.gcp_secret_manager_project_id = gcp_secret_manager_project_id
        if provided_secrets_id is not None:
            self.provided_secrets_id = provided_secrets_id
        if secret_manager_region is not None:
            self.secret_manager_region = secret_manager_region

    @property
    def cloud_account_secrets_id(self):
        """Gets the cloud_account_secrets_id of this SecretsContextDTO.  # noqa: E501


        :return: The cloud_account_secrets_id of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._cloud_account_secrets_id

    @cloud_account_secrets_id.setter
    def cloud_account_secrets_id(self, cloud_account_secrets_id):
        """Sets the cloud_account_secrets_id of this SecretsContextDTO.


        :param cloud_account_secrets_id: The cloud_account_secrets_id of this SecretsContextDTO.  # noqa: E501
        :type: str
        """

        self._cloud_account_secrets_id = cloud_account_secrets_id

    @property
    def cp_cloud(self):
        """Gets the cp_cloud of this SecretsContextDTO.  # noqa: E501


        :return: The cp_cloud of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._cp_cloud

    @cp_cloud.setter
    def cp_cloud(self, cp_cloud):
        """Sets the cp_cloud of this SecretsContextDTO.


        :param cp_cloud: The cp_cloud of this SecretsContextDTO.  # noqa: E501
        :type: str
        """

        self._cp_cloud = cp_cloud

    @property
    def gcp_secret_manager_enabled(self):
        """Gets the gcp_secret_manager_enabled of this SecretsContextDTO.  # noqa: E501


        :return: The gcp_secret_manager_enabled of this SecretsContextDTO.  # noqa: E501
        :rtype: bool
        """
        return self._gcp_secret_manager_enabled

    @gcp_secret_manager_enabled.setter
    def gcp_secret_manager_enabled(self, gcp_secret_manager_enabled):
        """Sets the gcp_secret_manager_enabled of this SecretsContextDTO.


        :param gcp_secret_manager_enabled: The gcp_secret_manager_enabled of this SecretsContextDTO.  # noqa: E501
        :type: bool
        """

        self._gcp_secret_manager_enabled = gcp_secret_manager_enabled

    @property
    def gcp_secret_manager_mode(self):
        """Gets the gcp_secret_manager_mode of this SecretsContextDTO.  # noqa: E501


        :return: The gcp_secret_manager_mode of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._gcp_secret_manager_mode

    @gcp_secret_manager_mode.setter
    def gcp_secret_manager_mode(self, gcp_secret_manager_mode):
        """Sets the gcp_secret_manager_mode of this SecretsContextDTO.


        :param gcp_secret_manager_mode: The gcp_secret_manager_mode of this SecretsContextDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTOMATIC_REPLICATION", "USER_MANAGED_REPLICATION", "REGIONAL"]  # noqa: E501
        if gcp_secret_manager_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `gcp_secret_manager_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(gcp_secret_manager_mode, allowed_values)
            )

        self._gcp_secret_manager_mode = gcp_secret_manager_mode

    @property
    def gcp_secret_manager_project_id(self):
        """Gets the gcp_secret_manager_project_id of this SecretsContextDTO.  # noqa: E501


        :return: The gcp_secret_manager_project_id of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._gcp_secret_manager_project_id

    @gcp_secret_manager_project_id.setter
    def gcp_secret_manager_project_id(self, gcp_secret_manager_project_id):
        """Sets the gcp_secret_manager_project_id of this SecretsContextDTO.


        :param gcp_secret_manager_project_id: The gcp_secret_manager_project_id of this SecretsContextDTO.  # noqa: E501
        :type: str
        """

        self._gcp_secret_manager_project_id = gcp_secret_manager_project_id

    @property
    def provided_secrets_id(self):
        """Gets the provided_secrets_id of this SecretsContextDTO.  # noqa: E501


        :return: The provided_secrets_id of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._provided_secrets_id

    @provided_secrets_id.setter
    def provided_secrets_id(self, provided_secrets_id):
        """Sets the provided_secrets_id of this SecretsContextDTO.


        :param provided_secrets_id: The provided_secrets_id of this SecretsContextDTO.  # noqa: E501
        :type: str
        """

        self._provided_secrets_id = provided_secrets_id

    @property
    def secret_manager_region(self):
        """Gets the secret_manager_region of this SecretsContextDTO.  # noqa: E501


        :return: The secret_manager_region of this SecretsContextDTO.  # noqa: E501
        :rtype: str
        """
        return self._secret_manager_region

    @secret_manager_region.setter
    def secret_manager_region(self, secret_manager_region):
        """Sets the secret_manager_region of this SecretsContextDTO.


        :param secret_manager_region: The secret_manager_region of this SecretsContextDTO.  # noqa: E501
        :type: str
        """

        self._secret_manager_region = secret_manager_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretsContextDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretsContextDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
