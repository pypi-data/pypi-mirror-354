# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationServiceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_timestamp': 'str',
        'external_dns': 'str',
        'external_endpoints': 'list[Endpoint]',
        'internal_endpoints': 'list[Endpoint]',
        'labels': 'dict(str, str)',
        'name': 'str',
        'selectors': 'dict(str, str)',
        'service_type': 'str'
    }

    attribute_map = {
        'creation_timestamp': 'creationTimestamp',
        'external_dns': 'externalDns',
        'external_endpoints': 'externalEndpoints',
        'internal_endpoints': 'internalEndpoints',
        'labels': 'labels',
        'name': 'name',
        'selectors': 'selectors',
        'service_type': 'serviceType'
    }

    def __init__(self, creation_timestamp=None, external_dns=None, external_endpoints=None, internal_endpoints=None, labels=None, name=None, selectors=None, service_type=None):  # noqa: E501
        """ApplicationServiceDetails - a model defined in Swagger"""  # noqa: E501
        self._creation_timestamp = None
        self._external_dns = None
        self._external_endpoints = None
        self._internal_endpoints = None
        self._labels = None
        self._name = None
        self._selectors = None
        self._service_type = None
        self.discriminator = None
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if external_dns is not None:
            self.external_dns = external_dns
        if external_endpoints is not None:
            self.external_endpoints = external_endpoints
        if internal_endpoints is not None:
            self.internal_endpoints = internal_endpoints
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if selectors is not None:
            self.selectors = selectors
        if service_type is not None:
            self.service_type = service_type

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ApplicationServiceDetails.  # noqa: E501


        :return: The creation_timestamp of this ApplicationServiceDetails.  # noqa: E501
        :rtype: str
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ApplicationServiceDetails.


        :param creation_timestamp: The creation_timestamp of this ApplicationServiceDetails.  # noqa: E501
        :type: str
        """

        self._creation_timestamp = creation_timestamp

    @property
    def external_dns(self):
        """Gets the external_dns of this ApplicationServiceDetails.  # noqa: E501


        :return: The external_dns of this ApplicationServiceDetails.  # noqa: E501
        :rtype: str
        """
        return self._external_dns

    @external_dns.setter
    def external_dns(self, external_dns):
        """Sets the external_dns of this ApplicationServiceDetails.


        :param external_dns: The external_dns of this ApplicationServiceDetails.  # noqa: E501
        :type: str
        """

        self._external_dns = external_dns

    @property
    def external_endpoints(self):
        """Gets the external_endpoints of this ApplicationServiceDetails.  # noqa: E501


        :return: The external_endpoints of this ApplicationServiceDetails.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._external_endpoints

    @external_endpoints.setter
    def external_endpoints(self, external_endpoints):
        """Sets the external_endpoints of this ApplicationServiceDetails.


        :param external_endpoints: The external_endpoints of this ApplicationServiceDetails.  # noqa: E501
        :type: list[Endpoint]
        """

        self._external_endpoints = external_endpoints

    @property
    def internal_endpoints(self):
        """Gets the internal_endpoints of this ApplicationServiceDetails.  # noqa: E501


        :return: The internal_endpoints of this ApplicationServiceDetails.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._internal_endpoints

    @internal_endpoints.setter
    def internal_endpoints(self, internal_endpoints):
        """Sets the internal_endpoints of this ApplicationServiceDetails.


        :param internal_endpoints: The internal_endpoints of this ApplicationServiceDetails.  # noqa: E501
        :type: list[Endpoint]
        """

        self._internal_endpoints = internal_endpoints

    @property
    def labels(self):
        """Gets the labels of this ApplicationServiceDetails.  # noqa: E501


        :return: The labels of this ApplicationServiceDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApplicationServiceDetails.


        :param labels: The labels of this ApplicationServiceDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ApplicationServiceDetails.  # noqa: E501


        :return: The name of this ApplicationServiceDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationServiceDetails.


        :param name: The name of this ApplicationServiceDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def selectors(self):
        """Gets the selectors of this ApplicationServiceDetails.  # noqa: E501


        :return: The selectors of this ApplicationServiceDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this ApplicationServiceDetails.


        :param selectors: The selectors of this ApplicationServiceDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._selectors = selectors

    @property
    def service_type(self):
        """Gets the service_type of this ApplicationServiceDetails.  # noqa: E501


        :return: The service_type of this ApplicationServiceDetails.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ApplicationServiceDetails.


        :param service_type: The service_type of this ApplicationServiceDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationServiceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationServiceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
