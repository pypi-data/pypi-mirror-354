# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Kube2IamConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_access_key_id': 'str',
        'aws_secret_access_key': 'str',
        'enabled': 'bool',
        'host_network_interface': 'str'
    }

    attribute_map = {
        'aws_access_key_id': 'awsAccessKeyID',
        'aws_secret_access_key': 'awsSecretAccessKey',
        'enabled': 'enabled',
        'host_network_interface': 'hostNetworkInterface'
    }

    def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, enabled=None, host_network_interface=None):  # noqa: E501
        """Kube2IamConfiguration - a model defined in Swagger"""  # noqa: E501
        self._aws_access_key_id = None
        self._aws_secret_access_key = None
        self._enabled = None
        self._host_network_interface = None
        self.discriminator = None
        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if aws_secret_access_key is not None:
            self.aws_secret_access_key = aws_secret_access_key
        if enabled is not None:
            self.enabled = enabled
        if host_network_interface is not None:
            self.host_network_interface = host_network_interface

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this Kube2IamConfiguration.  # noqa: E501


        :return: The aws_access_key_id of this Kube2IamConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this Kube2IamConfiguration.


        :param aws_access_key_id: The aws_access_key_id of this Kube2IamConfiguration.  # noqa: E501
        :type: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this Kube2IamConfiguration.  # noqa: E501


        :return: The aws_secret_access_key of this Kube2IamConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this Kube2IamConfiguration.


        :param aws_secret_access_key: The aws_secret_access_key of this Kube2IamConfiguration.  # noqa: E501
        :type: str
        """

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def enabled(self):
        """Gets the enabled of this Kube2IamConfiguration.  # noqa: E501


        :return: The enabled of this Kube2IamConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Kube2IamConfiguration.


        :param enabled: The enabled of this Kube2IamConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def host_network_interface(self):
        """Gets the host_network_interface of this Kube2IamConfiguration.  # noqa: E501


        :return: The host_network_interface of this Kube2IamConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._host_network_interface

    @host_network_interface.setter
    def host_network_interface(self, host_network_interface):
        """Sets the host_network_interface of this Kube2IamConfiguration.


        :param host_network_interface: The host_network_interface of this Kube2IamConfiguration.  # noqa: E501
        :type: str
        """

        self._host_network_interface = host_network_interface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Kube2IamConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kube2IamConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
