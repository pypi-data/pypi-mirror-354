# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicationDeploymentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_timestamp': 'str',
        'credentials_list': 'list[str]',
        'environment_configs': 'dict(str, str)',
        'hpa_status': 'HPADetails',
        'labels': 'dict(str, str)',
        'name': 'str',
        'replicas': 'PodReplicationDetails'
    }

    attribute_map = {
        'creation_timestamp': 'creationTimestamp',
        'credentials_list': 'credentialsList',
        'environment_configs': 'environmentConfigs',
        'hpa_status': 'hpaStatus',
        'labels': 'labels',
        'name': 'name',
        'replicas': 'replicas'
    }

    def __init__(self, creation_timestamp=None, credentials_list=None, environment_configs=None, hpa_status=None, labels=None, name=None, replicas=None):  # noqa: E501
        """ApplicationDeploymentDetails - a model defined in Swagger"""  # noqa: E501
        self._creation_timestamp = None
        self._credentials_list = None
        self._environment_configs = None
        self._hpa_status = None
        self._labels = None
        self._name = None
        self._replicas = None
        self.discriminator = None
        if creation_timestamp is not None:
            self.creation_timestamp = creation_timestamp
        if credentials_list is not None:
            self.credentials_list = credentials_list
        if environment_configs is not None:
            self.environment_configs = environment_configs
        if hpa_status is not None:
            self.hpa_status = hpa_status
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if replicas is not None:
            self.replicas = replicas

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The creation_timestamp of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this ApplicationDeploymentDetails.


        :param creation_timestamp: The creation_timestamp of this ApplicationDeploymentDetails.  # noqa: E501
        :type: str
        """

        self._creation_timestamp = creation_timestamp

    @property
    def credentials_list(self):
        """Gets the credentials_list of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The credentials_list of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._credentials_list

    @credentials_list.setter
    def credentials_list(self, credentials_list):
        """Sets the credentials_list of this ApplicationDeploymentDetails.


        :param credentials_list: The credentials_list of this ApplicationDeploymentDetails.  # noqa: E501
        :type: list[str]
        """

        self._credentials_list = credentials_list

    @property
    def environment_configs(self):
        """Gets the environment_configs of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The environment_configs of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._environment_configs

    @environment_configs.setter
    def environment_configs(self, environment_configs):
        """Sets the environment_configs of this ApplicationDeploymentDetails.


        :param environment_configs: The environment_configs of this ApplicationDeploymentDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._environment_configs = environment_configs

    @property
    def hpa_status(self):
        """Gets the hpa_status of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The hpa_status of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: HPADetails
        """
        return self._hpa_status

    @hpa_status.setter
    def hpa_status(self, hpa_status):
        """Sets the hpa_status of this ApplicationDeploymentDetails.


        :param hpa_status: The hpa_status of this ApplicationDeploymentDetails.  # noqa: E501
        :type: HPADetails
        """

        self._hpa_status = hpa_status

    @property
    def labels(self):
        """Gets the labels of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The labels of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApplicationDeploymentDetails.


        :param labels: The labels of this ApplicationDeploymentDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The name of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationDeploymentDetails.


        :param name: The name of this ApplicationDeploymentDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def replicas(self):
        """Gets the replicas of this ApplicationDeploymentDetails.  # noqa: E501


        :return: The replicas of this ApplicationDeploymentDetails.  # noqa: E501
        :rtype: PodReplicationDetails
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ApplicationDeploymentDetails.


        :param replicas: The replicas of this ApplicationDeploymentDetails.  # noqa: E501
        :type: PodReplicationDetails
        """

        self._replicas = replicas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDeploymentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDeploymentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
