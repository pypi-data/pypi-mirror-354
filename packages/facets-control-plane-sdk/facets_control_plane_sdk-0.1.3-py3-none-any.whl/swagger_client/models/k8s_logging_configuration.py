# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class K8sLoggingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_access_key_id': 'str',
        'aws_region': 'str',
        'aws_secret_access_key': 'str',
        'efs_host': 'str',
        'logs_s3_bucket': 'str'
    }

    attribute_map = {
        'aws_access_key_id': 'awsAccessKeyID',
        'aws_region': 'awsRegion',
        'aws_secret_access_key': 'awsSecretAccessKey',
        'efs_host': 'efsHost',
        'logs_s3_bucket': 'logsS3Bucket'
    }

    def __init__(self, aws_access_key_id=None, aws_region=None, aws_secret_access_key=None, efs_host=None, logs_s3_bucket=None):  # noqa: E501
        """K8sLoggingConfiguration - a model defined in Swagger"""  # noqa: E501
        self._aws_access_key_id = None
        self._aws_region = None
        self._aws_secret_access_key = None
        self._efs_host = None
        self._logs_s3_bucket = None
        self.discriminator = None
        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if aws_region is not None:
            self.aws_region = aws_region
        if aws_secret_access_key is not None:
            self.aws_secret_access_key = aws_secret_access_key
        if efs_host is not None:
            self.efs_host = efs_host
        if logs_s3_bucket is not None:
            self.logs_s3_bucket = logs_s3_bucket

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this K8sLoggingConfiguration.  # noqa: E501


        :return: The aws_access_key_id of this K8sLoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this K8sLoggingConfiguration.


        :param aws_access_key_id: The aws_access_key_id of this K8sLoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_region(self):
        """Gets the aws_region of this K8sLoggingConfiguration.  # noqa: E501


        :return: The aws_region of this K8sLoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this K8sLoggingConfiguration.


        :param aws_region: The aws_region of this K8sLoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this K8sLoggingConfiguration.  # noqa: E501


        :return: The aws_secret_access_key of this K8sLoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this K8sLoggingConfiguration.


        :param aws_secret_access_key: The aws_secret_access_key of this K8sLoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def efs_host(self):
        """Gets the efs_host of this K8sLoggingConfiguration.  # noqa: E501


        :return: The efs_host of this K8sLoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._efs_host

    @efs_host.setter
    def efs_host(self, efs_host):
        """Sets the efs_host of this K8sLoggingConfiguration.


        :param efs_host: The efs_host of this K8sLoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._efs_host = efs_host

    @property
    def logs_s3_bucket(self):
        """Gets the logs_s3_bucket of this K8sLoggingConfiguration.  # noqa: E501


        :return: The logs_s3_bucket of this K8sLoggingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._logs_s3_bucket

    @logs_s3_bucket.setter
    def logs_s3_bucket(self, logs_s3_bucket):
        """Sets the logs_s3_bucket of this K8sLoggingConfiguration.


        :param logs_s3_bucket: The logs_s3_bucket of this K8sLoggingConfiguration.  # noqa: E501
        :type: str
        """

        self._logs_s3_bucket = logs_s3_bucket

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(K8sLoggingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, K8sLoggingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
