# 根据 CVE-ID 从 CNNVD 获取漏洞信息
## TODO: CNNVD 的接口过于脆弱，或者反扒策略太激进，请求几次之后就一直 timeout 了，暂时搁置
### PS：单纯响应超级慢，超时时间需要设置长一些

import httpx
from bs4 import BeautifulSoup
from summer_modules.web_request_utils import getUserAgent
import json
from summer_modules.utils import write_dict_to_json_file
from pathlib import Path
from . import CNNVD_LOGGER, CNNVD_INFO_BASE_DIR, CURRENT_DIR
from summer_modules.security.vulnerability.cve import CVE_INFO_BASE_DIR


def search_vul_on_cnnvd_by_cve_id(cve_id: str, enable_local_search=True) -> dict:
    """根据 CVE-ID 从 CNNVD 搜索漏洞信息。

    通过 CVE-ID 在 CNNVD 数据库中查询相关漏洞信息，支持本地缓存查询结果。

    Args:
        cve_id (str): 要搜索的 CVE 编号
        enable_local_search (bool, optional): 是否启用本地搜索。默认为 True

    Returns:
        dict: 包含搜索结果的字典，格式如下：
            {
                "success": bool,  # 是否成功获取信息
                "data": list      # 搜索结果的 JSON 数据列表
                "info": str        # 附加信息
            }
    """
    success = False
    info = ""
    if enable_local_search:
        CNNVD_LOGGER.debug(f"已启用本地搜索，尝试从本地获取 {cve_id} 的漏洞信息")
        search_data = search_vul_on_cnnvd_by_cve_id_local(cve_id)
        if search_data:
            success = True
            CNNVD_LOGGER.info(f"从本地根据 {cve_id} 获取 CNNVD 搜索结果成功")
            return {"success": success, "data": search_data, "info": info}
        else:
            info = f"在本地未找到根据 {cve_id} 在 CNNVD 上的搜索结果"
            CNNVD_LOGGER.debug(info)

    search_vul_on_cnnvd_by_cve_id_online_result = search_vul_on_cnnvd_by_cve_id_online(
        cve_id
    )
    if search_vul_on_cnnvd_by_cve_id_online_result["success"]:
        success = True
        return search_vul_on_cnnvd_by_cve_id_online_result["data"]
    else:
        info = "尝试联网从 CNNVD 获取漏洞信息失败, 请查看 log 了解详情"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}


def search_vul_on_cnnvd_by_cve_id_local(cve_id: str) -> dict:
    """通过 CVE-ID 在 CNNVD 数据库中查询相关漏洞信息。

    通过本地缓存查询结果。

    Args:
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        dict: 保存的搜素结果 json 数据
    """
    cve_info_dir = CVE_INFO_BASE_DIR / cve_id
    cve_info_cnnvd_search_filepath = cve_info_dir / f"{cve_id}_cnnvd_search.json"
    if cve_info_cnnvd_search_filepath.exists():
        CNNVD_LOGGER.debug(f"本地已存在根据 {cve_id} 搜索 CNNVD 的响应，从本地读取")
        with open(cve_info_cnnvd_search_filepath, "r") as f:
            search_data = json.load(f)
            return search_data
    else:
        info = f"在 {cve_info_cnnvd_search_filepath} 中未找到根据 {cve_id} 在 CNNVD 上的搜索结果"
        CNNVD_LOGGER.debug(info)
        return {}


def search_vul_on_cnnvd_by_cve_id_online(cve_id: str) -> dict:
    """通过 CVE-ID 在 CNNVD 数据库中查询相关漏洞信息。

    Args:
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        dict: 包含搜索结果的字典，格式如下：
            {
                "success": bool,  # 是否成功获取信息
                "data": list      # 搜索结果的 JSON 数据列表
                "info": str        # 附加信息
            }
    """
    success = False
    info = ""
    UA = getUserAgent()
    # UA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0"
    headers = {
        "user-agent": UA,
        "accept": "application/json, text/plain, */*",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
        "connection": "keep-alive",
        "content-type": "application/json;charset=UTF-8",
        "dnt": "1",
        "host": "www.cnnvd.org.cn",
    }
    try:
        with httpx.Client(verify=False, timeout=20) as client:
            return _search_vul_on_cnnvd_by_cve_id_online(cve_id, client, headers)
    except Exception as e:
        info = f"获取 {cve_id} 的漏洞信息失败, 抛出异常: {e}"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}


def _search_vul_on_cnnvd_by_cve_id_online(
    cve_id: str, client: httpx.Client, headers: dict
) -> dict:
    """通过 CVE-ID 在 CNNVD 数据库中查询相关漏洞信息。

    Args:
        cve_id (str): 要搜索的 CVE 编号
        client (httpx.Client): httpx 客户端
        headers (dict): 请求头

    Returns:
        dict: 包含搜索结果的字典，格式如下：
            {
                "success": bool,  # 是否成功获取信息
                "data": list      # 搜索结果的 JSON 数据列表
                "info": str        # 附加信息
            }
    """
    success = False
    info = ""
    post_body = {
        "pageIndex": 1,
        "pageSize": 10,
        "keyword": cve_id,
    }
    post_body_json = json.dumps(post_body)
    resp = client.post(
        "https://www.cnnvd.org.cn/web/homePage/cnnvdVulList",
        headers=headers,
        json=post_body,
        follow_redirects=True,
    )
    # 返回的是个 json
    response_data_json = resp.json()
    if response_data_json["code"] != 200:
        info = f"获取漏洞信息失败: {response_data_json}, cve_id: {cve_id}, status_code: {resp.status_code}"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}

    success = True

    # 存储到本地
    cve_info_dir = CVE_INFO_BASE_DIR / cve_id
    cve_info_cnnvd_search_filepath = cve_info_dir / f"{cve_id}_cnnvd_search.json"
    cve_info_dir.mkdir(parents=True, exist_ok=True)
    write_dict_to_json_file(response_data_json, cve_info_cnnvd_search_filepath)

    return {"success": success, "data": response_data_json, "info": info}


def get_id_vulType_cnnvdCode_from_search_result(
    search_result: dict, cve_id: str
) -> tuple | None:
    """从 CNNVD 搜索结果中获取 id vulType cnnvdCode。

    Args:
        search_result (dict): CNNVD 搜索结果
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        tuple: 包含 id vulType cnnvdCode 的元组
    """
    # 先获取搜索结果
    search_vul_on_cnnvd_by_cve_id_result = search_vul_on_cnnvd_by_cve_id(cve_id)
    if not search_vul_on_cnnvd_by_cve_id_result["success"]:
        CNNVD_LOGGER.error(
            f"尝试根据 {cve_id} 在 CNNVD 上搜索漏洞失败, 请查看 log 了解详情"
        )
        return None

    search_data = search_vul_on_cnnvd_by_cve_id_result["data"]
    search_data_records = search_data["data"]["records"]
    # 如果没有搜索到相关漏洞信息的话，那么 records 字段应该是 [] 空列表
    if not search_data_records:
        CNNVD_LOGGER.info(
            f"根据 {cve_id} 在 CNNVD 上未找到相关漏洞信息", info_color="magenta"
        )
        return None

    # 遍历查询 cveCode 是否匹配
    for record in search_data_records:
        cveCode = record["cveCode"]
        if cveCode == cve_id:
            cnnvdID = record["id"]
            vulType = record["vulType"]
            cnnvdCode = record["cnnvdCode"]
            return (cnnvdID, vulType, cnnvdCode)

    CNNVD_LOGGER.info(
        f"根据 {cve_id} 在 CNNVD 上未找到相关漏洞信息", info_color="magenta"
    )
    return None

def get_cnnvd_id_by_cve_id(cve_id: str) -> str:
    """根据 CVE-ID 获取 CNNVD-ID。

    Args:
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        str: CNNVD-ID
    """
    search_vul_on_cnnvd_by_cve_id_result = search_vul_on_cnnvd_by_cve_id(cve_id)
    get_id_vulType_cnnvdCode_result = get_id_vulType_cnnvdCode_from_search_result(
        search_result=search_vul_on_cnnvd_by_cve_id_result, cve_id=cve_id
    )
    if not get_id_vulType_cnnvdCode_result:
        CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上未找到对应 CNNVD-ID", info_color="magenta")
        return ""
    _, _, cnnvdCode = get_id_vulType_cnnvdCode_result
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上找到对应 CNNVD-ID: {cnnvdCode}")
    return cnnvdCode

def get_vul_info_from_cnnvd_by_cve_id(cve_id: str, enable_local_search=True) -> dict:
    """根据 CVE-ID 从 CNNVD 获取漏洞信息。

    通过 CVE-ID 在 CNNVD 数据库中查询相关漏洞信息，支持本地缓存查询结果。

    Args:
        cve_id (str): 要搜索的 CVE 编号
        enable_local_search (bool, optional): 是否启用本地搜索。默认为 True

    Returns:
        dict: 包含漏洞信息的字典，格式如下：
            {
                "success": bool,  # 是否成功获取信息
                "data": dict       # 漏洞信息的 JSON 数据
                "info": str        # 附加信息
            }
    """
    success = False
    info = ""
    if enable_local_search:
        CNNVD_LOGGER.debug(
            f"已启用本地搜索，尝试从本地获取根据 {cve_id} 在 CNNVD 上搜索到的漏洞信息"
        )
        vul_info = get_vul_info_from_cnnvd_by_cve_id_local(cve_id)
        success = True
        if vul_info:
            return {"success": success, "data": vul_info, "info": info}
        else:
            info = f"在本地未找到根据 {cve_id} 在 CNNVD 上搜索到的漏洞信息"
            CNNVD_LOGGER.debug(info)

    vul_info = get_vul_info_from_cnnvd_by_cve_id_online(cve_id)
    if vul_info["success"]:
        success = True
        return {"success": success, "data": vul_info, "info": info}
    else:
        info = f"尝试联网获取 {cve_id} 的漏洞信息失败, 请查看 log 了解详情"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}


def get_vul_info_from_cnnvd_by_cve_id_online(cve_id: str) -> dict:
    """根据 CVE-ID 从 CNNVD 获取漏洞信息。

    Args:
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        dict: 包含漏洞信息的字典，格式如下：
            {
                "success": bool,  # 是否成功获取信息
                "data": dict       # 漏洞信息的 JSON 数据
                "info": str        # 附加信息"
            }
    """
    CNNVD_LOGGER.info(f"开始联网根据 {cve_id} 在 CNNVD 上获取漏洞信息")
    success = False
    info = ""

    serach_vul_on_cnnvd_by_cve_id_result = search_vul_on_cnnvd_by_cve_id(cve_id)
    get_id_vulType_cnnvdCode_result = get_id_vulType_cnnvdCode_from_search_result(
        search_result=serach_vul_on_cnnvd_by_cve_id_result, cve_id=cve_id
    )
    if not get_id_vulType_cnnvdCode_result:
        info = f"根据 {cve_id} 在 CNNVD 上联网搜索未找到相关漏洞信息"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}

    cnnvdID, vulType, cnnvdCode = get_id_vulType_cnnvdCode_result

    UA = getUserAgent()
    headers = {
        "accept": "application/json, text/plain, */*",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
        "connection": "keep-alive",
        "content-type": "application/json;charset=UTF-8",
        "dnt": "1",
        "host": "www.cnnvd.org.cn",
        "origin": "https://www.cnnvd.org.cn",
        "referer": "https://www.cnnvd.org.cn/home/loophole",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin",
        "user-agent": UA,
        "sec-ch-ua": '"Chromium";v="134", "Not:A-Brand";v="24", "Microsoft Edge";v="134"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"macOS"',
    }
    try:
        with httpx.Client(verify=False, timeout=20) as client:
            # 根据 cnnvdCode 获取漏洞详情
            getVulDetaiUrl = (
                "https://www.cnnvd.org.cn/web/cnnvdVul/getCnnnvdDetailOnDatasource"
            )
            request_body = {
                "cnnvdCode": cnnvdCode,
                "id": cnnvdID,
                "vulType": vulType,
            }
            resp = client.post(
                getVulDetaiUrl,
                headers=headers,
                json=request_body,
                follow_redirects=True,
            )
            response_data_json = resp.json()
            if response_data_json["code"] != 200:
                info = f"根据 {cve_id} 在 CNNVD 上联网获取漏洞信息失败, 响应数据: {response_data_json}"
                CNNVD_LOGGER.error(info)
                return {"success": success, "data": {}, "info": info}

            response_data = response_data_json["data"]
            response_data_cnnvdDetail = response_data["cnnvdDetail"]
            success = True
            cnnvd_info_dir = CNNVD_INFO_BASE_DIR / cnnvdCode
            cnnvd_info_dir.mkdir(parents=True, exist_ok=True)
            cnnvd_info_filepath = cnnvd_info_dir / f"{cnnvdCode}_cnnvd_info.json"
            cve_info_dir = CVE_INFO_BASE_DIR / cve_id
            cve_info_dir.mkdir(parents=True, exist_ok=True)
            cve_info_cnnvd_filepath = cve_info_dir / f"{cve_id}_cnnvd_info.json"
            write_dict_to_json_file(
                data=response_data_cnnvdDetail, filepath=cve_info_cnnvd_filepath
            )
            write_dict_to_json_file(
                data=response_data_cnnvdDetail, filepath=cnnvd_info_filepath
            )
            CNNVD_LOGGER.info(
                f"根据 {cve_id} 在 CNNVD 上获取漏洞信息成功, CNNVD-ID: {cnnvdCode}, 保存到 {cve_info_cnnvd_filepath}"
            )
            return {"success": success, "data": response_data_cnnvdDetail, "info": info}
    except Exception as e:
        info = f"获取 {cve_id} 的漏洞信息失败, 抛出异常: {e}"
        CNNVD_LOGGER.error(info)
        return {"success": success, "data": {}, "info": info}


def get_vul_info_from_cnnvd_by_cve_id_local(cve_id: str) -> dict:
    """根据 CVE-ID 从 CNNVD 获取漏洞信息。

    通过本地缓存查询结果。

    Args:
        cve_id (str): 要搜索的 CVE 编号

    Returns:
        dict: 包含漏洞信息的字典
    """
    cve_info_cnnvd_dir = CVE_INFO_BASE_DIR / cve_id
    cve_info_cnnvd_filepath = cve_info_cnnvd_dir / f"{cve_id}_cnnvd_info.json"
    if cve_info_cnnvd_filepath.exists():
        CNNVD_LOGGER.debug(
            f"本地已存在根据 {cve_id} 在 CNNVD 上搜索到的漏洞信息，从本地读取"
        )
        with open(cve_info_cnnvd_filepath, "r") as f:
            cve_info_cnnvd_json = json.load(f)
            return cve_info_cnnvd_json
    else:
        info = f"在 {cve_info_cnnvd_filepath} 中未找到根据 {cve_id} 在 CNNVD 上搜索到的漏洞信息"
        CNNVD_LOGGER.info(info, info_color="magenta")
        return {}


def test_search_vul_on_cnnvd_by_cve_id_online():
    cve_id = "CVE-2021-44228"
    vul_search_info = search_vul_on_cnnvd_by_cve_id_online(cve_id)
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上搜索结果（联网）: {vul_search_info}")


def test_search_vul_on_cnnvd_by_cve_id_local():
    CNNVD_LOGGER.info(
        "请在执行了 test_search_vul_on_cnnvd_by_cve_id_online 之后再执行本测试"
    )
    cve_id = "CVE-2021-44228"
    vul_search_info = search_vul_on_cnnvd_by_cve_id_local(cve_id)
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上搜索结果（本地）: {vul_search_info}")


def test_search_vul_on_cnnvd_by_cve_id():
    cve_id = "CVE-2024-36401"
    vul_search_info = search_vul_on_cnnvd_by_cve_id(cve_id)
    CNNVD_LOGGER.info(
        f"根据 {cve_id} 在 CNNVD 上的搜索结果（联网&本地）: {vul_search_info}"
    )


def test_get_vul_info_from_cnnvd_by_cve_id_online():
    cve_id = "CVE-2021-44228"
    vul_info = get_vul_info_from_cnnvd_by_cve_id_online(cve_id)
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上获取漏洞信息（联网）: {vul_info}")


def test_get_vul_info_from_cnnvd_by_cve_id_local():
    CNNVD_LOGGER.info(
        "请在执行了 test_get_vul_info_from_cnnvd_by_cve_id_online 之后再执行本测试"
    )
    cve_id = "CVE-2021-44228"
    vul_info = get_vul_info_from_cnnvd_by_cve_id_local(cve_id)
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上获取漏洞信息（本地）: {vul_info}")


def test_get_vul_info_from_cnnvd_by_cve_id():
    cve_id = "CVE-2021-44228"
    vul_info = get_vul_info_from_cnnvd_by_cve_id(cve_id)
    CNNVD_LOGGER.info(f"根据 {cve_id} 在 CNNVD 上获取漏洞信息（联网&本地）: {vul_info}")
