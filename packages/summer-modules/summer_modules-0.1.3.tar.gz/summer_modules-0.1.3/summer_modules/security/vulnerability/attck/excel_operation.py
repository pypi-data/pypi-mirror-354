from pathlib import Path
from summer_modules.logger import init_and_get_logger
import toml

# ATTCK 页面解析
from summer_modules.utils import write_dict_to_json_file
from summer_modules.security.vulnerability.cve.poc import get_exp_poc_link_list

# Excel 相关
from openpyxl import Workbook, load_workbook
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter
from itertools import groupby
from typing import Tuple
from openpyxl.worksheet.worksheet import Worksheet

# deepseek api
from summer_modules.ai.deepseek import DeepseekClient
import re

# cve
from summer_modules.security.vulnerability.cve.info import CVEInfo
from summer_modules.security.vulnerability.github_repo.nuclei import (
    get_write_nuclei_http_cve_dict,
)

CURRENT_DIR = Path(__file__).resolve().parent
logger = init_and_get_logger(CURRENT_DIR, "attck_excel_operation")

NUCLEI_HTTP_CVE_ID_IN_ATTCK_LIST_FILEPATH = (
    CURRENT_DIR / "data/nuclei_http_cve_id_in_attck_list.txt"
)
CONFIG_TOML_FILEPATH = CURRENT_DIR / "../../../../config.toml"
# CONFIG = toml.load(CONFIG_TOML_FILEPATH)
# DEEPSEEK_API_KEY = CONFIG["deepseek_apikey"]
# TODO: 修改此模块移除对本地配置文件的依赖
DEEPSEEK_API_KEY = "sk-xxxx"
cve_info = CVEInfo(deepseek_apikey=DEEPSEEK_API_KEY)


class ATTCKExcelOperation:
    """ATTCKExcelOperation 类封装了与 ATTCK 矩阵相关的 Excel 操作功能"""

    def __init__(self, github_token: str, deepseek_api_key: str):
        self.github_token = github_token
        self.nuclei_http_cve_dict = get_write_nuclei_http_cve_dict(
            github_token, enable_local_cache=True
        )
        self.deepseek_client = DeepseekClient(api_key=deepseek_api_key)

    def generate_attck_matrix_examples_with_cve_info_with_attck_matrix_techniques_info(
        self,
        attck_matrix_info: dict,
        excel_output_filepath: Path,
        attck_matrix_info_all_in_one_json_filepath: Path,
    ) -> None:
        """生成 Example 中包含 cve(CVE) 的 ATTCK 矩阵信息的 Excel 文件
        :param attck_matrix_info: 最终生成的 attck 战技术信息
        :param excel_output_filepath: 目标 excel 的文件路径
        :param cve_translate_cache_attck_matrix_info_filepath: 用作翻译缓存的 dict->json 文件路径，避免重复调用 deepseekapi 花钱
        """
        # 如果当前 excel 文件已经存在，则先读取已有的数据
        wb = None
        wb, ws = _get_or_create_sheet(wb, excel_output_filepath, "ATTCK Matrix CVE")
        # 设置表头
        ws.append(
            [
                "Tactic",  # 对应 attck_matrix_info 的 key， 例如 "TA0001-Initial Access"
                "Technique",  # 对应 attck_matrix_info 的 value 的 techniques_data 中的 key， 例如 "T1595-Active Scanning"
                "Subtechnique",  # 对应 attck_matrix_info 的 value 的 techniques_data 中的 value 的 subtechniques 的 key， 例如 "T1595.001.Scanning IP Blocks"
                "Example ID",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 id 字段的 name 字段
                "Example Name",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 name 字段的 name 字段
                "Example Description",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 description 字段
                "CVE-ID",  # 从 example description 中提取的 CVE ID
                "CVE Description",  # CVE 对应的描述
                "CVE POC Reference",  # CVE 对应的 POC 参考链接
                "NUCLEI POC Reference",  # Nuclei POC 参考链接
            ]
        )

        for tactic_key, tactic_value in attck_matrix_info.items():
            techniques_data = tactic_value.get("techniques_data")
            if not techniques_data:
                logger.error(f"tactic: {tactic_value['name']} 中没有 techniques_data")
                continue
            for super_technique_id in techniques_data:
                super_technique_data = techniques_data.get(super_technique_id)
                super_technique_info = super_technique_data.get("info")
                if examples := super_technique_info.get("examples"):
                    for example_id in examples:
                        example = examples[f"{example_id}"]
                        # 如果 example description 中包含 cve(CVE)，则将这个 technique/subtechnique 的信息写入到 excel 中
                        self._append_example_data_with_cve(
                            ws,
                            attck_matrix_info,
                            tactic_key,
                            super_technique_id,
                            "",
                            example,
                            self.nuclei_http_cve_dict,
                        )
                subtechniques_data = super_technique_data.get("subtechniques")
                if not subtechniques_data:
                    logger.info(
                        f"tactic: {tactic_value['name']} technique: {super_technique_data['super_technique_name']} 中没有 subtechniques"
                    )
                    continue
                for subtechnique_id in subtechniques_data:
                    subtechnique_data = subtechniques_data.get(subtechnique_id)

                    subtechnique_info = subtechnique_data.get("info")

                    if examples := subtechnique_info.get("examples"):
                        for example_id in examples:
                            example = examples[f"{example_id}"]
                            # 如果 example description 中包含 cve(CVE)，则将这个 technique/subtechnique 的信息写入到 excel 中
                            self._append_example_data_with_cve(
                                ws,
                                attck_matrix_info,
                                tactic_key,
                                super_technique_id,
                                subtechnique_id,
                                example,
                                self.nuclei_http_cve_dict,
                            )

        # 保存 attck_matrix_info 到文件
        write_dict_to_json_file(
            data=attck_matrix_info,
            filepath=attck_matrix_info_all_in_one_json_filepath,
        )

        # 合并相邻相同单元格并设置列宽和样式
        _merge_and_style_columns(ws)

        wb.save(excel_output_filepath)

    def _append_example_data_with_cve(
        self,
        ws: Worksheet,
        attck_matrix_info: dict,
        tactic_key: str,
        technique_key: str,
        subtechnique_key: str,
        example: dict,
        nuclei_http_cve_dict: dict,
    ) -> None:
        """如果 description 中包含 cve(CVE)，翻译并将数据写入 Excel"""
        if "cve" in example["description"].lower():
            cve_pattern = r"CVE-\d{4}-\d+"
            cve_id_list = re.findall(cve_pattern, example["description"], re.IGNORECASE)
            if not cve_id_list:
                return
            if not cve_id_list:
                return
            if not example.get("description_cn"):
                logger.debug(
                    f"本地未存储此翻译，调用 deepseek api 翻译 example: {example['id']['name']}"
                )
                example["description_cn"] = self.deepseek_client.translate_text(
                    example["description"]
                )
                attck_matrix_info[tactic_key]["techniques_data"][technique_key][
                    "subtechniques" if subtechnique_key else "info"
                ]["examples"][example["id"]["name"]]["description_cn"] = example[
                    "description_cn"
                ]

            nuclei_http_cve_id_in_attck_list = []
            for cve_id in cve_id_list:
                # 获取 cve 信息
                cve_description_cn = cve_info.get_cve_description(cve_id)
                if not cve_description_cn:
                    logger.error(f"获取 cve: {cve_id} 描述失败")
                poc_links = get_exp_poc_link_list(
                    cve_id=cve_id, enable_local_search=True
                )
                poc_links_str = "\n".join(poc_links) if poc_links else ""
                # 获取 nuclei cve 信息
                nuclei_http_cve_url = nuclei_http_cve_dict.get(cve_id) or ""
                if nuclei_http_cve_url:
                    nuclei_http_cve_id_in_attck_list.append(cve_id)
                ws.append(
                    [
                        tactic_key,
                        technique_key,
                        subtechnique_key,
                        example["id"]["name"],
                        example["name"]["name"],
                        f"{example['description']}\n\n{example['description_cn']}",
                        cve_id,
                        cve_description_cn,
                        poc_links_str,
                        nuclei_http_cve_url,
                    ]
                )
            if nuclei_http_cve_id_in_attck_list:
                with NUCLEI_HTTP_CVE_ID_IN_ATTCK_LIST_FILEPATH.open("a") as f:
                    for cve_id in nuclei_http_cve_id_in_attck_list:
                        f.write(f"{cve_id}\n")


def _get_or_create_sheet(
    wb: Workbook, excel_output_filepath: Path, sheet_name: str
) -> Tuple[Workbook, Worksheet]:
    """若工作薄不存在或存在则删除并新建指定sheet"""
    if wb is None and excel_output_filepath.exists():
        wb = load_workbook(excel_output_filepath)
        if sheet_name in wb.sheetnames:
            ws_to_remove = wb[sheet_name]
            wb.remove(ws_to_remove)
        ws = wb.create_sheet(sheet_name)
    elif wb is None:
        wb = Workbook()
        ws = wb.active
        ws.title = sheet_name
    else:
        if sheet_name in wb.sheetnames:
            ws_to_remove = wb[sheet_name]
            wb.remove(ws_to_remove)
        ws = wb.create_sheet(sheet_name)
    return wb, ws


def _merge_and_style_columns(ws: Worksheet) -> None:
    """合并相邻相同单元格并设置列宽和样式"""
    for col in ws.columns:
        max_length = 0
        column = get_column_letter(col[0].column)
        for k, g in groupby(col, key=lambda x: x.value):
            if k is not None:
                g = list(g)
                if len(g) > 1:
                    ws.merge_cells(
                        f"{get_column_letter(g[0].column)}{g[0].row}:{get_column_letter(g[-1].column)}{g[-1].row}"
                    )
        for cell in col:
            if cell.value:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
                # 设置上下左右居中对齐，自动换行
                cell.alignment = Alignment(
                    horizontal="center", vertical="center", wrap_text=True
                )
                # 设置字体为 Times New Roman, 大小为 16
                cell.font = Font(name="Times New Roman", size=16)
        adjusted_width = min(max_length + 2, 50)
        ws.column_dimensions[column].width = adjusted_width


def generate_attck_matrix_info_excel_with_attck_matrix_techniques_info(
    attck_matrix_info: dict, excel_output_filepath: Path
) -> None:
    """生成 ATTCK 矩阵信息的 Excel 文件"""
    # 如果当前 excel 文件已经存在，则先读取已有的数据
    wb = None
    wb, ws = _get_or_create_sheet(wb, excel_output_filepath, "ATTCK Matrix")
    # 设置表头
    ws.append(
        [
            "Tactic",  # 对应 attck_matrix_info 的 key， 例如 "TA0001-Initial Access"
            "Technique",  # 对应 attck_matrix_info 的 value 的 techniques_data 中的 key， 例如 "T1595-Active Scanning"
            "Subtechnique",  # 对应 attck_matrix_info 的 value 的 techniques_data 中的 value 的 subtechniques 的 key， 例如 "T1595.001.Scanning IP Blocks"
            "Example ID",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 id 字段的 name 字段
            "Example Name",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 name 字段的 name 字段
            "Example Description",  # 对应 technique_data 或者 subtechnique_data 的 examples 列表中每一个元素的 description 字段
        ]
    )
    for tactic_key, tactic_value in attck_matrix_info.items():
        techniques_data = tactic_value.get("techniques_data")
        if not techniques_data:
            logger.error(f"tactic: {tactic_value['name']} 中没有 techniques_data")
            continue
        for super_technique in techniques_data:
            super_technique_data = techniques_data.get(super_technique)
            super_technique_info = super_technique_data.get("info")
            if examples := super_technique_info.get("examples"):
                for example in examples:
                    example = examples[f"{example}"]
                    ws.append(
                        [
                            tactic_key,
                            super_technique,
                            "",
                            example["id"]["name"],
                            example["name"]["name"],
                            example["description"],
                        ]
                    )
            subtechniques_data = super_technique_data.get("subtechniques")
            if not subtechniques_data:
                logger.info(
                    f"tactic: {tactic_value['name']} technique: {super_technique_data['super_technique_name']} 中没有 subtechniques"
                )
                continue
            for subtechnique in subtechniques_data:
                subtechnique_data = subtechniques_data.get(subtechnique)
                subtechnique_info = subtechnique_data.get("info")
                if examples := subtechnique_info.get("examples"):
                    for example in examples:
                        example = examples[f"{example}"]
                        ws.append(
                            [
                                tactic_key,
                                super_technique,
                                subtechnique,
                                example["id"]["name"],
                                example["name"]["name"],
                                example["description"],
                            ]
                        )
    _merge_and_style_columns(ws)
    wb.save(excel_output_filepath)
