import httpx
import json
from pathlib import Path
from summer_modules.logger import init_and_get_logger
import toml

CURRENT_DIR = Path(__file__).resolve().parent
logger = init_and_get_logger(CURRENT_DIR, "github_repo_logger")
NUCLEI_HTTP_CVE_DICT_FILEPATH = CURRENT_DIR / "../cve/data/nuclei_http_cve_dict.json"

# TODO: 修改此模块移除对本地配置文件的依赖
CONFIG_TOML_FILEPATH = (CURRENT_DIR / "../../../../config.toml").resolve()
# CONFIG_TOML = toml.load(CONFIG_TOML_FILEPATH)
# GITHUB_TOKEN = CONFIG_TOML["github_token"]
GITHUB_TOKEN = "xxxxxxx"


def get_write_nuclei_http_cve_dict(
    github_token: str = GITHUB_TOKEN,
    local_path: Path = NUCLEI_HTTP_CVE_DICT_FILEPATH,
    enable_local_cache: bool = True,
):
    """获取 Nuclei 的 CVE 列表并写入到本地
    Args:
        github_token (str): GitHub Token
        local_path (Path): 本地路径
        enable_local_cache (bool, optional): 是否启用本地缓存. Defaults to True.
    Returns:
        dict: Nuclei 的 CVE 列表
    """
    if enable_local_cache and local_path.exists():
        with local_path.open("r", encoding="utf-8") as f:
            return json.load(f)
    else:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
            "Authorization": f"Bearer {github_token}",
            "Accept": "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28",
        }
        try:
            with httpx.Client(verify=False, timeout=20) as client:
                nuclei_http_cve_dict = _get_nuclei_cve_dict(client, headers)
                if nuclei_http_cve_dict:
                    with local_path.open("w", encoding="utf-8") as f:
                        json.dump(nuclei_http_cve_dict, f, ensure_ascii=False, indent=4)
                    return nuclei_http_cve_dict
                else:
                    return None
        except Exception as e:
            logger.error(f"获取 Nuclei 的 CVE 列表失败: error: {e}")
            return None


def _get_nuclei_cve_dict(client, headers):
    nuclei_contents_url = (
        "https://api.github.com/repos/projectdiscovery/nuclei-templates/contents"
    )
    nuclei_cves_base_url = "https://api.github.com/repos/projectdiscovery/nuclei-templates/contents/http/cves"
    resp = client.get(
        nuclei_cves_base_url,
        headers=headers,
    )
    if resp.status_code != 200:
        logger.error(
            f"获取 Nuclei 的 CVE 列表失败: {resp.text}, status_code: {resp.status_code}"
        )
        return None
    response_data_json = resp.json()

    http_cve_dict = {}
    for item in response_data_json:
        http_cve_year_url = nuclei_contents_url + item["path"]
        http_cve_year_url_response_json = client.get(
            http_cve_year_url,
            headers=headers,
        ).json()
        # logger.info(f"cve_year_url_response_json: {http_cve_year_url_response_json}")
        logger.info(f"http_cve_year_url: {http_cve_year_url}")
        for http_cve_item in http_cve_year_url_response_json:
            http_cve_id = http_cve_item["name"].replace(".yaml", "")
            http_cve_url = f"https://github.com/projectdiscovery/nuclei-templates/tree/main/{http_cve_item['path']}"
            # logger.info(f"http_cve_id: {http_cve_id}, http_cve_url: {http_cve_url}")
            http_cve_dict[http_cve_id] = http_cve_url
    return http_cve_dict


def test_get_nuclei_cve_dict():
    nuclei_cve_dict = get_write_nuclei_http_cve_dict(
        github_token=GITHUB_TOKEN,
        local_path=NUCLEI_HTTP_CVE_DICT_FILEPATH,
        enable_local_cache=True,
    )
    logger.info(f"nuclei_cve_dict: {nuclei_cve_dict}")
