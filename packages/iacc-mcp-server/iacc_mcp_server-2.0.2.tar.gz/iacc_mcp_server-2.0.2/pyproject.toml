[project]
name = "iacc-mcp-server"
version = "2.0.2"
description = "IACC 2.0 智能代理协作控制器 - 基于MCP的4层精简架构"
readme = "README.md"
authors = [
    { name = "IACC Team", email = "iacc@example.com" }
]
requires-python = ">=3.8"
keywords = ["mcp", "ai", "agent", "controller", "architecture", "iacc"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "pathlib2>=2.3.0; python_version<'3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/iacc-team/iacc-mcp-server"
Documentation = "https://github.com/iacc-team/iacc-mcp-server#readme"
Repository = "https://github.com/iacc-team/iacc-mcp-server.git"
Issues = "https://github.com/iacc-team/iacc-mcp-server/issues"

[project.scripts]
iacc-mcp-server = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
include = [
    "/main.py",
    "/README.md",
    "/LICENSE",
    ".cursor/**/*",
]

[tool.hatch.build.targets.wheel]
include = [
    "main.py",
    ".cursor/**/*",
]


# 开发工具配置
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
