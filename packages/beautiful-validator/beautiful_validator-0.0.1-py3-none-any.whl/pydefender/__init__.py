# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
__all__ = [
    # === –û–°–ù–û–í–ù–´–ï –î–ï–ö–û–†–ê–¢–û–†–´ ===
    # –ß–∏—Å–ª–∞
    "number",           # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
    "positive_number",  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    "integer",          # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
    "percentage",       # –ü—Ä–æ—Ü–µ–Ω—Ç—ã (0-100)
    "age",             # –í–æ–∑—Ä–∞—Å—Ç (0-150)
    "score",           # –û—Ü–µ–Ω–∫–∏ (0-10)
    "price",           # –¶–µ–Ω—ã (‚â•0, 2 –∑–Ω–∞–∫–∞)
    
    # –°—Ç—Ä–æ–∫–∏
    "string",           # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
    "#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è PyDefender - Beautiful Smart Input Validation
=================================================

–°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ —É–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è Python!

–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
    import pydefender
    
    @pydefender.number(min_value=0, max_value=100)
    def set_score(score):
        return f"–°—á–µ—Ç: {score}"

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    ‚ú® –ö—Ä–∞—Å–∏–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    üß† –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è  
    üõ†Ô∏è –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    üåç –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
    üîß –õ–µ–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

__version__ = "0.0.1"
__author__ = "PyDefender Team"
__email__ = "team@pydefender.dev"
__license__ = "MIT"
__copyright__ = "Copyright (c) 2024 PyDefender Team"

# === –ò–ú–ü–û–†–¢–´ ===

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from .config import (
    configure, get_config, reset_config,
    get_russian_config, get_english_config, 
    get_developer_config, get_production_config
)

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
from .exceptions import (
    PyDefenderError, ValidationError, NumberValidationError, 
    StringValidationError, EmailValidationError, PhoneValidationError,
    ConversionError, ConfigurationError, SecurityError, RetryLimitError
)

# –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
from .validators.numbers import (
    number, positive_number, integer, percentage, age, score, price,
    NumberValidator, PositiveNumberValidator, IntegerValidator,
    PercentageValidator, AgeValidator, ScoreValidator, PriceValidator
)

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å—Ç—Ä–æ–∫
from .validators.strings import (
    string, text, name, username, comment,
    StringValidator, NameValidator, UsernameValidator, CommentValidator
)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
from .decorators import (
    ValidationDecorator, FormValidator, form_validator,
    ConditionalDecorator, conditional, RetryableDecorator, retryable,
    debug_validator, performance_monitor, silent_validator
)

# –£—Ç–∏–ª–∏—Ç—ã
from .utils import (
    colorize, add_emoji, format_error_message, format_success_message,
    extract_numbers_from_string, extract_first_number, clean_string,
    suggest_similar_strings, Color, EmojiSet
)

# === –û–°–ù–û–í–ù–û–ô API ===

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
__all__ = [
    # === –û–°–ù–û–í–ù–´–ï –î–ï–ö–û–†–ê–¢–û–†–´ ===
    # –ß–∏—Å–ª–∞
    "number",           # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
    "positive_number",  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    "integer",          # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
    "percentage",       # –ü—Ä–æ—Ü–µ–Ω—Ç—ã (0-100)
    "age",             # –í–æ–∑—Ä–∞—Å—Ç (0-150)
    "score",           # –û—Ü–µ–Ω–∫–∏ (0-10)
    "price",           # –¶–µ–Ω—ã (‚â•0, 2 –∑–Ω–∞–∫–∞)
    
    # –°—Ç—Ä–æ–∫–∏
    "string",           # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
    "text",            # –ê–ª–∏–∞—Å –¥–ª—è string
    "name",            # –ò–º–µ–Ω–∞ –ª—é–¥–µ–π
    "username",        # –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    "comment",         # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    
    # === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
    "configure",        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    "get_config",       # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "reset_config",     # –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "setup_for_beginners",     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    "setup_for_professionals", # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏
    "setup_for_production",    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    
    # === –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø ===
    "ValidationError",         # –û—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
    "NumberValidationError",   # –û—à–∏–±–∫–∏ —á–∏—Å–µ–ª
    "StringValidationError",   # –û—à–∏–±–∫–∏ —Å—Ç—Ä–æ–∫
    
    # === –£–¢–ò–õ–ò–¢–´ ===
    "colorize",         # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    "add_emoji",        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
    "extract_numbers_from_string",  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª
    
    # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
    "__version__",      # –í–µ—Ä—Å–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    "__author__",       # –ê–≤—Ç–æ—Ä
    "get_version",      # –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
    "get_info",         # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    "show_help",        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    "demo",            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
]

# === –£–î–û–ë–ù–´–ï –ü–°–ï–í–î–û–ù–ò–ú–´ ===

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
—á–∏—Å–ª–æ = number
—Ü–µ–ª–æ–µ_—á–∏—Å–ª–æ = integer
–ø—Ä–æ—Ü–µ–Ω—Ç = percentage
–≤–æ–∑—Ä–∞—Å—Ç = age
–æ—Ü–µ–Ω–∫–∞ = score
—Ü–µ–Ω–∞ = price
—Å—Ç—Ä–æ–∫–∞ = string
—Ç–µ–∫—Å—Ç = text
–∏–º—è = name

# –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
num = number
int_val = integer
pct = percentage

# === –ü–†–ï–î–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===

def setup_for_beginners():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    - –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
    - –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    - –ü–æ–¥—Å–∫–∞–∑–∫–∏
    """
    configure(
        language="ru",
        style="friendly",
        colors=True,
        emojis=True,
        auto_retry=True,
        max_attempts=3,
        suggest_corrections=True
    )
    print("üéØ PyDefender –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö!")

def setup_for_professionals():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    - –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    - –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    configure(
        language="en", 
        style="professional",
        colors=True,
        emojis=False,
        auto_retry=False,
        suggest_corrections=True,
        log_attempts=True
    )
    print("üíº PyDefender –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤!")

def setup_for_production():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    - –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    - –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    configure(
        colors=False,
        emojis=False,
        auto_retry=False,
        show_progress=False,
        cache_validators=True,
        strict_mode=True
    )
    print("üöÄ PyDefender –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")

# === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_version() -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –≤–µ—Ä—Å–∏–µ–π
    """
    return __version__

def get_info() -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    return {
        "name": "PyDefender",
        "version": __version__,
        "author": __author__,
        "email": __email__,
        "license": __license__,
        "description": "Beautiful Smart Input Validation for Python",
        "features": [
            "üé® –ö—Ä–∞—Å–∏–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã",
            "üß† –£–º–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è", 
            "üõ†Ô∏è –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "üåç –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å",
            "üîß –õ–µ–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
            "‚ö° –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        ],
        "supported_types": [
            "numbers", "strings", "emails", "phones", 
            "dates", "files", "urls", "passwords"
        ]
    }

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    
    help_text = f"""
{colorize('üõ°Ô∏è PyDefender Help', Color.BRIGHT_CYAN, bold=True)}
{'=' * 50}

{colorize('–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:', Color.BRIGHT_YELLOW, bold=True)}

1. –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
   {colorize('@pydefender.number(min_value=0, max_value=100)', Color.GREEN)}
   {colorize('def set_score(score):', Color.GREEN)}
   {colorize('    return f"–°—á–µ—Ç: {score}"', Color.GREEN)}

2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
   {colorize('pydefender.configure(language="ru", colors=True)', Color.GREEN)}

3. –ì–æ—Ç–æ–≤—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã:
   {colorize('@pydefender.age()          # 0-150 –ª–µ—Ç', Color.GREEN)}
   {colorize('@pydefender.percentage()   # 0-100%', Color.GREEN)}
   {colorize('@pydefender.price()        # –¶–µ–Ω—ã ‚â•0', Color.GREEN)}

{colorize('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã:', Color.BRIGHT_YELLOW, bold=True)}

‚Ä¢ {colorize('number', Color.CYAN)}       - –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–µ–ª
‚Ä¢ {colorize('integer', Color.CYAN)}      - –¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞  
‚Ä¢ {colorize('positive_number', Color.CYAN)} - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
‚Ä¢ {colorize('percentage', Color.CYAN)}   - –ü—Ä–æ—Ü–µ–Ω—Ç—ã (0-100)
‚Ä¢ {colorize('age', Color.CYAN)}          - –í–æ–∑—Ä–∞—Å—Ç (0-150)
‚Ä¢ {colorize('score', Color.CYAN)}        - –û—Ü–µ–Ω–∫–∏ (0-10)
‚Ä¢ {colorize('price', Color.CYAN)}        - –¶–µ–Ω—ã (‚â•0, 2 –∑–Ω–∞–∫–∞)

{colorize('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', Color.BRIGHT_YELLOW, bold=True)}

‚Ä¢ {colorize('pydefender.setup_for_beginners()', Color.MAGENTA)}    - –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
‚Ä¢ {colorize('pydefender.setup_for_professionals()', Color.MAGENTA)} - –î–ª—è –ø—Ä–æ—Ñ–∏
‚Ä¢ {colorize('pydefender.setup_for_production()', Color.MAGENTA)}    - –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

{colorize('–ü—Ä–∏–º–µ—Ä—ã:', Color.BRIGHT_YELLOW, bold=True)}

{colorize('# –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è', Color.DIM)}
{colorize('@pydefender.number(min_value=1, max_value=10)', Color.GREEN)}
{colorize('def rate_movie(rating): return f"–†–µ–π—Ç–∏–Ω–≥: {rating}"', Color.GREEN)}

{colorize('# –° –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏', Color.DIM)}
{colorize('@pydefender.number(extract_from_text=True)', Color.GREEN)}
{colorize('def parse_age(text): return f"–í–æ–∑—Ä–∞—Å—Ç: {text}"', Color.GREEN)}

{colorize('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:', Color.BRIGHT_YELLOW, bold=True)}
üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://pydefender.dev/docs
üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ: https://github.com/pydefender/issues
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: team@pydefender.dev
"""
    
    print(help_text)

def demo():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    
    print(colorize("üéÆ PyDefender Interactive Demo", Color.BRIGHT_CYAN, bold=True))
    print("=" * 40)
    print()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–µ–º–æ
    configure(language="ru", colors=True, emojis=True)
    
    @number(min_value=0, max_value=100, extract_from_text=True)
    def demo_validator(value):
        return f"‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç: {value}"
    
    test_inputs = [
        "42",
        "75.5", 
        "–ú–Ω–µ 25 –ª–µ—Ç",
        "abc",
        "150",
        "-10"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —á–∏—Å–µ–ª (0-100) —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞:")
    print()
    
    for test_input in test_inputs:
        print(f"üì• –í–≤–æ–¥: {colorize(repr(test_input), Color.CYAN)}")
        try:
            result = demo_validator(test_input)
            print(f"   {colorize(result, Color.GREEN)}")
        except Exception as e:
            print(f"   {colorize(f'‚ùå {e}', Color.RED)}")
        print()
    
    print("üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏:")
    print("   from pydefender import number")
    print("   @number(min_value=0, max_value=100)")
    print("   def my_function(value): return value")

# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

def _initialize():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        config = get_config()
        config.load_from_env()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        import sys
        if hasattr(sys, 'ps1'):  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            welcome_msg = colorize("üõ°Ô∏è PyDefender loaded!", Color.BRIGHT_GREEN, bold=True)
            tip_msg = colorize("üí° Tip: Run pydefender.show_help() for quick start", Color.CYAN)
            print(f"{welcome_msg} {tip_msg}")
        
    except Exception as e:
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        import warnings
        warnings.warn(f"PyDefender initialization warning: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
_initialize()

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

# –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validate_number = number
validate_integer = integer
validate_percentage = percentage

# –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π marshmallow/WTForms —Å—Ç–∏–ª—è
Number = NumberValidator
Integer = IntegerValidator
Percentage = PercentageValidator

# === –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò ===

class ExperimentalFeatures:
    """–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)"""
    
    @staticmethod
    def batch_validate(validator_func, values_list):
        """
        –ü–∞–∫–µ—Ç–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        
        Args:
            validator_func: –§—É–Ω–∫—Ü–∏—è —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
            values_list: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        results = []
        errors = []
        
        for i, value in enumerate(values_list):
            try:
                result = validator_func(value)
                results.append(result)
            except Exception as e:
                errors.append((i, value, e))
        
        if errors:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ {len(errors)} –∏–∑ {len(values_list)} –∑–Ω–∞—á–µ–Ω–∏–π:")
            for i, value, error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"  [{i}] {value} ‚Üí {error}")
        
        return results
    
    @staticmethod
    def create_custom_validator(validation_func, error_message="–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"):
        """
        –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        
        Args:
            validation_func: –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (value) -> bool
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        def decorator(func):
            def wrapper(*args, **kwargs):
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                if args:
                    value = args[0]
                    if not validation_func(value):
                        raise ValidationError(error_message, original_value=value)
                
                return func(*args, **kwargs)
            return wrapper
        return decorator

# –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç–∫—Å–ø–æ—Ä—Ç
experimental = ExperimentalFeatures()

# === –§–ò–ù–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
_debug_info = {
    "version": __version__,
    "python_version": f"{__import__('sys').version_info.major}.{__import__('sys').version_info.minor}",
    "features_loaded": ["numbers", "config", "decorators", "utils"],
    "ready": True
}

if __name__ == "__main__":
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ
    demo()