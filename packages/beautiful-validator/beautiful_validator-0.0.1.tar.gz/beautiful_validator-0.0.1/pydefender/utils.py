#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PyDefender Utils
================

–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import re
import math
import difflib
from typing import Any, List, Optional, Union, Dict, Tuple
from enum import Enum

class Color(Enum):
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    BRIGHT_BLACK = "\033[90m"
    BRIGHT_RED = "\033[91m"
    BRIGHT_GREEN = "\033[92m"
    BRIGHT_YELLOW = "\033[93m"
    BRIGHT_BLUE = "\033[94m"
    BRIGHT_MAGENTA = "\033[95m"
    BRIGHT_CYAN = "\033[96m"
    BRIGHT_WHITE = "\033[97m"
    
    # –§–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"

class EmojiSet:
    """–ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    
    # –°—Ç–∞—Ç—É—Å—ã
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    WARNING = "‚ö†Ô∏è"
    INFO = "‚ÑπÔ∏è"
    QUESTION = "‚ùì"
    
    # –î–µ–π—Å—Ç–≤–∏—è
    SEARCH = "üîç"
    EDIT = "‚úèÔ∏è"
    DELETE = "üóëÔ∏è"
    SAVE = "üíæ"
    COPY = "üìã"
    
    # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    NUMBER = "üî¢"
    TEXT = "üìù"
    EMAIL = "üìß"
    PHONE = "üì±"
    DATE = "üìÖ"
    FILE = "üìÅ"
    
    # –ü—Ä–æ—Ü–µ—Å—Å—ã
    LOADING = "‚è≥"
    THINKING = "ü§î"
    ROCKET = "üöÄ"
    MAGIC = "‚ú®"
    SHIELD = "üõ°Ô∏è"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    SECURITY = "üîí"
    PERFORMANCE = "‚ö°"
    BUG = "üêõ"
    FEATURE = "üéØ"

def colorize(text: str, color: Union[Color, str], bold: bool = False) -> str:
    """
    –†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è
        color: –¶–≤–µ—Ç (Color enum –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
        bold: –°–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º
        
    Returns:
        –†–∞—Å–∫—Ä–∞—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    from .config import get_config
    
    config = get_config()
    if not config.show_colors:
        return text
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Color
    if isinstance(color, str):
        color_map = {
            'red': Color.RED,
            'green': Color.GREEN,
            'yellow': Color.YELLOW,
            'blue': Color.BLUE,
            'magenta': Color.MAGENTA,
            'cyan': Color.CYAN,
            'white': Color.WHITE,
            'bright_red': Color.BRIGHT_RED,
            'bright_green': Color.BRIGHT_GREEN,
            'bright_yellow': Color.BRIGHT_YELLOW,
            'bright_blue': Color.BRIGHT_BLUE,
        }
        color = color_map.get(color.lower(), Color.WHITE)
    
    # –°–æ–±–∏—Ä–∞–µ–º ANSI –∫–æ–¥
    ansi_code = color.value
    if bold:
        ansi_code += Color.BOLD.value
    
    return f"{ansi_code}{text}{Color.RESET.value}"

def add_emoji(text: str, emoji: str) -> str:
    """
    –î–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        
    Returns:
        –¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
    """
    from .config import get_config
    
    config = get_config()
    if not config.show_emojis:
        return text
    
    return f"{emoji} {text}"

def format_error_message(error) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error: –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
        
    Returns:
        –ö—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    from .exceptions import ValidationError
    
    lines = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
    error_text = colorize(error.message, Color.BRIGHT_RED, bold=True)
    lines.append(add_emoji(error_text, EmojiSet.ERROR))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ValidationError
    if isinstance(error, ValidationError):
        if error.original_value is not None:
            value_text = colorize(f"–ü–æ–ª—É—á–µ–Ω–æ: {repr(error.original_value)}", Color.DIM)
            lines.append(f"  {value_text}")
        
        if error.expected_type:
            expected_text = colorize(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {error.expected_type}", Color.CYAN)
            lines.append(f"  {expected_text}")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if error.suggestions:
            suggestions_header = colorize("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", Color.BRIGHT_YELLOW, bold=True)
            lines.append(f"\n{add_emoji(suggestions_header, EmojiSet.INFO)}")
            
            for suggestion in error.suggestions:
                suggestion_text = colorize(f"‚Ä¢ {suggestion}", Color.YELLOW)
                lines.append(f"  {suggestion_text}")
    
    return "\n".join(lines)

def format_success_message(message: str, value: Any = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        value: –ó–Ω–∞—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ö—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    success_text = colorize(message, Color.BRIGHT_GREEN, bold=True)
    result = add_emoji(success_text, EmojiSet.SUCCESS)
    
    if value is not None:
        value_text = colorize(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {repr(value)}", Color.GREEN)
        result += f"\n  {value_text}"
    
    return result

def extract_numbers_from_string(text: str) -> List[Union[int, float]]:
    """
    –ò–∑–≤–ª–µ—á—å –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (–≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ)
    pattern = r'-?\d+(?:\.\d+)?'
    matches = re.findall(pattern, str(text))
    
    numbers = []
    for match in matches:
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ int, –ø–æ—Ç–æ–º –∫–∞–∫ float
            if '.' in match:
                numbers.append(float(match))
            else:
                numbers.append(int(match))
        except ValueError:
            continue
    
    return numbers

def extract_first_number(text: str) -> Optional[Union[int, float]]:
    """
    –ò–∑–≤–ª–µ—á—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        
    Returns:
        –ü–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ None
    """
    numbers = extract_numbers_from_string(text)
    return numbers[0] if numbers else None

def clean_string(text: str, 
                 strip_spaces: bool = True,
                 remove_extra_spaces: bool = True,
                 normalize_case: bool = False) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        strip_spaces: –£–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã —Å –∫—Ä–∞–µ–≤
        remove_extra_spaces: –£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏
        normalize_case: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not isinstance(text, str):
        text = str(text)
    
    if strip_spaces:
        text = text.strip()
    
    if remove_extra_spaces:
        text = re.sub(r'\s+', ' ', text)
    
    if normalize_case:
        text = text.lower()
    
    return text

def capitalize_words(text: str, smart: bool = True) -> str:
    """
    –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        smart: –£–º–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (—É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–≥–∏)
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
    """
    if not text:
        return text
    
    if not smart:
        return text.title()
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–≥–æ–≤ –∏ —Å–æ—é–∑–æ–≤ (–Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏)
    small_words = {
        '–∏', '–∏–ª–∏', '–Ω–æ', '–∞', '–¥–∞', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞',
        '–æ—Ç', '–¥–æ', '–¥–ª—è', '–Ω–∞', '–≤', '—Å', '–∏–∑', '–ø–æ', '–∑–∞', '–ø–æ–¥',
        '–Ω–∞–¥', '–ø—Ä–∏', '–±–µ–∑', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', '–≤–æ–∑–ª–µ', '–æ–∫–æ–ª–æ'
    }
    
    words = text.split()
    result = []
    
    for i, word in enumerate(words):
        word_lower = word.lower()
        if i == 0 or word_lower not in small_words:
            result.append(word.capitalize())
        else:
            result.append(word_lower)
    
    return ' '.join(result)

def suggest_similar_strings(target: str, 
                          candidates: List[str], 
                          max_suggestions: int = 3,
                          min_similarity: float = 0.6) -> List[str]:
    """
    –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        target: –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        candidates: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        max_suggestions: –ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        min_similarity: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å (0-1)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å—Ç—Ä–æ–∫
    """
    if not target or not candidates:
        return []
    
    target_lower = target.lower()
    scored_candidates = []
    
    for candidate in candidates:
        candidate_lower = candidate.lower()
        similarity = difflib.SequenceMatcher(None, target_lower, candidate_lower).ratio()
        
        if similarity >= min_similarity:
            scored_candidates.append((candidate, similarity))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
    scored_candidates.sort(key=lambda x: x[1], reverse=True)
    
    return [candidate for candidate, _ in scored_candidates[:max_suggestions]]

def suggest_email_domains(email_part: str) -> List[str]:
    """
    –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è email
    
    Args:
        email_part: –ß–∞—Å—Ç—å email (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π)
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤
    """
    popular_domains = [
        'gmail.com', 'mail.ru', 'yandex.ru', 'outlook.com', 'yahoo.com',
        'hotmail.com', 'icloud.com', 'rambler.ru', 'list.ru', 'bk.ru'
    ]
    
    if '@' in email_part:
        user_part, domain_part = email_part.rsplit('@', 1)
        suggestions = suggest_similar_strings(domain_part, popular_domains, max_suggestions=3)
        return [f"{user_part}@{domain}" for domain in suggestions]
    
    return [f"{email_part}@{domain}" for domain in popular_domains[:3]]

def format_phone_number(phone: str, format_type: str = "international") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    Args:
        phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
        format_type: –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ("international", "national", "compact")
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    
    if not digits:
        return phone
    
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    if digits.startswith('7') and len(digits) == 11:
        if format_type == "international":
            return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
        elif format_type == "national":
            return f"8 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
        else:  # compact
            return f"+7{digits[1:]}"
    
    elif digits.startswith('8') and len(digits) == 11:
        if format_type == "international":
            return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
        elif format_type == "national":
            return f"8 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
        else:  # compact
            return f"+7{digits[1:]}"
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return phone

def mask_sensitive_data(text: str, mask_char: str = "*", 
                       visible_start: int = 2, visible_end: int = 2) -> str:
    """
    –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        mask_char: –°–∏–º–≤–æ–ª –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        visible_start: –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        visible_end: –°–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ
        
    Returns:
        –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if len(text) <= visible_start + visible_end:
        return mask_char * len(text)
    
    start = text[:visible_start]
    end = text[-visible_end:] if visible_end > 0 else ""
    middle_length = len(text) - visible_start - visible_end
    middle = mask_char * middle_length
    
    return start + middle + end

def progress_bar(current: int, total: int, width: int = 50, 
                 show_percent: bool = True, show_numbers: bool = True) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    
    Args:
        current: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        width: –®–∏—Ä–∏–Ω–∞ –±–∞—Ä–∞
        show_percent: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        show_numbers: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∏—Å–ª–∞
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    if total <= 0:
        return "Invalid progress values"
    
    percent = min(100, max(0, (current / total) * 100))
    filled_width = int((current / total) * width)
    
    bar = "‚ñà" * filled_width + "‚ñë" * (width - filled_width)
    
    result_parts = [bar]
    
    if show_percent:
        result_parts.append(f" {percent:.1f}%")
    
    if show_numbers:
        result_parts.append(f" ({current}/{total})")
    
    return "".join(result_parts)

def truncate_text(text: str, max_length: int, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    if max_length <= len(suffix):
        return suffix[:max_length]
    
    return text[:max_length - len(suffix)] + suffix

def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    
    return f"{s} {size_names[i]}"

def parse_boolean(value: Any) -> bool:
    """
    –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        
    Returns:
        –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if isinstance(value, bool):
        return value
    
    if isinstance(value, (int, float)):
        return value != 0
    
    if isinstance(value, str):
        value_lower = value.lower().strip()
        true_values = {'true', '1', 'yes', 'on', '–¥–∞', '–∏—Å—Ç–∏–Ω–∞', '–≤–∫–ª—é—á–µ–Ω–æ'}
        false_values = {'false', '0', 'no', 'off', '–Ω–µ—Ç', '–ª–æ–∂—å', '–≤—ã–∫–ª—é—á–µ–Ω–æ'}
        
        if value_lower in true_values:
            return True
        elif value_lower in false_values:
            return False
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ True
    return bool(value)

def smart_round(value: float, precision: int = 2) -> Union[int, float]:
    """
    –£–º–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏)
    
    Args:
        value: –ß–∏—Å–ª–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        precision: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        
    Returns:
        –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    rounded = round(value, precision)
    if rounded == int(rounded):
        return int(rounded)
    return rounded

# === –í–ê–õ–ò–î–ê–¶–ò–û–ù–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===

def is_valid_email_format(email: str) -> bool:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

def is_valid_phone_format(phone: str) -> bool:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø–ª—é—Å–∞
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    patterns = [
        r'^\+7\d{10}$',      # +7XXXXXXXXXX
        r'^8\d{10}$',        # 8XXXXXXXXXX
        r'^\+\d{10,15}$',    # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    
    return any(re.match(pattern, clean_phone) for pattern in patterns)

def is_numeric_string(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞"""
    try:
        float(text)
        return True
    except ValueError:
        return False

# === –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def demo_utils():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç"""
    
    print(colorize("üõ°Ô∏è PyDefender Utils Demo", Color.BRIGHT_CYAN, bold=True))
    print()
    
    # –¶–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
    print(add_emoji("–£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è", EmojiSet.SUCCESS))
    print(add_emoji(colorize("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", Color.RED), EmojiSet.ERROR))
    print()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª
    text = "–ú–Ω–µ 25 –ª–µ—Ç, —Ä–æ—Å—Ç 180.5 —Å–º"
    numbers = extract_numbers_from_string(text)
    print(f"–¢–µ–∫—Å—Ç: {text}")
    print(f"–ß–∏—Å–ª–∞: {numbers}")
    print()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions = suggest_similar_strings("gmai.com", ["gmail.com", "mail.ru", "yahoo.com"])
    print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è 'gmai.com': {suggestions}")
    print()
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    print("–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    for i in range(0, 101, 20):
        print(f"  {progress_bar(i, 100)}")

if __name__ == "__main__":
    demo_utils()