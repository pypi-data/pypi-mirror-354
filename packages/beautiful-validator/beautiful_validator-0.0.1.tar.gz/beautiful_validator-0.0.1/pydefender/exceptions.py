#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PyDefender Exceptions System
============================

–ö—Ä–∞—Å–∏–≤—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

from typing import Any, List, Optional, Dict, Union
from enum import Enum

class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    INFO = "info"           # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    WARNING = "warning"     # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ERROR = "error"         # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    CRITICAL = "critical"   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
    FORMAT = "format"               # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    RANGE = "range"                 # –í—ã—Ö–æ–¥ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
    TYPE = "type"                   # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    LENGTH = "length"               # –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞
    CONTENT = "content"             # –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    SECURITY = "security"           # –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    CONVERSION = "conversion"       # –û—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    CONFIGURATION = "configuration" # –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

class PyDefenderError(Exception):
    """
    –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ PyDefender
    
    –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    """
    
    def __init__(self, 
                 message: str,
                 severity: ErrorSeverity = ErrorSeverity.ERROR,
                 category: ErrorCategory = ErrorCategory.FORMAT,
                 code: Optional[str] = None):
        """
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—à–∏–±–∫–∏
            code: –ö–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        super().__init__(message)
        self.message = message
        self.severity = severity
        self.category = category
        self.code = code or f"{category.value}_error"
        self.timestamp = self._get_timestamp()
    
    def _get_timestamp(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def get_error_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ"""
        return {
            'message': self.message,
            'severity': self.severity.value,
            'category': self.category.value,
            'code': self.code,
            'timestamp': self.timestamp,
            'type': self.__class__.__name__
        }
    
    def __str__(self) -> str:
        return self.message

class ValidationError(PyDefenderError):
    """
    –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 message: str,
                 suggestions: Optional[List[str]] = None,
                 original_value: Any = None,
                 expected_type: Optional[str] = None,
                 severity: ErrorSeverity = ErrorSeverity.ERROR,
                 category: ErrorCategory = ErrorCategory.FORMAT,
                 field_name: Optional[str] = None):
        """
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            suggestions: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            original_value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
            expected_type: –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—à–∏–±–∫–∏
            field_name: –ò–º—è –ø–æ–ª—è (–¥–ª—è —Ñ–æ—Ä–º)
        """
        super().__init__(message, severity, category)
        self.suggestions = suggestions or []
        self.original_value = original_value
        self.expected_type = expected_type
        self.field_name = field_name
    
    def add_suggestion(self, suggestion: str) -> 'ValidationError':
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        
        Args:
            suggestion: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            
        Returns:
            self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        """
        self.suggestions.append(suggestion)
        return self
    
    def with_field(self, field_name: str) -> 'ValidationError':
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—è
        
        Args:
            field_name: –ò–º—è –ø–æ–ª—è
            
        Returns:
            self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        """
        self.field_name = field_name
        return self
    
    def get_detailed_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        lines = [self.message]
        
        if self.field_name:
            lines[0] = f"–ü–æ–ª–µ '{self.field_name}': {self.message}"
        
        if self.original_value is not None:
            lines.append(f"–ü–æ–ª—É—á–µ–Ω–æ: {repr(self.original_value)}")
        
        if self.expected_type:
            lines.append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: {self.expected_type}")
        
        if self.suggestions:
            lines.append("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in self.suggestions:
                lines.append(f"  ‚Ä¢ {suggestion}")
        
        return "\n".join(lines)

class NumberValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–µ–ª"""
    
    def __init__(self, 
                 message: str,
                 min_value: Optional[Union[int, float]] = None,
                 max_value: Optional[Union[int, float]] = None,
                 **kwargs):
        super().__init__(message, category=ErrorCategory.RANGE, **kwargs)
        self.min_value = min_value
        self.max_value = max_value
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —á–∏—Å–µ–ª
        if min_value is not None and max_value is not None:
            self.add_suggestion(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_value} –¥–æ {max_value}")
        elif min_value is not None:
            self.add_suggestion(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ {min_value}")
        elif max_value is not None:
            self.add_suggestion(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ {max_value}")

class StringValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫"""
    
    def __init__(self, 
                 message: str,
                 min_length: Optional[int] = None,
                 max_length: Optional[int] = None,
                 **kwargs):
        super().__init__(message, category=ErrorCategory.LENGTH, **kwargs)
        self.min_length = min_length
        self.max_length = max_length
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫
        if min_length is not None and max_length is not None:
            self.add_suggestion(f"–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_length} –¥–æ {max_length} —Å–∏–º–≤–æ–ª–æ–≤")
        elif min_length is not None:
            self.add_suggestion(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {min_length} —Å–∏–º–≤–æ–ª–æ–≤")
        elif max_length is not None:
            self.add_suggestion(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤")

class EmailValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email"""
    
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.FORMAT, **kwargs)
        self.add_suggestion("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: name@example.com")

class PhoneValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.FORMAT, **kwargs)
        self.add_suggestion("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7-XXX-XXX-XX-XX")

class ConversionError(PyDefenderError):
    """
    –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, 
                 message: str,
                 from_type: Optional[str] = None,
                 to_type: Optional[str] = None,
                 original_value: Any = None):
        super().__init__(message, ErrorSeverity.ERROR, ErrorCategory.CONVERSION)
        self.from_type = from_type
        self.to_type = to_type
        self.original_value = original_value

class ConfigurationError(PyDefenderError):
    """
    –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    """
    
    def __init__(self, message: str, parameter: Optional[str] = None):
        super().__init__(message, ErrorSeverity.CRITICAL, ErrorCategory.CONFIGURATION)
        self.parameter = parameter

class SecurityError(PyDefenderError):
    """
    –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    """
    
    def __init__(self, message: str, threat_type: Optional[str] = None):
        super().__init__(message, ErrorSeverity.CRITICAL, ErrorCategory.SECURITY)
        self.threat_type = threat_type

class RetryLimitError(PyDefenderError):
    """
    –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞
    """
    
    def __init__(self, message: str, attempts: int, max_attempts: int):
        super().__init__(message, ErrorSeverity.WARNING, ErrorCategory.FORMAT)
        self.attempts = attempts
        self.max_attempts = max_attempts

# === –§–ê–ë–†–ò–ö–ò –û–®–ò–ë–û–ö ===

def create_number_error(message: str, 
                       value: Any = None,
                       min_val: Optional[Union[int, float]] = None,
                       max_val: Optional[Union[int, float]] = None) -> NumberValidationError:
    """
    –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–ª–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        min_val: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        max_val: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        NumberValidationError
    """
    return NumberValidationError(
        message=message,
        original_value=value,
        min_value=min_val,
        max_value=max_val,
        expected_type="—á–∏—Å–ª–æ"
    )

def create_string_error(message: str,
                       value: Any = None,
                       min_len: Optional[int] = None,
                       max_len: Optional[int] = None) -> StringValidationError:
    """
    –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        min_len: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        max_len: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        StringValidationError
    """
    return StringValidationError(
        message=message,
        original_value=value,
        min_length=min_len,
        max_length=max_len,
        expected_type="—Å—Ç—Ä–æ–∫–∞"
    )

def create_format_error(message: str, 
                       value: Any = None,
                       expected_format: Optional[str] = None) -> ValidationError:
    """
    –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        expected_format: –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        
    Returns:
        ValidationError
    """
    error = ValidationError(
        message=message,
        original_value=value,
        category=ErrorCategory.FORMAT
    )
    
    if expected_format:
        error.add_suggestion(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {expected_format}")
    
    return error

# === –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===

def handle_validation_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    from functools import wraps
    
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValidationError as e:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            from .utils import format_error_message
            formatted_message = format_error_message(e)
            print(formatted_message)
            raise
        except Exception as e:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            wrapped_error = PyDefenderError(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                severity=ErrorSeverity.CRITICAL
            )
            raise wrapped_error from e
    
    return wrapper

# === –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò ===

def collect_errors(*errors: PyDefenderError) -> List[PyDefenderError]:
    """
    –°–æ–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –≤ —Å–ø–∏—Å–æ–∫
    
    Args:
        *errors: –û—à–∏–±–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    """
    return list(errors)

def format_error_summary(errors: List[PyDefenderError]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫
    
    Args:
        errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not errors:
        return "‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    lines = [f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}", ""]
    
    for i, error in enumerate(errors, 1):
        lines.append(f"{i}. {error.message}")
        if isinstance(error, ValidationError) and error.suggestions:
            for suggestion in error.suggestions[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                lines.append(f"   üí° {suggestion}")
        lines.append("")
    
    return "\n".join(lines)

def get_error_by_code(errors: List[PyDefenderError], code: str) -> Optional[PyDefenderError]:
    """
    –ù–∞–π—Ç–∏ –æ—à–∏–±–∫—É –ø–æ –∫–æ–¥—É
    
    Args:
        errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        code: –ö–æ–¥ –æ—à–∏–±–∫–∏
        
    Returns:
        –û—à–∏–±–∫–∞ –∏–ª–∏ None
    """
    for error in errors:
        if error.code == code:
            return error
    return None

def filter_errors_by_severity(errors: List[PyDefenderError], 
                             severity: ErrorSeverity) -> List[PyDefenderError]:
    """
    –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    
    Args:
        errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        severity: –£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        
    Returns:
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    return [error for error in errors if error.severity == severity]

def has_critical_errors(errors: List[PyDefenderError]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    
    Args:
        errors: –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        
    Returns:
        True –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    """
    return any(error.severity == ErrorSeverity.CRITICAL for error in errors)

# === –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´ ===

class ValidationContext:
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –≤–º–µ—Å—Ç–µ
    """
    
    def __init__(self, continue_on_error: bool = True):
        """
        Args:
            continue_on_error: –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        """
        self.continue_on_error = continue_on_error
        self.errors: List[PyDefenderError] = []
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is None and self.errors:
            # –ï—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            if has_critical_errors(self.errors):
                # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                critical_errors = filter_errors_by_severity(self.errors, ErrorSeverity.CRITICAL)
                raise critical_errors[0]
            elif not self.continue_on_error:
                # –ü–æ–¥–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
                raise self.errors[0]
        
        # –ü–æ–¥–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        return self.continue_on_error and exc_type is not None
    
    def add_error(self, error: PyDefenderError):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.errors.append(error)
    
    def has_errors(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
        return len(self.errors) > 0
    
    def get_error_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫"""
        return format_error_summary(self.errors)

# === –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def example_usage():
    """–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    try:
        raise ValidationError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    except ValidationError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    # –û—à–∏–±–∫–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    try:
        error = NumberValidationError(
            "–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ",
            max_value=100,
            original_value=150
        )
        error.add_suggestion("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 100")
        raise error
    except NumberValidationError as e:
        print(e.get_detailed_message())
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    with ValidationContext() as ctx:
        try:
            # –ö–∞–∫–∞—è-—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            raise ValidationError("–ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞")
        except ValidationError as e:
            ctx.add_error(e)
        
        try:
            # –ï—â–µ –æ–¥–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            raise StringValidationError("–í—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞")
        except StringValidationError as e:
            ctx.add_error(e)
        
        if ctx.has_errors():
            print(ctx.get_error_summary())

if __name__ == "__main__":
    example_usage()