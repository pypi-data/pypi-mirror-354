from typing import Any, Callable


def check_value(
    *args: Any,
    value: str,
    list_values: list[str],
    list_objects: list[dict[str, Any]],
    observable_generating_f: Callable[..., dict[str, Any]]
) -> dict[str, Any]:
    """It checks if a specific value has been already generated related to an ObservableObject relying on
    the list of its values. This is meant to avoid duplication in the JSON/CASE file generated by the
    parsers (UFED, AXIOM etc.).
    If the value is not in the list_values, a new ObservableObject is generated by using the function
    observable_generating_f that returns, as a result, the new ObservableObject (e.g. uco-observable:ApplicationFacet,
    uco-observable:AccountFacet, uco-location:LatLongCoordinatesFacet: drafting:SearchedItemFacet, "uco-observable:URLFacet,
    uco-observable:ApplicationAccountFacet, uco-observable:DigitalAccountFacet, uco-observable:PhoneAccountFacet).

    Finally the new ObservableObject is added to the list_objects (any kind of ObservableObject maintains a different list).
    If the value is already in the list_values, the ObservableObject list_objects[index] is returned.

    :param value: the value to be checked within the list_values
    :param list_values: the current list of values
    :param list_objects: the current list of a specific kind of ObservableObject
    :param observable_generating_f: the function that will generate the corresponding kind of ObservableObject
    :param *args: the actual parameter of the observable_generating_f function
    :return: an Observableobject of a specific kind depending by the actual parameters
    """
    if value in list_values:
        idx = list_values.index(value)
        observable_app = list_objects[idx]
    else:
        observable_app = observable_generating_f(*args)
        list_values.append(value)
        list_objects.append(observable_app)

    return observable_app
