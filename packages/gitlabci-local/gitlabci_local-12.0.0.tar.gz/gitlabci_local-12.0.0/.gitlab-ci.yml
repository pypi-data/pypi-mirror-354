include:
  - component: gitlab.com/RadianDevCore/tools/pre-commit-crocodile/commits@5.0.0
    inputs:
      stage: prepare

stages:
  - development
  - registry
  - prepare
  - build
  - test
  - quality
  - deploy

variables:
  CI_LOCAL_ENGINE: 'docker,auto'
  CI_LOCAL_REAL_PATHS: 'true'
  CI_LOCAL_SOCKETS: 'true'
  EXECUTOR_HOST: preview
  EXECUTOR_TOOL: gcil
  REGISTRY_HOST: registry.gitlab.com
  REGISTRY_NAMESPACE: radiandevcore/tools
  REGISTRY_PROJECT: gcil

.local:
  no_regex: true
  variables:
    DOCKER_CERT_PATH: ''
    DOCKER_HOST: ''
    DOCKER_TLS_CERTDIR: ''
    DOCKER_TLS_VERIFY: ''
  version: 11.0
  volumes:
    - ${HOME}/.docker/config.json:/root/.docker/config.json:ro

# =============================================================================
# Stage: development

clean:
  stage: development
  image: local
  script:
    - sudo rm -rf ./build ./dist ./*.egg-info ./.eggs
  rules:
    - if: $CI_LOCAL

changelog:
  stage: development
  image: local:silent
  script:
    # Prepare git-cliff binaries
    - |
      mkdir -p ./.tmp/
      if ! ls ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz >/dev/null 2>&1; then
        wget -O ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz -q https://github.com/orhun/git-cliff/releases/download/v2.4.0/git-cliff-2.4.0-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz -C ./.tmp/ --strip-components 1
        rm -f ./.tmp/git-cliff-x86_64-unknown-linux-gnu.tar.gz
      fi
    # Request release tag
    - |
      echo -n " > Current commit : "
      git describe --always
      echo ' '
      if [ ! -z "${RELEASE_TAG:-}" ]; then
        tag="${RELEASE_TAG}"
      else
        read -p " > Release tag : " -r tag
      fi
      echo ' '
    # Generate changelog
    - |
      git tag -f -m "${tag}" "${tag}"
      ./.tmp/git-cliff --no-exec --config ./config/cliff.toml --output ./CHANGELOG.md
      sed -i "s#raw/[^/]*/docs#raw/${tag}/docs#g" ./README.md
      git add -v ./CHANGELOG.md ./README.md
      echo ' '
      git commit -m "docs(changelog): release version ${tag} and refresh changes history" -s
      echo ' '
    # Create release tag
    - git tag -f -m "${tag}" "${tag}"
  rules:
    - if: $CI_LOCAL

hooks:
  stage: development
  image: local:silent
  script:
    # Refresh configurations
    - pre-commit-crocodile --configure
    # Stash local changes
    - echo ' '
    - echo ' [INFO] Use "s" to split hunks and "y" to remove changes you do not want, "n" otherwise'
    - echo ' '
    - sleep 2
    - git stash -p
    # Stage changes
    - git add -v ./.cz.yaml ./.pre-commit-config.yaml
    # Enable hooks
    - pre-commit-crocodile --enable
    # Run hooks
    - pre-commit-crocodile --run
    # Reset changes
    - git reset HEAD ./.cz.yaml ./.pre-commit-config.yaml
  rules:
    - if: $CI_LOCAL

preview:
  stage: development
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:preview
  variables:
    FORCE_COLOR: 1
    PYTHONUNBUFFERED: 1
    USER: ${USER}
  before_script:
    - pip3 install -q ./dist/*.whl 2>/dev/null
  script:
    - pexpect-executor -- termtosvg ./docs/preview.svg -c 'python3 ./docs/preview.py' -g 80x24 -t ./docs/template.svg
  rules:
    - if: $CI_LOCAL

# =============================================================================
# Stage: registry

.registry:
  image: docker:27-cli
  services:
    - docker:dind
  before_script:
    # Configure registry
    - |
      if [ ! -z "${CI_REGISTRY}" ]; then
        docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
      fi
  script:
    # Prepare container image
    - export base="${REGISTRY_HOST:?}/${REGISTRY_NAMESPACE:?}/${REGISTRY_PROJECT:?}/${BASEIMAGE_NAME}"
    - export image="${REGISTRY_HOST:?}/${REGISTRY_NAMESPACE:?}/${REGISTRY_PROJECT:?}/${REGISTRY_PROJECT:?}:${CONTAINER_IMAGE_TAG:?}"
    # Detect local image
    - |
      base_local='false'
      image_local='false'
      if docker images -q "${base}" 2>/dev/null | grep -q '.'; then
        base_local='true'
      fi
      if docker images -q "${image}" 2>/dev/null | grep -q '.'; then
        image_local='true'
      fi
    # Pull images
    - |
      echo ' '
      echo " [INFO] Pull: ${image}"
      echo ' '
      docker pull "${base}" || true
      docker pull "${image}" || true
    # Build image
    - |
      docker buildx build \
          --build-arg "IMAGE_BASE=${base}" \
          --build-context 'requirements=./requirements' \
          --cache-from "${image}" \
          --pull \
          --tag "${image}" \
          "./containers/${CONTAINER_FOLDER}/"
    # Cleanup intermediates
    - docker system prune --force
    # Show images
    - docker images
    # Push image
    - |
      if [ ! -z "${CI_COMMIT_TAG}" ] || [ "${CI_COMMIT_REF_NAME}" = "${CI_DEFAULT_BRANCH:-undefined}" ] || [ "${PUSH_IMAGES:-false}" = 'true' ]; then
        echo ' '
        echo " [INFO] Push: ${image}"
        echo ' '
        docker push "${image}"
      fi
    # Cleanup images
    - |
      if [ ! -z "${CI_LOCAL:-}" ] && [ "${base_local}" = 'false' ]; then
        docker rmi "${base}" >/dev/null || true
      fi
      if [ ! -z "${CI_LOCAL:-}" ] && [ "${image_local}" = 'false' ]; then
        docker rmi "${image}" >/dev/null || true
      fi
  after_script:
    # Cleanup intermediates
    - docker system prune --force
  variables:
    DOCKER_DRIVER: overlay2

registry:rehost:
  stage: registry
  extends:
    - .registry
  needs: []
  script:
    # Rehost standard images
    - |
      set +x
      for base_rename in $(cat ./containers/rehost/images.txt); do
        base=$(echo "${base_rename}" | cut -d'|' -f1)
        rename=$(echo "${base_rename}" | cut -d'|' -f2)
        image="${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/${REGISTRY_PROJECT}/${rename:-${base}}"
        if [ -z "${IMAGE}" ] || echo "${image}" | grep -q "${IMAGE}"; then
          base_local='false'
          image_local='false'
          if docker images -q "${base}" 2>/dev/null | grep -q '.'; then
            base_local='true'
          fi
          if docker images -q "${image}" 2>/dev/null | grep -q '.'; then
            image_local='true'
          fi
          echo ' '
          echo " [INFO] Pull: ${base}"
          echo ' '
          docker pull "${base}" || true
          docker tag "${base}" "${image}"
          echo ' '
          echo " [INFO] Push: ${image}"
          echo ' '
          docker push "${image}" || true
          if [ ! -z "${CI_LOCAL:-}" ] && [ "${base_local}" = 'false' ]; then
            docker rmi "${base}" >/dev/null || true
          fi
          if [ ! -z "${CI_LOCAL:-}" ] && [ "${image_local}" = 'false' ]; then
            docker rmi "${image}" >/dev/null || true
          fi
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt

registry:build:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12-alpine'
    CONTAINER_FOLDER: build
    CONTAINER_IMAGE_TAG: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/build/Dockerfile
        - containers/rehost/images.txt
        - requirements/build.txt
        - requirements/runtime.txt

registry:codestyle:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12-alpine'
    CONTAINER_FOLDER: codestyle
    CONTAINER_IMAGE_TAG: codestyle
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/codestyle/Dockerfile
        - containers/rehost/images.txt
        - requirements/quality.txt
        - requirements/runtime.txt
        - requirements/tests.txt

registry:deploy:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12-alpine'
    CONTAINER_FOLDER: deploy
    CONTAINER_IMAGE_TAG: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/deploy/Dockerfile
        - containers/rehost/images.txt
        - requirements/deploy.txt

registry:pages:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12-slim'
    CONTAINER_FOLDER: pages
    CONTAINER_IMAGE_TAG: pages
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/pages/Dockerfile
        - containers/rehost/images.txt
        - requirements/pages.txt

registry:preview:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12-alpine'
    CONTAINER_FOLDER: preview
    CONTAINER_IMAGE_TAG: preview
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/preview/Dockerfile
        - containers/rehost/images.txt
        - requirements/docs.txt
        - requirements/tests.txt

registry:test-coverage-docker:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12'
    CONTAINER_FOLDER: test-coverage-docker
    CONTAINER_IMAGE_TAG: test-coverage-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-coverage-docker/Dockerfile
        - requirements/coverage.txt
        - requirements/runtime.txt
        - requirements/tests.txt

registry:test-coverage-podman:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12'
    CONTAINER_FOLDER: test-coverage-podman
    CONTAINER_IMAGE_TAG: test-coverage-podman
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-coverage-podman/Dockerfile
        - requirements/coverage.txt
        - requirements/runtime.txt
        - requirements/tests.txt

registry:test-coverage-windows:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'tobix/pywine:3.10'
    CONTAINER_FOLDER: test-coverage-windows
    CONTAINER_IMAGE_TAG: test-coverage-windows
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-coverage-windows/Dockerfile
        - requirements/coverage.txt
        - requirements/runtime.txt
        - requirements/tests.txt

registry:test-oldest-docker:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.8'
    CONTAINER_FOLDER: test-docker
    CONTAINER_IMAGE_TAG: test-oldest-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-docker/Dockerfile
        - requirements/tests.txt

registry:test-latest-docker:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12'
    CONTAINER_FOLDER: test-docker
    CONTAINER_IMAGE_TAG: test-latest-docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-docker/Dockerfile
        - requirements/tests.txt

registry:test-oldest-podman:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.8'
    CONTAINER_FOLDER: test-podman
    CONTAINER_IMAGE_TAG: test-oldest-podman
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-podman/Dockerfile
        - requirements/tests.txt

registry:test-latest-podman:
  stage: registry
  extends:
    - .registry
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
  variables:
    BASEIMAGE_NAME: 'python:3.12'
    CONTAINER_FOLDER: test-podman
    CONTAINER_IMAGE_TAG: test-latest-podman
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - containers/rehost/images.txt
        - containers/test-podman/Dockerfile
        - requirements/tests.txt

# =============================================================================
# Stage: prepare

codestyle:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:codestyle
  needs:
    - job: registry:codestyle
      artifacts: false
      optional: true
  script:
    - yapf -i ./docs/*.py ./src/*.py ./src/*/*.py ./setup.py
    - echo ' ' && git diff --name-status
    - |
      if [ -z "${CI_LOCAL:-}" ] || [ ! -z "${PRE_COMMIT}" ]; then
        git diff --quiet
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

lint:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:codestyle
  needs:
    - job: registry:codestyle
      artifacts: false
      optional: true
  script:
    - pylint --errors-only ./docs/ ./src/ ./setup.py
    - pylint --disable=missing-docstring --load-plugins=pylint.extensions.no_self_use ./docs/ ./src/ ./setup.py
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

typings:
  stage: prepare
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:codestyle
  needs:
    - job: registry:codestyle
      artifacts: false
      optional: true
  variables:
    MYPY_CACHE_DIR: /dev/null
    MYPY_FORCE_COLOR: 1
    TERM: ansi
  script:
    - set +x
    - |
      if [ $(git rev-list --count HEAD) -gt 1 ]; then
        mypy --follow-imports silent --pretty $(git diff --name-only $(git diff --exit-code >/dev/null && echo 'HEAD~1' || echo 'HEAD') ./docs/ ./src/ ./setup.py | grep '\.py$') 2>/dev/null || true
      fi
    - sleep 1
    - mypy --follow-imports silent --pretty ./docs/ ./src/ ./setup.py
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'docs/**/*'
        - 'requirements/**/*'
        - 'setup.py'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

# =============================================================================
# Stage: build

build:
  stage: build
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:build
  needs:
    - job: registry:build
      artifacts: false
      optional: true
    - job: codestyle
      artifacts: false
      optional: true
    - job: commits
      artifacts: false
      optional: true
    - job: lint
      artifacts: false
      optional: true
    - job: typings
      artifacts: false
      optional: true
  script:
    - rm -rf ./build ./dist ./*.egg-info ./.eggs
    - python3 -m build
  after_script:
    - rm -rf ./build ./*.egg-info ./.eggs
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success
  artifacts:
    paths:
      - dist/

install:
  stage: build
  image: local:quiet
  script:
    - pipx uninstall $(ls -1 ./dist/*.whl | cut -d'/' -f3 | cut -d'-' -f1) || true
    - pipx install --force ./dist/*.whl
  rules:
    - if: $CI_LOCAL

readme:
  stage: build
  image: local:silent
  script:
    - |
      export COLUMNS=120
      mkdir -p ./.tmp/
      PROJECT_PACKAGE=$(grep '^PROJECT_PACKAGE =' ./setup.py | cut -d"'" -f2)
      {
        echo ''
        echo '```yaml'
        alignments='[ ]\{2,\}'
        argument='[[:alnum:]][[:alnum:]_-]\{0,\}'
        letter='[[:alnum:]_]\{1\}'
        parameter='[-]\{1,2\}[[:alnum:]][[:alnum:]_-]\{0,\}'
        separator='--'
        word='[[:alnum:]_-]\{1,\}'
        help="[(]\{0,1\}${word}"
        "${PROJECT_PACKAGE}" --help \
          | sed '1d; $d' \
          | sed "s/^\(  ${parameter} \[${word}\]\(\|, ${parameter} \[${word}\]\)${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}\( ${word}\)\{1,\}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}\( ${word}\)\{1,\}, ${parameter}\( ${word}\)\{1,\}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${parameter}, ${parameter}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${separator}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${argument}${alignments}\)/\1# /g" \
          | sed "s/^\(  ${alignments}\)\(${help}\)/\1# \2/g"
        echo '```'
        echo ''
      } >./.tmp/README.help.tmp
    - |
      lead='^<!-- readme-help-start -->$'
      tail='^<!-- readme-help-stop -->$'
      sed -i "/${lead}/,/${tail}/{ /${lead}/{ p; r ./.tmp/README.help.tmp
        }; /${tail}/p; d }"  ./README.md | head -n 100
    - rm -f ./.tmp/README.help.tmp
    - |
      git -c color.diff=always --no-pager diff ./README.md | grep --color=never '.' && echo ' '
      echo  ' > README: Updated successfully'
      git diff --quiet ./README.md
  rules:
    - if: $CI_LOCAL

# =============================================================================
# Stage: test (templates)

.unit-tests-docker:
  services:
    - name: registry.gitlab.com/radiandevcore/tools/gcil/docker:dind
      alias: docker
  variables:
    DOCKER_CERT_PATH: /certs/client
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: /certs
    DOCKER_TLS_VERIFY: 1

.unit-tests-podman:
  variables:
    CI_LOCAL_NETWORK: 'host'
  before_script:
    - export DOCKER_HOST='tcp://127.0.0.1:9999'
    - sed -i 's#.*cgroup_manager = ".*"#cgroup_manager = "cgroupfs"#g' /usr/share/containers/containers.conf
    - sed -i 's#.*events_logger = ".*"#events_logger = "file"#g' /usr/share/containers/containers.conf
    - sed -i 's#.*log_driver = ".*"#log_driver = "k8s-file"#g' /usr/share/containers/containers.conf
    - sed -i '/# unqualified-search-registries =/a unqualified-search-registries = ["docker.io"]' /etc/containers/registries.conf
    - |
      cat >>/etc/containers/storage.conf <<EOF
      [storage]
      driver = "vfs"
      runroot = "/var/run/containers/storage"
      graphroot = "/var/run/containers/storage"
      EOF

.unit-tests-rules:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'src/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success

.unit-tests-template:
  stage: test
  timeout: 25m
  variables:
    DEBUG_UPDATES_DISABLE: 'true'
    FORCE_COLOR: 1
    PYTHONUNBUFFERED: 1
    TEMP: .tmp
    TERM: ansi
  before_script:
    - mkdir -p ./.tmp/
    - |
      if type pipx >/dev/null 2>&1; then
        pipx uninstall $(ls -1 ./dist/*.whl | cut -d'/' -f3 | cut -d'-' -f1) || true
        pipx install --force ./dist/*.whl
      else
        pip3 install ./dist/*.whl
        pip3 install --force-reinstall --no-deps --upgrade ./dist/*.whl
        pip3 show gitlabci-local
      fi
  script:
    # Prepare tests
    - export SUITE=$(echo "${SUITE}" | sed 's/,/\\|/g')
    - if [ ! -z "${SUITE}" ]; then ls -1d ./tests/* | grep -q "\/\(${SUITE}\)" || (set +x; echo ' '; echo -e '\033[1;31m[ERROR] The requested SUITE filter does not match any suite\033[0m'; echo ' '; exit 1); fi
    - |
      if [ ! -z "${CI_LOCAL_HOST}" ]; then
        (
          set +x
          echo ' '
          echo ' [INFO] Access to "sudo" required during sudo related tests...'
          echo ' '
          sudo echo -n ''
          echo ' '
        )
      fi
    # Run tests
    - for path in $(ls -1d ./tests/* | grep "\/\(${SUITE}\)"); do (cd "${path}/" && time sh ./test.sh 2>&1); done
    # Finish tests
    - |
      (
        set +x
        echo ' '
        echo ' [INFO] Unit tests finished successfully'
        echo ' '
      )

.coverage-template:
  extends:
    - .unit-tests-template
    - .unit-tests-rules
  variables:
    COVERAGE_COMMON_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-common
    COVERAGE_COMMON_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-common.xml
    COVERAGE_EXCLUDE_ALSO: ''
    COVERAGE_FOLDER: ${CI_PROJECT_DIR}/coverage-reports
    COVERAGE_RCFILE: ${CI_PROJECT_DIR}/.coveragerc
    PYTHONDONTWRITEBYTECODE: 1
    PYTHONPATH: ${CI_PROJECT_DIR}
  before_script:
    - mkdir -p "${COVERAGE_FOLDER}/"
    - chmod 777 "${COVERAGE_FOLDER}"
    - |
      if [ -z "${SUITE}" ]; then
        coverage erase
      fi
    - coverage run --append --module --source="${PWD}/src" src --version >/dev/null
    - chmod 666 "${COVERAGE_FILE}"
    - echo "coverage run --append --module --source='${PWD}/src' src \"\${@}\"" | tee /usr/local/bin/gcil /usr/local/bin/gitlabci-local >/dev/null
    - chmod a+x /usr/local/bin/gcil /usr/local/bin/gitlabci-local
  after_script:
    - |
      cp -fv "${COVERAGE_RCFILE}" /tmp/.coveragerc.common
      cp -fv "${COVERAGE_RCFILE}" /tmp/.coveragerc.job
      echo "${CI_LOCAL:+pragma: no local cover}" | tr '|' '\n' | xargs -i -n1 echo '    {}' >>/tmp/.coveragerc.common
      echo "${CI_LOCAL:+pragma: no local cover}|${COVERAGE_EXCLUDE_ALSO}" | tr '|' '\n' | xargs -i -n1 echo '    {}' >>/tmp/.coveragerc.job
    - coverage xml -o "${COVERAGE_XML}"
    - COVERAGE_RCFILE='/tmp/.coveragerc.job' coverage report --show-missing --skip-covered
    - sed -i 's#\(<source>\).*\(</source>\)#\1.\2#g' "${COVERAGE_XML}"
    - |
      set +x
      if [ ! -z "${CI_LOCAL}" ]; then
        COVERAGE_FILE="${COVERAGE_COMMON_FILE}" coverage combine --keep "${COVERAGE_FOLDER}/.coverage-"*
        COVERAGE_FILE="${COVERAGE_COMMON_FILE}" COVERAGE_RCFILE='/tmp/.coveragerc.common' coverage report --ignore-errors --show-missing --skip-covered
        COVERAGE_FILE="${COVERAGE_COMMON_FILE}" coverage xml -o "${COVERAGE_COMMON_XML}"
        sed -i 's#\(<source>\).*\(</source>\)#\1.\2#g' "${COVERAGE_COMMON_XML}"
        rm -rf "${common}"
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'sonar-project.properties'
        - 'src/**/*'
        - 'tests/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
      when: on_success
  artifacts:
    paths:
      - coverage-reports/

# =============================================================================
# Stage: test (coverage)

coverage:docker:
  extends:
    - .coverage-template
    - .unit-tests-docker
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-coverage-docker
  needs:
    - job: registry:test-coverage-docker
      artifacts: false
      optional: true
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-docker
    COVERAGE_EXCLUDE_ALSO: 'pragma: podman cover|pragma: windows cover'
    COVERAGE_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-docker.xml
  before_script:
    - !reference [.coverage-template, before_script]

coverage:podman:
  extends:
    - .coverage-template
    - .unit-tests-podman
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-coverage-podman
  needs:
    - job: registry:test-coverage-podman
      artifacts: false
      optional: true
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-podman
    COVERAGE_EXCLUDE_ALSO: 'pragma: docker cover|pragma: windows cover'
    COVERAGE_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-podman.xml
  before_script:
    - !reference [.unit-tests-podman, before_script]
    - !reference [.coverage-template, before_script]

coverage:windows:
  extends:
    - .coverage-template
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-coverage-windows
  needs:
    - job: registry:test-coverage-windows
      artifacts: false
      optional: true
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-windows
    COVERAGE_EXCLUDE_ALSO: 'pragma: docker cover|pragma: podman cover'
    COVERAGE_XML: ${CI_PROJECT_DIR}/coverage-reports/coverage-windows.xml
  before_script:
    - !reference [.coverage-template, before_script]
  script:
    - cd ./tests/windows/ && sh ./test.sh 2>&1

# =============================================================================
# Stage: test (Docker)

py3.8:docker:
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-oldest-docker
  needs:
    - job: registry:test-oldest-docker
      artifacts: false
      optional: true
    - job: build
  before_script:
    - !reference [.unit-tests-template, before_script]

py3.12:docker:
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-latest-docker
  needs:
    - job: registry:test-latest-docker
      artifacts: false
      optional: true
    - job: build
  before_script:
    - !reference [.unit-tests-template, before_script]

# =============================================================================
# Stage: test (Podman)

py3.8:podman:
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-oldest-podman
  needs:
    - job: registry:test-oldest-podman
      artifacts: false
      optional: true
    - job: build
  before_script:
    - !reference [.unit-tests-podman, before_script]
    - !reference [.unit-tests-template, before_script]

py3.12:podman:
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:test-latest-podman
  needs:
    - job: registry:test-latest-podman
      artifacts: false
      optional: true
    - job: build
  before_script:
    - !reference [.unit-tests-podman, before_script]
    - !reference [.unit-tests-template, before_script]

# =============================================================================
# Stage: test (local)

python:dind:
  extends:
    - .unit-tests-template
  image: local:quiet
  before_script:
    - !reference [.unit-tests-template, before_script]
    - docker rm -f gcil-dind >/dev/null 2>&1 || true
    - docker run -d -v "${PWD}/.dind:/certs" -v "${PWD}:${PWD}" --name gcil-dind --privileged docker:dind >/dev/null
    - sleep 10
    - export DIND_IP=$(docker exec gcil-dind hostname -i)
    - export DOCKER_CERT_PATH="${PWD}/.dind/client/"
    - export DOCKER_HOST="tcp://${DIND_IP}:2376"
    - export DOCKER_TLS_VERIFY=''
  after_script:
    - docker rm -f gcil-dind >/dev/null || true
  rules:
    - if: $CI_LOCAL

python:local:
  extends:
    - .unit-tests-template
  image: local:quiet
  before_script:
    - mkdir -p ./.tmp/
    - pipx uninstall $(ls -1 ./dist/*.whl | cut -d'/' -f3 | cut -d'-' -f1) || true
    - pipx install --force ./dist/*.whl
  rules:
    - if: $CI_LOCAL

# =============================================================================
# Stage: quality

sonarcloud:
  stage: quality
  image:
    name: registry.gitlab.com/radiandevcore/tools/gcil/sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  needs:
    - job: registry:rehost
      artifacts: false
      optional: true
    - job: coverage:docker
    - job: coverage:podman
    - job: coverage:windows
  variables:
    GIT_DEPTH: 0
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  before_script:
    # Configure Git securities
    - git config --global --add safe.directory "${CI_PROJECT_DIR}"
  script:
    # Prevent local usage
    - |
      if [ ! -z "${CI_LOCAL:-}" ] && [ -z "${SONAR_HOST_URL:-}" ]; then
        set +x
        echo ' '
        echo ' [ERROR] SonarCloud quality job is meant for CI executions only...'
        echo ' '
        exit 1
      fi
    # Scan with SonarCloud
    - sonar-scanner -Dsonar.projectVersion=$(git describe --always) -Dsonar.branch.name=${CI_COMMIT_REF_NAME}
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'CHANGELOG.md'
        - 'requirements/**/*'
        - 'sonar-project.properties'
        - 'src/**/*'
        - 'tests/**/*'
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - when: never
  allow_failure: true

# =============================================================================
# Stage: deploy

deploy:release:
  stage: deploy
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:deploy
  needs:
    - job: registry:deploy
      artifacts: false
      optional: true
    - job: build
    - job: coverage:docker
      artifacts: false
    - job: coverage:podman
      artifacts: false
    - job: coverage:windows
      artifacts: false
    - job: py3.8:docker
      artifacts: false
    - job: py3.12:docker
      artifacts: false
    - job: py3.8:podman
      artifacts: false
    - job: py3.12:podman
      artifacts: false
  variables:
    TWINE_PASSWORD: ${TWINE_PASSWORD}
  before_script:
    # Validate protected tag
    - if [ ! "${CI_COMMIT_REF_PROTECTED}" = 'true' ]; then echo '[ERROR] Please protect this tag...'; exit 1; fi
  script:
    # Extract tag changelog
    - tag=${CI_COMMIT_REF_NAME:-$(git describe --always --abbrev=0)}
    - |
      description=$(
        sed -n "
          /^## \[${tag}\]/,/^## \[/{
            n; :a; n; h;
            /^$/{
              n; H;
              /^$/{
                n; H;
                /^<a name=/{ q; };
              };
              g;
            };
            p; ba;
          }" ./CHANGELOG.md \
        | sed -z 's/"/\\"/g'
      )
    # Create tag release
    - |
      description="${description}"$'\n\n''### Download'$'\n'
      gitlab-release --description "${description}" --link-prefix '* ' ./dist/*
    # Deploy package release
    - twine upload -u '__token__' -p "${TWINE_PASSWORD}" ./dist/*
  rules:
    - if: $CI_COMMIT_TAG

deploy:trial:
  stage: deploy
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:deploy
  needs:
    - job: registry:deploy
      artifacts: false
      optional: true
    - job: build
    - job: coverage:docker
      artifacts: false
    - job: coverage:podman
      artifacts: false
    - job: coverage:windows
      artifacts: false
    - job: py3.8:docker
      artifacts: false
    - job: py3.12:docker
      artifacts: false
    - job: py3.8:podman
      artifacts: false
    - job: py3.12:podman
      artifacts: false
  variables:
    TWINE_PASSWORD_TEST: ${TWINE_PASSWORD_TEST}
  script:
    # Deploy package release
    - twine upload -u '__token__' -p "${TWINE_PASSWORD_TEST}" --repository testpypi ./dist/*
  rules:
    - if: $CI_LOCAL
  when: manual

.pages:
  rules:
    changes:
      - '.gitlab-ci.yml'
      - 'CHANGELOG.md'
      - 'mkdocs.yml'
      - 'LICENSE'
      - 'README.md'
      - 'docs/**/*'
      - 'requirements/**/*'

pages:
  stage: deploy
  image: registry.gitlab.com/radiandevcore/tools/gcil/gcil:pages
  needs:
    - job: registry:pages
      artifacts: false
      optional: true
    - job: build
      artifacts: false
      optional: true
    - job: coverage:docker
      artifacts: false
      optional: true
    - job: coverage:podman
      artifacts: false
      optional: true
    - job: coverage:windows
      artifacts: false
      optional: true
    - job: py3.8:docker
      artifacts: false
      optional: true
    - job: py3.12:docker
      artifacts: false
      optional: true
    - job: py3.8:podman
      artifacts: false
      optional: true
    - job: py3.12:podman
      artifacts: false
      optional: true
  variables:
    CI_LOCAL_NETWORK: 'host'
    MKDOCS_EXPORTER_PDF_ENABLED: 'true'
    MKDOCS_EXPORTER_PDF_OUTPUT: 'gcil'
  script:
    # Fetch all tags
    - |
      if [ -z "${CI_LOCAL:-}" ]; then
        git fetch --tags --unshallow || true
      fi
    # Set PDF output version
    - export MKDOCS_EXPORTER_PDF_OUTPUT="${MKDOCS_EXPORTER_PDF_OUTPUT%.pdf}-$(git describe --abbrev=7 --always --tags).pdf"
    # Run locally without PDF
    - |
      if [ ! -z "${CI_LOCAL:-}" ] && [ ! "${CI_JOB_NAME:-}" = 'pdf' ]; then
        export MKDOCS_EXPORTER_PDF_ENABLED='false'
      fi
    # Validate network interfaces
    - |
      if [ ! -z "${CI_LOCAL:-}" ] && hostname -I | tr ' ' '\n' | grep '.' | wc -l | grep -q '^0$\|^1$'; then
        set +x
        echo ' '
        echo -n ' [INFO] Network addresses: '
        hostname -I
        echo ' '
        echo ' [ERROR] Incompatible local CI version detected or missing host network interfaces...'
        echo ' '
        exit 1
      fi
    # Prepare documentation
    - |
      if [ ! -z "${CI_LOCAL:-}" ]; then
        find ./config/* ./docs/.* ./docs/* ./mkdocs.yml ./README.md -not -path ./docs/assets/stylesheets/variables.scss -type f | entr -n sh ./docs/prepare.sh &
        echo -n "${!}" >./docs/.serve.pid
        sleep 2
      else
        sh ./docs/prepare.sh
      fi
    # Generate documentation
    - |
      if [ ! -z "${CI_LOCAL:-}" ]; then
        network_ip=$(hostname -I | cut -d' ' -f1)
        mkdocs serve --dev-addr "${network_ip}:8001" --clean --config-file ./mkdocs.yml --verbose
      else
        mkdocs build --clean --config-file ./mkdocs.yml --verbose
      fi
  after_script:
    # Cleanup documentation
    - |
      if [ -e ./docs/.serve.pid ]; then
        cat ./docs/.serve.pid | xargs -r kill >/dev/null 2>&1 || true
      fi
    - sh ./docs/prepare.sh --clean
  artifacts:
    expire_in: 1 hour
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes: !reference [.pages, rules, changes]
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED
      changes: !reference [.pages, rules, changes]
      allow_failure: true
      when: manual

pdf:
  extends:
    - pages
  artifacts:
    expire_in: 1 hour
    paths:
      - public/$MKDOCS_EXPORTER_PDF_OUTPUT*.pdf
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      changes: !reference [.pages, rules, changes]
