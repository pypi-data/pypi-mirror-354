/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/pixlise/core/v4/core/client/lib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 19 "main.go"

#include <stdlib.h>
#include <stdint.h>

typedef void* (*alloc_f)(char* t, int64_t n);
static void* call_alloc_f(alloc_f f, char* t, int64_t n) {return f(t,n);}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) char* authenticate(alloc_f allocFunc);
extern __declspec(dllexport) char* getScanSpectrum(GoString scanId, GoInt32 pmc, GoInt spectrumType, GoString detector);
extern __declspec(dllexport) char* getScanSpectrumRangeAsMap(GoString scanId, GoInt32 channelStart, GoInt32 channelEnd, GoString detector);
extern __declspec(dllexport) char* listScans(GoString scanId);
extern __declspec(dllexport) char* getScanMetaList(GoString scanId);
extern __declspec(dllexport) char* getScanMetaData(GoString scanId);
extern __declspec(dllexport) char* getScanEntryDataColumns(GoString scanId);
extern __declspec(dllexport) char* getScanEntryDataColumnAsMap(GoString scanId, GoString columnName);
extern __declspec(dllexport) char* listScanQuants(GoString scanId);
extern __declspec(dllexport) char* getQuant(GoString quantId, GoUint8 summaryOnly);
extern __declspec(dllexport) char* listScanImages(GoString scanIds, GoUint8 mustIncludeAll);
extern __declspec(dllexport) char* listScanROIs(GoString scanId);
extern __declspec(dllexport) char* getROI(GoString id, GoUint8 isMist);
extern __declspec(dllexport) char* deleteROI(GoString id);
extern __declspec(dllexport) char* getScanBeamLocations(GoString scanId);
extern __declspec(dllexport) char* getScanEntries(GoString scanId);
extern __declspec(dllexport) char* getScanImageBeamLocationVersions(GoString imageName);
extern __declspec(dllexport) char* getScanImageBeamLocations(GoString imageName, GoString scanId, GoInt32 version);
extern __declspec(dllexport) char* setUserScanCalibration(GoString scanId, GoString detector, GoFloat32 starteV, GoFloat32 perChanneleV);
extern __declspec(dllexport) char* getScanBulkSumCalibration(GoString scanId);
extern __declspec(dllexport) char* getDiffractionPeaks(GoString scanId, GoInt calibrationSource);
extern __declspec(dllexport) char* getDiffractionAsMap(GoString scanId, GoInt calibrationSource, GoInt32 channelStart, GoInt32 channelEnd);
extern __declspec(dllexport) char* getRoughnessAsMap(GoString scanId, GoInt calibrationSource);
extern __declspec(dllexport) char* getQuantColumns(GoString quantId);
extern __declspec(dllexport) char* getQuantColumnAsMap(GoString quantId, GoString columnName, GoString detector);
extern __declspec(dllexport) char* createROI(GoString roiBuff, GoUint8 isMist);
extern __declspec(dllexport) char* saveMapData(GoString key, GoString dataBuff);
extern __declspec(dllexport) char* loadMapData(GoString key);
extern __declspec(dllexport) char* uploadImage(GoString imageUpload);
extern __declspec(dllexport) char* deleteImage(GoString imageName);
extern __declspec(dllexport) char* getTag(GoString tagId);
extern __declspec(dllexport) char* getTagByName(GoString tagName);
extern __declspec(dllexport) char* uploadImageBeamLocations(GoString imageName, GoString locationsForScanBuff);

#ifdef __cplusplus
}
#endif
