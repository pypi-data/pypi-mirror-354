Metadata-Version: 2.4
Name: trainplot
Version: 0.4.0
Summary: Dynamically updating plots in Jupyter notebooks, e.g. for visualizing training progress.
Author-email: Jonas Loos <trainplot@jloos.de>
License: MIT License
        
        Copyright (c) 2023 Jonas Loos
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/JonasLoos/trainplot
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ipython
Requires-Dist: anywidget>=0.9.0
Requires-Dist: numpy
Dynamic: license-file

# trainplot

Dynamically updating plots in Jupyter notebooks, e.g. for visualizing machine learning training progress.

```bash

pip install trainplot
```

<p align="center"><img src="https://github.com/user-attachments/assets/03bd661c-37d7-41a4-ba91-891f57ebfcf8" width="400" center></p>



## Usage

Basic usage:

```python
from trainplot import plot

for i in range(100):
    loss = ...
    acc = ...
    plot(loss=loss, accuracy=acc)
```

If you use keras, you can use the `TrainPlotKerasCallback`:

```python
from trainplot import TrainPlotKeras

model = ...
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, callbacks=[TrainPlotKerasCallback()])
```

For more examples, see the [`examples`](examples/) folder.


## Features

* **Lightweight**: No external plotting dependencies
* **Custom rendering**: Uses HTML5 Canvas for fast, smooth updates
* **Multiple series**: Automatically handles multiple data series with different colors
* **Real-time updates**: Configurable update periods to balance performance and responsiveness
* **Keras support**: Built-in callback for TensorFlow/Keras models


## How it works

Trainplot uses a custom HTML5 Canvas-based plotting solution that renders directly in Jupyter notebooks. For synchronization between Python and the JavaScript-based plotting function, [`anywidget`](https://github.com/manzt/anywidget) is used. To avoid wasting resources and flickering, the plot is only updated with a given `update_period`. A `post_run_cell` callback is added to the `IPython` instance, so that all updated TrainPlot figures include all new data when a cell execution is finished. When using `trainplot.plot`, a TrainPlot object is created for the current cell.
