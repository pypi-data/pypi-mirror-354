# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api import camera_model_service_pb2 as api_dot_camera__model__service__pb2
from models import graph_models_pb2 as models_dot_graph__models__pb2


class CameraModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCameraManufacturers = channel.unary_unary(
                '/api.CameraModelService/GetCameraManufacturers',
                request_serializer=api_dot_camera__model__service__pb2.GetCameraManufacturersRequest.SerializeToString,
                response_deserializer=api_dot_camera__model__service__pb2.GetCameraManufacturersResponse.FromString,
                )
        self.GetCameraModels = channel.unary_unary(
                '/api.CameraModelService/GetCameraModels',
                request_serializer=api_dot_camera__model__service__pb2.GetCameraModelsRequest.SerializeToString,
                response_deserializer=api_dot_camera__model__service__pb2.GetCameraModelsResponse.FromString,
                )
        self.UpdateCameraModel = channel.unary_unary(
                '/api.CameraModelService/UpdateCameraModel',
                request_serializer=models_dot_graph__models__pb2.CameraModel.SerializeToString,
                response_deserializer=models_dot_graph__models__pb2.CameraModel.FromString,
                )


class CameraModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCameraManufacturers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCameraModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCameraManufacturers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraManufacturers,
                    request_deserializer=api_dot_camera__model__service__pb2.GetCameraManufacturersRequest.FromString,
                    response_serializer=api_dot_camera__model__service__pb2.GetCameraManufacturersResponse.SerializeToString,
            ),
            'GetCameraModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraModels,
                    request_deserializer=api_dot_camera__model__service__pb2.GetCameraModelsRequest.FromString,
                    response_serializer=api_dot_camera__model__service__pb2.GetCameraModelsResponse.SerializeToString,
            ),
            'UpdateCameraModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCameraModel,
                    request_deserializer=models_dot_graph__models__pb2.CameraModel.FromString,
                    response_serializer=models_dot_graph__models__pb2.CameraModel.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.CameraModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CameraModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCameraManufacturers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CameraModelService/GetCameraManufacturers',
            api_dot_camera__model__service__pb2.GetCameraManufacturersRequest.SerializeToString,
            api_dot_camera__model__service__pb2.GetCameraManufacturersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CameraModelService/GetCameraModels',
            api_dot_camera__model__service__pb2.GetCameraModelsRequest.SerializeToString,
            api_dot_camera__model__service__pb2.GetCameraModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCameraModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CameraModelService/UpdateCameraModel',
            models_dot_graph__models__pb2.CameraModel.SerializeToString,
            models_dot_graph__models__pb2.CameraModel.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
