# coding: utf-8

"""
Waybiller External API - with fixes

The **Waybiller External API** is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, the external API provides mapping support - it is possible to create company-specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during the creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, which may be null if the company doesn't have a mapping for this object.  Unique **Waybiller** identifiers and values can be accessed via the `raw_data` key.  The API is HTTPS and JSON based.  ### Pagination  By default, list endpoint responses are presented in pages of 30 items.  It is possible to control the page size using the `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>`, where `<number>` is an integer between 1 and 1000.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from pywaybiller.openapi_client.models.transport_order_status_enum import (
    TransportOrderStatusEnum,
)


class ExternalAPITransportOrderRawDataList(BaseModel):
    """
    ExternalAPITransportOrderRawDataList
    """  # noqa: E501

    transport_order_id: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Unique identifier of the transport order in the Waybiller system"
    )
    status: TransportOrderStatusEnum = Field(
        description="Current status of the transport order"
    )
    number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(
        description="Unique number of the transport order in the Waybiller system"
    )
    origin_id: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Unique identifier of the origin in the Waybiller system"
    )
    destination_id: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="Unique identifier of the destination in the Waybiller system"
    )
    entity_code: Optional[StrictStr] = Field(
        description="Entity code of the transport order, if applicable"
    )
    truck_id: Optional[StrictInt] = Field(
        description="Unique identifier of the truck associated with the transport order"
    )
    waybills_ids: List[StrictInt] = Field(
        description="List of waybill IDs associated with the transport order"
    )
    __properties: ClassVar[List[str]] = [
        "transport_order_id",
        "status",
        "number",
        "origin_id",
        "destination_id",
        "entity_code",
        "truck_id",
        "waybills_ids",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderRawDataList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "transport_order_id",
                "status",
                "number",
                "origin_id",
                "destination_id",
                "entity_code",
                "truck_id",
                "waybills_ids",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict["number"] = None

        # set to None if entity_code (nullable) is None
        # and model_fields_set contains the field
        if self.entity_code is None and "entity_code" in self.model_fields_set:
            _dict["entity_code"] = None

        # set to None if truck_id (nullable) is None
        # and model_fields_set contains the field
        if self.truck_id is None and "truck_id" in self.model_fields_set:
            _dict["truck_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderRawDataList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "transport_order_id": obj.get("transport_order_id"),
                "status": obj.get("status"),
                "number": obj.get("number"),
                "origin_id": obj.get("origin_id"),
                "destination_id": obj.get("destination_id"),
                "entity_code": obj.get("entity_code"),
                "truck_id": obj.get("truck_id"),
                "waybills_ids": obj.get("waybills_ids"),
            }
        )
        return _obj
