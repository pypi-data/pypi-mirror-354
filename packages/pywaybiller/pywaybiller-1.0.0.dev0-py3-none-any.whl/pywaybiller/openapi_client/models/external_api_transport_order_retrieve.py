# coding: utf-8

"""
Waybiller External API - with fixes

The **Waybiller External API** is a feature that allows companies to access **Waybiller** data as JSON objects and create **Waybiller** instances out of their own data.  To make integration easier for the companies, the external API provides mapping support - it is possible to create company-specific mappings for object identifiers (such as destination and origin).  These mappings will be used for representing companies data from external API, and for converting the values during the creation of **Waybiller** instances (such as transport orders and waybills).  Most of the API responses contain mapped values, which may be null if the company doesn't have a mapping for this object.  Unique **Waybiller** identifiers and values can be accessed via the `raw_data` key.  The API is HTTPS and JSON based.  ### Pagination  By default, list endpoint responses are presented in pages of 30 items.  It is possible to control the page size using the `limit` parameter: `/external-api/<some-list-endpoint>/?limit=<number>`, where `<number>` is an integer between 1 and 1000.

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from pywaybiller.openapi_client.models.external_api_transport_order_raw_data import (
    ExternalAPITransportOrderRawData,
)
from pywaybiller.openapi_client.models.external_api_transport_order_row import (
    ExternalAPITransportOrderRow,
)
from pywaybiller.openapi_client.models.transport_order_status_enum import (
    TransportOrderStatusEnum,
)


class ExternalAPITransportOrderRetrieve(BaseModel):
    """
    ExternalAPITransportOrderRetrieve
    """  # noqa: E501

    transport_order_id: StrictStr = Field(
        description="Unique identifier of the transport order in your system"
    )
    number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(
        description="Unique transport order reference number"
    )
    status: TransportOrderStatusEnum = Field(
        description="Status of the transport order"
    )
    rows: List[ExternalAPITransportOrderRow] = Field(
        description="List of assortments associated with the transport order"
    )
    organizer_user_id: StrictInt = Field(
        description="Organizer user ID. Required unless a default values has been set for the API key"
    )
    destination_id: Optional[StrictStr] = Field(
        description="Unique identifier of the destination in your system"
    )
    destination_name: Annotated[str, Field(strict=True, max_length=255)] = Field(
        description="Name of the destination location"
    )
    destination_address: Annotated[str, Field(strict=True, max_length=255)] = Field(
        description="Address of the destination location"
    )
    destination_latitude: Union[StrictFloat, StrictInt] = Field(
        description="Latitude of the destination location"
    )
    destination_longitude: Union[StrictFloat, StrictInt] = Field(
        description="Longitude of the destination location"
    )
    destination_waybill_created_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill is created for this destination"
    )
    destination_waybill_reached_destination_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill reaches this destination"
    )
    destination_waybill_accepted_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill is accepted at this destination"
    )
    destination_transport_order_created_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a transport order is created for this destination"
    )
    receiver_company_name: Annotated[str, Field(strict=True, max_length=64)] = Field(
        description="Name of the company that owns the destination location"
    )
    receiver_company_reg_code: Annotated[str, Field(strict=True, max_length=16)] = (
        Field(
            description="Registration code of the company that owns the destination location"
        )
    )
    origin_id: Optional[StrictStr] = Field(
        description="Unique identifier of the origin in your system"
    )
    origin_name: Annotated[str, Field(strict=True, max_length=255)] = Field(
        description="Name of the origin location"
    )
    origin_address: Annotated[str, Field(strict=True, max_length=255)] = Field(
        description="Address of the origin location"
    )
    origin_latitude: Union[StrictFloat, StrictInt] = Field(
        description="Latitude of the origin location"
    )
    origin_longitude: Union[StrictFloat, StrictInt] = Field(
        description="Longitude of the origin location"
    )
    origin_waybill_created_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill is created from this origin"
    )
    origin_waybill_reached_destination_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill from this origin reaches destination"
    )
    origin_waybill_accepted_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a waybill from this origin is accepted"
    )
    origin_transport_order_created_emails: Optional[
        List[Annotated[str, Field(strict=True, max_length=254)]]
    ] = Field(
        description="List of emails to notify when a transport order is created from this origin"
    )
    shipper_company_name: Annotated[str, Field(strict=True, max_length=64)] = Field(
        description="Name of the company that owns the origin location"
    )
    shipper_company_reg_code: Annotated[str, Field(strict=True, max_length=16)] = Field(
        description="Registration code of the company that owns the origin location"
    )
    transportation_company_name: Annotated[str, Field(strict=True, max_length=64)] = (
        Field(description="Transportation company name")
    )
    transportation_company_reg_code: Annotated[
        str, Field(strict=True, max_length=16)
    ] = Field(description="Transportation company registration code")
    truck_reg_number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = (
        Field(description="Registration number of the truck")
    )
    trailer_reg_number: Optional[Annotated[str, Field(strict=True, max_length=16)]] = (
        Field(description="Registration number of the trailer")
    )
    driver_email: Annotated[str, Field(strict=True, max_length=254)] = Field(
        description="Driver email"
    )
    driver_personal_code: Annotated[str, Field(strict=True, max_length=24)] = Field(
        description="Driver personal code"
    )
    driver_name: Annotated[str, Field(strict=True, max_length=255)] = Field(
        description="Driver name"
    )
    driver_phone: Annotated[str, Field(strict=True, max_length=128)] = Field(
        description="Driver phone number"
    )
    transport_date: date = Field(description="Date of transport")
    transport_time: Optional[StrictStr] = Field(description="Time of transport")
    additional_info: StrictStr = Field(description="Additional information for drivers")
    waybill_pdf_urls: List[StrictStr] = Field(
        description="List of links to waybill PDFs"
    )
    pallets_number: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = (
        Field(description="Number of pallets in the transport order")
    )
    raw_data: ExternalAPITransportOrderRawData = Field(
        description="Raw data from the transport order"
    )
    __properties: ClassVar[List[str]] = [
        "transport_order_id",
        "number",
        "status",
        "rows",
        "organizer_user_id",
        "destination_id",
        "destination_name",
        "destination_address",
        "destination_latitude",
        "destination_longitude",
        "destination_waybill_created_emails",
        "destination_waybill_reached_destination_emails",
        "destination_waybill_accepted_emails",
        "destination_transport_order_created_emails",
        "receiver_company_name",
        "receiver_company_reg_code",
        "origin_id",
        "origin_name",
        "origin_address",
        "origin_latitude",
        "origin_longitude",
        "origin_waybill_created_emails",
        "origin_waybill_reached_destination_emails",
        "origin_waybill_accepted_emails",
        "origin_transport_order_created_emails",
        "shipper_company_name",
        "shipper_company_reg_code",
        "transportation_company_name",
        "transportation_company_reg_code",
        "truck_reg_number",
        "trailer_reg_number",
        "driver_email",
        "driver_personal_code",
        "driver_name",
        "driver_phone",
        "transport_date",
        "transport_time",
        "additional_info",
        "waybill_pdf_urls",
        "pallets_number",
        "raw_data",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderRetrieve from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "transport_order_id",
                "number",
                "status",
                "rows",
                "organizer_user_id",
                "destination_id",
                "destination_name",
                "destination_address",
                "destination_latitude",
                "destination_longitude",
                "destination_waybill_created_emails",
                "destination_waybill_reached_destination_emails",
                "destination_waybill_accepted_emails",
                "destination_transport_order_created_emails",
                "receiver_company_name",
                "receiver_company_reg_code",
                "origin_id",
                "origin_name",
                "origin_address",
                "origin_latitude",
                "origin_longitude",
                "origin_waybill_created_emails",
                "origin_waybill_reached_destination_emails",
                "origin_waybill_accepted_emails",
                "origin_transport_order_created_emails",
                "shipper_company_name",
                "shipper_company_reg_code",
                "transportation_company_name",
                "transportation_company_reg_code",
                "truck_reg_number",
                "trailer_reg_number",
                "driver_email",
                "driver_personal_code",
                "driver_name",
                "driver_phone",
                "transport_date",
                "transport_time",
                "additional_info",
                "waybill_pdf_urls",
                "pallets_number",
                "raw_data",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rows (list)
        _items = []
        if self.rows:
            for _item_rows in self.rows:
                if _item_rows:
                    _items.append(_item_rows.to_dict())
            _dict["rows"] = _items
        # override the default output from pydantic by calling `to_dict()` of raw_data
        if self.raw_data:
            _dict["raw_data"] = self.raw_data.to_dict()
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict["number"] = None

        # set to None if destination_id (nullable) is None
        # and model_fields_set contains the field
        if self.destination_id is None and "destination_id" in self.model_fields_set:
            _dict["destination_id"] = None

        # set to None if destination_waybill_created_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.destination_waybill_created_emails is None
            and "destination_waybill_created_emails" in self.model_fields_set
        ):
            _dict["destination_waybill_created_emails"] = None

        # set to None if destination_waybill_reached_destination_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.destination_waybill_reached_destination_emails is None
            and "destination_waybill_reached_destination_emails"
            in self.model_fields_set
        ):
            _dict["destination_waybill_reached_destination_emails"] = None

        # set to None if destination_waybill_accepted_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.destination_waybill_accepted_emails is None
            and "destination_waybill_accepted_emails" in self.model_fields_set
        ):
            _dict["destination_waybill_accepted_emails"] = None

        # set to None if destination_transport_order_created_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.destination_transport_order_created_emails is None
            and "destination_transport_order_created_emails" in self.model_fields_set
        ):
            _dict["destination_transport_order_created_emails"] = None

        # set to None if origin_id (nullable) is None
        # and model_fields_set contains the field
        if self.origin_id is None and "origin_id" in self.model_fields_set:
            _dict["origin_id"] = None

        # set to None if origin_waybill_created_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.origin_waybill_created_emails is None
            and "origin_waybill_created_emails" in self.model_fields_set
        ):
            _dict["origin_waybill_created_emails"] = None

        # set to None if origin_waybill_reached_destination_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.origin_waybill_reached_destination_emails is None
            and "origin_waybill_reached_destination_emails" in self.model_fields_set
        ):
            _dict["origin_waybill_reached_destination_emails"] = None

        # set to None if origin_waybill_accepted_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.origin_waybill_accepted_emails is None
            and "origin_waybill_accepted_emails" in self.model_fields_set
        ):
            _dict["origin_waybill_accepted_emails"] = None

        # set to None if origin_transport_order_created_emails (nullable) is None
        # and model_fields_set contains the field
        if (
            self.origin_transport_order_created_emails is None
            and "origin_transport_order_created_emails" in self.model_fields_set
        ):
            _dict["origin_transport_order_created_emails"] = None

        # set to None if truck_reg_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.truck_reg_number is None
            and "truck_reg_number" in self.model_fields_set
        ):
            _dict["truck_reg_number"] = None

        # set to None if trailer_reg_number (nullable) is None
        # and model_fields_set contains the field
        if (
            self.trailer_reg_number is None
            and "trailer_reg_number" in self.model_fields_set
        ):
            _dict["trailer_reg_number"] = None

        # set to None if transport_time (nullable) is None
        # and model_fields_set contains the field
        if self.transport_time is None and "transport_time" in self.model_fields_set:
            _dict["transport_time"] = None

        # set to None if pallets_number (nullable) is None
        # and model_fields_set contains the field
        if self.pallets_number is None and "pallets_number" in self.model_fields_set:
            _dict["pallets_number"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalAPITransportOrderRetrieve from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "transport_order_id": obj.get("transport_order_id"),
                "number": obj.get("number"),
                "status": obj.get("status"),
                "rows": [
                    ExternalAPITransportOrderRow.from_dict(_item)
                    for _item in obj["rows"]
                ]
                if obj.get("rows") is not None
                else None,
                "organizer_user_id": obj.get("organizer_user_id"),
                "destination_id": obj.get("destination_id"),
                "destination_name": obj.get("destination_name"),
                "destination_address": obj.get("destination_address"),
                "destination_latitude": obj.get("destination_latitude"),
                "destination_longitude": obj.get("destination_longitude"),
                "destination_waybill_created_emails": obj.get(
                    "destination_waybill_created_emails"
                ),
                "destination_waybill_reached_destination_emails": obj.get(
                    "destination_waybill_reached_destination_emails"
                ),
                "destination_waybill_accepted_emails": obj.get(
                    "destination_waybill_accepted_emails"
                ),
                "destination_transport_order_created_emails": obj.get(
                    "destination_transport_order_created_emails"
                ),
                "receiver_company_name": obj.get("receiver_company_name"),
                "receiver_company_reg_code": obj.get("receiver_company_reg_code"),
                "origin_id": obj.get("origin_id"),
                "origin_name": obj.get("origin_name"),
                "origin_address": obj.get("origin_address"),
                "origin_latitude": obj.get("origin_latitude"),
                "origin_longitude": obj.get("origin_longitude"),
                "origin_waybill_created_emails": obj.get(
                    "origin_waybill_created_emails"
                ),
                "origin_waybill_reached_destination_emails": obj.get(
                    "origin_waybill_reached_destination_emails"
                ),
                "origin_waybill_accepted_emails": obj.get(
                    "origin_waybill_accepted_emails"
                ),
                "origin_transport_order_created_emails": obj.get(
                    "origin_transport_order_created_emails"
                ),
                "shipper_company_name": obj.get("shipper_company_name"),
                "shipper_company_reg_code": obj.get("shipper_company_reg_code"),
                "transportation_company_name": obj.get("transportation_company_name"),
                "transportation_company_reg_code": obj.get(
                    "transportation_company_reg_code"
                ),
                "truck_reg_number": obj.get("truck_reg_number"),
                "trailer_reg_number": obj.get("trailer_reg_number"),
                "driver_email": obj.get("driver_email"),
                "driver_personal_code": obj.get("driver_personal_code"),
                "driver_name": obj.get("driver_name"),
                "driver_phone": obj.get("driver_phone"),
                "transport_date": obj.get("transport_date"),
                "transport_time": obj.get("transport_time"),
                "additional_info": obj.get("additional_info"),
                "waybill_pdf_urls": obj.get("waybill_pdf_urls"),
                "pallets_number": obj.get("pallets_number"),
                "raw_data": ExternalAPITransportOrderRawData.from_dict(obj["raw_data"])
                if obj.get("raw_data") is not None
                else None,
            }
        )
        return _obj
