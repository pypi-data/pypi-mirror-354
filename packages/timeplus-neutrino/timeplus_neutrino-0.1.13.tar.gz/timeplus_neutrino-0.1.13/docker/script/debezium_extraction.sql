
CREATE VIEW v_mongo_cdc_after_payload
(
  `after` string
) AS
SELECT
  raw:payload:after AS after
FROM
  kafka_test_cdc_mongo_raw
WHERE
  _tp_time > earliest_timestamp()


-- following schema is generated by LLM 
-- note, the _id and transaction_history.date does not strictly follow the original schema, need tune LLM in such cases
CREATE STREAM mongo_cdc_target_payload
(
  `_id` string,
  `customer_id` uint32,
  `raw_data` tuple(transaction_history array(tuple(date uint64, amount float64)), social_media_activity tuple(platform string, activity_score uint32), miscellaneous tuple(notes string, risk_flags string)),
);

-- turn the raw_data field into a mapped composite type
-- need train/teach LLM to generate following extraction SQL
SELECT
    json_extract_string(after, '_id') as _id,
    json_extract_int(after, 'customer_id') AS customer_id,
    (
        array_map(
            x -> (
                (json_extract_string(x, 'date'),json_extract_float(x, 'amount'))
            ),
            json_extract_array(after:raw_data, 'transaction_history')
        ) as transaction_history,
        (
            json_extract_string(after:raw_data:social_media_activity, 'platform') as platform,
            json_extract_int(after:raw_data:social_media_activity, 'activity_score') as activity_score,
        ) as social_media_activity,
        (
            json_extract_string(after:raw_data:miscellaneous, 'notes') as notes,
            json_extract_string(after:raw_data:miscellaneous, 'risk_flags') as risk_flags,
        ) as miscellaneous,
    )
    
FROM v_mongo_cdc_after_payload

--

INSERT INTO mongo_cdc_target_payload (_id, customer_id, raw_data)
SELECT
    json_extract_string(after, '_id') as _id,
    json_extract_int(after, 'customer_id') AS customer_id,
    (
        array_map(
            x -> (
                (json_extract_int(x:$date, 'date'),json_extract_float(x, 'amount'))
            ),
            json_extract_array(after:raw_data, 'transaction_history')
        ) as transaction_history,
        (
            json_extract_string(after:raw_data:social_media_activity, 'platform') as platform,
            json_extract_int(after:raw_data:social_media_activity, 'activity_score') as activity_score,
        ) as social_media_activity,
        (
            json_extract_string(after:raw_data:miscellaneous, 'notes') as notes,
            json_extract_string(after:raw_data:miscellaneous, 'risk_flags') as risk_flags,
        ) as miscellaneous,
    ) as raw_data
    
FROM v_mongo_cdc_after_payload

-- using extraction agent to do the extraction

with pipeline as (
select debezium_payload_extraction(
    $${
	"before": null,
	"after": {
		"customer_id": 9,
		"name": "Johnathan Rodriguez",
		"email": "thomasramirez@example.org",
		"phone": "001-845-290-8721x77863",
		"address": "743 Cervantes Causeway Apt. 762\nPort Lauren, NY 12698"
	},
	"source": {
		"version": "3.0.6.Final",
		"connector": "postgresql",
		"name": "postgres",
		"ts_ms": 1740183762305,
		"snapshot": "false",
		"db": "lumi_credit",
		"sequence": "[\"27606456\",\"27606456\"]",
		"ts_us": 1740183762305810,
		"ts_ns": 1740183762305810000,
		"schema": "public",
		"table": "customers",
		"txId": 763,
		"lsn": 27606456,
		"xmin": null
	},
	"transaction": null,
	"op": "c",
	"ts_ms": 1740183762818,
	"ts_us": 1740183762818345,
	"ts_ns": 1740183762818345200
}
    $$, 'kafka_cdc_postgres_customers', 'customers'
) as p
)
select p:target_stream_ddl, p:extraction_mv_ddl from pipeline;


with pipeline as (
select debezium_payload_extraction(
    $${
	"before": null,
	"after": {
		"history_id": 210,
		"customer_id": 210,
		"bank_name": "Fry, Cruz and Snyder",
		"credit_score": 810,
		"outstanding_debt": 52824.46,
		"last_updated": 20002
	},
	"source": {
		"version": "3.0.6.Final",
		"connector": "postgresql",
		"name": "postgres",
		"ts_ms": 1741745141492,
		"snapshot": "last_in_data_collection",
		"db": "lumi_credit",
		"sequence": "[null,\"27942144\"]",
		"ts_us": 1741745141492483,
		"ts_ns": 1741745141492483000,
		"schema": "public",
		"table": "credit_history",
		"txId": 1173,
		"lsn": 27942144,
		"xmin": null
	},
	"transaction": null,
	"op": "r",
	"ts_ms": 1741745141728,
	"ts_us": 1741745141728917,
	"ts_ns": 1741745141728917800
}
    $$, 'kafka_cdc_postgres_credit_history', 'credit_history'
) as p
)
select p:target_stream_ddl, p:extraction_mv_ddl from pipeline

with pipeline as (
select debezium_payload_extraction($$
{
	"schema": {
		"type": "struct",
		"fields": [
			{
				"type": "string",
				"optional": false,
				"name": "io.debezium.data.Json",
				"version": 1,
				"field": "before"
			},
			{
				"type": "string",
				"optional": true,
				"name": "io.debezium.data.Json",
				"version": 1,
				"field": "after"
			},
			{
				"type": "struct",
				"fields": [
					{
						"type": "array",
						"items": {
							"type": "string",
							"optional": false
						},
						"optional": true,
						"field": "removedFields"
					},
					{
						"type": "string",
						"optional": true,
						"name": "io.debezium.data.Json",
						"version": 1,
						"field": "updatedFields"
					},
					{
						"type": "array",
						"items": {
							"type": "struct",
							"fields": [
								{
									"type": "string",
									"optional": false,
									"field": "field"
								},
								{
									"type": "int32",
									"optional": false,
									"field": "size"
								}
							],
							"optional": false,
							"name": "io.debezium.connector.mongodb.changestream.truncatedarray",
							"version": 1
						},
						"optional": true,
						"field": "truncatedArrays"
					}
				],
				"optional": true,
				"name": "io.debezium.connector.mongodb.changestream.updatedescription",
				"version": 1,
				"field": "updateDescription"
			},
			{
				"type": "struct",
				"fields": [
					{
						"type": "string",
						"optional": false,
						"field": "version"
					},
					{
						"type": "string",
						"optional": false,
						"field": "connector"
					},
					{
						"type": "string",
						"optional": false,
						"field": "name"
					},
					{
						"type": "int64",
						"optional": false,
						"field": "ts_ms"
					},
					{
						"type": "string",
						"optional": true,
						"name": "io.debezium.data.Enum",
						"version": 1,
						"parameters": {
							"allowed": "true,first,first_in_data_collection,last_in_data_collection,last,false,incremental"
						},
						"default": "false",
						"field": "snapshot"
					},
					{
						"type": "string",
						"optional": false,
						"field": "db"
					},
					{
						"type": "string",
						"optional": true,
						"field": "sequence"
					},
					{
						"type": "int64",
						"optional": true,
						"field": "ts_us"
					},
					{
						"type": "int64",
						"optional": true,
						"field": "ts_ns"
					},
					{
						"type": "string",
						"optional": false,
						"field": "collection"
					},
					{
						"type": "int32",
						"optional": false,
						"field": "ord"
					},
					{
						"type": "string",
						"optional": true,
						"field": "lsid"
					},
					{
						"type": "int64",
						"optional": true,
						"field": "txnNumber"
					},
					{
						"type": "int64",
						"optional": true,
						"field": "wallTime"
					}
				],
				"optional": false,
				"name": "io.debezium.connector.mongo.Source",
				"field": "source"
			},
			{
				"type": "string",
				"optional": true,
				"field": "op"
			},
			{
				"type": "int64",
				"optional": true,
				"field": "ts_ms"
			},
			{
				"type": "struct",
				"fields": [
					{
						"type": "string",
						"optional": false,
						"field": "id"
					},
					{
						"type": "int64",
						"optional": false,
						"field": "total_order"
					},
					{
						"type": "int64",
						"optional": false,
						"field": "data_collection_order"
					}
				],
				"optional": true,
				"name": "event.block",
				"version": 1,
				"field": "transaction"
			}
		],
		"optional": false,
		"name": "mongodb.lumi_data.unstructured_data.Envelope"
	},
	"payload": {
		"before": null,
		"after": "{\"_id\": {\"$oid\": \"67b918d21585c8c281a60f0e\"},\"customer_id\": 10,\"raw_data\": {\"transaction_history\": [{\"date\": {\"$date\": 1740009600000},\"amount\": 734.57},{\"date\": {\"$date\": 1739836800000},\"amount\": 631.99},{\"date\": {\"$date\": 1735862400000},\"amount\": 384.18},{\"date\": {\"$date\": 1739404800000},\"amount\": 921.92}],\"social_media_activity\": {\"platform\": \"LinkedIn\",\"activity_score\": 63},\"miscellaneous\": {\"notes\": \"Cell week per all power administration.\",\"risk_flags\": \"Low\"}}}",
		"updateDescription": null,
		"source": {
			"version": "3.0.6.Final",
			"connector": "mongodb",
			"name": "mongodb",
			"ts_ms": 1740183762000,
			"snapshot": "false",
			"db": "lumi_data",
			"sequence": null,
			"ts_us": 1740183762000000,
			"ts_ns": 1740183762000000000,
			"collection": "unstructured_data",
			"ord": 10,
			"lsid": null,
			"txnNumber": null,
			"wallTime": 1740183762308
		},
		"op": "c",
		"ts_ms": 1740183762403,
		"transaction": null
	}
}
$$,'in','out') as p
)
select p:target_stream_ddl, p:extraction_mv_ddl from pipeline